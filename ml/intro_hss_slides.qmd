---
title: Introduction to machine learning for the humanities
frontlogo: /img/sfudrac.png
author: Marie-Hélène Burle
date: 2023-02-14
date-format: long
execute:
  error: true
  echo: true
format:
  revealjs:
    embed-resources: true
    theme: [default, ../revealjs.scss]
    logo: /img/sfudrac_logo.png
    highlight-style: monokai
    code-line-numbers: false
    code-overflow: wrap
    template-partials:
      - ../title-slide.html
    pointer:
      color: "#b5111b"
      pointerSize: 32
    link-external-newwindow: true
    footer: <a href="upscaling.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgb(153, 153, 153)" class="bi bi-arrow-90deg-up" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z"/></svg>&nbsp;Back to workshop page</a>
revealjs-plugins:
  - pointer
---

# Definitions

---

### Artificial intelligence (AI)

Any human-made system mimicking animal intelligence. This is a large and very diverse field.

### Machine learning (ML)

A subfield of AI that can be defined as computer programs whose performance at a task improves with experience.

### Deep learning (DL)

A subfield of ML using artificial neural networks with two or more hidden layers.

### Natural language processing (NLP)

A subfield of AI focused on human languages.

# Why has ML become so popular?

## ML allows to achieve previously impossible tasks

:::{.example}

Let's take the example of image recognition:

:::

In typical computing, a programmer writes code that gives a computer detailed instructions of what to do.

Coding all the possible ways—pixel by pixel—that an image can represent, say, a dog is an impossibly large task: there are many breeds of dogs, the image can be a picture, a blurred picture, a drawing, a cartoon, the dog can be in all sorts of positions, wearing clothes, etc.

There just aren't enough resources to make the traditional programming approach able to create a computer program that can identify a dog in images.

By feeding a very large number of dog images to a neural network however, we can train that network to recognize dogs in images that it has never seen (without explicitly programming how it does this!).

## Old concept ... new computing power

The concept is everything but new: [Arthur Samuel](https://en.wikipedia.org/wiki/Arthur_Samuel_(computer_scientist)) came up with it in 1949 and built a self-learning Checkers-playing program in 1959.

::::{.columns}

:::{.column width="60%"}

Machine learning consists of feeding vast amounts of data to algorithms to strengthen *pathways*, so the excitement for the approach became somewhat dormant due to the lack of computing power and the lack of training data at the time.

The advent of powerful computers, GPUs, and massive amounts of data have brought the old concept to the forefront.

:::

:::{.column width="7%"}

:::

:::{.column width="33%"}

![From [xkcd.com](https://xkcd.com/)](https://imgs.xkcd.com/comics/machine_learning.png){fig-alt="noshadow"}

:::

::::

# So how does it all work?

## Decide on an architecture

![](img/diag_01.png){fig-alt="noshadow"}

The architecture won't change during training.

The type of architecture you choose (e.g. CNN, Transformer) depends on the type of data you have (e.g. vision, textual). The depth and breadth of your network depend on the amount of data and computing resource you have.

## Set some initial parameters

![](img/diag_02.png){fig-alt="noshadow"}

You can initialize them randomly or get much better ones through transfer learning.

While the parameters are also part of the model, those will change during training.

## Get some labelled data

![](img/diag_03.png){fig-alt="noshadow"}

When we say that we need a lot of data for machine learning, we mean "lots of labelled data" as this is what gets used for training models.

## Make sure to keep some data for testing

![](img/diag_04.png){fig-alt="noshadow"}

Those data won't be used for training the model. Often people keep around 20% of their data for testing.

## Pass data and parameters through the architecture

![](img/diag_05.png){fig-alt="noshadow"}

The train data are the inputs and the process of calculating the outputs is the forward pass.

## The outputs of the model are predictions

![](img/diag_06.png){fig-alt="noshadow"}

## Compare those predictions to the train labels

![](img/diag_07.png){fig-alt="noshadow"}

Since our data was labelled, we know what the true outputs are.

## Calculate train loss

![](img/diag_08.png){fig-alt="noshadow"}

The deviation of our predictions from the true outputs gives us a measure of training loss.

## Adjust parameters

![](img/diag_09.png){fig-alt="noshadow"}

The parameters get automatically adjusted to reduce the training loss through the mechanism of backpropagation. This is the actual training part.

This process is repeated many times. Training models is pretty much a giant for loop.

## From model to program

![](img/diag_10.png){fig-alt="noshadow"}

Remember that the model architecture is fixed, but that the parameters change at each iteration of the training process.

---

While the labelled data are key to training, what we are really interested in is the combination of architecture + final parameters.

![](img/diag_11.png){fig-alt="noshadow"}

---

When the training is over, the parameters become fixed. Which means that our model now behaves like a classic program.

![](img/diag_12.png){fig-alt="noshadow"}

## Evaluate the model

![](img/diag_13.png){fig-alt="noshadow"}

We can now use the testing set (which was never used to train the model) to evaluate our model: if we pass the test inputs through our program, we get some predictions that we can compare to the test labels (which are the true outputs).

This gives us the test loss: a measure of how well our model performs.

## Use the model

![](img/diag_14.png){fig-alt="noshadow"}

Now that we have a program, we can use it on unlabelled inputs to get what people ultimately want: unknown outputs.

This is when we put our model to actual use to solve some problem.

# Artificial neural networks

---

::::{.columns}

:::{.column width="45%"}

In biological networks, the information consists of action potentials (neuron membrane rapid depolarizations) propagating through the network. In artificial ones, the information consists of tensors (multidimensional arrays) of weights and biases: each unit passes a weighted sum of an input tensor with an additional—possibly weighted—bias through an activation function before passing on the output tensor to the next layer of units.

:::

:::{.column width="10%"}

:::

:::{.column width="45%"}

Artificial neural networks are a series of layered units mimicking the concept of biological neurons: inputs are received by every unit of a layer, computed, then transmitted to units of the next layer. In the process of learning, experience strengthens some connections between units and weakens others.

:::

::::

---

::::{.columns}

:::{.column width="50%"}
<br>
<center>*Schematic of a biological neuron:*</center>

![From [Dhp1080, Wikipedia](https://commons.wikimedia.org/w/index.php?curid=1474927)](https://upload.wikimedia.org/wikipedia/commons/b/b5/Neuron.svg){fig-alt="noshadow"}

:::

:::{.column width="50%"}
<br>
<center>*Schematic of an artificial neuron:*</center>

![Modified from [O.C. Akgun & J. Mei 2019](https://royalsocietypublishing.org/doi/10.1098/rsta.2019.0163)](img/artificial_neuron.png){fig-alt="noshadow" width=70%}

:::

::::

---

While biological neurons are connected in extremely intricate patterns, artificial ones follow a layered structure. Another difference in complexity is in the number of units: the human brain has 65–90 billion neurons. ANN have much fewer units.

::::{.columns}

:::{.column width="50%"}
<br>
<center>*Neurons in mouse cortex:*</center>

![Neurons are in green, the dark branches are blood vessels. Image by [Na Ji, UC Berkeley](https://news.berkeley.edu/2020/03/19/high-speed-microscope-captures-fleeting-brain-signals/)](img/brain_neurons.jpg){fig-alt="noshadow" width=77%}

:::

:::{.column width="50%"}
<br>
<center>*Neural network with 2 hidden layers:*</center>

![From [The Maverick Meerkat](https://themaverickmeerkat.com/2020-01-10-TicTacToe/)](img/nn_multi_layer.png){fig-alt="noshadow" width=73%}

:::

::::

---

The information in biological neurons is an all-or-nothing electrochemical pulse or action potential. Greater stimuli don’t produce stronger signals but increase firing frequency. In contrast, artificial neurons pass the computation of their inputs through an activation function and the output can take any of the values possible with that function.

::::{.columns}

:::{.column width="50%"}

<center>*Threshold potential in biological neurons:*</center>

![Modified from [Blacktc, Wikimedia](https://commons.wikimedia.org/w/index.php?curid=78013076)](img/all_none_law.png){fig-alt="noshadow" width=70%}

:::

:::{.column width="50%"}

<center>*Some common activation functions in ANNs:*</center>

![From [Diganta Misra 2019](https://arxiv.org/abs/1908.08681)](img/act_func.png){fig-alt="noshadow" width=69%}

:::

::::

Which activation function to use depends on the type of problem and the available computing budget. Some early functions have fallen out of use while new ones have emerged (e.g. sigmoid got replaced by ReLU which is easier to train).

---

::::{.columns}

:::{.column width="45%"}

The process of learning in biological NN happens through neuron death or growth and the creation or loss of synaptic connections between neurons.

:::

:::{.column width="10%"}

:::

:::{.column width="45%"}

In ANN, learning happens through optimization algorithms such as gradient descent which minimize cross entropy loss functions by adjusting the weights and biases connecting each layer of neurons over many iterations.

:::

::::

# Types of ANN

## Fully connected neural networks

::::{.columns}

:::{.column width="50%"}

![From [Glosser.ca, Wikipedia](https://commons.wikimedia.org/w/index.php?curid=24913461)](img/nn.png){fig-alt="noshadow" width=60%}

:::

:::{.column width="50%"}

Each neuron receives inputs from every neuron of the previous layer and passes its output to every neuron of the next layer.

:::

::::

## Convolutional neural networks

![](img/cnn.png){fig-alt="noshadow"}

:::{.caption}

From [Programming Journeys by Rensu Theart](https://codetolight.wordpress.com/2017/11/29/getting-started-with-pytorch-for-deep-learning-part-3-neural-network-basics/)

:::

Convolutional neural networks (CNN) are used for spatially structured data (e.g. images).

Images have huge input sizes and would require a very large number of neurons in a fully connected neural net. In convolutional layers, neurons receive input from a subarea (called *local receptive field*) of the previous layer. This greatly reduces the number of parameters. Optionally, pooling (combining the outputs of neurons in a subarea) reduces the data dimensions.

## Recurrent neural networks

![](img/rnn.png){fig-alt="noshadow"}

:::{.caption}

From [fdeloche, Wikipedia](https://commons.wikimedia.org/wiki/File:Recurrent_neural_network_unfold.svg)

:::

Recurrent neural networks (RNN) such as Long Short-Term Memory (LSTM) are used for chain structured data (e.g. text).

They are not feedforward networks (i.e. networks for which the information moves only in the forward direction without any loop).

## Transformers

A combination of two RNNs (the *encoder* and the *decoder*) is used in sequence to sequence models for translation or picture captioning.

In 2014 the concept of *attention* (giving added weight to important words) was developed, greatly improving the ability of such models to process a lot of data.

The problem with recurrence is that it is not easily to parallelize (and thus to run fast on GPUs).

In 2017, a new model—the [transformer](https://arxiv.org/abs/1706.03762)—was proposed: by using only attention mechanisms and no recurrence, the transformer achieves better results in an easily parallelizable fashion.

With the addition of transfer learning, powerful transformers emerged in the field of [NLP](https://en.wikipedia.org/wiki/Natural_language_processing) (e.g. [Bidirectional Encoder Representations from Transformers (BERT)](https://arxiv.org/abs/1810.04805) from Google and [Generative Pre-trained Transformer-3 (GPT-3)](https://arxiv.org/pdf/2005.14165) from [OpenAI](https://openai.com/)).

<!-- # Types of learning -->

<!-- ## Supervised learning -->

<!-- - *Regression* is a form of supervised learning with continuous outputs -->
<!-- - *Classification* is supervised learning with discrete outputs -->

<!-- Supervised learning uses training data in the form of example input/output pairs. -->

<!-- ### Goal -->

<!-- Find the relationship between inputs and outputs. -->

<!-- ## Unsupervised learning -->

<!-- Clustering, social network analysis, market segmentation, PCA ... are all forms of unsupervised learning. -->

<!-- Unsupervised learning uses unlabelled data. -->

<!-- ### Goal -->

<!-- Find structure within the data. -->

<!-- ## Reinforcement learning -->

<!-- ## Transfer learning -->

# Limitations

## Data bias

**Bias is always present in data.**

*Document the limitations and scope of your data as best as possible.*

Problems to watch for:

- *Out of domain data*: data used for training are not relevant to the model application.
- *Domain shift*: model becoming inadapted as conditions evolve.
- *Feedback loop*: initial bias exacerbated over the time.

---

::::{.columns}

:::{.column width="47%"}

The last one is particularly problematic whenever the model outputs the next round of data based on interactions of the current round of data with the real world.

[Solution: ensure there are human circuit breakers and oversight.]{.emph}

:::

:::{.column width="6%"}

:::

:::{.column width="47%"}

![From [xkcd.com](https://xkcd.com/)](https://imgs.xkcd.com/comics/ai_hiring_algorithm.png){fig-alt="noshadow"}

:::

::::

## Transformation of subjects

Algorithms are supposed to help us, not transform us (e.g. YouTube recommendation algorithms).

## Bugs

[Example of bug with real life consequences](https://www.theverge.com/2018/3/21/17144260/healthcare-medicaid-algorithm-arkansas-cerebral-palsy.)

# Tools

## Many options

Here are just a few:

- [Natural Language Toolkit (NLTK)](https://www.nltk.org/): a suite of Python libraries geared towards teaching and research.
- [spaCy](https://spacy.io/): Python library geared towards production.
- [torchtext](https://pytorch.org/text/stable/index.html), part of the [PyTorch](https://pytorch.org/) project (and many options of added layers on top such as [PyTorch-NLP](https://pytorchnlp.readthedocs.io/en/latest/)): Python library.
- [GenSim](https://radimrehurek.com/gensim/): Python library.
- [Stanford CoreNLP](https://stanfordnlp.github.io/CoreNLP/): Java library.
- [Many libraries in the Julia programming language](https://juliapackages.com/c/machine-learning).

## Which one to choose?

[Choose an open source tool](https://mint.westdri.ca/ml/choosing_frameworks.html){target="_blank"} (i.e. stay away from proprietary software such as MATLAB).

- Researchers who do not have access to the tool cannot reproduce your methods (open tools = open equitable research).
- Once you graduate, you may not have access to the tool anymore
- Your university may stop paying for a license
- You may get locked-in
- Proprietary tools are often black boxes
- Long-term access is not guaranty (problem to replicate studies)
- The licenses you have access to may be limiting and a cause of headache
- Proprietary tools fall behind popular open-source tools
- Proprietary tools often fail to address specialized edge cases needed in research

# [3Blue1Brown by Grant Sanderson](https://www.3blue1brown.com/)
<br>
[3Blue1Brown by Grant Sanderson](https://www.3blue1brown.com/) has a series of 4 videos on neural networks which is easy to watch, fun, and does an excellent job at introducing the functioning of a simple neural network.

:::{.note}

As you develop your own ML models, if you find that your mathematical background is shaky, 3blue1brown also has [an excellent series of videos on linear algebra](https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab) and [an equally great one on calculus](https://www.youtube.com/playlist?list=PLZHQObOWTQDMsr9K-rj53DwVRMYO3t5Yr).

:::

---

::::{.columns}

:::{.column width="50%"}

What are NN? (19 min)

{{< video https://www.youtube.com/embed/aircAruvnKk >}}

:::

:::{.column width="50%"}

How do NN learn? (21 min)

{{< video https://www.youtube.com/embed/IHZwWFHWa-w >}}

:::

::::

::::{.columns}

:::{.column width="50%"}

What is backpropagation? (14 min)

{{< video https://www.youtube.com/embed/Ilg3gGewQ5U >}}

:::

:::{.column width="50%"}

How does backpropagation work? (10 min)

{{< video https://www.youtube.com/embed/tIeHLnjs5U8 >}}

:::

::::

<!-- ## Gradient descent -->

<!-- There are several gradient descent methods: -->

<!-- *Batch gradient descent* uses all examples in each iteration and is thus slow for large datasets (the parameters are adjusted only after all the samples have been processed). -->

<!-- *Mini-batch gradient descent* is an intermediate approach: it uses mini-batch sized examples in each iteration. This allows a vectorized approach (and hence parallelization). The [Adam optimization algorithm](https://arxiv.org/abs/1412.6980) is a popular variation of mini-batch gradient descent. -->

<!-- *Stochastic gradient descent* uses one example in each iteration. It is thus much faster than batch gradient descent (the parameters are adjusted after each example). But it does not allow any vectorization. -->

<!-- ![From [Imad Dabbura](https://imaddabbura.github.io/posts/optimization-algorithms/gradient-descent.html)](img/types_gradient_descent.png){fig-alt="noshadow" width=60%} -->
