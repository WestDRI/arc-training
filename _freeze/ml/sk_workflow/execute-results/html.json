{
  "hash": "0c0e8f4cb88ba82773e97be8c8b8484e",
  "result": {
    "markdown": "---\ntitle: Sklearn workflow\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nScikit-learn has a very clean and consistent API, making it very easy to use: a similar workflow can be applied to most techniques.\n\n*This code was modified from [Matthew Greenberg](https://science.ucalgary.ca/mathematics-statistics/contacts/matthew-greenberg).*\n\n:::\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom sklearn.datasets import fetch_california_housing, load_breast_cancer\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, accuracy_score\n\nimport matplotlib\nfrom matplotlib import pyplot as plt\n\nimport numpy as np\n\nfrom collections import Counter\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ncal_housing = fetch_california_housing()\ntype(cal_housing)\n```\n\n::: {.cell-output .cell-output-display execution_count=94}\n```\nsklearn.utils._bunch.Bunch\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndir(cal_housing)\n```\n\n::: {.cell-output .cell-output-display execution_count=95}\n```\n['DESCR', 'data', 'feature_names', 'frame', 'target', 'target_names']\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ncal_housing.feature_names\n```\n\n::: {.cell-output .cell-output-display execution_count=96}\n```\n['MedInc',\n 'HouseAge',\n 'AveRooms',\n 'AveBedrms',\n 'Population',\n 'AveOccup',\n 'Latitude',\n 'Longitude']\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nprint(cal_housing.DESCR)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n.. _california_housing_dataset:\n\nCalifornia Housing dataset\n--------------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 20640\n\n    :Number of Attributes: 8 numeric, predictive attributes and the target\n\n    :Attribute Information:\n        - MedInc        median income in block group\n        - HouseAge      median house age in block group\n        - AveRooms      average number of rooms per household\n        - AveBedrms     average number of bedrooms per household\n        - Population    block group population\n        - AveOccup      average number of household members\n        - Latitude      block group latitude\n        - Longitude     block group longitude\n\n    :Missing Attribute Values: None\n\nThis dataset was obtained from the StatLib repository.\nhttps://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.html\n\nThe target variable is the median house value for California districts,\nexpressed in hundreds of thousands of dollars ($100,000).\n\nThis dataset was derived from the 1990 U.S. census, using one row per census\nblock group. A block group is the smallest geographical unit for which the U.S.\nCensus Bureau publishes sample data (a block group typically has a population\nof 600 to 3,000 people).\n\nA household is a group of people residing within a home. Since the average\nnumber of rooms and bedrooms in this dataset are provided per household, these\ncolumns may take surprisingly large values for block groups with few households\nand many empty houses, such as vacation resorts.\n\nIt can be downloaded/loaded using the\n:func:`sklearn.datasets.fetch_california_housing` function.\n\n.. topic:: References\n\n    - Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions,\n      Statistics and Probability Letters, 33 (1997) 291-297\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nX = cal_housing.data\ny = cal_housing.target\nX.shape, y.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=98}\n```\n((20640, 8), (20640,))\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nplt.hist(y)\n```\n\n::: {.cell-output .cell-output-display execution_count=99}\n```\n(array([ 877., 3612., 4099., 3771., 2799., 1769., 1239.,  752.,  479.,\n        1243.]),\n array([0.14999 , 0.634992, 1.119994, 1.604996, 2.089998, 2.575   ,\n        3.060002, 3.545004, 4.030006, 4.515008, 5.00001 ]),\n <BarContainer object of 10 artists>)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](sk_workflow_files/figure-html/cell-8-output-2.png){width=583 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nb_cancer = load_breast_cancer()\nb_cancer.feature_names\n```\n\n::: {.cell-output .cell-output-display execution_count=100}\n```\narray(['mean radius', 'mean texture', 'mean perimeter', 'mean area',\n       'mean smoothness', 'mean compactness', 'mean concavity',\n       'mean concave points', 'mean symmetry', 'mean fractal dimension',\n       'radius error', 'texture error', 'perimeter error', 'area error',\n       'smoothness error', 'compactness error', 'concavity error',\n       'concave points error', 'symmetry error',\n       'fractal dimension error', 'worst radius', 'worst texture',\n       'worst perimeter', 'worst area', 'worst smoothness',\n       'worst compactness', 'worst concavity', 'worst concave points',\n       'worst symmetry', 'worst fractal dimension'], dtype='<U23')\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nb_cancer.target_names\n```\n\n::: {.cell-output .cell-output-display execution_count=101}\n```\narray(['malignant', 'benign'], dtype='<U9')\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nX = b_cancer.data\ny = b_cancer.target\nX.shape, y.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=102}\n```\n((569, 30), (569,))\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nX, y = fetch_california_housing(return_X_y=True)\nX = X[:, :-2]\nX.shape, y.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=103}\n```\n((20640, 6), (20640,))\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nmodel = LinearRegression()\nmodel.fit(X, y)\n```\n\n::: {.cell-output .cell-output-display execution_count=104}\n```{=html}\n<style>#sk-container-id-3 {color: black;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nmodel.coef_, model.coef_.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=105}\n```\n(array([ 5.36910326e-01,  1.65033593e-02, -2.11740382e-01,  9.93729775e-01,\n         2.21093787e-05, -4.87715048e-03]),\n (6,))\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nmodel.intercept_, model.intercept_.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=106}\n```\n(-0.43909342142815877, ())\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ny_hat = model.predict(X)\n\nsse = np.sum((y - y_hat)**2)           # Sum of squared estimate of errors\nmse = np.mean((y - y_hat)**2)\nsse, mse, mean_squared_error(y, y_hat)\n```\n\n::: {.cell-output .cell-output-display execution_count=107}\n```\n(12650.578389986124, 0.6129156196698703, 0.6129156196698703)\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nmean_absolute_percentage_error(y, y_hat)\n```\n\n::: {.cell-output .cell-output-display execution_count=108}\n```\n0.352267433172631\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nmodel.coef_.argmin()\n```\n\n::: {.cell-output .cell-output-display execution_count=109}\n```\n2\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nmodel.coef_.argmax()\n```\n\n::: {.cell-output .cell-output-display execution_count=110}\n```\n3\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ncal_housing = fetch_california_housing()\ncal_housing.feature_names[4]\n```\n\n::: {.cell-output .cell-output-display execution_count=111}\n```\n'Population'\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nprint(cal_housing.DESCR)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n.. _california_housing_dataset:\n\nCalifornia Housing dataset\n--------------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 20640\n\n    :Number of Attributes: 8 numeric, predictive attributes and the target\n\n    :Attribute Information:\n        - MedInc        median income in block group\n        - HouseAge      median house age in block group\n        - AveRooms      average number of rooms per household\n        - AveBedrms     average number of bedrooms per household\n        - Population    block group population\n        - AveOccup      average number of household members\n        - Latitude      block group latitude\n        - Longitude     block group longitude\n\n    :Missing Attribute Values: None\n\nThis dataset was obtained from the StatLib repository.\nhttps://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.html\n\nThe target variable is the median house value for California districts,\nexpressed in hundreds of thousands of dollars ($100,000).\n\nThis dataset was derived from the 1990 U.S. census, using one row per census\nblock group. A block group is the smallest geographical unit for which the U.S.\nCensus Bureau publishes sample data (a block group typically has a population\nof 600 to 3,000 people).\n\nA household is a group of people residing within a home. Since the average\nnumber of rooms and bedrooms in this dataset are provided per household, these\ncolumns may take surprisingly large values for block groups with few households\nand many empty houses, such as vacation resorts.\n\nIt can be downloaded/loaded using the\n:func:`sklearn.datasets.fetch_california_housing` function.\n\n.. topic:: References\n\n    - Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions,\n      Statistics and Probability Letters, 33 (1997) 291-297\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nXX = np.concatenate([np.ones((len(X), 1)), X], axis=1)\n\nbeta = np.linalg.lstsq(XX, y, rcond=None)[0]\nintercept_, *coef_ = beta\n\nintercept_, model.intercept_\n```\n\n::: {.cell-output .cell-output-display execution_count=113}\n```\n(-0.43909342142822316, -0.43909342142815877)\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nnp.allclose(coef_, model.coef_)\n```\n\n::: {.cell-output .cell-output-display execution_count=114}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nX_test = np.random.normal(size=(10, X.shape[1]))\nX_test.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=115}\n```\n(10, 6)\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\ny_test = X_test @ coef_ + intercept_\ny_test\n```\n\n::: {.cell-output .cell-output-display execution_count=116}\n```\narray([-1.95379983,  0.51921993,  0.11686299,  0.7172351 ,  1.02015059,\n        0.00803102, -0.2651423 , -0.85385823,  0.68239575, -1.85168876])\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nmodel.predict(X_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=117}\n```\narray([-1.95379983,  0.51921993,  0.11686299,  0.7172351 ,  1.02015059,\n        0.00803102, -0.2651423 , -0.85385823,  0.68239575, -1.85168876])\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nmodel.fit(X, y).predict(X_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=118}\n```\narray([-1.95379983,  0.51921993,  0.11686299,  0.7172351 ,  1.02015059,\n        0.00803102, -0.2651423 , -0.85385823,  0.68239575, -1.85168876])\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nmodel = RandomForestRegressor()\nmodel.fit(X, y).predict(X_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=119}\n```\narray([2.6300705, 2.5968205, 2.6223705, 3.1211615, 3.0588819, 2.6169505,\n       2.6300705, 2.6300705, 3.0588819, 2.6450705])\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nX, y = load_breast_cancer(return_X_y=True)\nX.shape, y.shape, set(y)\n```\n\n::: {.cell-output .cell-output-display execution_count=120}\n```\n((569, 30), (569,), {0, 1})\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nCounter(y)\n```\n\n::: {.cell-output .cell-output-display execution_count=121}\n```\nCounter({1: 357, 0: 212})\n```\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nmodel = LogisticRegression(max_iter=10000)\ny_hat = model.fit(X, y).predict(X)\nnp.mean(y_hat == y)\n```\n\n::: {.cell-output .cell-output-display execution_count=122}\n```\n0.9578207381370826\n```\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\naccuracy_score(y, y_hat)\n```\n\n::: {.cell-output .cell-output-display execution_count=123}\n```\n0.9578207381370826\n```\n:::\n:::\n\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\ndef sigmoid(x):\n  return 1/(1 + np.exp(-x))\n\nx = np.linspace(-10, 10, 100)\nplt.plot(x, sigmoid(x), lw=3)\nplt.title(\"The Sigmoid Function $\\\\sigma(x)$\", fontsize=18)\n```\n\n::: {.cell-output .cell-output-display execution_count=124}\n```\nText(0.5, 1.0, 'The Sigmoid Function $\\\\sigma(x)$')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](sk_workflow_files/figure-html/cell-33-output-2.png){width=571 height=439}\n:::\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ny_pred = 1*(sigmoid(X @ model.coef_.squeeze() + model.intercept_) > 0.5)\nassert np.all(y_pred == model.predict(X))\n\nnp.allclose(\n    model.predict_proba(X)[:, 1],\n    sigmoid(X @ model.coef_.squeeze() + model.intercept_)\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=125}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\ndef make_spirals(k=20, s=1.0, n=2000):\n    X = np.zeros((n, 2))\n    y = np.round(np.random.uniform(size=n)).astype(int)\n    r = np.random.uniform(size=n)*k*np.pi\n    rr = r**0.5\n    theta = rr + np.random.normal(loc=0, scale=s, size=n)\n    theta[y == 1] = theta[y == 1] + np.pi\n    X[:,0] = rr*np.cos(theta)\n    X[:,1] = rr*np.sin(theta)\n    return X, y\n\nX, y = make_spirals()\ncmap = matplotlib.colormaps[\"viridis\"]\n\na = cmap(0)\na = [*a[:3], 0.3]\nb = cmap(0.99)\nb = [*b[:3], 0.3]\n\nplt.figure(figsize=(7,7))\nax = plt.gca()\nax.set_aspect(\"equal\")\nax.plot(X[y == 0, 0], X[y == 0, 1], 'o', color=a, ms=8, label=\"$y=0$\")\nax.plot(X[y == 1, 0], X[y == 1, 1], 'o', color=b, ms=8, label=\"$y=1$\")\nplt.title(\"Spirals\", fontsize=18)\nplt.legend(fontsize=14)\n```\n\n::: {.cell-output .cell-output-display execution_count=126}\n```\n<matplotlib.legend.Legend at 0x7f8c26f9b390>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](sk_workflow_files/figure-html/cell-35-output-2.png){width=563 height=585}\n:::\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nmodel = LogisticRegression()\ny_hat = model.fit(X, y).predict(X)\naccuracy_score(y, y_hat)\n```\n\n::: {.cell-output .cell-output-display execution_count=127}\n```\n0.6025\n```\n:::\n:::\n\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nu = np.linspace(-8, 8, 100)\nv = np.linspace(-8, 8, 100)\nU, V = np.meshgrid(u, v)\nUV = np.array([U.ravel(), V.ravel()]).T\nU.shape, V.shape, UV.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=128}\n```\n((100, 100), (100, 100), (10000, 2))\n```\n:::\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nW = model.predict(UV).reshape(U.shape)\nW.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=129}\n```\n(100, 100)\n```\n:::\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nplt.pcolormesh(U, V, W)\n```\n\n::: {.cell-output .cell-output-display execution_count=130}\n```\n<matplotlib.collections.QuadMesh at 0x7f8c26e90bd0>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](sk_workflow_files/figure-html/cell-39-output-2.png){width=571 height=414}\n:::\n:::\n\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nmodel = KNeighborsClassifier(n_neighbors=5)\ny_hat = model.fit(X, y).predict(X)\naccuracy_score(y, y_hat)\n```\n\n::: {.cell-output .cell-output-display execution_count=131}\n```\n0.897\n```\n:::\n:::\n\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nu = np.linspace(-8, 8, 100)\nv = np.linspace(-8, 8, 100)\nU, V = np.meshgrid(u, v)\nUV = np.array([U.ravel(), V.ravel()]).T\nU.shape, V.shape, UV.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=132}\n```\n((100, 100), (100, 100), (10000, 2))\n```\n:::\n:::\n\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nW = model.predict(UV).reshape(U.shape)\nW.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=133}\n```\n(100, 100)\n```\n:::\n:::\n\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\nplt.pcolormesh(U, V, W)\n```\n\n::: {.cell-output .cell-output-display execution_count=134}\n```\n<matplotlib.collections.QuadMesh at 0x7f8c26e1e9d0>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](sk_workflow_files/figure-html/cell-43-output-2.png){width=571 height=414}\n:::\n:::\n\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nfig, axes = plt.subplots(2, 4, figsize=(20, 10))\nfig.suptitle(\"Decision Regions\", fontsize=24)\n\nu = np.linspace(-8, 8, 100)\nv = np.linspace(-8, 8, 100)\nU, V = np.meshgrid(u, v)\nUV = np.array([U.ravel(), V.ravel()]).T\n\nks = np.arange(1, 16, 2)\n\nfor k, ax in zip(ks, axes.ravel()):\n  model = KNeighborsClassifier(n_neighbors=k)\n  model.fit(X, y)\n  acc = accuracy_score(y, model.predict(X))\n  W = model.predict(UV).reshape(U.shape)\n  ax.imshow(W, origin=\"lower\", cmap=cmap)\n  ax.set_axis_off()\n  ax.set_title(f\"$k$={k}, acc={acc:.2f}\", fontsize=18)\n```\n\n::: {.cell-output .cell-output-display}\n![](sk_workflow_files/figure-html/cell-44-output-1.png){width=1507 height=848}\n:::\n:::\n\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nA = np.arange(27).reshape((3, 3, 3))\nA\n```\n\n::: {.cell-output .cell-output-display execution_count=136}\n```\narray([[[ 0,  1,  2],\n        [ 3,  4,  5],\n        [ 6,  7,  8]],\n\n       [[ 9, 10, 11],\n        [12, 13, 14],\n        [15, 16, 17]],\n\n       [[18, 19, 20],\n        [21, 22, 23],\n        [24, 25, 26]]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nA.ravel()\n```\n\n::: {.cell-output .cell-output-display execution_count=137}\n```\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n```\n:::\n:::\n\n\n",
    "supporting": [
      "sk_workflow_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}