{
  "hash": "bd35094d3bc09d444c279824f2da14e9",
  "result": {
    "markdown": "---\ntitle: Sklearn workflow\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nScikit-learn has a very clean and consistent API, making it very easy to use: a similar workflow can be applied to most techniques. Let's go over two examples.\n\n*This code was modified from [Matthew Greenberg](https://science.ucalgary.ca/mathematics-statistics/contacts/matthew-greenberg).*\n\n:::\n\n## Load packages\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom sklearn.datasets import fetch_california_housing, load_breast_cancer\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, accuracy_score\n\nimport pandas as pd\n\nimport matplotlib\nfrom matplotlib import pyplot as plt\n\nimport numpy as np\n\nfrom collections import Counter\n```\n:::\n\n\n## Example 1: California housing dataset\n\n### Load and explore the data\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ncal_housing = fetch_california_housing()\ntype(cal_housing)\n```\n\n::: {.cell-output .cell-output-display execution_count=273}\n```\nsklearn.utils._bunch.Bunch\n```\n:::\n:::\n\n\nLet's look at the attributes of `cal_housing`:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndir(cal_housing)\n```\n\n::: {.cell-output .cell-output-display execution_count=274}\n```\n['DESCR', 'data', 'feature_names', 'frame', 'target', 'target_names']\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ncal_housing.feature_names\n```\n\n::: {.cell-output .cell-output-display execution_count=275}\n```\n['MedInc',\n 'HouseAge',\n 'AveRooms',\n 'AveBedrms',\n 'Population',\n 'AveOccup',\n 'Latitude',\n 'Longitude']\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nprint(cal_housing.DESCR)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n.. _california_housing_dataset:\n\nCalifornia Housing dataset\n--------------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 20640\n\n    :Number of Attributes: 8 numeric, predictive attributes and the target\n\n    :Attribute Information:\n        - MedInc        median income in block group\n        - HouseAge      median house age in block group\n        - AveRooms      average number of rooms per household\n        - AveBedrms     average number of bedrooms per household\n        - Population    block group population\n        - AveOccup      average number of household members\n        - Latitude      block group latitude\n        - Longitude     block group longitude\n\n    :Missing Attribute Values: None\n\nThis dataset was obtained from the StatLib repository.\nhttps://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.html\n\nThe target variable is the median house value for California districts,\nexpressed in hundreds of thousands of dollars ($100,000).\n\nThis dataset was derived from the 1990 U.S. census, using one row per census\nblock group. A block group is the smallest geographical unit for which the U.S.\nCensus Bureau publishes sample data (a block group typically has a population\nof 600 to 3,000 people).\n\nA household is a group of people residing within a home. Since the average\nnumber of rooms and bedrooms in this dataset are provided per household, these\ncolumns may take surprisingly large values for block groups with few households\nand many empty houses, such as vacation resorts.\n\nIt can be downloaded/loaded using the\n:func:`sklearn.datasets.fetch_california_housing` function.\n\n.. topic:: References\n\n    - Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions,\n      Statistics and Probability Letters, 33 (1997) 291-297\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nX = cal_housing.data\ny = cal_housing.target\n```\n:::\n\n\n:::{.note}\n\nThis can also be obtained with `X, y = fetch_california_housing(return_X_y=True)`.\n\n:::\n\nLet's have a look at the shape of `X` and `y`:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nX.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=278}\n```\n(20640, 8)\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ny.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=279}\n```\n(20640,)\n```\n:::\n:::\n\n\nWhile not at all necessary, we can turn this bunch object into a more familiar data frame to explore the data further:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ncal_housing_df = pd.DataFrame(cal_housing.data, columns=cal_housing.feature_names)\n```\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ncal_housing_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=281}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MedInc</th>\n      <th>HouseAge</th>\n      <th>AveRooms</th>\n      <th>AveBedrms</th>\n      <th>Population</th>\n      <th>AveOccup</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8.3252</td>\n      <td>41.0</td>\n      <td>6.984127</td>\n      <td>1.023810</td>\n      <td>322.0</td>\n      <td>2.555556</td>\n      <td>37.88</td>\n      <td>-122.23</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8.3014</td>\n      <td>21.0</td>\n      <td>6.238137</td>\n      <td>0.971880</td>\n      <td>2401.0</td>\n      <td>2.109842</td>\n      <td>37.86</td>\n      <td>-122.22</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7.2574</td>\n      <td>52.0</td>\n      <td>8.288136</td>\n      <td>1.073446</td>\n      <td>496.0</td>\n      <td>2.802260</td>\n      <td>37.85</td>\n      <td>-122.24</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5.6431</td>\n      <td>52.0</td>\n      <td>5.817352</td>\n      <td>1.073059</td>\n      <td>558.0</td>\n      <td>2.547945</td>\n      <td>37.85</td>\n      <td>-122.25</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3.8462</td>\n      <td>52.0</td>\n      <td>6.281853</td>\n      <td>1.081081</td>\n      <td>565.0</td>\n      <td>2.181467</td>\n      <td>37.85</td>\n      <td>-122.25</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ncal_housing_df.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=282}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MedInc</th>\n      <th>HouseAge</th>\n      <th>AveRooms</th>\n      <th>AveBedrms</th>\n      <th>Population</th>\n      <th>AveOccup</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>20635</th>\n      <td>1.5603</td>\n      <td>25.0</td>\n      <td>5.045455</td>\n      <td>1.133333</td>\n      <td>845.0</td>\n      <td>2.560606</td>\n      <td>39.48</td>\n      <td>-121.09</td>\n    </tr>\n    <tr>\n      <th>20636</th>\n      <td>2.5568</td>\n      <td>18.0</td>\n      <td>6.114035</td>\n      <td>1.315789</td>\n      <td>356.0</td>\n      <td>3.122807</td>\n      <td>39.49</td>\n      <td>-121.21</td>\n    </tr>\n    <tr>\n      <th>20637</th>\n      <td>1.7000</td>\n      <td>17.0</td>\n      <td>5.205543</td>\n      <td>1.120092</td>\n      <td>1007.0</td>\n      <td>2.325635</td>\n      <td>39.43</td>\n      <td>-121.22</td>\n    </tr>\n    <tr>\n      <th>20638</th>\n      <td>1.8672</td>\n      <td>18.0</td>\n      <td>5.329513</td>\n      <td>1.171920</td>\n      <td>741.0</td>\n      <td>2.123209</td>\n      <td>39.43</td>\n      <td>-121.32</td>\n    </tr>\n    <tr>\n      <th>20639</th>\n      <td>2.3886</td>\n      <td>16.0</td>\n      <td>5.254717</td>\n      <td>1.162264</td>\n      <td>1387.0</td>\n      <td>2.616981</td>\n      <td>39.37</td>\n      <td>-121.24</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ncal_housing_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 20640 entries, 0 to 20639\nData columns (total 8 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   MedInc      20640 non-null  float64\n 1   HouseAge    20640 non-null  float64\n 2   AveRooms    20640 non-null  float64\n 3   AveBedrms   20640 non-null  float64\n 4   Population  20640 non-null  float64\n 5   AveOccup    20640 non-null  float64\n 6   Latitude    20640 non-null  float64\n 7   Longitude   20640 non-null  float64\ndtypes: float64(8)\nmemory usage: 1.3 MB\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ncal_housing_df.describe() \n```\n\n::: {.cell-output .cell-output-display execution_count=284}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MedInc</th>\n      <th>HouseAge</th>\n      <th>AveRooms</th>\n      <th>AveBedrms</th>\n      <th>Population</th>\n      <th>AveOccup</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>20640.000000</td>\n      <td>20640.000000</td>\n      <td>20640.000000</td>\n      <td>20640.000000</td>\n      <td>20640.000000</td>\n      <td>20640.000000</td>\n      <td>20640.000000</td>\n      <td>20640.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>3.870671</td>\n      <td>28.639486</td>\n      <td>5.429000</td>\n      <td>1.096675</td>\n      <td>1425.476744</td>\n      <td>3.070655</td>\n      <td>35.631861</td>\n      <td>-119.569704</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.899822</td>\n      <td>12.585558</td>\n      <td>2.474173</td>\n      <td>0.473911</td>\n      <td>1132.462122</td>\n      <td>10.386050</td>\n      <td>2.135952</td>\n      <td>2.003532</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.499900</td>\n      <td>1.000000</td>\n      <td>0.846154</td>\n      <td>0.333333</td>\n      <td>3.000000</td>\n      <td>0.692308</td>\n      <td>32.540000</td>\n      <td>-124.350000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2.563400</td>\n      <td>18.000000</td>\n      <td>4.440716</td>\n      <td>1.006079</td>\n      <td>787.000000</td>\n      <td>2.429741</td>\n      <td>33.930000</td>\n      <td>-121.800000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3.534800</td>\n      <td>29.000000</td>\n      <td>5.229129</td>\n      <td>1.048780</td>\n      <td>1166.000000</td>\n      <td>2.818116</td>\n      <td>34.260000</td>\n      <td>-118.490000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>4.743250</td>\n      <td>37.000000</td>\n      <td>6.052381</td>\n      <td>1.099526</td>\n      <td>1725.000000</td>\n      <td>3.282261</td>\n      <td>37.710000</td>\n      <td>-118.010000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>15.000100</td>\n      <td>52.000000</td>\n      <td>141.909091</td>\n      <td>34.066667</td>\n      <td>35682.000000</td>\n      <td>1243.333333</td>\n      <td>41.950000</td>\n      <td>-114.310000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can even plot it:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nplt.hist(y)\n```\n\n::: {.cell-output .cell-output-display execution_count=285}\n```\n(array([ 877., 3612., 4099., 3771., 2799., 1769., 1239.,  752.,  479.,\n        1243.]),\n array([0.14999 , 0.634992, 1.119994, 1.604996, 2.089998, 2.575   ,\n        3.060002, 3.545004, 4.030006, 4.515008, 5.00001 ]),\n <BarContainer object of 10 artists>)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](sk_workflow_files/figure-html/cell-15-output-2.png){width=583 height=411}\n:::\n:::\n\n\n### Create and fit a model\n\nLet's start with a very simple model: linear regression.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nmodel = LinearRegression().fit(X, y)\n```\n:::\n\n\n:::{.note}\n\nThis is equivalent to:\n\n```{.python}\nmodel = LinearRegression()\nmodel.fit(x, y)\n```\n\nFirst, we create an instance of the class `LinearRegression`, then we call `.fit()` on it to fit the model.\n\n:::\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nmodel.coef_\n```\n\n::: {.cell-output .cell-output-display execution_count=287}\n```\narray([ 4.36693293e-01,  9.43577803e-03, -1.07322041e-01,  6.45065694e-01,\n       -3.97638942e-06, -3.78654265e-03, -4.21314378e-01, -4.34513755e-01])\n```\n:::\n:::\n\n\n:::{.note}\n\nTrailing underscores indicate that an attribute is estimated. `.coef_` here is an estimated value.\n\n:::\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nmodel.coef_.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=288}\n```\n(8,)\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nmodel.intercept_\n```\n\n::: {.cell-output .cell-output-display execution_count=289}\n```\n-36.94192020718425\n```\n:::\n:::\n\n\nWe can now get our predictions:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ny_hat = model.predict(X)\n```\n:::\n\n\nAnd calculate some measures of error:\n\n- Sum of squared errors\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nnp.sum((y - y_hat) ** 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=291}\n```\n10821.985154850292\n```\n:::\n:::\n\n\n- Mean squared error\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nmean_squared_error(y, y_hat)\n```\n\n::: {.cell-output .cell-output-display execution_count=292}\n```\n0.5243209861846072\n```\n:::\n:::\n\n\n:::{.note}\n\nMSE could also be calculated with `np.mean((y - y_hat)**2)`.\n\n:::\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nmean_absolute_percentage_error(y, y_hat)\n```\n\n::: {.cell-output .cell-output-display execution_count=293}\n```\n0.31715404597233504\n```\n:::\n:::\n\n\nIndex of minimum value:\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nmodel.coef_.argmin()\n```\n\n::: {.cell-output .cell-output-display execution_count=294}\n```\n7\n```\n:::\n:::\n\n\nIndex of maximum value:\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nmodel.coef_.argmax()\n```\n\n::: {.cell-output .cell-output-display execution_count=295}\n```\n3\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nXX = np.concatenate([np.ones((len(X), 1)), X], axis=1)\n\nbeta = np.linalg.lstsq(XX, y, rcond=None)[0]\nintercept_, *coef_ = beta\n\nintercept_, model.intercept_\n```\n\n::: {.cell-output .cell-output-display execution_count=296}\n```\n(-36.94192020718431, -36.94192020718425)\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nnp.allclose(coef_, model.coef_)\n```\n\n::: {.cell-output .cell-output-display execution_count=297}\n```\nTrue\n```\n:::\n:::\n\n\n:::{.note}\n\nThis means that the two arrays are equal element-wise, within a certain tolerance.\n\n:::\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nX_test = np.random.normal(size=(10, X.shape[1]))\nX_test.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=298}\n```\n(10, 8)\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ny_test = X_test @ coef_ + intercept_\ny_test\n```\n\n::: {.cell-output .cell-output-display execution_count=299}\n```\narray([-35.66108585, -36.99366322, -38.38641628, -37.80068633,\n       -37.75440718, -36.94613883, -36.23397014, -37.09329031,\n       -37.74423072, -36.33948053])\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nmodel.predict(X_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=300}\n```\narray([-35.66108585, -36.99366322, -38.38641628, -37.80068633,\n       -37.75440718, -36.94613883, -36.23397014, -37.09329031,\n       -37.74423072, -36.33948053])\n```\n:::\n:::\n\n\nOf course, instead of `LinearRegression()`, we could have used another model such as a random forest regressor (a meta estimator that fits a number of classifying decision trees on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting) for instance:\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nmodel = RandomForestRegressor().fit(X, y).predict(X_test)\nmodel\n```\n\n::: {.cell-output .cell-output-display execution_count=301}\n```\narray([1.53359  , 1.43435  , 1.5799001, 1.5324   , 1.5799001, 1.5116701,\n       1.5799001, 1.51034  , 1.5255501, 1.5799001])\n```\n:::\n:::\n\n\n:::{.note}\n\nWhich is equivalent to:\n\n```{.python}\nmodel = RandomForestRegressor()\nmodel.fit(X, y).predict(X_test)\n```\n\n:::\n\n## Example 2: breast cancer\n\n### Load and explore the data\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nb_cancer = load_breast_cancer()\n```\n:::\n\n\nLet's print the description of this dataset:\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nprint(b_cancer.DESCR)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n.. _breast_cancer_dataset:\n\nBreast cancer wisconsin (diagnostic) dataset\n--------------------------------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 569\n\n    :Number of Attributes: 30 numeric, predictive attributes and the class\n\n    :Attribute Information:\n        - radius (mean of distances from center to points on the perimeter)\n        - texture (standard deviation of gray-scale values)\n        - perimeter\n        - area\n        - smoothness (local variation in radius lengths)\n        - compactness (perimeter^2 / area - 1.0)\n        - concavity (severity of concave portions of the contour)\n        - concave points (number of concave portions of the contour)\n        - symmetry\n        - fractal dimension (\"coastline approximation\" - 1)\n\n        The mean, standard error, and \"worst\" or largest (mean of the three\n        worst/largest values) of these features were computed for each image,\n        resulting in 30 features.  For instance, field 0 is Mean Radius, field\n        10 is Radius SE, field 20 is Worst Radius.\n\n        - class:\n                - WDBC-Malignant\n                - WDBC-Benign\n\n    :Summary Statistics:\n\n    ===================================== ====== ======\n                                           Min    Max\n    ===================================== ====== ======\n    radius (mean):                        6.981  28.11\n    texture (mean):                       9.71   39.28\n    perimeter (mean):                     43.79  188.5\n    area (mean):                          143.5  2501.0\n    smoothness (mean):                    0.053  0.163\n    compactness (mean):                   0.019  0.345\n    concavity (mean):                     0.0    0.427\n    concave points (mean):                0.0    0.201\n    symmetry (mean):                      0.106  0.304\n    fractal dimension (mean):             0.05   0.097\n    radius (standard error):              0.112  2.873\n    texture (standard error):             0.36   4.885\n    perimeter (standard error):           0.757  21.98\n    area (standard error):                6.802  542.2\n    smoothness (standard error):          0.002  0.031\n    compactness (standard error):         0.002  0.135\n    concavity (standard error):           0.0    0.396\n    concave points (standard error):      0.0    0.053\n    symmetry (standard error):            0.008  0.079\n    fractal dimension (standard error):   0.001  0.03\n    radius (worst):                       7.93   36.04\n    texture (worst):                      12.02  49.54\n    perimeter (worst):                    50.41  251.2\n    area (worst):                         185.2  4254.0\n    smoothness (worst):                   0.071  0.223\n    compactness (worst):                  0.027  1.058\n    concavity (worst):                    0.0    1.252\n    concave points (worst):               0.0    0.291\n    symmetry (worst):                     0.156  0.664\n    fractal dimension (worst):            0.055  0.208\n    ===================================== ====== ======\n\n    :Missing Attribute Values: None\n\n    :Class Distribution: 212 - Malignant, 357 - Benign\n\n    :Creator:  Dr. William H. Wolberg, W. Nick Street, Olvi L. Mangasarian\n\n    :Donor: Nick Street\n\n    :Date: November, 1995\n\nThis is a copy of UCI ML Breast Cancer Wisconsin (Diagnostic) datasets.\nhttps://goo.gl/U2Uwz2\n\nFeatures are computed from a digitized image of a fine needle\naspirate (FNA) of a breast mass.  They describe\ncharacteristics of the cell nuclei present in the image.\n\nSeparating plane described above was obtained using\nMultisurface Method-Tree (MSM-T) [K. P. Bennett, \"Decision Tree\nConstruction Via Linear Programming.\" Proceedings of the 4th\nMidwest Artificial Intelligence and Cognitive Science Society,\npp. 97-101, 1992], a classification method which uses linear\nprogramming to construct a decision tree.  Relevant features\nwere selected using an exhaustive search in the space of 1-4\nfeatures and 1-3 separating planes.\n\nThe actual linear program used to obtain the separating plane\nin the 3-dimensional space is that described in:\n[K. P. Bennett and O. L. Mangasarian: \"Robust Linear\nProgramming Discrimination of Two Linearly Inseparable Sets\",\nOptimization Methods and Software 1, 1992, 23-34].\n\nThis database is also available through the UW CS ftp server:\n\nftp ftp.cs.wisc.edu\ncd math-prog/cpo-dataset/machine-learn/WDBC/\n\n.. topic:: References\n\n   - W.N. Street, W.H. Wolberg and O.L. Mangasarian. Nuclear feature extraction \n     for breast tumor diagnosis. IS&T/SPIE 1993 International Symposium on \n     Electronic Imaging: Science and Technology, volume 1905, pages 861-870,\n     San Jose, CA, 1993.\n   - O.L. Mangasarian, W.N. Street and W.H. Wolberg. Breast cancer diagnosis and \n     prognosis via linear programming. Operations Research, 43(4), pages 570-577, \n     July-August 1995.\n   - W.H. Wolberg, W.N. Street, and O.L. Mangasarian. Machine learning techniques\n     to diagnose breast cancer from fine-needle aspirates. Cancer Letters 77 (1994) \n     163-171.\n```\n:::\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nb_cancer.feature_names\n```\n\n::: {.cell-output .cell-output-display execution_count=304}\n```\narray(['mean radius', 'mean texture', 'mean perimeter', 'mean area',\n       'mean smoothness', 'mean compactness', 'mean concavity',\n       'mean concave points', 'mean symmetry', 'mean fractal dimension',\n       'radius error', 'texture error', 'perimeter error', 'area error',\n       'smoothness error', 'compactness error', 'concavity error',\n       'concave points error', 'symmetry error',\n       'fractal dimension error', 'worst radius', 'worst texture',\n       'worst perimeter', 'worst area', 'worst smoothness',\n       'worst compactness', 'worst concavity', 'worst concave points',\n       'worst symmetry', 'worst fractal dimension'], dtype='<U23')\n```\n:::\n:::\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nb_cancer.target_names\n```\n\n::: {.cell-output .cell-output-display execution_count=305}\n```\narray(['malignant', 'benign'], dtype='<U9')\n```\n:::\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nX = b_cancer.data\ny = b_cancer.target\n```\n:::\n\n\n:::{.note}\n\nHere again, we could have used instead `X, y = load_breast_cancer(return_X_y=True)`.\n\n:::\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nX.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=307}\n```\n(569, 30)\n```\n:::\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\ny.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=308}\n```\n(569,)\n```\n:::\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nset(y)\n```\n\n::: {.cell-output .cell-output-display execution_count=309}\n```\n{0, 1}\n```\n:::\n:::\n\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nCounter(y)\n```\n\n::: {.cell-output .cell-output-display execution_count=310}\n```\nCounter({1: 357, 0: 212})\n```\n:::\n:::\n\n\n### Create and fit a first model\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nmodel = LogisticRegression(max_iter=10000)\ny_hat = model.fit(X, y).predict(X)\n```\n:::\n\n\nGet some measure of accuracy:\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\naccuracy_score(y, y_hat)\n```\n\n::: {.cell-output .cell-output-display execution_count=312}\n```\n0.9578207381370826\n```\n:::\n:::\n\n\n:::{.note}\n\nThis can also be obtained with:\n\n```{.python}\nnp.mean(y_hat == y)\n```\n\n:::\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\ndef sigmoid(x):\n  return 1/(1 + np.exp(-x))\n\nx = np.linspace(-10, 10, 100)\nplt.plot(x, sigmoid(x), lw=3)\nplt.title(\"The Sigmoid Function $\\\\sigma(x)$\")\n```\n\n::: {.cell-output .cell-output-display execution_count=313}\n```\nText(0.5, 1.0, 'The Sigmoid Function $\\\\sigma(x)$')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](sk_workflow_files/figure-html/cell-43-output-2.png){width=571 height=432}\n:::\n:::\n\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\ny_pred = 1*(sigmoid(X @ model.coef_.squeeze() + model.intercept_) > 0.5)\nassert np.all(y_pred == model.predict(X))\n\nnp.allclose(\n    model.predict_proba(X)[:, 1],\n    sigmoid(X @ model.coef_.squeeze() + model.intercept_)\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=314}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\ndef make_spirals(k=20, s=1.0, n=2000):\n    X = np.zeros((n, 2))\n    y = np.round(np.random.uniform(size=n)).astype(int)\n    r = np.random.uniform(size=n)*k*np.pi\n    rr = r**0.5\n    theta = rr + np.random.normal(loc=0, scale=s, size=n)\n    theta[y == 1] = theta[y == 1] + np.pi\n    X[:,0] = rr*np.cos(theta)\n    X[:,1] = rr*np.sin(theta)\n    return X, y\n\nX, y = make_spirals()\ncmap = matplotlib.colormaps[\"viridis\"]\n\na = cmap(0)\na = [*a[:3], 0.3]\nb = cmap(0.99)\nb = [*b[:3], 0.3]\n\nplt.figure(figsize=(7,7))\nax = plt.gca()\nax.set_aspect(\"equal\")\nax.plot(X[y == 0, 0], X[y == 0, 1], 'o', color=a, ms=8, label=\"$y=0$\")\nax.plot(X[y == 1, 0], X[y == 1, 1], 'o', color=b, ms=8, label=\"$y=1$\")\nplt.title(\"Spirals\")\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display execution_count=315}\n```\n<matplotlib.legend.Legend at 0x7f25dd9bd9d0>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](sk_workflow_files/figure-html/cell-45-output-2.png){width=562 height=579}\n:::\n:::\n\n\n### Create and fit a second model\n\nHere, we use a logistic regression:\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nmodel = LogisticRegression()\ny_hat = model.fit(X, y).predict(X)\naccuracy_score(y, y_hat)\n```\n\n::: {.cell-output .cell-output-display execution_count=316}\n```\n0.5895\n```\n:::\n:::\n\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nu = np.linspace(-8, 8, 100)\nv = np.linspace(-8, 8, 100)\nU, V = np.meshgrid(u, v)\nUV = np.array([U.ravel(), V.ravel()]).T\nU.shape, V.shape, UV.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=317}\n```\n((100, 100), (100, 100), (10000, 2))\n```\n:::\n:::\n\n\n:::{.note}\n\n`np.ravel` returns a contiguous flattened array.\n\n:::\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nW = model.predict(UV).reshape(U.shape)\nW.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=318}\n```\n(100, 100)\n```\n:::\n:::\n\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nplt.pcolormesh(U, V, W)\n```\n\n::: {.cell-output .cell-output-display execution_count=319}\n```\n<matplotlib.collections.QuadMesh at 0x7f25dd6c5b90>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](sk_workflow_files/figure-html/cell-49-output-2.png){width=571 height=414}\n:::\n:::\n\n\n### Create and fit a third model\n\nLet's use a k-nearest neighbours classifier this time:\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nmodel = KNeighborsClassifier(n_neighbors=5)\ny_hat = model.fit(X, y).predict(X)\naccuracy_score(y, y_hat)\n```\n\n::: {.cell-output .cell-output-display execution_count=320}\n```\n0.893\n```\n:::\n:::\n\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\nu = np.linspace(-8, 8, 100)\nv = np.linspace(-8, 8, 100)\nU, V = np.meshgrid(u, v)\nUV = np.array([U.ravel(), V.ravel()]).T\nU.shape, V.shape, UV.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=321}\n```\n((100, 100), (100, 100), (10000, 2))\n```\n:::\n:::\n\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\nW = model.predict(UV).reshape(U.shape)\nW.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=322}\n```\n(100, 100)\n```\n:::\n:::\n\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\nplt.pcolormesh(U, V, W)\n```\n\n::: {.cell-output .cell-output-display execution_count=323}\n```\n<matplotlib.collections.QuadMesh at 0x7f25dd8cb650>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](sk_workflow_files/figure-html/cell-53-output-2.png){width=571 height=414}\n:::\n:::\n\n\nWe can iterate over various values of `k` to see how the accuracy and pseudocolor plot evolve:\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\nfig, axes = plt.subplots(2, 4, figsize=(9.8, 5))\nfig.suptitle(\"Decision Regions\")\n\nu = np.linspace(-8, 8, 100)\nv = np.linspace(-8, 8, 100)\nU, V = np.meshgrid(u, v)\nUV = np.array([U.ravel(), V.ravel()]).T\n\nks = np.arange(1, 16, 2)\n\nfor k, ax in zip(ks, axes.ravel()):\n  model = KNeighborsClassifier(n_neighbors=k)\n  model.fit(X, y)\n  acc = accuracy_score(y, model.predict(X))\n  W = model.predict(UV).reshape(U.shape)\n  ax.imshow(W, origin=\"lower\", cmap=cmap)\n  ax.set_axis_off()\n  ax.set_title(f\"$k$={k}, acc={acc:.2f}\")\n```\n\n::: {.cell-output .cell-output-display}\n![](sk_workflow_files/figure-html/cell-54-output-1.png){width=748 height=432}\n:::\n:::\n\n\n",
    "supporting": [
      "sk_workflow_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}