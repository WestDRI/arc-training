{
  "hash": "b1ec312f9ddac217f685d4fa069158b5",
  "result": {
    "markdown": "---\ntitle: Overall workflow\nauthor: Marie-Hélène Burle\n---\n\n## The data\n\n[CIFAR-10](https://en.wikipedia.org/wiki/CIFAR-10) from [the Canadian Institute for Advanced Research](https://en.wikipedia.org/wiki/Canadian_Institute_for_Advanced_Research) is a classic dataset of 60,000 color images of size 32x32 pixels falling into 10 classes (6,000 images in each class):\n\n- airplane\n- automobile\n- bird\n- cat\n- deer\n- dog\n- frog\n- horse\n- ship\n- truck\n\n### Create a DataLoader\n\nA `DataLoader` is an iterable feeding data to a model at each iteration. The data loader sets the batch size, whether the data is shuffled or not, and how the I/O is parallelized.\n\nFinally, the data often need to be transformed. \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport torch\nimport torchvision\nimport torchvision.transforms as transforms\n\ntransform = transforms.Compose(\n    [transforms.ToTensor(),\n     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n\nbatch_size = 4\n\ntrainset = torchvision.datasets.CIFAR10(root='./data',\n                                        train=True,\n                                        download=True,\n                                        transform=transform)\ntrainloader = torch.utils.data.DataLoader(trainset,\n                                          batch_size=batch_size,\n                                          shuffle=True,\n                                          num_workers=2)\n\ntestset = torchvision.datasets.CIFAR10(root='./data',\n                                       train=False,\n                                       download=True,\n                                       transform=transform)\ntestloader = torch.utils.data.DataLoader(testset,\n                                         batch_size=batch_size,\n                                         shuffle=False,\n                                         num_workers=2)\n\nclasses = ('plane', 'car', 'bird', 'cat',\n           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n```\n:::\n\n\n### Visualize a sample of the data\n\nThough not necessary, it can be useful to have a look at the data.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# functions to show an image\ndef imshow(img):\n    img = img / 2 + 0.5     # unnormalize\n    npimg = img.numpy()\n    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n    plt.show()\n\n# get some random training images\ndataiter = iter(trainloader)\nimages, labels = next(dataiter)\n\n# show images\nimshow(torchvision.utils.make_grid(images))\n\n# print labels\nprint(' '.join(f'{classes[labels[j]]:5s}' for j in range(batch_size)))\n```\n\n::: {.cell-output .cell-output-display}\n![](workflow_files/figure-html/cell-3-output-1.png){width=566 height=181}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\ndeer  bird  truck horse\n```\n:::\n:::\n\n\n## The model\n\n### Architecture\n\nFirst, we need to define the architecture of the network. There are many types of architectures. For images, CNN are well suited.\n\nIn Python, you can define a subclass of an existing class with:\n\n```{.python}\nclass YourSubclass(BaseClass):\n    <definition of your subclass>        \n```\n\nThe subclass is derived from the base class and inherits its properties. PyTorch contains the class `torch.nn.Module` which is used as the base class when defining a neural network.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass Net(nn.Module):\n    # Define the architecture of the network\n    def __init__(self):\n        super().__init__()\n        # 3 input image channel (3 colour channels)\n        # 6 output channels,\n        # 5x5 square convolution kernel\n        self.conv1 = nn.Conv2d(3, 6, 5)\n        # Max pooling over a (2, 2) window\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        # 5*5 from image dimension\n        self.fc1 = nn.Linear(16 * 5 * 5, 120)\n        self.fc2 = nn.Linear(120, 84)\n        # 10 is the size of the output layer\n        # since there are 10 classes\n        self.fc3 = nn.Linear(84, 10)\n\n    # Set the flow of data through the network for the forward pass\n    # x represents the data\n    def forward(self, x):\n        # F.relu is the rectified-linear activation function\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        # flatten all dimensions except the batch dimension\n        x = torch.flatten(x, 1)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n```\n:::\n\n\nLet's create an instance of `Net` and print its structure:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nnet = Net()\nprint(net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNet(\n  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n  (fc1): Linear(in_features=400, out_features=120, bias=True)\n  (fc2): Linear(in_features=120, out_features=84, bias=True)\n  (fc3): Linear(in_features=84, out_features=10, bias=True)\n)\n```\n:::\n:::\n\n\n### Loss function and optimizer\n\nWe need to chose a loss function that will be used to calculate the gradients through backpropagation as well as an optimizer to do the gradient descent.\n\nSGD with momentum has proved a very efficient optimizing technique and is widely used.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport torch.optim as optim\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)\n```\n:::\n\n\n## Training\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfor epoch in range(2):  # loop over the dataset twice\n\n    running_loss = 0.0\n    for i, data in enumerate(trainloader, 0):\n        # get the inputs; data is a list of [inputs, labels]\n        inputs, labels = data\n\n        # zero the parameter gradients\n        optimizer.zero_grad()\n\n        # forward + backward + optimize\n        outputs = net(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        # print statistics\n        running_loss += loss.item()\n        if i % 2000 == 1999:    # print every 2000 mini-batches\n            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')\n            running_loss = 0.0\n\nprint('Finished Training')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1,  2000] loss: 2.202\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1,  4000] loss: 1.860\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1,  6000] loss: 1.666\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1,  8000] loss: 1.570\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 10000] loss: 1.499\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 12000] loss: 1.442\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[2,  2000] loss: 1.382\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[2,  4000] loss: 1.344\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[2,  6000] loss: 1.330\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[2,  8000] loss: 1.306\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[2, 10000] loss: 1.304\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[2, 12000] loss: 1.278\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nFinished Training\n```\n:::\n:::\n\n\n## Testing\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndataiter = iter(testloader)\nimages, labels = next(dataiter)\n\n# print images\nimshow(torchvision.utils.make_grid(images))\nprint('Real: ', ' '.join(f'{classes[labels[j]]:5s}' for j in range(4)))\n```\n\n::: {.cell-output .cell-output-display}\n![](workflow_files/figure-html/cell-8-output-1.png){width=566 height=181}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nReal:  cat   ship  ship  plane\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\noutputs = net(images)\n\n_, predicted = torch.max(outputs, 1)\n\nprint('Predicted: ', ' '.join(f'{classes[predicted[j]]:5s}'\n                              for j in range(4)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPredicted:  cat   ship  car   ship \n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ncorrect = 0\ntotal = 0\n# since we're not training, we don't need to calculate the gradients for our outputs\nwith torch.no_grad():\n    for data in testloader:\n        images, labels = data\n        # calculate outputs by running images through the network\n        outputs = net(images)\n        # the class with the highest energy is what we choose as prediction\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\nprint(f'Accuracy of the network on the 10000 test images: {100 * correct // total} %')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy of the network on the 10000 test images: 55 %\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# prepare to count predictions for each class\ncorrect_pred = {classname: 0 for classname in classes}\ntotal_pred = {classname: 0 for classname in classes}\n\n# again no gradients needed\nwith torch.no_grad():\n    for data in testloader:\n        images, labels = data\n        outputs = net(images)\n        _, predictions = torch.max(outputs, 1)\n        # collect the correct predictions for each class\n        for label, prediction in zip(labels, predictions):\n            if label == prediction:\n                correct_pred[classes[label]] += 1\n            total_pred[classes[label]] += 1\n\n\n# print accuracy for each class\nfor classname, correct_count in correct_pred.items():\n    accuracy = 100 * float(correct_count) / total_pred[classname]\n    print(f'Accuracy for class: {classname:5s} is {accuracy:.1f} %')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy for class: plane is 55.8 %\nAccuracy for class: car   is 65.0 %\nAccuracy for class: bird  is 36.1 %\nAccuracy for class: cat   is 43.0 %\nAccuracy for class: deer  is 42.6 %\nAccuracy for class: dog   is 57.3 %\nAccuracy for class: frog  is 64.0 %\nAccuracy for class: horse is 64.0 %\nAccuracy for class: ship  is 70.9 %\nAccuracy for class: truck is 53.8 %\n```\n:::\n:::\n\n\n",
    "supporting": [
      "workflow_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}