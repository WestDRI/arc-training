{
  "hash": "6c09abd8d353f6d5fcaf0b7e31ec3e75",
  "result": {
    "markdown": "---\ntitle: PyTorch tensors\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nBefore information can be processed by algorithms, it needs to be converted to floating point numbers. Indeed, you don't pass a sentence or an image through a model; instead you input numbers representing a sequence of words or pixel values.\n\nAll these floating point numbers need to be stored in a data structure. The most suited structure is multidimensional (to hold several layers of information) and homogeneous—all data of the same type—for efficiency.\n\nPython already has several multidimensional array structures (e.g. [NumPy](https://numpy.org/)'s ndarray) but the particularities of deep learning call for special characteristics such as the ability to run operations on GPUs and/or in a distributed fashion, the ability to keep track of computation graphs for [automatic differentiation](https://en.wikipedia.org/wiki/Automatic_differentiation), and different defaults (lower precision for improved training performance).\n\nThe PyTorch tensor is a Python data structure with these characteristics that can easily be converted to/from NumPy's ndarray and integrates well with other Python libraries such as [Pandas](https://pandas.pydata.org/).\n\nIn this section, we will explore the basics of PyTorch tensors.\n\n:::\n\n## Importing PyTorch\n\nFirst of all, we need to import the `torch` library:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport torch\n```\n:::\n\n\nWe can check its version with:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ntorch.__version__\n```\n\n::: {.cell-output .cell-output-display execution_count=244}\n```\n'2.0.1'\n```\n:::\n:::\n\n\n## Creating tensors\n\nThere are many ways to create tensors:\n\n- `torch.tensor`: &emsp;&emsp;Input individual values\n- `torch.arange`: &emsp;&emsp;1D tensor with a sequence of integers\n- `torch.linspace`: &emsp;1D linear scale tensor\n- `torch.logspace`: &emsp;1D log scale tensor\n- `torch.rand`: &emsp;&emsp;&emsp;&nbsp;Random numbers from a uniform distribution on `[0, 1)`\n- `torch.randn`: &emsp;&emsp;&ensp;&nbsp;Numbers from the standard normal distribution\n- `torch.randperm`: &emsp;&nbsp;Random permutation of integers\n- `torch.empty`: &emsp;&emsp;&ensp;&nbsp;Uninitialized tensor\n- `torch.zeros`: &emsp;&emsp;&ensp;&nbsp;Tensor filled with `0`\n- `torch.ones`: &emsp;&emsp;&emsp;&nbsp;Tensor filled with `1`\n- `torch.eye`: &emsp;&emsp;&emsp;&ensp;&nbsp;&nbsp;Identity matrix\n\n### From input values\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nt = torch.tensor(3)\n```\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWithout using the `shape` descriptor, try to get the shape of the following tensors:\n\n```{.python}\ntorch.tensor([0.9704, 0.1339, 0.4841])\n\ntorch.tensor([[0.9524, 0.0354],\n        [0.9833, 0.2562],\n        [0.0607, 0.6420]])\n\ntorch.tensor([[[0.4604, 0.2699],\n         [0.8360, 0.0317],\n         [0.3289, 0.1171]]])\n\ntorch.tensor([[[[0.0730, 0.8737],\n          [0.2305, 0.4719],\n          [0.0796, 0.2745]]],\n\n        [[[0.1534, 0.9442],\n          [0.3287, 0.9040],\n          [0.0948, 0.1480]]]])\n```\n\n:::\n\nLet's create a random tensor with a single element:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nt = torch.rand(1)\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=246}\n```\ntensor([0.4290])\n```\n:::\n:::\n\n\nWe can extract the value from a tensor with one element:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nt.item()\n```\n\n::: {.cell-output .cell-output-display execution_count=247}\n```\n0.4290271997451782\n```\n:::\n:::\n\n\nAll these tensors have a single element, but an increasing number of dimensions:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ntorch.rand(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=248}\n```\ntensor([0.3364])\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ntorch.rand(1, 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=249}\n```\ntensor([[0.6259]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ntorch.rand(1, 1, 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=250}\n```\ntensor([[[0.5222]]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ntorch.rand(1, 1, 1, 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=251}\n```\ntensor([[[[0.0766]]]])\n```\n:::\n:::\n\n\n:::{.note}\n\nYou can tell the number of dimensions of a tensor easily by counting the number of opening square brackets.\n\n:::\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ntorch.rand(1, 1, 1, 1).dim()\n```\n\n::: {.cell-output .cell-output-display execution_count=252}\n```\n4\n```\n:::\n:::\n\n\nTensors can have multiple elements in one dimension:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ntorch.rand(6)\n```\n\n::: {.cell-output .cell-output-display execution_count=253}\n```\ntensor([0.1327, 0.0276, 0.7389, 0.5114, 0.2497, 0.7512])\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ntorch.rand(6).dim()\n```\n\n::: {.cell-output .cell-output-display execution_count=254}\n```\n1\n```\n:::\n:::\n\n\nAnd multiple elements in multiple dimensions:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ntorch.rand(2, 3, 4, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=255}\n```\ntensor([[[[0.2791, 0.4149, 0.3247, 0.7142, 0.1041],\n          [0.4782, 0.0271, 0.7952, 0.0378, 0.6539],\n          [0.1882, 0.3161, 0.3819, 0.5176, 0.7905],\n          [0.1645, 0.5349, 0.6140, 0.5311, 0.4440]],\n\n         [[0.0736, 0.4536, 0.9455, 0.9154, 0.9030],\n          [0.0199, 0.5699, 0.5626, 0.4649, 0.9425],\n          [0.1934, 0.0529, 0.7964, 0.7961, 0.4644],\n          [0.9432, 0.0606, 0.1570, 0.4021, 0.5519]],\n\n         [[0.4865, 0.3701, 0.3001, 0.6031, 0.1052],\n          [0.9341, 0.3336, 0.8826, 0.0611, 0.7596],\n          [0.9535, 0.2804, 0.9471, 0.3708, 0.2856],\n          [0.6365, 0.3618, 0.4384, 0.1216, 0.7854]]],\n\n\n        [[[0.8271, 0.3768, 0.9893, 0.7908, 0.5796],\n          [0.2743, 0.0730, 0.0698, 0.4625, 0.7976],\n          [0.3565, 0.6457, 0.8151, 0.5690, 0.1801],\n          [0.9469, 0.4278, 0.2776, 0.9883, 0.3758]],\n\n         [[0.6827, 0.5104, 0.9187, 0.7983, 0.6569],\n          [0.5977, 0.0481, 0.8325, 0.8454, 0.6846],\n          [0.2922, 0.7618, 0.2405, 0.9391, 0.9100],\n          [0.6545, 0.9802, 0.9919, 0.3626, 0.7514]],\n\n         [[0.2628, 0.5739, 0.2491, 0.1802, 0.5307],\n          [0.6612, 0.2253, 0.2074, 0.2174, 0.0678],\n          [0.8949, 0.5064, 0.6428, 0.0203, 0.0494],\n          [0.1933, 0.3937, 0.1000, 0.5701, 0.3524]]]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ntorch.rand(2, 3, 4, 5).dim()\n```\n\n::: {.cell-output .cell-output-display execution_count=256}\n```\n4\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ntorch.rand(2, 3, 4, 5).numel()\n```\n\n::: {.cell-output .cell-output-display execution_count=257}\n```\n120\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ntorch.ones(2, 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=258}\n```\ntensor([[1., 1., 1., 1.],\n        [1., 1., 1., 1.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nt = torch.rand(2, 3)\ntorch.zeros_like(t)             # Matches the size of t\n```\n\n::: {.cell-output .cell-output-display execution_count=259}\n```\ntensor([[0., 0., 0.],\n        [0., 0., 0.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ntorch.ones_like(t)\n```\n\n::: {.cell-output .cell-output-display execution_count=260}\n```\ntensor([[1., 1., 1.],\n        [1., 1., 1.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ntorch.randn_like(t)\n```\n\n::: {.cell-output .cell-output-display execution_count=261}\n```\ntensor([[ 0.0257,  0.1903,  0.2148],\n        [-1.1025,  0.7938,  0.0162]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ntorch.arange(2, 10, 3)    # From 2 to 10 in increments of 3\n```\n\n::: {.cell-output .cell-output-display execution_count=262}\n```\ntensor([2, 5, 8])\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ntorch.linspace(2, 10, 3)  # 3 elements from 2 to 10 on the linear scale\n```\n\n::: {.cell-output .cell-output-display execution_count=263}\n```\ntensor([ 2.,  6., 10.])\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ntorch.logspace(2, 10, 3)  # Same on the log scale\n```\n\n::: {.cell-output .cell-output-display execution_count=264}\n```\ntensor([1.0000e+02, 1.0000e+06, 1.0000e+10])\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\ntorch.randperm(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=265}\n```\ntensor([2, 1, 0])\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ntorch.eye(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=266}\n```\ntensor([[1., 0., 0.],\n        [0., 1., 0.],\n        [0., 0., 1.]])\n```\n:::\n:::\n\n\n## Conversion to/from NumPy\n\nPyTorch tensors can be converted to NumPy ndarrays and vice-versa in a very efficient manner as both objects share the same memory.\n\n### From PyTorch tensor to NumPy ndarray\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nt = torch.rand(2, 3)\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=267}\n```\ntensor([[0.1320, 0.4771, 0.3578],\n        [0.4802, 0.7329, 0.4558]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nt_np = t.numpy()\nt_np\n```\n\n::: {.cell-output .cell-output-display execution_count=268}\n```\narray([[0.13201904, 0.4771148 , 0.35777223],\n       [0.4802068 , 0.73292327, 0.45584947]], dtype=float32)\n```\n:::\n:::\n\n\n### From NumPy ndarray to PyTorch tensor\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nimport numpy as np\na = np.random.rand(2, 3)\na\n```\n\n::: {.cell-output .cell-output-display execution_count=269}\n```\narray([[0.38185265, 0.8741369 , 0.22436838],\n       [0.92204138, 0.34526123, 0.92729057]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\na_pt = torch.from_numpy(a)\na_pt\n```\n\n::: {.cell-output .cell-output-display execution_count=270}\n```\ntensor([[0.3819, 0.8741, 0.2244],\n        [0.9220, 0.3453, 0.9273]], dtype=torch.float64)\n```\n:::\n:::\n\n\n:::{.note}\n\nNote the different default data types.\n\n:::\n\n## Indexing tensors\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nt = torch.rand(3, 4)\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=271}\n```\ntensor([[0.1342, 0.8165, 0.2621, 0.6919],\n        [0.5868, 0.1059, 0.7706, 0.8143],\n        [0.8117, 0.6647, 0.6438, 0.4060]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nt[:, 2]\n```\n\n::: {.cell-output .cell-output-display execution_count=272}\n```\ntensor([0.2621, 0.7706, 0.6438])\n```\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nt[1, :]\n```\n\n::: {.cell-output .cell-output-display execution_count=273}\n```\ntensor([0.5868, 0.1059, 0.7706, 0.8143])\n```\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nt[2, 3]\n```\n\n::: {.cell-output .cell-output-display execution_count=274}\n```\ntensor(0.4060)\n```\n:::\n:::\n\n\n:::{.info}\n\n**A word of caution about indexing**\n\nWhile indexing elements of a tensor to extract some of the data as a final step of some computation is fine, [you should not use indexing to run operations on tensor elements in a loop]{.emph} as this would be extremely inefficient.\n\nInstead, you want to use [vectorized operations]{.emph}.\n\n:::\n\n## Vectorized operations\n\nSince PyTorch tensors are homogeneous (i.e. made of a single data type), [as with NumPy's ndarrays](https://www.pythonlikeyoumeanit.com/Module3_IntroducingNumpy/VectorizedOperations.html#Vectorized-Operations), operations are vectorized and thus fast.\n\nNumPy is mostly written in C, PyTorch in C++. With either library, when you run vectorized operations on arrays/tensors, you don't use raw Python (slow) but compiled C/C++ code (much faster).\n\n[Here](https://pythonspeed.com/articles/vectorization-python/) is an excellent post explaining Python vectorization & why it makes such a big difference.\n\n## Data types\n\n### Default data type\n\nSince PyTorch tensors were built with efficiency in mind for neural networks, the default data type is **32-bit floating points**.\n\nThis is sufficient for accuracy and much faster than 64-bit floating points.\n\n:::{.note}\n\nBy contrast, NumPy ndarrays use 64-bit as their default.\n\n:::\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nt = torch.rand(2, 4)\nt.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=275}\n```\ntorch.float32\n```\n:::\n:::\n\n\n### Setting data type at creation\n\nThe type can be set with the `dtype` argument:\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nt = torch.rand(2, 4, dtype=torch.float64)\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=276}\n```\ntensor([[0.4785, 0.4399, 0.7772, 0.8606],\n        [0.8733, 0.2233, 0.6039, 0.8384]], dtype=torch.float64)\n```\n:::\n:::\n\n\n:::{.note}\n\nPrinted tensors display attributes with values ≠ default values.\n\n:::\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nt.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=277}\n```\ntorch.float64\n```\n:::\n:::\n\n\n### Changing data type\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nt = torch.rand(2, 4)\nt.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=278}\n```\ntorch.float32\n```\n:::\n:::\n\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nt2 = t.type(torch.float64)\nt2.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=279}\n```\ntorch.float64\n```\n:::\n:::\n\n\n### List of data types\n\n| dtype | Description |\n| ----- | ----- |\n| torch.float16 / torch.half | 16-bit / half-precision floating-point |\n| torch.float32 / torch.float | 32-bit / single-precision floating-point |\n| torch.float64 / torch.double | 64-bit / double-precision floating-point |\n| torch.uint8 | unsigned 8-bit integers |\n| torch.int8 | signed 8-bit integers |\n| torch.int16 / torch.short | signed 16-bit integers |\n| torch.int32 / torch.int | signed 32-bit integers |\n| torch.int64 / torch.long | signed 64-bit integers |\n| torch.bool | boolean |\n\n## Simple operations\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nt1 = torch.tensor([[1, 2], [3, 4]])\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=280}\n```\ntensor([[1, 2],\n        [3, 4]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nt2 = torch.tensor([[1, 1], [0, 0]])\nt2\n```\n\n::: {.cell-output .cell-output-display execution_count=281}\n```\ntensor([[1, 1],\n        [0, 0]])\n```\n:::\n:::\n\n\nOperation performed between elements at corresponding locations:\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nt1 + t2\n```\n\n::: {.cell-output .cell-output-display execution_count=282}\n```\ntensor([[2, 3],\n        [3, 4]])\n```\n:::\n:::\n\n\nOperation applied to each element of the tensor:\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nt1 + 1\n```\n\n::: {.cell-output .cell-output-display execution_count=283}\n```\ntensor([[2, 3],\n        [4, 5]])\n```\n:::\n:::\n\n\n### Reduction\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nt = torch.ones(2, 3, 4);\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=284}\n```\ntensor([[[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]],\n\n        [[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\nt.sum()   # Reduction over all entries\n```\n\n::: {.cell-output .cell-output-display execution_count=285}\n```\ntensor(24.)\n```\n:::\n:::\n\n\n:::{.note}\n\nOther reduction functions (e.g. mean) behave the same way.\n\n:::\n\nReduction over a specific dimension:\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nt.sum(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=286}\n```\ntensor([[2., 2., 2., 2.],\n        [2., 2., 2., 2.],\n        [2., 2., 2., 2.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nt.sum(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=287}\n```\ntensor([[3., 3., 3., 3.],\n        [3., 3., 3., 3.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nt.sum(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=288}\n```\ntensor([[4., 4., 4.],\n        [4., 4., 4.]])\n```\n:::\n:::\n\n\nReduction over multiple dimensions:\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nt.sum((0, 1))\n```\n\n::: {.cell-output .cell-output-display execution_count=289}\n```\ntensor([6., 6., 6., 6.])\n```\n:::\n:::\n\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nt.sum((0, 2))\n```\n\n::: {.cell-output .cell-output-display execution_count=290}\n```\ntensor([8., 8., 8.])\n```\n:::\n:::\n\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nt.sum((1, 2))\n```\n\n::: {.cell-output .cell-output-display execution_count=291}\n```\ntensor([12., 12.])\n```\n:::\n:::\n\n\n### In-place operations\n\nWith operators post-fixed with `_`:\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nt1 = torch.tensor([1, 2])\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=292}\n```\ntensor([1, 2])\n```\n:::\n:::\n\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\nt2 = torch.tensor([1, 1])\nt2\n```\n\n::: {.cell-output .cell-output-display execution_count=293}\n```\ntensor([1, 1])\n```\n:::\n:::\n\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\nt1.add_(t2)\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=294}\n```\ntensor([2, 3])\n```\n:::\n:::\n\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\nt1.zero_()\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=295}\n```\ntensor([0, 0])\n```\n:::\n:::\n\n\n:::{.note}\n\nWhile reassignments will use new addresses in memory, in-place operations will use the same addresses.\n\n:::\n\n### Tensor views\n\n```{.python}\nt = torch.tensor([[1, 2, 3], [4, 5, 6]]); print(t)\nt.size()\nt.view(6)\nt.view(3, 2)\nt.view(3, -1) # Same: with -1, the size is inferred from other dimensions\n```\n\n:::{.info}\n\n**Note the difference**\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\nt1 = torch.tensor([[1, 2, 3], [4, 5, 6]])\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=296}\n```\ntensor([[1, 2, 3],\n        [4, 5, 6]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\nt2 = t1.t()\nt2\n```\n\n::: {.cell-output .cell-output-display execution_count=297}\n```\ntensor([[1, 4],\n        [2, 5],\n        [3, 6]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=56}\n``` {.python .cell-code}\nt3 = t1.view(3, 2)\nt3\n```\n\n::: {.cell-output .cell-output-display execution_count=298}\n```\ntensor([[1, 2],\n        [3, 4],\n        [5, 6]])\n```\n:::\n:::\n\n\n:::\n\n### Logical operations\n\n::: {.cell execution_count=57}\n``` {.python .cell-code}\nt1 = torch.randperm(5)\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=299}\n```\ntensor([1, 0, 3, 4, 2])\n```\n:::\n:::\n\n\n::: {.cell execution_count=58}\n``` {.python .cell-code}\nt2 = torch.randperm(5)\nt2\n```\n\n::: {.cell-output .cell-output-display execution_count=300}\n```\ntensor([4, 0, 1, 3, 2])\n```\n:::\n:::\n\n\nTest each element:\n\n::: {.cell execution_count=59}\n``` {.python .cell-code}\nt1 > 3\n```\n\n::: {.cell-output .cell-output-display execution_count=301}\n```\ntensor([False, False, False,  True, False])\n```\n:::\n:::\n\n\nTest corresponding pairs of elements:\n\n::: {.cell execution_count=60}\n``` {.python .cell-code}\nt1 < t2\n```\n\n::: {.cell-output .cell-output-display execution_count=302}\n```\ntensor([ True, False, False, False, False])\n```\n:::\n:::\n\n\n## Device attribute\n\nTensor data can be placed in the memory of various processor types:\n\n- the RAM of CPU,\n- the RAM of a GPU with CUDA support,\n- the RAM of a GPU with [AMD's ROCm support](https://pytorch.org/blog/pytorch-for-amd-rocm-platform-now-available-as-python-package/),\n- the RAM of an [XLA device](https://www.tensorflow.org/xla) (e.g. [Cloud TPU](https://cloud.google.com/tpu)) with the [torch_xla package](https://github.com/pytorch/xla/).\n\nThe values for the device attributes are:\n\n- CPU: &nbsp;`'cpu'`,\n- GPU (CUDA & AMD's ROCm): &nbsp;`'cuda'`,\n- XLA: &nbsp;`xm.xla_device()`.\n\nThis last option requires to load the [torch_xla package](https://github.com/pytorch/xla/) first:\n\n```{.python}\nimport torch_xla\nimport torch_xla.core.xla_model as xm\n```\n\n### Creating a tensor on a specific device\n\nBy default, tensors are created on the CPU.\n\nYou can create a tensor on an accelerator by specifying the device attribute (our current training cluster does not have GPUs, so don't run this on it):\n\n```{.python}\nt_gpu = torch.rand(2, device='cuda')\n```\n\n### Copying a tensor to a specific device\n\nYou can also make copies of a tensor on other devices:\n\n```{.python}\n# Make a copy of t on the GPU\nt_gpu = t.to(device='cuda')\nt_gpu = t.cuda()             # Alternative syntax\n\n# Make a copy of t_gpu on the CPU\nt = t_gpu.to(device='cpu')\nt = t_gpu.cpu()              # Alternative syntax\n```\n\n### Multiple GPUs\n\nIf you have multiple GPUs, you can optionally specify which one a tensor should be created on or copied to:\n\n```{.python}\nt1 = torch.rand(2, device='cuda:0')  # Create a tensor on 1st GPU\nt2 = t1.to(device='cuda:0')          # Make a copy of t1 on 1st GPU\nt3 = t1.to(device='cuda:1')          # Make a copy of t1 on 2nd GPU\n```\n\nOr the equivalent short forms:\n\n```{.python}\nt2 = t1.cuda(0)\nt3 = t1.cuda(1)\n```\n\n",
    "supporting": [
      "tensors_files"
    ],
    "filters": [],
    "includes": {}
  }
}