{
  "hash": "f762cb773f7dc180735f3750858c4088",
  "result": {
    "markdown": "---\ntitle: Sklearn workflow\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\n\n\n:::\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom sklearn.datasets import fetch_california_housing, load_breast_cancer\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, accuracy_score\nimport matplotlib\nfrom matplotlib import pyplot as plt\nimport numpy as np\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ncal_housing = fetch_california_housing()\n\ntype(cal_housing)\n\ndir(cal_housing)\ncal_housing.filename\ncal_housing.feature_names\n\ncal_housing.DESCR\n\nX = cal_housing.data\ny = cal_housing.target\nX.shape, y.shape\n```\n\n::: {.cell-output .cell-output-error}\n```\nAttributeError: filename\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nplt.hist(y)\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'y' is not defined\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nb_cancer = load_breast_cancer()\nb_cancer.feature_names\nb_cancer.target_names\nX = b_cancer.data\ny = b_cancer.target\nX.shape, y.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n((569, 30), (569,))\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nX, y = fetch_california_housing(return_X_y=True)\nX = X[:, :-2]\nX.shape, y.shape\n\nmodel = LinearRegression()\nmodel.fit(X, y)\n\nmodel.coef_, model.coef_.shape\nmodel.intercept_, model.intercept_.shape\n\ny_hat = model.predict(X)\n\nsse = np.sum((y - y_hat)**2)\nmse = np.mean((y - y_hat)**2)\nsse, mse, mean_squared_error(y, y_hat)\n\nmean_absolute_percentage_error(y, y_hat)\n\nmodel.coef_.argmin()\n\nmodel.coef_.argmax()\n\ncal_housing = fetch_california_housing()\n\ncal_housing.feature_names[4]\n\nprint(cal_housing.DESCR)\n\nXX = np.concatenate([np.ones((len(X), 1)), X], axis=1)\n\nbeta = np.linalg.lstsq(XX, y, rcond=None)[0]\nintercept_, *coef_ = beta\n\nintercept_, model.intercept_\n\nnp.allclose(coef_, model.coef_)\n\nX_test = np.random.normal(size=(10, X.shape[1]))\nX_test.shape\n\ny_test = X_test @ coef_ + intercept_\n\ny_test\n\nmodel.predict(X_test)\n\nmodel.fit(X, y).predict(X_test)\n\nmodel = RandomForestRegressor()\nmodel.fit(X, y).predict(X_test)\n\nX, y = load_breast_cancer(return_X_y=True)\nX.shape, y.shape, set(y)\n\nfrom collections import Counter\n\nCounter(y)\n\nmodel = LogisticRegression(max_iter=10000)\ny_hat = model.fit(X, y).predict(X)\n\nnp.mean(y_hat == y)\n\naccuracy_score(y, y_hat)\n\ndef sigmoid(x):\n  return 1/(1 + np.exp(-x))\n\nx = np.linspace(-10, 10, 100)\nplt.plot(x, sigmoid(x), lw=3)\nplt.title(\"The Sigmoid Function $\\\\sigma(x)$\", fontsize=18)\n\ny_pred = 1*(sigmoid(X @ model.coef_.squeeze() + model.intercept_) > 0.5)\nassert np.all(y_pred == model.predict(X))\n\nnp.allclose(\n    model.predict_proba(X)[:, 1],\n    sigmoid(X @ model.coef_.squeeze() + model.intercept_)\n)\n\ndef make_spirals(k=20, s=1.0, n=2000):\n    X = np.zeros((n, 2))\n    y = np.round(np.random.uniform(size=n)).astype(int)\n    r = np.random.uniform(size=n)*k*np.pi\n    rr = r**0.5\n    theta = rr + np.random.normal(loc=0, scale=s, size=n)\n    theta[y == 1] = theta[y == 1] + np.pi\n    X[:,0] = rr*np.cos(theta)\n    X[:,1] = rr*np.sin(theta)\n    return X, y\n\nX, y = make_spirals()\ncmap = matplotlib.cm.get_cmap(\"viridis\")\n\na = cmap(0)\na = [*a[:3], 0.3]\nb = cmap(0.99)\nb = [*b[:3], 0.3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n.. _california_housing_dataset:\n\nCalifornia Housing dataset\n--------------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 20640\n\n    :Number of Attributes: 8 numeric, predictive attributes and the target\n\n    :Attribute Information:\n        - MedInc        median income in block group\n        - HouseAge      median house age in block group\n        - AveRooms      average number of rooms per household\n        - AveBedrms     average number of bedrooms per household\n        - Population    block group population\n        - AveOccup      average number of household members\n        - Latitude      block group latitude\n        - Longitude     block group longitude\n\n    :Missing Attribute Values: None\n\nThis dataset was obtained from the StatLib repository.\nhttps://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.html\n\nThe target variable is the median house value for California districts,\nexpressed in hundreds of thousands of dollars ($100,000).\n\nThis dataset was derived from the 1990 U.S. census, using one row per census\nblock group. A block group is the smallest geographical unit for which the U.S.\nCensus Bureau publishes sample data (a block group typically has a population\nof 600 to 3,000 people).\n\nA household is a group of people residing within a home. Since the average\nnumber of rooms and bedrooms in this dataset are provided per household, these\ncolumns may take surprisingly large values for block groups with few households\nand many empty houses, such as vacation resorts.\n\nIt can be downloaded/loaded using the\n:func:`sklearn.datasets.fetch_california_housing` function.\n\n.. topic:: References\n\n    - Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions,\n      Statistics and Probability Letters, 33 (1997) 291-297\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_49741/1068495913.py:93: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n  cmap = matplotlib.cm.get_cmap(\"viridis\")\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](sk_intro_files/figure-html/cell-6-output-3.png){width=571 height=439}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nplt.figure(figsize=(7,7))\nax = plt.gca()\nax.set_aspect(\"equal\")\nax.plot(X[y == 0, 0], X[y == 0, 1], 'o', color=a, ms=8, label=\"$y=0$\")\nax.plot(X[y == 1, 0], X[y == 1, 1], 'o', color=b, ms=8, label=\"$y=1$\")\nplt.title(\"Spirals\", fontsize=18)\nplt.legend(fontsize=14)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<matplotlib.legend.Legend at 0x7fc05c3708d0>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](sk_intro_files/figure-html/cell-7-output-2.png){width=567 height=585}\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nmodel = LogisticRegression()\ny_hat = model.fit(X, y).predict(X)\naccuracy_score(y, y_hat)\n\nu = np.linspace(-8, 8, 100)\nv = np.linspace(-8, 8, 100)\nU, V = np.meshgrid(u, v)\nUV = np.array([U.ravel(), V.ravel()]).T\nU.shape, V.shape, UV.shape\nW = model.predict(UV).reshape(U.shape)\nW.shape\nplt.pcolormesh(U, V, W)\n\nmodel = KNeighborsClassifier(n_neighbors=5)\ny_hat = model.fit(X, y).predict(X)\naccuracy_score(y, y_hat)\n\nu = np.linspace(-8, 8, 100)\nv = np.linspace(-8, 8, 100)\nU, V = np.meshgrid(u, v)\nUV = np.array([U.ravel(), V.ravel()]).T\nU.shape, V.shape, UV.shape\nW = model.predict(UV).reshape(U.shape)\nW.shape\nplt.pcolormesh(U, V, W)\n\nfig, axes = plt.subplots(2, 4, figsize=(20, 10))\n\nfig.suptitle(\"Decision Regions\", fontsize=24)\n\nu = np.linspace(-8, 8, 100)\nv = np.linspace(-8, 8, 100)\nU, V = np.meshgrid(u, v)\nUV = np.array([U.ravel(), V.ravel()]).T\n\nks = np.arange(1, 16, 2)\n\nfor k, ax in zip(ks, axes.ravel()):\n  model = KNeighborsClassifier(n_neighbors=k)\n  model.fit(X, y)\n  acc = accuracy_score(y, model.predict(X))\n  W = model.predict(UV).reshape(U.shape)\n  ax.imshow(W, origin=\"lower\", cmap=cmap)\n  ax.set_axis_off()\n  ax.set_title(f\"$k$={k}, acc={acc:.2f}\", fontsize=18)\n\nA = np.arange(27).reshape((3, 3, 3))\nA\n\nA.ravel()\n\nA.flatten()\n\nA.ravel()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](sk_intro_files/figure-html/cell-8-output-2.png){width=571 height=414}\n:::\n\n::: {.cell-output .cell-output-display}\n![](sk_intro_files/figure-html/cell-8-output-3.png){width=1507 height=848}\n:::\n:::\n\n\n",
    "supporting": [
      "sk_intro_files"
    ],
    "filters": [],
    "includes": {}
  }
}