{
  "hash": "c9564e5e9df348cc5f7fc48cd26529bd",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Defining model architecture\nbibliography: fl.bib\ncsl: diabetologia.csl\nauthor:\n  - Marie-Hélène Burle\n---\n\n:::{.def}\n\nIn this section, we define a model with [Flax](https://github.com/google/flax)'s new API called NNX.\n\n:::\n\n## Context\n\n```{dot}\n//| echo: false\n//| fig-width: 700px\n\ndigraph {\n\nbgcolor=\"transparent\"\nnode [fontname=\"Inconsolata, sans-serif\", color=gray55]\nedge [color=gray55]\n\nload [label=\"Load data\", shape=plaintext, group=g1, fontcolor=gray55]\nproc [label=\"Process data\", shape=plaintext, group=g1, fontcolor=gray55]\nnn [label=\"Define architecture\", shape=plaintext, group=g1]\npretr [label=\"Pre-trained model\", shape=plaintext, group=g1, fontcolor=gray55]\nopt [label=\"Optimize\", shape=plaintext, group=g1, fontcolor=gray55]\ncp [label=\"Checkpoint\", shape=plaintext, group=g1, fontcolor=gray55]\n\npt [label=torchdata, fontcolor=gray55, color=gray55]\ntfds [label=tfds, group=g2, fontcolor=gray55, color=gray55]\ndt [label=datasets, fontcolor=gray55, color=gray55]\n\ngr [label=grain, fontcolor=gray55, color=gray55]\ntv [label=torchvision, fontcolor=gray55, color=gray55]\n\ntr [label=transformers, fontcolor=gray55, color=gray55]\n\nfl [label=flax, group=g2, fontcolor=\"#00695C\", color=\"#00695C\"]\n\noa [label=optax, group=g2, fontcolor=gray55, color=gray55]\n\nob [label=orbax, group=g2, fontcolor=gray55, color=gray55]\n\n{rank=same; gr load tv}\ngr -> load -> tv [style=invis]\n\n{rank=same; fl proc pretr}\nfl -> proc -> pretr [style=invis]\n\n{pt tfds dt} -> load [color=gray55]\n{gr tv} -> proc [color=gray55]\nfl -> nn [color=\"#00695C\"]\npretr -> nn [dir=none]\ntr -> pretr [color=gray55]\noa -> opt [color=gray55]\nob -> cp [color=gray55]\n\nload -> proc -> nn -> opt -> cp [dir=none]\n\n}\n```\n\n:::{.callout-note collapse=\"true\"}\n\n## Minimal necessary code from previous sections\n\n::: {#b3af3e11 .cell execution_count=2}\n``` {.python .cell-code}\nfrom datasets import load_dataset\nimport numpy as np\nfrom torchvision.transforms import v2 as T\nimport grain.python as grain\n\ntrain_size = 5 * 750\nval_size = 5 * 250\n\ntrain_dataset = load_dataset(\"food101\",\n                             split=f\"train[:{train_size}]\")\n\nval_dataset = load_dataset(\"food101\",\n                           split=f\"validation[:{val_size}]\")\n\nlabels_mapping = {}\nindex = 0\nfor i in range(0, len(val_dataset), 250):\n    label = val_dataset[i][\"label\"]\n    if label not in labels_mapping:\n        labels_mapping[label] = index\n        index += 1\n\ninv_labels_mapping = {v: k for k, v in labels_mapping.items()}\n\nimg_size = 224\n\ndef to_np_array(pil_image):\n  return np.asarray(pil_image.convert(\"RGB\"))\n\ndef normalize(image):\n    # Image preprocessing matches the one of pretrained ViT\n    mean = np.array([0.5, 0.5, 0.5], dtype=np.float32)\n    std = np.array([0.5, 0.5, 0.5], dtype=np.float32)\n    image = image.astype(np.float32) / 255.0\n    return (image - mean) / std\n\ntv_train_transforms = T.Compose([\n    T.RandomResizedCrop((img_size, img_size), scale=(0.7, 1.0)),\n    T.RandomHorizontalFlip(),\n    T.ColorJitter(0.2, 0.2, 0.2),\n    T.Lambda(to_np_array),\n    T.Lambda(normalize),\n])\n\ntv_test_transforms = T.Compose([\n    T.Resize((img_size, img_size)),\n    T.Lambda(to_np_array),\n    T.Lambda(normalize),\n])\n\ndef get_transform(fn):\n    def wrapper(batch):\n        batch[\"image\"] = [\n            fn(pil_image) for pil_image in batch[\"image\"]\n        ]\n        # map label index between 0 - 19\n        batch[\"label\"] = [\n            labels_mapping[label] for label in batch[\"label\"]\n        ]\n        return batch\n    return wrapper\n\ntrain_transforms = get_transform(tv_train_transforms)\nval_transforms = get_transform(tv_test_transforms)\n\ntrain_dataset = train_dataset.with_transform(train_transforms)\nval_dataset = val_dataset.with_transform(val_transforms)\n\nseed = 12\ntrain_batch_size = 32\nval_batch_size = 2 * train_batch_size\n\ntrain_sampler = grain.IndexSampler(\n    len(train_dataset),\n    shuffle=True,\n    seed=seed,\n    shard_options=grain.NoSharding(),\n    num_epochs=1,\n)\n\nval_sampler = grain.IndexSampler(\n    len(val_dataset),\n    shuffle=False,\n    seed=seed,\n    shard_options=grain.NoSharding(),\n    num_epochs=1,\n)\n\ntrain_loader = grain.DataLoader(\n    data_source=train_dataset,\n    sampler=train_sampler,\n    worker_count=4,\n    worker_buffer_size=2,\n    operations=[\n        grain.Batch(train_batch_size, drop_remainder=True),\n    ]\n)\n\nval_loader = grain.DataLoader(\n    data_source=val_dataset,\n    sampler=val_sampler,\n    worker_count=4,\n    worker_buffer_size=2,\n    operations=[\n        grain.Batch(val_batch_size),\n    ]\n)\n```\n:::\n\n\n:::\n\n## Load packages\n\nPackage and module necessary for this section:\n\n::: {#1955b3f2 .cell execution_count=3}\n``` {.python .cell-code}\n# to define the model architecture\nfrom flax import nnx\n\n# to get callables from functions with fewer arguments\nfrom functools import partial\n```\n:::\n\n\n## Flax API\n\nFlax went through several APIs.\n\nThe initial `nn` API—now retired—got replaced in 2020 by the [Linen API](https://flax-linen.readthedocs.io/en/latest/), still available with the Flax package. In 2024, [they launched the NNX API](https://flax.readthedocs.io/en/latest/why.html).\n\nEach iteration has moved further from JAX and closer to Python, with a syntax increasingly similar to PyTorch.\n\nThe old Linen API is a stateless model framework similar to the Julia package [Lux.jl](https://github.com/LuxDL/Lux.jl). It follows a strict functional programming approach in which the parameters are separate from the model and are passed as inputs to the forward pass along with the data. This is much closer to the JAX sublanguage, more optimized, but restrictive and unpopular in the deep learning community and among Python users.\n\nBy contrast, the new NNX API is a stateful model framework similar to [PyTorch](https://github.com/pytorch/pytorch) and the older Julia package [Flux.jl](https://github.com/FluxML/Flux.jl): model parameters and optimizer state are stored within the model instance. Flax handles a lot of JAX's constraints under the hood, making the code more familiar to Python/PyTorch users, simpler, and more forgiving.\n\nWhile the Linen API still exists, new users are advised to learn the new NNX API.\n\n## Simple CNN\n\nWe will use [LeNet](https://en.wikipedia.org/wiki/LeNet)-5 [@lecun1998gradient] model, initially used on the [MNIST dataset](https://en.wikipedia.org/wiki/MNIST_database) by LeCun et al. [@lecun2010mnist]. We modify it to take three-channel images (RGB for colour images) instead of a single channel (black and white images as was the case in the MNIST) and have five categories as final output.\n\nThe architecture of this model is explained in details in [this kaggle post](https://www.kaggle.com/code/blurredmachine/lenet-architecture-a-complete-guide).\n\n::: {#a61933ae .cell execution_count=4}\n``` {.python .cell-code}\nclass CNN(nnx.Module):\n  \"\"\"An adapted LeNet-5 model.\"\"\"\n\n  def __init__(self, *, rngs: nnx.Rngs):\n    self.conv1 = nnx.Conv(3, 6, kernel_size=(5, 5), rngs=rngs)\n    self.max_pool = partial(nnx.max_pool, window_shape=(2, 2), strides=(2, 2))\n    self.conv2 = nnx.Conv(6, 16, kernel_size=(5, 5), rngs=rngs)\n    self.linear1 = nnx.Linear(3136, 120, rngs=rngs)\n    self.linear2 = nnx.Linear(120, 84, rngs=rngs)\n    self.linear3 = nnx.Linear(84, 5, rngs=rngs)\n\n  def __call__(self, x):\n    x = self.max_pool(nnx.relu(self.conv1(x)))\n    x = self.max_pool(nnx.relu(self.conv2(x)))\n    x = x.reshape(x.shape[0], -1)  # flatten\n    x = nnx.relu(self.linear1(x))\n    x = nnx.relu(self.linear2(x))\n    x = self.linear3(x)\n    return x\n\n# Instantiate the model.\nmodel = CNN(rngs=nnx.Rngs(0))\n\n# Visualize it.\nnnx.display(model)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n2025-04-10 02:12:21.237918: W external/xla/xla/service/platform_util.cc:205] unable to create StreamExecutor for CUDA:0: : CUDA_ERROR_OUT_OF_MEMORY: out of memory\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">XlaRuntimeError</span>                           Traceback (most recent call last)\n    <span class=\"ansi-bright-red-fg\">[... skipping hidden 1 frame]</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/jax/_src/xla_bridge.py:1021</span>, in <span class=\"ansi-cyan-fg\">_init_backend</span><span class=\"ansi-bright-blue-fg\">(platform)</span>\n<span class=\"ansi-bright-green-fg\">   1020</span> <span class=\"ansi-bright-white-fg\">logger</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">debug</span><span class=\"ansi-bright-white-fg\">(</span><span style=\"color:rgb(215,215,135)\">\"</span><span style=\"color:rgb(215,215,135)\">Initializing backend </span><span style=\"color:rgb(215,215,135)\">'</span><span style=\"color:rgb(215,215,135)\">%s</span><span style=\"color:rgb(215,215,135)\">'</span><span style=\"color:rgb(215,215,135)\">\"</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">platform</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">-&gt; </span><span class=\"ansi-bright-green-fg\">1021</span> <span class=\"ansi-bright-white-fg\">backend</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">registration</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">factory</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n<span class=\"ansi-bright-green-fg\">   1022</span> <span style=\"color:rgb(138,138,138)\"># TODO(skye): consider raising more descriptive errors directly from backend</span>\n<span class=\"ansi-bright-green-fg\">   1023</span> <span style=\"color:rgb(138,138,138)\"># factories instead of returning None.</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/jax/_src/xla_bridge.py:713</span>, in <span class=\"ansi-cyan-fg\">register_plugin.&lt;locals&gt;.factory</span><span class=\"ansi-bright-blue-fg\">()</span>\n<span class=\"ansi-bright-green-fg\">    712</span> <span style=\"color:rgb(95,215,255)\">if</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">distributed</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">global_state</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">client</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">is</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(95,215,255)\">None</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">--&gt; </span><span class=\"ansi-bright-green-fg\">713</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(95,215,255)\">return</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">xla_client</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">make_c_api_client</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">plugin_name</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">updated_options</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(95,215,255)\" class=\"ansi-yellow-bg\">None</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n<span class=\"ansi-bright-green-fg\">    715</span> <span class=\"ansi-bright-white-fg\">distribute_options</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">{</span>\n<span class=\"ansi-bright-green-fg\">    716</span> <span class=\"ansi-bright-white-fg\">    </span><span style=\"color:rgb(215,215,135)\">'</span><span style=\"color:rgb(215,215,135)\">node_id</span><span style=\"color:rgb(215,215,135)\">'</span><span class=\"ansi-bright-white-fg\">:</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">distributed</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">global_state</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">process_id</span><span class=\"ansi-bright-white-fg\">,</span>\n<span class=\"ansi-bright-green-fg\">    717</span> <span class=\"ansi-bright-white-fg\">    </span><span style=\"color:rgb(215,215,135)\">'</span><span style=\"color:rgb(215,215,135)\">num_nodes</span><span style=\"color:rgb(215,215,135)\">'</span><span class=\"ansi-bright-white-fg\">:</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">distributed</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">global_state</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">num_processes</span><span class=\"ansi-bright-white-fg\">,</span>\n<span class=\"ansi-bright-green-fg\">    718</span> <span class=\"ansi-bright-white-fg\">}</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/jaxlib/xla_client.py:207</span>, in <span class=\"ansi-cyan-fg\">make_c_api_client</span><span class=\"ansi-bright-blue-fg\">(plugin_name, options, distributed_client)</span>\n<span class=\"ansi-bright-green-fg\">    206</span> <span class=\"ansi-bright-white-fg\">  </span><span class=\"ansi-bright-white-fg\">options</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">{</span><span class=\"ansi-bright-white-fg\">}</span>\n<span class=\"ansi-bright-green-fg\">--&gt; </span><span class=\"ansi-bright-green-fg\">207</span> <span style=\"color:rgb(95,215,255)\">return</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">_xla</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">get_c_api_client</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">plugin_name</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">options</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">distributed_client</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">XlaRuntimeError</span>: INTERNAL: no supported devices found for platform CUDA\n\nDuring handling of the above exception, another exception occurred:\n\n<span class=\"ansi-bright-red-fg\">RuntimeError</span>                              Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[3]</span><span class=\"ansi-green-fg\">, line 22</span>\n<span class=\"ansi-bright-green-fg\">     19</span> <span class=\"ansi-bright-white-fg\">    </span><span style=\"color:rgb(95,215,255)\">return</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">x</span>\n<span class=\"ansi-bright-green-fg\">     21</span> <span style=\"color:rgb(138,138,138)\"># Instantiate the model.</span>\n<span class=\"ansi-bright-green-fg\">---&gt; </span><span class=\"ansi-bright-green-fg\">22</span> <span class=\"ansi-bright-white-fg\">model</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">CNN</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">rngs</span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">nnx</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">Rngs</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">0</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">     24</span> <span style=\"color:rgb(138,138,138)\"># Visualize it.</span>\n<span class=\"ansi-bright-green-fg\">     25</span> <span class=\"ansi-bright-white-fg\">nnx</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">display</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">model</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/flax/nnx/object.py:79</span>, in <span class=\"ansi-cyan-fg\">ObjectMeta.__call__</span><span class=\"ansi-bright-blue-fg\">(cls, *args, **kwargs)</span>\n<span class=\"ansi-bright-green-fg\">     78</span> <span style=\"color:rgb(95,215,255)\">def</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,215,0)\">__call__</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">cls</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg\">args</span><span class=\"ansi-bright-white-fg\">:</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">Any</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg\">kwargs</span><span class=\"ansi-bright-white-fg\">:</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">Any</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">-</span><span style=\"color:rgb(255,95,135)\">&gt;</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">Any</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">---&gt; </span><span class=\"ansi-bright-green-fg\">79</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(95,215,255)\">return</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">_graph_node_meta_call</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">cls</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">args</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">kwargs</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/flax/nnx/object.py:88</span>, in <span class=\"ansi-cyan-fg\">_graph_node_meta_call</span><span class=\"ansi-bright-blue-fg\">(cls, *args, **kwargs)</span>\n<span class=\"ansi-bright-green-fg\">     86</span> <span class=\"ansi-bright-white-fg\">node</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">cls</span><span style=\"color:rgb(255,95,135)\">.</span><span style=\"color:rgb(175,215,0)\">__new__</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">cls</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg\">args</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg\">kwargs</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">     87</span> <span class=\"ansi-bright-white-fg\">vars</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">node</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">[</span><span style=\"color:rgb(215,215,135)\">'</span><span style=\"color:rgb(215,215,135)\">_object__state</span><span style=\"color:rgb(215,215,135)\">'</span><span class=\"ansi-bright-white-fg\">]</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">ObjectState</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">---&gt; </span><span class=\"ansi-bright-green-fg\">88</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">cls</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">_object_meta_construct</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">node</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">args</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">kwargs</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n<span class=\"ansi-bright-green-fg\">     90</span> <span style=\"color:rgb(95,215,255)\">return</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">node</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/flax/nnx/object.py:82</span>, in <span class=\"ansi-cyan-fg\">ObjectMeta._object_meta_construct</span><span class=\"ansi-bright-blue-fg\">(cls, self, *args, **kwargs)</span>\n<span class=\"ansi-bright-green-fg\">     81</span> <span style=\"color:rgb(95,215,255)\">def</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,215,0)\">_object_meta_construct</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">cls</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">self</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg\">args</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg\">kwargs</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">---&gt; </span><span class=\"ansi-bright-green-fg\">82</span> <span class=\"ansi-bright-white-fg\">  </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">self</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span style=\"color:rgb(175,215,0)\" class=\"ansi-yellow-bg\">__init__</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">args</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">kwargs</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/flax/nnx/rnglib.py:186</span>, in <span class=\"ansi-cyan-fg\">Rngs.__init__</span><span class=\"ansi-bright-blue-fg\">(self, default, **rngs)</span>\n<span class=\"ansi-bright-green-fg\">    184</span> <span style=\"color:rgb(95,215,255)\">for</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">name</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">value</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">in</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">rngs</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">items</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">    185</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(95,215,255)\">if</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">isinstance</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">value</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">int</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">--&gt; </span><span class=\"ansi-bright-green-fg\">186</span> <span class=\"ansi-bright-white-fg\">    </span><span class=\"ansi-bright-white-fg\">key</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">jax</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">random</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">key</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">value</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n<span class=\"ansi-bright-green-fg\">    187</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(95,215,255)\">elif</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">isinstance</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">value</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">jax</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">Array</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">    188</span> <span class=\"ansi-bright-white-fg\">    </span><span style=\"color:rgb(95,215,255)\">if</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">value</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">dtype</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">==</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">jnp</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">uint32</span><span class=\"ansi-bright-white-fg\">:</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/jax/_src/random.py:218</span>, in <span class=\"ansi-cyan-fg\">key</span><span class=\"ansi-bright-blue-fg\">(seed, impl)</span>\n<span class=\"ansi-bright-green-fg\">    200</span> <span style=\"color:rgb(95,215,255)\">def</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,215,0)\">key</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">seed</span><span class=\"ansi-bright-white-fg\">:</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">int</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">|</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">ArrayLike</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg\">,</span>\n<span class=\"ansi-bright-green-fg\">    201</span> <span class=\"ansi-bright-white-fg\">        </span><span class=\"ansi-bright-white-fg\">impl</span><span class=\"ansi-bright-white-fg\">:</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">PRNGSpecDesc</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">|</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(95,215,255)\">None</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(95,215,255)\">None</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">-</span><span style=\"color:rgb(255,95,135)\">&gt;</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">Array</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">    202</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(215,215,135)\">\"\"\"Create a pseudo-random number generator (PRNG) key given an integer seed.</span>\n<span class=\"ansi-bright-green-fg\">    203</span> \n<span class=\"ansi-bright-green-fg\">    204</span> <span style=\"color:rgb(215,215,135)\">  The result is a scalar array containing a key, whose dtype indicates</span>\n<span class=\"ansi-bright-green-fg\">   (...)</span><span class=\"ansi-bright-green-fg\">    216</span> <span style=\"color:rgb(215,215,135)\">    and ``fold_in``.</span>\n<span class=\"ansi-bright-green-fg\">    217</span> <span style=\"color:rgb(215,215,135)\">  \"\"\"</span>\n<span class=\"ansi-bright-green-fg\">--&gt; </span><span class=\"ansi-bright-green-fg\">218</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(95,215,255)\">return</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">_key</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">key</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">seed</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">impl</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/jax/_src/random.py:198</span>, in <span class=\"ansi-cyan-fg\">_key</span><span class=\"ansi-bright-blue-fg\">(ctor_name, seed, impl_spec)</span>\n<span class=\"ansi-bright-green-fg\">    194</span> <span style=\"color:rgb(95,215,255)\">if</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">np</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">ndim</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">seed</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">    195</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(95,215,255)\">raise</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,215,0)\">TypeError</span><span class=\"ansi-bright-white-fg\">(</span>\n<span class=\"ansi-bright-green-fg\">    196</span> <span class=\"ansi-bright-white-fg\">      </span><span style=\"color:rgb(215,215,135)\">f</span><span style=\"color:rgb(215,215,135)\">\"</span><span style=\"color:rgb(215,215,135)\">{</span><span class=\"ansi-bright-white-fg\">ctor_name</span><span style=\"color:rgb(215,215,135)\">}</span><span style=\"color:rgb(215,215,135)\"> accepts a scalar seed, but was given an array of </span><span style=\"color:rgb(215,215,135)\">\"</span>\n<span class=\"ansi-bright-green-fg\">    197</span> <span class=\"ansi-bright-white-fg\">      </span><span style=\"color:rgb(215,215,135)\">f</span><span style=\"color:rgb(215,215,135)\">\"</span><span style=\"color:rgb(215,215,135)\">shape </span><span style=\"color:rgb(215,215,135)\">{</span><span class=\"ansi-bright-white-fg\">np</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">shape</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">seed</span><span class=\"ansi-bright-white-fg\">)</span><span style=\"color:rgb(215,215,135)\">}</span><span style=\"color:rgb(215,215,135)\"> != (). Use jax.vmap for batching</span><span style=\"color:rgb(215,215,135)\">\"</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">--&gt; </span><span class=\"ansi-bright-green-fg\">198</span> <span style=\"color:rgb(95,215,255)\">return</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">prng</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">random_seed</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">seed</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">impl</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">impl</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/jax/_src/prng.py:529</span>, in <span class=\"ansi-cyan-fg\">random_seed</span><span class=\"ansi-bright-blue-fg\">(seeds, impl)</span>\n<span class=\"ansi-bright-green-fg\">    524</span> <span style=\"color:rgb(95,215,255)\">def</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,215,0)\">random_seed</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">seeds</span><span class=\"ansi-bright-white-fg\">:</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">int</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">|</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">typing</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">ArrayLike</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">impl</span><span class=\"ansi-bright-white-fg\">:</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">PRNGImpl</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">-</span><span style=\"color:rgb(255,95,135)\">&gt;</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">PRNGKeyArray</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">    525</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(138,138,138)\"># Avoid overflow error in X32 mode by first converting ints to int64.</span>\n<span class=\"ansi-bright-green-fg\">    526</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(138,138,138)\"># This breaks JIT invariance for large ints, but supports the common</span>\n<span class=\"ansi-bright-green-fg\">    527</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(138,138,138)\"># use-case of instantiating with Python hashes in X32 mode.</span>\n<span class=\"ansi-bright-green-fg\">    528</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(95,215,255)\">if</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">isinstance</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">seeds</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">int</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">--&gt; </span><span class=\"ansi-bright-green-fg\">529</span> <span class=\"ansi-bright-white-fg\">    </span><span class=\"ansi-bright-white-fg\">seeds_arr</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">jnp</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">asarray</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">np</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">int64</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">seeds</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n<span class=\"ansi-bright-green-fg\">    530</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(95,215,255)\">else</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">    531</span> <span class=\"ansi-bright-white-fg\">    </span><span class=\"ansi-bright-white-fg\">seeds_arr</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">jnp</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">asarray</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">seeds</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/jax/_src/numpy/lax_numpy.py:5820</span>, in <span class=\"ansi-cyan-fg\">asarray</span><span class=\"ansi-bright-blue-fg\">(a, dtype, order, copy, device)</span>\n<span class=\"ansi-bright-green-fg\">   5818</span> <span style=\"color:rgb(95,215,255)\">if</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">dtype</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">is</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">not</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(95,215,255)\">None</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">   5819</span> <span class=\"ansi-bright-white-fg\">  </span><span class=\"ansi-bright-white-fg\">dtype</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">dtypes</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">canonicalize_dtype</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">dtype</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">allow_extended_dtype</span><span style=\"color:rgb(255,95,135)\">=</span><span style=\"color:rgb(95,215,255)\">True</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(138,138,138)\"># type: ignore[assignment]</span>\n<span class=\"ansi-bright-green-fg\">-&gt; </span><span class=\"ansi-bright-green-fg\">5820</span> <span style=\"color:rgb(95,215,255)\">return</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">array</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">a</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">dtype</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">dtype</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">copy</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">bool</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">copy</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">order</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">order</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">device</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">device</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/jax/_src/numpy/lax_numpy.py:5653</span>, in <span class=\"ansi-cyan-fg\">array</span><span class=\"ansi-bright-blue-fg\">(object, dtype, copy, order, ndmin, device)</span>\n<span class=\"ansi-bright-green-fg\">   5651</span> <span style=\"color:rgb(95,215,255)\">else</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">   5652</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(95,215,255)\">raise</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,215,0)\">TypeError</span><span class=\"ansi-bright-white-fg\">(</span><span style=\"color:rgb(215,215,135)\">f</span><span style=\"color:rgb(215,215,135)\">\"</span><span style=\"color:rgb(215,215,135)\">Unexpected input type for array: </span><span style=\"color:rgb(215,215,135)\">{</span><span class=\"ansi-bright-white-fg\">type</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">object</span><span class=\"ansi-bright-white-fg\">)</span><span style=\"color:rgb(215,215,135)\">}</span><span style=\"color:rgb(215,215,135)\">\"</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">-&gt; </span><span class=\"ansi-bright-green-fg\">5653</span> <span class=\"ansi-bright-white-fg\">out_array</span><span class=\"ansi-bright-white-fg\">:</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">Array</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">lax_internal</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">_convert_element_type</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span>\n<span class=\"ansi-bright-green-fg\">   5654</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">    </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">out</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">dtype</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">weak_type</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">weak_type</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">sharding</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">sharding</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n<span class=\"ansi-bright-green-fg\">   5655</span> <span style=\"color:rgb(95,215,255)\">if</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">ndmin</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">&gt;</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">ndim</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">out_array</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">   5656</span> <span class=\"ansi-bright-white-fg\">  </span><span class=\"ansi-bright-white-fg\">out_array</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">lax</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">expand_dims</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">out_array</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">range</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">ndmin</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">-</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">ndim</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">out_array</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/jax/_src/lax/lax.py:612</span>, in <span class=\"ansi-cyan-fg\">_convert_element_type</span><span class=\"ansi-bright-blue-fg\">(operand, new_dtype, weak_type, sharding, warn_on_complex_to_real_cast)</span>\n<span class=\"ansi-bright-green-fg\">    610</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(95,215,255)\">return</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">operand</span>\n<span class=\"ansi-bright-green-fg\">    611</span> <span style=\"color:rgb(95,215,255)\">else</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">--&gt; </span><span class=\"ansi-bright-green-fg\">612</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(95,215,255)\">return</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">convert_element_type_p</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">bind</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span>\n<span class=\"ansi-bright-green-fg\">    613</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">      </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">operand</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">new_dtype</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">new_dtype</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">weak_type</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">bool</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">weak_type</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span>\n<span class=\"ansi-bright-green-fg\">    614</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">      </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">sharding</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">=</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">sharding</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/jax/_src/core.py:463</span>, in <span class=\"ansi-cyan-fg\">Primitive.bind</span><span class=\"ansi-bright-blue-fg\">(self, *args, **params)</span>\n<span class=\"ansi-bright-green-fg\">    461</span> <span class=\"ansi-bright-white-fg\">trace_ctx</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">set_trace</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">eval_trace</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">    462</span> <span style=\"color:rgb(95,215,255)\">try</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">--&gt; </span><span class=\"ansi-bright-green-fg\">463</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(95,215,255)\">return</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">self</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">bind_with_trace</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">prev_trace</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">args</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">params</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n<span class=\"ansi-bright-green-fg\">    464</span> <span style=\"color:rgb(95,215,255)\">finally</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">    465</span> <span class=\"ansi-bright-white-fg\">  </span><span class=\"ansi-bright-white-fg\">trace_ctx</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">set_trace</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">prev_trace</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/jax/_src/lax/lax.py:3254</span>, in <span class=\"ansi-cyan-fg\">_convert_element_type_bind_with_trace</span><span class=\"ansi-bright-blue-fg\">(trace, args, params)</span>\n<span class=\"ansi-bright-green-fg\">   3252</span> <span style=\"color:rgb(95,215,255)\">def</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,215,0)\">_convert_element_type_bind_with_trace</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">trace</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">args</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">params</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">   3253</span> <span class=\"ansi-bright-white-fg\">  </span><span class=\"ansi-bright-white-fg\">sharding</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">params</span><span class=\"ansi-bright-white-fg\">[</span><span style=\"color:rgb(215,215,135)\">'</span><span style=\"color:rgb(215,215,135)\">sharding</span><span style=\"color:rgb(215,215,135)\">'</span><span class=\"ansi-bright-white-fg\">]</span>\n<span class=\"ansi-bright-green-fg\">-&gt; </span><span class=\"ansi-bright-green-fg\">3254</span> <span class=\"ansi-bright-white-fg\">  </span><span class=\"ansi-bright-white-fg\">operand</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">core</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">Primitive</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">bind_with_trace</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">convert_element_type_p</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">trace</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">args</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">params</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n<span class=\"ansi-bright-green-fg\">   3255</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(95,215,255)\">if</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">sharding</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">is</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">not</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(95,215,255)\">None</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">and</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">not</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">config</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">sharding_in_types</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">value</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">   3256</span> <span class=\"ansi-bright-white-fg\">    </span><span style=\"color:rgb(95,215,255)\">with</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">core</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">set_current_trace</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">trace</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">:</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/jax/_src/core.py:468</span>, in <span class=\"ansi-cyan-fg\">Primitive.bind_with_trace</span><span class=\"ansi-bright-blue-fg\">(self, trace, args, params)</span>\n<span class=\"ansi-bright-green-fg\">    467</span> <span style=\"color:rgb(95,215,255)\">def</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,215,0)\">bind_with_trace</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">self</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">trace</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">args</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">params</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">--&gt; </span><span class=\"ansi-bright-green-fg\">468</span> <span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(95,215,255)\">return</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">trace</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">process_primitive</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">self</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">args</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">params</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/jax/_src/core.py:954</span>, in <span class=\"ansi-cyan-fg\">EvalTrace.process_primitive</span><span class=\"ansi-bright-blue-fg\">(self, primitive, args, params)</span>\n<span class=\"ansi-bright-green-fg\">    952</span> <span class=\"ansi-bright-white-fg\">      </span><span style=\"color:rgb(95,215,255)\">return</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">primitive</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">bind_with_trace</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">arg</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">_trace</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">args</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">params</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">    953</span> <span class=\"ansi-bright-white-fg\">check_eval_args</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">args</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">--&gt; </span><span class=\"ansi-bright-green-fg\">954</span> <span style=\"color:rgb(95,215,255)\">return</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">primitive</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">impl</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">args</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">*</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">params</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/jax/_src/dispatch.py:89</span>, in <span class=\"ansi-cyan-fg\">apply_primitive</span><span class=\"ansi-bright-blue-fg\">(prim, *args, **params)</span>\n<span class=\"ansi-bright-green-fg\">     87</span> <span class=\"ansi-bright-white-fg\">prev</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">lib</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">jax_jit</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">swap_thread_local_state_disable_jit</span><span class=\"ansi-bright-white-fg\">(</span><span style=\"color:rgb(95,215,255)\">False</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">     88</span> <span style=\"color:rgb(95,215,255)\">try</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">---&gt; </span><span class=\"ansi-bright-green-fg\">89</span> <span class=\"ansi-bright-white-fg\">  </span><span class=\"ansi-bright-white-fg\">outs</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">fun</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">args</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n<span class=\"ansi-bright-green-fg\">     90</span> <span style=\"color:rgb(95,215,255)\">finally</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">     91</span> <span class=\"ansi-bright-white-fg\">  </span><span class=\"ansi-bright-white-fg\">lib</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">jax_jit</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">swap_thread_local_state_disable_jit</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">prev</span><span class=\"ansi-bright-white-fg\">)</span>\n\n    <span class=\"ansi-bright-red-fg\">[... skipping hidden 13 frame]</span>\n\n<span class=\"ansi-bright-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/parvus/prog/mint/ai/jxai/.venv/lib/python3.12/site-packages/jax/_src/xla_bridge.py:951</span>, in <span class=\"ansi-cyan-fg\">backends</span><span class=\"ansi-bright-blue-fg\">()</span>\n<span class=\"ansi-bright-green-fg\">    949</span> <span class=\"ansi-bright-white-fg\">      </span><span style=\"color:rgb(95,215,255)\">else</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">    950</span> <span class=\"ansi-bright-white-fg\">        </span><span class=\"ansi-bright-white-fg\">err_msg</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">+</span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(215,215,135)\">\"</span><span style=\"color:rgb(215,215,135)\"> (you may need to uninstall the failing plugin package, or set JAX_PLATFORMS=cpu to skip this backend.)</span><span style=\"color:rgb(215,215,135)\">\"</span>\n<span class=\"ansi-bright-green-fg\">--&gt; </span><span class=\"ansi-bright-green-fg\">951</span> <span class=\"ansi-bright-white-fg\">      </span><span style=\"color:rgb(95,215,255)\">raise</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,215,0)\">RuntimeError</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">err_msg</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">    953</span> <span style=\"color:rgb(95,215,255)\">assert</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">_default_backend</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">is</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">not</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(95,215,255)\">None</span>\n<span class=\"ansi-bright-green-fg\">    954</span> <span style=\"color:rgb(95,215,255)\">if</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">not</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">config</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">jax_platforms</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">value</span><span class=\"ansi-bright-white-fg\">:</span>\n\n<span class=\"ansi-bright-red-fg\">RuntimeError</span>: Unable to initialize backend 'cuda': INTERNAL: no supported devices found for platform CUDA (you may need to uninstall the failing plugin package, or set JAX_PLATFORMS=cpu to skip this backend.)</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#798155f3 .cell execution_count=5}\n``` {.python .cell-code}\nimport jax.numpy as jnp  # JAX NumPy\n\ny = model(jnp.ones((4, 224, 224, 3)))\ny\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[4]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-bright-green-fg\">      1</span> <span style=\"color:rgb(255,95,135)\">import</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">jax</span><span class=\"ansi-bright-white-fg\">.</span><span class=\"ansi-bright-white-fg\">numpy</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(95,215,255)\">as</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">jnp</span><span class=\"ansi-bright-white-fg\">  </span><span style=\"color:rgb(138,138,138)\"># JAX NumPy</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">3</span> <span class=\"ansi-bright-white-fg\">y</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">model</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">jnp</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">ones</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">(</span><span style=\"color:rgb(175,135,255)\">4</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">224</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">224</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">3</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">      4</span> <span class=\"ansi-bright-white-fg\">y</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6e69b089 .cell execution_count=6}\n``` {.python .cell-code}\nimport optax\n\nlearning_rate = 0.005\nmomentum = 0.9\n\noptimizer = nnx.Optimizer(model, optax.adamw(learning_rate, momentum))\nmetrics = nnx.MultiMetric(\n  accuracy=nnx.metrics.Accuracy(),\n  loss=nnx.metrics.Average('loss'),\n)\n\nnnx.display(optimizer)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[5]</span><span class=\"ansi-green-fg\">, line 6</span>\n<span class=\"ansi-bright-green-fg\">      3</span> <span class=\"ansi-bright-white-fg\">learning_rate</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">0.005</span>\n<span class=\"ansi-bright-green-fg\">      4</span> <span class=\"ansi-bright-white-fg\">momentum</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">0.9</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">6</span> <span class=\"ansi-bright-white-fg\">optimizer</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">nnx</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">Optimizer</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">model</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">optax</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">adamw</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">learning_rate</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">momentum</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">      7</span> <span class=\"ansi-bright-white-fg\">metrics</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">nnx</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">MultiMetric</span><span class=\"ansi-bright-white-fg\">(</span>\n<span class=\"ansi-bright-green-fg\">      8</span> <span class=\"ansi-bright-white-fg\">  </span><span class=\"ansi-bright-white-fg\">accuracy</span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\">nnx</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">metrics</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">Accuracy</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">,</span>\n<span class=\"ansi-bright-green-fg\">      9</span> <span class=\"ansi-bright-white-fg\">  </span><span class=\"ansi-bright-white-fg\">loss</span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\">nnx</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">metrics</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">Average</span><span class=\"ansi-bright-white-fg\">(</span><span style=\"color:rgb(215,215,135)\">'</span><span style=\"color:rgb(215,215,135)\">loss</span><span style=\"color:rgb(215,215,135)\">'</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">,</span>\n<span class=\"ansi-bright-green-fg\">     10</span> <span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">     12</span> <span class=\"ansi-bright-white-fg\">nnx</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">display</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">optimizer</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'model' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "fl_cnn_files"
    ],
    "filters": [],
    "includes": {}
  }
}