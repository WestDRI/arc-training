{
  "hash": "1d31bac94e7ff9c5a50121e839c4494c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Automatic differentiation\naliases:\n  - autograd.html\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nPyTorch has [automatic differentiation](https://en.wikipedia.org/wiki/Automatic_differentiation) capabilities—meaning that it can track all the operations performed on tensors during the forward pass and compute all the gradients automatically for the backpropagation—thanks to its package [torch.autograd](https://pytorch.org/docs/stable/autograd.html).\n\nLet's have a look at this.\n\n:::\n\n## Some definitions\n\n**Derivative of a function:** \\\nRate of change of a function with a single variable w.r.t. its variable.\n\n**Partial derivative:** \\\nRate of change of a function with multiple variables w.r.t. one variable while other variables are considered as constants.\n\n**Gradient:** \\\nVector of partial derivatives of function with several variables.\n\n**Differentiation:** \\\nCalculation of the derivatives of a function.\n\n**Chain rule:** \\\nFormula to calculate the derivatives of composite functions.\n\n**Automatic differentiation:** \\\nAutomatic computation of partial derivatives by algorithms.\n\n## Backpropagation\n\nFirst, we need to talk about backpropagation: the backward pass following each forward pass and which adjusts the model's parameters to minimize the output of the loss function.\n\nThe last 2 videos of [3Blue1Brown](https://www.3blue1brown.com/) neural network series explains backpropagation and its manual calculation very well.\n\n### What is backpropagation?\n\n*14 min video.*\n\n{{< video https://www.youtube.com/embed/Ilg3gGewQ5U >}}\n\n:::{.note}\n\nThere is one minor terminological error in this video: they call the use of mini-batches *stochastic gradient descent*. In fact, this is called *mini-batch gradient descent*. Stochastic gradient descent uses a single example at each iteration.\n\n:::\n\n### How does backpropagation work?\n\n*10 min video.*\n\n{{< video https://www.youtube.com/embed/tIeHLnjs5U8 >}}\n\n## Automatic differentiation\n\nIf we had to do all this manually, it would be absolute hell. Thankfully, many tools—including PyTorch—can do this automatically.\n\n### Tracking computations\n\nFor the automation of the calculation of all those derivatives through chain rules, PyTorch needs to track computations during the forward pass.\n\nPyTorch does not however track all the computations on all the tensors (this would be extremely memory intensive!). To start tracking computations on a vector, set the `requires_grad` attribute to `True`:\n\n::: {#2da9718f .cell execution_count=1}\n``` {.python .cell-code}\nimport torch\n\nx = torch.ones(2, 4, requires_grad=True)\nx\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[1]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span style=\"color:rgb(255,95,135)\">import</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">torch</span>\n<span class=\"ansi-bright-green-fg\">      3</span> <span class=\"ansi-bright-white-fg\">x</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">torch</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">ones</span><span class=\"ansi-bright-white-fg\">(</span><span style=\"color:rgb(175,135,255)\">2</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">4</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">requires_grad</span><span style=\"color:rgb(255,95,135)\">=</span><span style=\"color:rgb(95,215,255)\">True</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">      4</span> <span class=\"ansi-bright-white-fg\">x</span>\n\n<span class=\"ansi-bright-red-fg\">ModuleNotFoundError</span>: No module named 'torch'</pre>\n```\n:::\n\n:::\n:::\n\n\n#### The `grad_fun` attribute\n\nWhenever a tensor is created by an operation involving a tracked tensor, it has a `grad_fun` attribute:\n\n::: {#d94f621e .cell execution_count=2}\n``` {.python .cell-code}\ny = x + 1\ny\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[2]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg\">y</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">x</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">+</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">1</span>\n<span class=\"ansi-bright-green-fg\">      2</span> <span class=\"ansi-bright-white-fg\">y</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'x' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5f428138 .cell execution_count=3}\n``` {.python .cell-code}\ny.grad_fn\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[3]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">y</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">grad_fn</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'y' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n#### Judicious tracking\n\nYou don't want to track more than is necessary. There are multiple ways to avoid tracking what you don't want.\n\nYou can stop tracking computations on a tensor with the method `detach`:\n\n::: {#dfcc55be .cell execution_count=4}\n``` {.python .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[4]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">x</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'x' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#733ca85e .cell execution_count=5}\n``` {.python .cell-code}\nx.detach_()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[5]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">x</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">detach_</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'x' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nYou can change its `requires_grad` flag:\n\n::: {#b6816c51 .cell execution_count=6}\n``` {.python .cell-code}\nx = torch.zeros(2, 3, requires_grad=True)\nx\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[6]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg\">x</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">torch</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">zeros</span><span class=\"ansi-bright-white-fg\">(</span><span style=\"color:rgb(175,135,255)\">2</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">3</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">requires_grad</span><span style=\"color:rgb(255,95,135)\">=</span><span style=\"color:rgb(95,215,255)\">True</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">      2</span> <span class=\"ansi-bright-white-fg\">x</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4b017a92 .cell execution_count=7}\n``` {.python .cell-code}\nx.requires_grad_(False)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[7]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">x</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">requires_grad_</span><span class=\"ansi-bright-white-fg\">(</span><span style=\"color:rgb(95,215,255)\">False</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'x' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nAlternatively, you can wrap any code you don't want to track under `with torch.no_grad()`:\n\n::: {#462f4bfc .cell execution_count=8}\n``` {.python .cell-code}\nx = torch.ones(2, 4, requires_grad=True)\n\nwith torch.no_grad():\n    y = x + 1\n\ny\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[8]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg\">x</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">torch</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">ones</span><span class=\"ansi-bright-white-fg\">(</span><span style=\"color:rgb(175,135,255)\">2</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">4</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">requires_grad</span><span style=\"color:rgb(255,95,135)\">=</span><span style=\"color:rgb(95,215,255)\">True</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">      3</span> <span style=\"color:rgb(95,215,255)\">with</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">torch</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">no_grad</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">:</span>\n<span class=\"ansi-bright-green-fg\">      4</span> <span class=\"ansi-bright-white-fg\">    </span><span class=\"ansi-bright-white-fg\">y</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">x</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">+</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">1</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n:::{.note}\n\nCompare this with what we just did above.\n\n:::\n\n### Calculating gradients\n\nLet's calculate gradients manually, then use autograd, in a very simple case: imagine that $x$, $y$, and $z$ are tensors containing the parameters of a model and that the error $e$ could be calculated with the equation:\n\n$$e=2x^4-y^3+3z^2$$\n\n#### Manual derivative calculation\n\nLet's see how we would do this manually.\n\nFirst, we need the model parameters tensors:\n\n::: {#deb2a139 .cell execution_count=9}\n``` {.python .cell-code}\nx = torch.tensor([1., 2.])\ny = torch.tensor([3., 4.])\nz = torch.tensor([5., 6.])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[9]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg\">x</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">torch</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">tensor</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">[</span><span style=\"color:rgb(175,135,255)\">1.</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">2.</span><span class=\"ansi-bright-white-fg\">]</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">      2</span> <span class=\"ansi-bright-white-fg\">y</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">torch</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">tensor</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">[</span><span style=\"color:rgb(175,135,255)\">3.</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">4.</span><span class=\"ansi-bright-white-fg\">]</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">      3</span> <span class=\"ansi-bright-white-fg\">z</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">torch</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">tensor</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">[</span><span style=\"color:rgb(175,135,255)\">5.</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">6.</span><span class=\"ansi-bright-white-fg\">]</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nWe calculate $e$ following the above equation:\n\n::: {#6eacd4d7 .cell execution_count=10}\n``` {.python .cell-code}\ne = 2*x**4 - y**3 + 3*z**2\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[10]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg\">e</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">2</span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">x</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(175,135,255)\">4</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">-</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">y</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(175,135,255)\">3</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">+</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">3</span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg\">z</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(175,135,255)\">2</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'x' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe gradients of the error $e$ w.r.t. the parameters $x$, $y$, and $z$ are:\n\n$$\\frac{de}{dx}=8x^3$$\n$$\\frac{de}{dy}=-3y^2$$\n$$\\frac{de}{dz}=6z$$\n\nWe can calculate them with:\n\n::: {#2a6318e1 .cell execution_count=11}\n``` {.python .cell-code}\ngradient_x = 8*x**3\ngradient_x\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[11]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg\">gradient_x</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">8</span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">x</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(175,135,255)\">3</span>\n<span class=\"ansi-bright-green-fg\">      2</span> <span class=\"ansi-bright-white-fg\">gradient_x</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'x' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b4bfa4e3 .cell execution_count=12}\n``` {.python .cell-code}\ngradient_y = -3*y**2\ngradient_y\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[12]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg\">gradient_y</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">-</span><span style=\"color:rgb(175,135,255)\">3</span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">y</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(175,135,255)\">2</span>\n<span class=\"ansi-bright-green-fg\">      2</span> <span class=\"ansi-bright-white-fg\">gradient_y</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'y' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#1fc7a4e8 .cell execution_count=13}\n``` {.python .cell-code}\ngradient_z = 6*z\ngradient_z\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[13]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg\">gradient_z</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">6</span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">z</span>\n<span class=\"ansi-bright-green-fg\">      2</span> <span class=\"ansi-bright-white-fg\">gradient_z</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'z' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n#### Automatic derivative calculation\n\nFor this method, we need to define our model parameters with `requires_grad` set to `True`:\n\n::: {#422943eb .cell execution_count=14}\n``` {.python .cell-code}\nx = torch.tensor([1., 2.], requires_grad=True)\ny = torch.tensor([3., 4.], requires_grad=True)\nz = torch.tensor([5., 6.], requires_grad=True)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[14]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg\">x</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">torch</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">tensor</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">[</span><span style=\"color:rgb(175,135,255)\">1.</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">2.</span><span class=\"ansi-bright-white-fg\">]</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">requires_grad</span><span style=\"color:rgb(255,95,135)\">=</span><span style=\"color:rgb(95,215,255)\">True</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">      2</span> <span class=\"ansi-bright-white-fg\">y</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">torch</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">tensor</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">[</span><span style=\"color:rgb(175,135,255)\">3.</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">4.</span><span class=\"ansi-bright-white-fg\">]</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">requires_grad</span><span style=\"color:rgb(255,95,135)\">=</span><span style=\"color:rgb(95,215,255)\">True</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">      3</span> <span class=\"ansi-bright-white-fg\">z</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">torch</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">tensor</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">[</span><span style=\"color:rgb(175,135,255)\">5.</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">6.</span><span class=\"ansi-bright-white-fg\">]</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">requires_grad</span><span style=\"color:rgb(255,95,135)\">=</span><span style=\"color:rgb(95,215,255)\">True</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'torch' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n $e$ is calculated in the same fashion (except that here, all the computations on $x$, $y$, and $z$ are tracked):\n\n::: {#861dea97 .cell execution_count=15}\n``` {.python .cell-code}\ne = 2*x**4 - y**3 + 3*z**2\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[15]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg\">e</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">2</span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">x</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(175,135,255)\">4</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">-</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">y</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(175,135,255)\">3</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">+</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">3</span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg\">z</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(175,135,255)\">2</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'x' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe backward propagation is done automatically with:\n\n::: {#6cfcf4f2 .cell execution_count=16}\n``` {.python .cell-code}\ne.backward(torch.tensor([1., 1.]))\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[16]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">e</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">backward</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">torch</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">tensor</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">[</span><span style=\"color:rgb(175,135,255)\">1.</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">1.</span><span class=\"ansi-bright-white-fg\">]</span><span class=\"ansi-bright-white-fg\">)</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'e' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nAnd we have our 3 partial derivatives:\n\n::: {#04cd6344 .cell execution_count=17}\n``` {.python .cell-code}\nprint(x.grad)\nprint(y.grad)\nprint(z.grad)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[17]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg\">print</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">x</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">grad</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">      2</span> <span class=\"ansi-bright-white-fg\">print</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">y</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">grad</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">      3</span> <span class=\"ansi-bright-white-fg\">print</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">z</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">grad</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'x' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n#### Comparison\n\nThe result is the same, as can be tested with:\n\n::: {#2860788c .cell execution_count=18}\n``` {.python .cell-code}\n8*x**3 == x.grad\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[18]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span style=\"color:rgb(175,135,255)\">8</span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">x</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(175,135,255)\">3</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">==</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">x</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">grad</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'x' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#8153f8f9 .cell execution_count=19}\n``` {.python .cell-code}\n-3*y**2 == y.grad\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[19]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span style=\"color:rgb(255,95,135)\">-</span><span style=\"color:rgb(175,135,255)\">3</span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">y</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(255,95,135)\">*</span><span style=\"color:rgb(175,135,255)\">2</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">==</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">y</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">grad</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'y' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#6f65eb56 .cell execution_count=20}\n``` {.python .cell-code}\n6*z == z.grad\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[20]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span style=\"color:rgb(175,135,255)\">6</span><span style=\"color:rgb(255,95,135)\">*</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">z</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">==</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">z</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">grad</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'z' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nOf course, calculating the gradients manually here was extremely easy, but imagine how tedious and lengthy it would be to write the chain rules to calculate the gradients of all the composite functions in a neural network manually...\n\n",
    "supporting": [
      "pt_autograd_files"
    ],
    "filters": [],
    "includes": {}
  }
}