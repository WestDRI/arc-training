{
  "hash": "27590ecac549949d2debf9c93a8d3caf",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Loading data\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\n\n\n:::\n\n::: {#1eac4800 .cell execution_count=1}\n``` {.python .cell-code}\nimport torch\nimport torchvision\nimport torchvision.transforms as transforms\n```\n:::\n\n\n::: {#e58dffbe .cell execution_count=2}\n``` {.python .cell-code}\ntransform = transforms.Compose(\n    [transforms.ToTensor(),\n     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n\nbatch_size = 4\n\ntrainset = torchvision.datasets.CIFAR10(root='./data', train=True,\n                                        download=True, transform=transform)\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,\n                                          shuffle=True, num_workers=2)\n\ntestset = torchvision.datasets.CIFAR10(root='./data', train=False,\n                                       download=True, transform=transform)\ntestloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,\n                                         shuffle=False, num_workers=2)\n\nclasses = ('plane', 'car', 'bird', 'cat',\n           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n```\n:::\n\n\n::: {#486930c2 .cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# functions to show an image\n\n\ndef imshow(img):\n    img = img / 2 + 0.5     # unnormalize\n    npimg = img.numpy()\n    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n    plt.show()\n\n\n# get some random training images\ndataiter = iter(trainloader)\nimages, labels = next(dataiter)\n\n# show images\nimshow(torchvision.utils.make_grid(images))\n# print labels\nprint(' '.join(f'{classes[labels[j]]:5s}' for j in range(batch_size)))\n```\n\n::: {.cell-output .cell-output-display}\n![](pt_data_files/figure-html/cell-4-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nplane deer  horse plane\n```\n:::\n:::\n\n\n## Creating a DataLoader\n\nA `DataLoader` is an iterable feeding data to a model. When we train a model, we run it for each element of the DataLoader in a for loop:\n\n```{.python}\nfor i in data_loader:\n    <some model>\n```\n\n",
    "supporting": [
      "pt_data_files"
    ],
    "filters": [],
    "includes": {}
  }
}