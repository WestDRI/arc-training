{
  "hash": "0d94394beab3c624ff5c21ca6151e050",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: PyTorch tensors\naliases:\n  - tensors.html\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nBefore information can be processed by algorithms, it needs to be converted to floating point numbers. Indeed, you don't pass a sentence or an image through a model; instead you input numbers representing a sequence of words or pixel values.\n\nAll these floating point numbers need to be stored in a data structure. The most suited structure is multidimensional (to hold several layers of information) and homogeneous—all data of the same type—for efficiency.\n\nPython already has several multidimensional array structures (e.g. [NumPy](https://numpy.org/)'s ndarray) but the particularities of deep learning call for special characteristics such as the ability to run operations on GPUs and/or in a distributed fashion, the ability to keep track of computation graphs for [automatic differentiation](https://en.wikipedia.org/wiki/Automatic_differentiation), and different defaults (lower precision for improved training performance).\n\nThe PyTorch tensor is a Python data structure with these characteristics that can easily be converted to/from NumPy's ndarray and integrates well with other Python libraries such as [Pandas](https://pandas.pydata.org/).\n\nIn this section, we will explore the basics of PyTorch tensors.\n\n:::\n\n## Importing PyTorch\n\nFirst of all, we need to import the `torch` library:\n\n::: {#5b81f6a8 .cell execution_count=2}\n``` {.python .cell-code}\nimport torch\n```\n:::\n\n\nWe can check its version with:\n\n::: {#d416b651 .cell execution_count=3}\n``` {.python .cell-code}\ntorch.__version__\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'2.6.0+cu124'\n```\n:::\n:::\n\n\n## Creating tensors\n\nThere are many ways to create tensors:\n\n- `torch.tensor`: &emsp;&emsp;Input individual values\n- `torch.arange`: &emsp;&emsp;1D tensor with a sequence of integers\n- `torch.linspace`: &emsp;1D linear scale tensor\n- `torch.logspace`: &emsp;1D log scale tensor\n- `torch.rand`: &emsp;&emsp;&emsp;&nbsp;Random numbers from a uniform distribution on `[0, 1)`\n- `torch.randn`: &emsp;&emsp;&ensp;&nbsp;Numbers from the standard normal distribution\n- `torch.randperm`: &emsp;&nbsp;Random permutation of integers\n- `torch.empty`: &emsp;&emsp;&ensp;&nbsp;Uninitialized tensor\n- `torch.zeros`: &emsp;&emsp;&ensp;&nbsp;Tensor filled with `0`\n- `torch.ones`: &emsp;&emsp;&emsp;&nbsp;Tensor filled with `1`\n- `torch.eye`: &emsp;&emsp;&emsp;&ensp;&nbsp;&nbsp;Identity matrix\n\n### From input values\n\n::: {#390b6dc6 .cell execution_count=4}\n``` {.python .cell-code}\nt = torch.tensor(3)\n```\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWithout using the `shape` descriptor, try to get the shape of the following tensors:\n\n```{.python}\ntorch.tensor([0.9704, 0.1339, 0.4841])\n\ntorch.tensor([[0.9524, 0.0354],\n        [0.9833, 0.2562],\n        [0.0607, 0.6420]])\n\ntorch.tensor([[[0.4604, 0.2699],\n         [0.8360, 0.0317],\n         [0.3289, 0.1171]]])\n\ntorch.tensor([[[[0.0730, 0.8737],\n          [0.2305, 0.4719],\n          [0.0796, 0.2745]]],\n\n        [[[0.1534, 0.9442],\n          [0.3287, 0.9040],\n          [0.0948, 0.1480]]]])\n```\n\n:::\n\nLet's create a random tensor with a single element:\n\n::: {#54474b43 .cell execution_count=5}\n``` {.python .cell-code}\nt = torch.rand(1)\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\ntensor([0.1952])\n```\n:::\n:::\n\n\nWe can extract the value from a tensor with one element:\n\n::: {#c467d58d .cell execution_count=6}\n``` {.python .cell-code}\nt.item()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n0.19522696733474731\n```\n:::\n:::\n\n\nAll these tensors have a single element, but an increasing number of dimensions:\n\n::: {#fb14466e .cell execution_count=7}\n``` {.python .cell-code}\ntorch.rand(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\ntensor([0.2937])\n```\n:::\n:::\n\n\n::: {#bbb6e606 .cell execution_count=8}\n``` {.python .cell-code}\ntorch.rand(1, 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\ntensor([[0.9385]])\n```\n:::\n:::\n\n\n::: {#ab6c3423 .cell execution_count=9}\n``` {.python .cell-code}\ntorch.rand(1, 1, 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\ntensor([[[0.7764]]])\n```\n:::\n:::\n\n\n::: {#8ba03005 .cell execution_count=10}\n``` {.python .cell-code}\ntorch.rand(1, 1, 1, 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\ntensor([[[[0.4473]]]])\n```\n:::\n:::\n\n\n:::{.note}\n\nYou can tell the number of dimensions of a tensor easily by counting the number of opening square brackets.\n\n:::\n\n::: {#5e33757b .cell execution_count=11}\n``` {.python .cell-code}\ntorch.rand(1, 1, 1, 1).dim()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n4\n```\n:::\n:::\n\n\nTensors can have multiple elements in one dimension:\n\n::: {#d801d794 .cell execution_count=12}\n``` {.python .cell-code}\ntorch.rand(6)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\ntensor([0.6389, 0.1453, 0.8023, 0.3180, 0.4471, 0.4798])\n```\n:::\n:::\n\n\n::: {#a2ba6854 .cell execution_count=13}\n``` {.python .cell-code}\ntorch.rand(6).dim()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n1\n```\n:::\n:::\n\n\nAnd multiple elements in multiple dimensions:\n\n::: {#da4e72cf .cell execution_count=14}\n``` {.python .cell-code}\ntorch.rand(2, 3, 4, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\ntensor([[[[0.9159, 0.0173, 0.2502, 0.2044, 0.5919],\n          [0.4154, 0.9943, 0.9573, 0.4240, 0.2554],\n          [0.1066, 0.2649, 0.7477, 0.1648, 0.8121],\n          [0.3351, 0.0105, 0.4873, 0.6219, 0.2475]],\n\n         [[0.7721, 0.4679, 0.4826, 0.5987, 0.9971],\n          [0.9861, 0.3395, 0.3855, 0.7349, 0.3245],\n          [0.3450, 0.9941, 0.4847, 0.6996, 0.4295],\n          [0.1400, 0.3646, 0.7771, 0.9690, 0.1722]],\n\n         [[0.6430, 0.0170, 0.4688, 0.2151, 0.6894],\n          [0.6014, 0.5355, 0.1968, 0.7655, 0.6725],\n          [0.4229, 0.4040, 0.6667, 0.7375, 0.7241],\n          [0.1703, 0.0980, 0.7046, 0.0855, 0.9696]]],\n\n\n        [[[0.2787, 0.1543, 0.1760, 0.7723, 0.3313],\n          [0.7928, 0.2783, 0.0737, 0.8541, 0.8127],\n          [0.4876, 0.3712, 0.5947, 0.7668, 0.1385],\n          [0.1390, 0.9622, 0.5546, 0.3023, 0.5994]],\n\n         [[0.6486, 0.1685, 0.9493, 0.6600, 0.5395],\n          [0.5364, 0.7494, 0.1369, 0.9789, 0.0888],\n          [0.0203, 0.2671, 0.4030, 0.3052, 0.0581],\n          [0.5803, 0.3366, 0.0981, 0.0196, 0.9879]],\n\n         [[0.8596, 0.5901, 0.6223, 0.6339, 0.2987],\n          [0.6060, 0.7458, 0.2324, 0.1630, 0.5129],\n          [0.5956, 0.1734, 0.5036, 0.7118, 0.9202],\n          [0.0886, 0.3873, 0.7526, 0.8082, 0.7475]]]])\n```\n:::\n:::\n\n\n::: {#b26283bb .cell execution_count=15}\n``` {.python .cell-code}\ntorch.rand(2, 3, 4, 5).dim()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n4\n```\n:::\n:::\n\n\n::: {#7468c0c4 .cell execution_count=16}\n``` {.python .cell-code}\ntorch.rand(2, 3, 4, 5).numel()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n120\n```\n:::\n:::\n\n\n::: {#5bcd5964 .cell execution_count=17}\n``` {.python .cell-code}\ntorch.ones(2, 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\ntensor([[1., 1., 1., 1.],\n        [1., 1., 1., 1.]])\n```\n:::\n:::\n\n\n::: {#79e05361 .cell execution_count=18}\n``` {.python .cell-code}\nt = torch.rand(2, 3)\ntorch.zeros_like(t)             # Matches the size of t\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\ntensor([[0., 0., 0.],\n        [0., 0., 0.]])\n```\n:::\n:::\n\n\n::: {#13913a1c .cell execution_count=19}\n``` {.python .cell-code}\ntorch.ones_like(t)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\ntensor([[1., 1., 1.],\n        [1., 1., 1.]])\n```\n:::\n:::\n\n\n::: {#1658156f .cell execution_count=20}\n``` {.python .cell-code}\ntorch.randn_like(t)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\ntensor([[-0.0760,  0.6491,  0.0362],\n        [ 0.5438, -1.2794,  0.6735]])\n```\n:::\n:::\n\n\n::: {#92cdc28c .cell execution_count=21}\n``` {.python .cell-code}\ntorch.arange(2, 10, 3)    # From 2 to 10 in increments of 3\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\ntensor([2, 5, 8])\n```\n:::\n:::\n\n\n::: {#36f4ca75 .cell execution_count=22}\n``` {.python .cell-code}\ntorch.linspace(2, 10, 3)  # 3 elements from 2 to 10 on the linear scale\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\ntensor([ 2.,  6., 10.])\n```\n:::\n:::\n\n\n::: {#442b06ec .cell execution_count=23}\n``` {.python .cell-code}\ntorch.logspace(2, 10, 3)  # Same on the log scale\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\ntensor([1.0000e+02, 1.0000e+06, 1.0000e+10])\n```\n:::\n:::\n\n\n::: {#0052e715 .cell execution_count=24}\n``` {.python .cell-code}\ntorch.randperm(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\ntensor([2, 0, 1])\n```\n:::\n:::\n\n\n::: {#5246d117 .cell execution_count=25}\n``` {.python .cell-code}\ntorch.eye(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\ntensor([[1., 0., 0.],\n        [0., 1., 0.],\n        [0., 0., 1.]])\n```\n:::\n:::\n\n\n## Conversion to/from NumPy\n\nPyTorch tensors can be converted to NumPy ndarrays and vice-versa in a very efficient manner as both objects share the same memory.\n\n### From PyTorch tensor to NumPy ndarray\n\n::: {#e51635de .cell execution_count=26}\n``` {.python .cell-code}\nt = torch.rand(2, 3)\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\ntensor([[0.1417, 0.9127, 0.9021],\n        [0.9942, 0.5279, 0.4297]])\n```\n:::\n:::\n\n\n::: {#da155d3b .cell execution_count=27}\n``` {.python .cell-code}\nt_np = t.numpy()\nt_np\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\narray([[0.14172977, 0.91267145, 0.9020647 ],\n       [0.9941583 , 0.5279334 , 0.42972422]], dtype=float32)\n```\n:::\n:::\n\n\n### From NumPy ndarray to PyTorch tensor\n\n::: {#1cf32f9b .cell execution_count=28}\n``` {.python .cell-code}\nimport numpy as np\na = np.random.rand(2, 3)\na\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\narray([[0.23670328, 0.64032567, 0.31378297],\n       [0.16256904, 0.61355664, 0.73836976]])\n```\n:::\n:::\n\n\n::: {#2603917a .cell execution_count=29}\n``` {.python .cell-code}\na_pt = torch.from_numpy(a)\na_pt\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\ntensor([[0.2367, 0.6403, 0.3138],\n        [0.1626, 0.6136, 0.7384]], dtype=torch.float64)\n```\n:::\n:::\n\n\n:::{.note}\n\nNote the different default data types.\n\n:::\n\n## Indexing tensors\n\n::: {#ff3f01e6 .cell execution_count=30}\n``` {.python .cell-code}\nt = torch.rand(3, 4)\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\ntensor([[0.2068, 0.1622, 0.5940, 0.4235],\n        [0.9162, 0.7183, 0.6857, 0.2356],\n        [0.6411, 0.8899, 0.0291, 0.3303]])\n```\n:::\n:::\n\n\n::: {#47a8462d .cell execution_count=31}\n``` {.python .cell-code}\nt[:, 2]\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\ntensor([0.5940, 0.6857, 0.0291])\n```\n:::\n:::\n\n\n::: {#ee1c0e82 .cell execution_count=32}\n``` {.python .cell-code}\nt[1, :]\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\ntensor([0.9162, 0.7183, 0.6857, 0.2356])\n```\n:::\n:::\n\n\n::: {#fc8af025 .cell execution_count=33}\n``` {.python .cell-code}\nt[2, 3]\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\ntensor(0.3303)\n```\n:::\n:::\n\n\n:::{.info}\n\n**A word of caution about indexing**\n\nWhile indexing elements of a tensor to extract some of the data as a final step of some computation is fine, [you should not use indexing to run operations on tensor elements in a loop]{.emph} as this would be extremely inefficient.\n\nInstead, you want to use [vectorized operations]{.emph}.\n\n:::\n\n## Vectorized operations\n\nSince PyTorch tensors are homogeneous (i.e. made of a single data type), [as with NumPy's ndarrays](https://www.pythonlikeyoumeanit.com/Module3_IntroducingNumpy/VectorizedOperations.html#Vectorized-Operations), operations are vectorized and thus fast.\n\nNumPy is mostly written in C, PyTorch in C++. With either library, when you run vectorized operations on arrays/tensors, you don't use raw Python (slow) but compiled C/C++ code (much faster).\n\n[Here](https://pythonspeed.com/articles/vectorization-python/) is an excellent post explaining Python vectorization & why it makes such a big difference.\n\n## Data types\n\n### Default data type\n\nSince PyTorch tensors were built with efficiency in mind for neural networks, the default data type is **32-bit floating points**.\n\nThis is sufficient for accuracy and much faster than 64-bit floating points.\n\n:::{.note}\n\nBy contrast, NumPy ndarrays use 64-bit as their default.\n\n:::\n\n::: {#2cfbe3b7 .cell execution_count=34}\n``` {.python .cell-code}\nt = torch.rand(2, 4)\nt.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\ntorch.float32\n```\n:::\n:::\n\n\n### Setting data type at creation\n\nThe type can be set with the `dtype` argument:\n\n::: {#1035b916 .cell execution_count=35}\n``` {.python .cell-code}\nt = torch.rand(2, 4, dtype=torch.float64)\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\ntensor([[0.5765, 0.4829, 0.6444, 0.2722],\n        [0.6819, 0.0558, 0.6359, 0.0799]], dtype=torch.float64)\n```\n:::\n:::\n\n\n:::{.note}\n\nPrinted tensors display attributes with values ≠ default values.\n\n:::\n\n::: {#71225fd6 .cell execution_count=36}\n``` {.python .cell-code}\nt.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\ntorch.float64\n```\n:::\n:::\n\n\n### Changing data type\n\n::: {#b1b5296a .cell execution_count=37}\n``` {.python .cell-code}\nt = torch.rand(2, 4)\nt.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\ntorch.float32\n```\n:::\n:::\n\n\n::: {#a6cb63d4 .cell execution_count=38}\n``` {.python .cell-code}\nt2 = t.type(torch.float64)\nt2.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\ntorch.float64\n```\n:::\n:::\n\n\n### List of data types\n\n| dtype | Description |\n| ----- | ----- |\n| torch.float16 / torch.half | 16-bit / half-precision floating-point |\n| torch.float32 / torch.float | 32-bit / single-precision floating-point |\n| torch.float64 / torch.double | 64-bit / double-precision floating-point |\n| torch.uint8 | unsigned 8-bit integers |\n| torch.int8 | signed 8-bit integers |\n| torch.int16 / torch.short | signed 16-bit integers |\n| torch.int32 / torch.int | signed 32-bit integers |\n| torch.int64 / torch.long | signed 64-bit integers |\n| torch.bool | boolean |\n\n## Simple operations\n\n::: {#59c0fb5a .cell execution_count=39}\n``` {.python .cell-code}\nt1 = torch.tensor([[1, 2], [3, 4]])\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\ntensor([[1, 2],\n        [3, 4]])\n```\n:::\n:::\n\n\n::: {#2483d80d .cell execution_count=40}\n``` {.python .cell-code}\nt2 = torch.tensor([[1, 1], [0, 0]])\nt2\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\ntensor([[1, 1],\n        [0, 0]])\n```\n:::\n:::\n\n\nOperation performed between elements at corresponding locations:\n\n::: {#eb71c1ed .cell execution_count=41}\n``` {.python .cell-code}\nt1 + t2\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\ntensor([[2, 3],\n        [3, 4]])\n```\n:::\n:::\n\n\nOperation applied to each element of the tensor:\n\n::: {#a495ff67 .cell execution_count=42}\n``` {.python .cell-code}\nt1 + 1\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\ntensor([[2, 3],\n        [4, 5]])\n```\n:::\n:::\n\n\n### Reduction\n\n::: {#6e10fb84 .cell execution_count=43}\n``` {.python .cell-code}\nt = torch.ones(2, 3, 4);\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\ntensor([[[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]],\n\n        [[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]]])\n```\n:::\n:::\n\n\n::: {#bc6c4b57 .cell execution_count=44}\n``` {.python .cell-code}\nt.sum()   # Reduction over all entries\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\ntensor(24.)\n```\n:::\n:::\n\n\n:::{.note}\n\nOther reduction functions (e.g. mean) behave the same way.\n\n:::\n\nReduction over a specific dimension:\n\n::: {#b03360dd .cell execution_count=45}\n``` {.python .cell-code}\nt.sum(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\ntensor([[2., 2., 2., 2.],\n        [2., 2., 2., 2.],\n        [2., 2., 2., 2.]])\n```\n:::\n:::\n\n\n::: {#180eab8a .cell execution_count=46}\n``` {.python .cell-code}\nt.sum(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\ntensor([[3., 3., 3., 3.],\n        [3., 3., 3., 3.]])\n```\n:::\n:::\n\n\n::: {#cec4f4b1 .cell execution_count=47}\n``` {.python .cell-code}\nt.sum(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\ntensor([[4., 4., 4.],\n        [4., 4., 4.]])\n```\n:::\n:::\n\n\nReduction over multiple dimensions:\n\n::: {#74c962e0 .cell execution_count=48}\n``` {.python .cell-code}\nt.sum((0, 1))\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\ntensor([6., 6., 6., 6.])\n```\n:::\n:::\n\n\n::: {#8eb38ba0 .cell execution_count=49}\n``` {.python .cell-code}\nt.sum((0, 2))\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\ntensor([8., 8., 8.])\n```\n:::\n:::\n\n\n::: {#f596ea9c .cell execution_count=50}\n``` {.python .cell-code}\nt.sum((1, 2))\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\ntensor([12., 12.])\n```\n:::\n:::\n\n\n### In-place operations\n\nWith operators post-fixed with `_`:\n\n::: {#33f6b7a4 .cell execution_count=51}\n``` {.python .cell-code}\nt1 = torch.tensor([1, 2])\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\ntensor([1, 2])\n```\n:::\n:::\n\n\n::: {#9b0b5e56 .cell execution_count=52}\n``` {.python .cell-code}\nt2 = torch.tensor([1, 1])\nt2\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\ntensor([1, 1])\n```\n:::\n:::\n\n\n::: {#3f74f396 .cell execution_count=53}\n``` {.python .cell-code}\nt1.add_(t2)\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\ntensor([2, 3])\n```\n:::\n:::\n\n\n::: {#ba4399e6 .cell execution_count=54}\n``` {.python .cell-code}\nt1.zero_()\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\ntensor([0, 0])\n```\n:::\n:::\n\n\n:::{.note}\n\nWhile reassignments will use new addresses in memory, in-place operations will use the same addresses.\n\n:::\n\n### Tensor views\n\n```{.python}\nt = torch.tensor([[1, 2, 3], [4, 5, 6]]); print(t)\nt.size()\nt.view(6)\nt.view(3, 2)\nt.view(3, -1) # Same: with -1, the size is inferred from other dimensions\n```\n\n:::{.info}\n\n**Note the difference**\n\n::: {#359c62e0 .cell execution_count=55}\n``` {.python .cell-code}\nt1 = torch.tensor([[1, 2, 3], [4, 5, 6]])\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\ntensor([[1, 2, 3],\n        [4, 5, 6]])\n```\n:::\n:::\n\n\n::: {#23ec2c33 .cell execution_count=56}\n``` {.python .cell-code}\nt2 = t1.t()\nt2\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\ntensor([[1, 4],\n        [2, 5],\n        [3, 6]])\n```\n:::\n:::\n\n\n::: {#46afb135 .cell execution_count=57}\n``` {.python .cell-code}\nt3 = t1.view(3, 2)\nt3\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\ntensor([[1, 2],\n        [3, 4],\n        [5, 6]])\n```\n:::\n:::\n\n\n:::\n\n### Logical operations\n\n::: {#02768e79 .cell execution_count=58}\n``` {.python .cell-code}\nt1 = torch.randperm(5)\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\ntensor([0, 2, 3, 1, 4])\n```\n:::\n:::\n\n\n::: {#99ab1b1c .cell execution_count=59}\n``` {.python .cell-code}\nt2 = torch.randperm(5)\nt2\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\ntensor([1, 4, 3, 0, 2])\n```\n:::\n:::\n\n\nTest each element:\n\n::: {#dba7f715 .cell execution_count=60}\n``` {.python .cell-code}\nt1 > 3\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\ntensor([False, False, False, False,  True])\n```\n:::\n:::\n\n\nTest corresponding pairs of elements:\n\n::: {#b9fdf546 .cell execution_count=61}\n``` {.python .cell-code}\nt1 < t2\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\ntensor([ True,  True, False, False, False])\n```\n:::\n:::\n\n\n## Device attribute\n\nTensor data can be placed in the memory of various processor types:\n\n- the RAM of CPU,\n- the RAM of a GPU with CUDA support,\n- the RAM of a GPU with [AMD's ROCm support](https://pytorch.org/blog/pytorch-for-amd-rocm-platform-now-available-as-python-package/),\n- the RAM of an [XLA device](https://www.tensorflow.org/xla) (e.g. [Cloud TPU](https://cloud.google.com/tpu)) with the [torch_xla package](https://github.com/pytorch/xla/).\n\nThe values for the device attributes are:\n\n- CPU: &nbsp;`'cpu'`,\n- GPU (CUDA & AMD's ROCm): &nbsp;`'cuda'`,\n- XLA: &nbsp;`xm.xla_device()`.\n\nThis last option requires to load the [torch_xla package](https://github.com/pytorch/xla/) first:\n\n```{.python}\nimport torch_xla\nimport torch_xla.core.xla_model as xm\n```\n\n### Creating a tensor on a specific device\n\nBy default, tensors are created on the CPU.\n\nYou can create a tensor on an accelerator by specifying the device attribute (our current training cluster does not have GPUs, so don't run this on it):\n\n```{.python}\nt_gpu = torch.rand(2, device='cuda')\n```\n\n### Copying a tensor to a specific device\n\nYou can also make copies of a tensor on other devices:\n\n```{.python}\n# Make a copy of t on the GPU\nt_gpu = t.to(device='cuda')\nt_gpu = t.cuda()             # Alternative syntax\n\n# Make a copy of t_gpu on the CPU\nt = t_gpu.to(device='cpu')\nt = t_gpu.cpu()              # Alternative syntax\n```\n\n### Multiple GPUs\n\nIf you have multiple GPUs, you can optionally specify which one a tensor should be created on or copied to:\n\n```{.python}\nt1 = torch.rand(2, device='cuda:0')  # Create a tensor on 1st GPU\nt2 = t1.to(device='cuda:0')          # Make a copy of t1 on 1st GPU\nt3 = t1.to(device='cuda:1')          # Make a copy of t1 on 2nd GPU\n```\n\nOr the equivalent short forms:\n\n```{.python}\nt2 = t1.cuda(0)\nt3 = t1.cuda(1)\n```\n\n",
    "supporting": [
      "pt_tensors_files"
    ],
    "filters": [],
    "includes": {}
  }
}