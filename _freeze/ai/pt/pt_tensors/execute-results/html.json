{
  "hash": "0d94394beab3c624ff5c21ca6151e050",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: PyTorch tensors\naliases:\n  - tensors.html\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nBefore information can be processed by algorithms, it needs to be converted to floating point numbers. Indeed, you don't pass a sentence or an image through a model; instead you input numbers representing a sequence of words or pixel values.\n\nAll these floating point numbers need to be stored in a data structure. The most suited structure is multidimensional (to hold several layers of information) and homogeneous—all data of the same type—for efficiency.\n\nPython already has several multidimensional array structures (e.g. [NumPy](https://numpy.org/)'s ndarray) but the particularities of deep learning call for special characteristics such as the ability to run operations on GPUs and/or in a distributed fashion, the ability to keep track of computation graphs for [automatic differentiation](https://en.wikipedia.org/wiki/Automatic_differentiation), and different defaults (lower precision for improved training performance).\n\nThe PyTorch tensor is a Python data structure with these characteristics that can easily be converted to/from NumPy's ndarray and integrates well with other Python libraries such as [Pandas](https://pandas.pydata.org/).\n\nIn this section, we will explore the basics of PyTorch tensors.\n\n:::\n\n## Importing PyTorch\n\nFirst of all, we need to import the `torch` library:\n\n::: {#1803c064 .cell execution_count=1}\n``` {.python .cell-code}\nimport torch\n```\n:::\n\n\nWe can check its version with:\n\n::: {#1d1f014d .cell execution_count=2}\n``` {.python .cell-code}\ntorch.__version__\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'2.7.0+cu126'\n```\n:::\n:::\n\n\n## Creating tensors\n\nThere are many ways to create tensors:\n\n- `torch.tensor`: &emsp;&emsp;Input individual values\n- `torch.arange`: &emsp;&emsp;1D tensor with a sequence of integers\n- `torch.linspace`: &emsp;1D linear scale tensor\n- `torch.logspace`: &emsp;1D log scale tensor\n- `torch.rand`: &emsp;&emsp;&emsp;&nbsp;Random numbers from a uniform distribution on `[0, 1)`\n- `torch.randn`: &emsp;&emsp;&ensp;&nbsp;Numbers from the standard normal distribution\n- `torch.randperm`: &emsp;&nbsp;Random permutation of integers\n- `torch.empty`: &emsp;&emsp;&ensp;&nbsp;Uninitialized tensor\n- `torch.zeros`: &emsp;&emsp;&ensp;&nbsp;Tensor filled with `0`\n- `torch.ones`: &emsp;&emsp;&emsp;&nbsp;Tensor filled with `1`\n- `torch.eye`: &emsp;&emsp;&emsp;&ensp;&nbsp;&nbsp;Identity matrix\n\n### From input values\n\n::: {#db81fd36 .cell execution_count=3}\n``` {.python .cell-code}\nt = torch.tensor(3)\n```\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWithout using the `shape` descriptor, try to get the shape of the following tensors:\n\n```{.python}\ntorch.tensor([0.9704, 0.1339, 0.4841])\n\ntorch.tensor([[0.9524, 0.0354],\n        [0.9833, 0.2562],\n        [0.0607, 0.6420]])\n\ntorch.tensor([[[0.4604, 0.2699],\n         [0.8360, 0.0317],\n         [0.3289, 0.1171]]])\n\ntorch.tensor([[[[0.0730, 0.8737],\n          [0.2305, 0.4719],\n          [0.0796, 0.2745]]],\n\n        [[[0.1534, 0.9442],\n          [0.3287, 0.9040],\n          [0.0948, 0.1480]]]])\n```\n\n:::\n\nLet's create a random tensor with a single element:\n\n::: {#e679eed3 .cell execution_count=4}\n``` {.python .cell-code}\nt = torch.rand(1)\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\ntensor([0.1258])\n```\n:::\n:::\n\n\nWe can extract the value from a tensor with one element:\n\n::: {#66383dbc .cell execution_count=5}\n``` {.python .cell-code}\nt.item()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n0.1257982850074768\n```\n:::\n:::\n\n\nAll these tensors have a single element, but an increasing number of dimensions:\n\n::: {#34a7ceca .cell execution_count=6}\n``` {.python .cell-code}\ntorch.rand(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\ntensor([0.3900])\n```\n:::\n:::\n\n\n::: {#eb4e0802 .cell execution_count=7}\n``` {.python .cell-code}\ntorch.rand(1, 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\ntensor([[0.6882]])\n```\n:::\n:::\n\n\n::: {#c90a1910 .cell execution_count=8}\n``` {.python .cell-code}\ntorch.rand(1, 1, 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\ntensor([[[0.0423]]])\n```\n:::\n:::\n\n\n::: {#2bd0dba7 .cell execution_count=9}\n``` {.python .cell-code}\ntorch.rand(1, 1, 1, 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\ntensor([[[[0.3623]]]])\n```\n:::\n:::\n\n\n:::{.note}\n\nYou can tell the number of dimensions of a tensor easily by counting the number of opening square brackets.\n\n:::\n\n::: {#d0bb9f3d .cell execution_count=10}\n``` {.python .cell-code}\ntorch.rand(1, 1, 1, 1).dim()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n4\n```\n:::\n:::\n\n\nTensors can have multiple elements in one dimension:\n\n::: {#8c8e407b .cell execution_count=11}\n``` {.python .cell-code}\ntorch.rand(6)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\ntensor([0.3194, 0.8324, 0.6842, 0.5462, 0.4335, 0.0477])\n```\n:::\n:::\n\n\n::: {#42938d39 .cell execution_count=12}\n``` {.python .cell-code}\ntorch.rand(6).dim()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n1\n```\n:::\n:::\n\n\nAnd multiple elements in multiple dimensions:\n\n::: {#98137fd3 .cell execution_count=13}\n``` {.python .cell-code}\ntorch.rand(2, 3, 4, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\ntensor([[[[0.2751, 0.7491, 0.3606, 0.1847, 0.8210],\n          [0.8549, 0.7280, 0.6912, 0.3304, 0.3114],\n          [0.4724, 0.8165, 0.2218, 0.6130, 0.3458],\n          [0.6167, 0.2413, 0.8206, 0.5638, 0.0965]],\n\n         [[0.9852, 0.8703, 0.9640, 0.4937, 0.9714],\n          [0.9394, 0.5743, 0.9706, 0.0757, 0.7892],\n          [0.9826, 0.3664, 0.3062, 0.6258, 0.0423],\n          [0.0121, 0.7599, 0.6933, 0.6317, 0.8294]],\n\n         [[0.9104, 0.3898, 0.7956, 0.4905, 0.2473],\n          [0.0213, 0.9614, 0.4768, 0.8116, 0.2958],\n          [0.9169, 0.7930, 0.0436, 0.5157, 0.5013],\n          [0.4241, 0.3144, 0.1485, 0.6809, 0.7301]]],\n\n\n        [[[0.3292, 0.6150, 0.4489, 0.1435, 0.9072],\n          [0.5220, 0.7579, 0.6088, 0.5416, 0.7387],\n          [0.5016, 0.1188, 0.1102, 0.4963, 0.6499],\n          [0.4095, 0.9137, 0.9722, 0.5457, 0.5097]],\n\n         [[0.3042, 0.6062, 0.8467, 0.2048, 0.8266],\n          [0.0151, 0.9860, 0.2823, 0.8156, 0.0425],\n          [0.9102, 0.9277, 0.8388, 0.1567, 0.0447],\n          [0.6520, 0.5048, 0.7269, 0.2211, 0.4119]],\n\n         [[0.6430, 0.9144, 0.4872, 0.4569, 0.4097],\n          [0.5599, 0.1621, 0.3895, 0.4058, 0.1664],\n          [0.9839, 0.9917, 0.4786, 0.5395, 0.3695],\n          [0.9295, 0.4590, 0.2973, 0.9712, 0.3366]]]])\n```\n:::\n:::\n\n\n::: {#dbcb8dc7 .cell execution_count=14}\n``` {.python .cell-code}\ntorch.rand(2, 3, 4, 5).dim()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n4\n```\n:::\n:::\n\n\n::: {#c1823ae1 .cell execution_count=15}\n``` {.python .cell-code}\ntorch.rand(2, 3, 4, 5).numel()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n120\n```\n:::\n:::\n\n\n::: {#123e1dce .cell execution_count=16}\n``` {.python .cell-code}\ntorch.ones(2, 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\ntensor([[1., 1., 1., 1.],\n        [1., 1., 1., 1.]])\n```\n:::\n:::\n\n\n::: {#c6d64c82 .cell execution_count=17}\n``` {.python .cell-code}\nt = torch.rand(2, 3)\ntorch.zeros_like(t)             # Matches the size of t\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\ntensor([[0., 0., 0.],\n        [0., 0., 0.]])\n```\n:::\n:::\n\n\n::: {#05085f54 .cell execution_count=18}\n``` {.python .cell-code}\ntorch.ones_like(t)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\ntensor([[1., 1., 1.],\n        [1., 1., 1.]])\n```\n:::\n:::\n\n\n::: {#897f48a2 .cell execution_count=19}\n``` {.python .cell-code}\ntorch.randn_like(t)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\ntensor([[ 0.2893, -1.7632, -0.2417],\n        [-1.4069,  0.8735,  0.6806]])\n```\n:::\n:::\n\n\n::: {#0bc1978c .cell execution_count=20}\n``` {.python .cell-code}\ntorch.arange(2, 10, 3)    # From 2 to 10 in increments of 3\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\ntensor([2, 5, 8])\n```\n:::\n:::\n\n\n::: {#54583b54 .cell execution_count=21}\n``` {.python .cell-code}\ntorch.linspace(2, 10, 3)  # 3 elements from 2 to 10 on the linear scale\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\ntensor([ 2.,  6., 10.])\n```\n:::\n:::\n\n\n::: {#b35943d8 .cell execution_count=22}\n``` {.python .cell-code}\ntorch.logspace(2, 10, 3)  # Same on the log scale\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\ntensor([1.0000e+02, 1.0000e+06, 1.0000e+10])\n```\n:::\n:::\n\n\n::: {#60d4a193 .cell execution_count=23}\n``` {.python .cell-code}\ntorch.randperm(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\ntensor([2, 0, 1])\n```\n:::\n:::\n\n\n::: {#cc88fb1e .cell execution_count=24}\n``` {.python .cell-code}\ntorch.eye(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\ntensor([[1., 0., 0.],\n        [0., 1., 0.],\n        [0., 0., 1.]])\n```\n:::\n:::\n\n\n## Conversion to/from NumPy\n\nPyTorch tensors can be converted to NumPy ndarrays and vice-versa in a very efficient manner as both objects share the same memory.\n\n### From PyTorch tensor to NumPy ndarray\n\n::: {#e19fdb77 .cell execution_count=25}\n``` {.python .cell-code}\nt = torch.rand(2, 3)\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\ntensor([[0.4518, 0.4918, 0.1410],\n        [0.9275, 0.2999, 0.2147]])\n```\n:::\n:::\n\n\n::: {#cfd809b4 .cell execution_count=26}\n``` {.python .cell-code}\nt_np = t.numpy()\nt_np\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\narray([[0.45182675, 0.4917711 , 0.14095235],\n       [0.9274815 , 0.29993367, 0.2146874 ]], dtype=float32)\n```\n:::\n:::\n\n\n### From NumPy ndarray to PyTorch tensor\n\n::: {#d0fc4dec .cell execution_count=27}\n``` {.python .cell-code}\nimport numpy as np\na = np.random.rand(2, 3)\na\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\narray([[0.95829615, 0.14386425, 0.18845223],\n       [0.38030131, 0.26575602, 0.55428177]])\n```\n:::\n:::\n\n\n::: {#24ab88bf .cell execution_count=28}\n``` {.python .cell-code}\na_pt = torch.from_numpy(a)\na_pt\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\ntensor([[0.9583, 0.1439, 0.1885],\n        [0.3803, 0.2658, 0.5543]], dtype=torch.float64)\n```\n:::\n:::\n\n\n:::{.note}\n\nNote the different default data types.\n\n:::\n\n## Indexing tensors\n\n::: {#16e61921 .cell execution_count=29}\n``` {.python .cell-code}\nt = torch.rand(3, 4)\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\ntensor([[0.0526, 0.0594, 0.8536, 0.7605],\n        [0.8433, 0.6671, 0.7284, 0.7912],\n        [0.1491, 0.4907, 0.3182, 0.5749]])\n```\n:::\n:::\n\n\n::: {#9a74f0b0 .cell execution_count=30}\n``` {.python .cell-code}\nt[:, 2]\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\ntensor([0.8536, 0.7284, 0.3182])\n```\n:::\n:::\n\n\n::: {#b9e29fc3 .cell execution_count=31}\n``` {.python .cell-code}\nt[1, :]\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\ntensor([0.8433, 0.6671, 0.7284, 0.7912])\n```\n:::\n:::\n\n\n::: {#fde3e39b .cell execution_count=32}\n``` {.python .cell-code}\nt[2, 3]\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\ntensor(0.5749)\n```\n:::\n:::\n\n\n:::{.info}\n\n**A word of caution about indexing**\n\nWhile indexing elements of a tensor to extract some of the data as a final step of some computation is fine, [you should not use indexing to run operations on tensor elements in a loop]{.emph} as this would be extremely inefficient.\n\nInstead, you want to use [vectorized operations]{.emph}.\n\n:::\n\n## Vectorized operations\n\nSince PyTorch tensors are homogeneous (i.e. made of a single data type), [as with NumPy's ndarrays](https://www.pythonlikeyoumeanit.com/Module3_IntroducingNumpy/VectorizedOperations.html#Vectorized-Operations), operations are vectorized and thus fast.\n\nNumPy is mostly written in C, PyTorch in C++. With either library, when you run vectorized operations on arrays/tensors, you don't use raw Python (slow) but compiled C/C++ code (much faster).\n\n[Here](https://pythonspeed.com/articles/vectorization-python/) is an excellent post explaining Python vectorization & why it makes such a big difference.\n\n## Data types\n\n### Default data type\n\nSince PyTorch tensors were built with efficiency in mind for neural networks, the default data type is **32-bit floating points**.\n\nThis is sufficient for accuracy and much faster than 64-bit floating points.\n\n:::{.note}\n\nBy contrast, NumPy ndarrays use 64-bit as their default.\n\n:::\n\n::: {#ae78384f .cell execution_count=33}\n``` {.python .cell-code}\nt = torch.rand(2, 4)\nt.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\ntorch.float32\n```\n:::\n:::\n\n\n### Setting data type at creation\n\nThe type can be set with the `dtype` argument:\n\n::: {#7bce0517 .cell execution_count=34}\n``` {.python .cell-code}\nt = torch.rand(2, 4, dtype=torch.float64)\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\ntensor([[0.0689, 0.1494, 0.6843, 0.0534],\n        [0.7135, 0.0026, 0.4056, 0.5815]], dtype=torch.float64)\n```\n:::\n:::\n\n\n:::{.note}\n\nPrinted tensors display attributes with values ≠ default values.\n\n:::\n\n::: {#412710d6 .cell execution_count=35}\n``` {.python .cell-code}\nt.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\ntorch.float64\n```\n:::\n:::\n\n\n### Changing data type\n\n::: {#9d0d07bf .cell execution_count=36}\n``` {.python .cell-code}\nt = torch.rand(2, 4)\nt.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\ntorch.float32\n```\n:::\n:::\n\n\n::: {#c3f46d1a .cell execution_count=37}\n``` {.python .cell-code}\nt2 = t.type(torch.float64)\nt2.dtype\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\ntorch.float64\n```\n:::\n:::\n\n\n### List of data types\n\n| dtype | Description |\n| ----- | ----- |\n| torch.float16 / torch.half | 16-bit / half-precision floating-point |\n| torch.float32 / torch.float | 32-bit / single-precision floating-point |\n| torch.float64 / torch.double | 64-bit / double-precision floating-point |\n| torch.uint8 | unsigned 8-bit integers |\n| torch.int8 | signed 8-bit integers |\n| torch.int16 / torch.short | signed 16-bit integers |\n| torch.int32 / torch.int | signed 32-bit integers |\n| torch.int64 / torch.long | signed 64-bit integers |\n| torch.bool | boolean |\n\n## Simple operations\n\n::: {#5e5d6d43 .cell execution_count=38}\n``` {.python .cell-code}\nt1 = torch.tensor([[1, 2], [3, 4]])\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\ntensor([[1, 2],\n        [3, 4]])\n```\n:::\n:::\n\n\n::: {#ade21809 .cell execution_count=39}\n``` {.python .cell-code}\nt2 = torch.tensor([[1, 1], [0, 0]])\nt2\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\ntensor([[1, 1],\n        [0, 0]])\n```\n:::\n:::\n\n\nOperation performed between elements at corresponding locations:\n\n::: {#5122df99 .cell execution_count=40}\n``` {.python .cell-code}\nt1 + t2\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\ntensor([[2, 3],\n        [3, 4]])\n```\n:::\n:::\n\n\nOperation applied to each element of the tensor:\n\n::: {#28753e61 .cell execution_count=41}\n``` {.python .cell-code}\nt1 + 1\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\ntensor([[2, 3],\n        [4, 5]])\n```\n:::\n:::\n\n\n### Reduction\n\n::: {#4ecebb74 .cell execution_count=42}\n``` {.python .cell-code}\nt = torch.ones(2, 3, 4);\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\ntensor([[[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]],\n\n        [[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]]])\n```\n:::\n:::\n\n\n::: {#38537e0f .cell execution_count=43}\n``` {.python .cell-code}\nt.sum()   # Reduction over all entries\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\ntensor(24.)\n```\n:::\n:::\n\n\n:::{.note}\n\nOther reduction functions (e.g. mean) behave the same way.\n\n:::\n\nReduction over a specific dimension:\n\n::: {#76739008 .cell execution_count=44}\n``` {.python .cell-code}\nt.sum(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\ntensor([[2., 2., 2., 2.],\n        [2., 2., 2., 2.],\n        [2., 2., 2., 2.]])\n```\n:::\n:::\n\n\n::: {#a2e20982 .cell execution_count=45}\n``` {.python .cell-code}\nt.sum(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\ntensor([[3., 3., 3., 3.],\n        [3., 3., 3., 3.]])\n```\n:::\n:::\n\n\n::: {#0f81565d .cell execution_count=46}\n``` {.python .cell-code}\nt.sum(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\ntensor([[4., 4., 4.],\n        [4., 4., 4.]])\n```\n:::\n:::\n\n\nReduction over multiple dimensions:\n\n::: {#5b44e0d6 .cell execution_count=47}\n``` {.python .cell-code}\nt.sum((0, 1))\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\ntensor([6., 6., 6., 6.])\n```\n:::\n:::\n\n\n::: {#8646a433 .cell execution_count=48}\n``` {.python .cell-code}\nt.sum((0, 2))\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\ntensor([8., 8., 8.])\n```\n:::\n:::\n\n\n::: {#0b43c3a6 .cell execution_count=49}\n``` {.python .cell-code}\nt.sum((1, 2))\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\ntensor([12., 12.])\n```\n:::\n:::\n\n\n### In-place operations\n\nWith operators post-fixed with `_`:\n\n::: {#0871f5f8 .cell execution_count=50}\n``` {.python .cell-code}\nt1 = torch.tensor([1, 2])\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\ntensor([1, 2])\n```\n:::\n:::\n\n\n::: {#4d93825b .cell execution_count=51}\n``` {.python .cell-code}\nt2 = torch.tensor([1, 1])\nt2\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\ntensor([1, 1])\n```\n:::\n:::\n\n\n::: {#5c6801dd .cell execution_count=52}\n``` {.python .cell-code}\nt1.add_(t2)\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\ntensor([2, 3])\n```\n:::\n:::\n\n\n::: {#49ccbf6d .cell execution_count=53}\n``` {.python .cell-code}\nt1.zero_()\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\ntensor([0, 0])\n```\n:::\n:::\n\n\n:::{.note}\n\nWhile reassignments will use new addresses in memory, in-place operations will use the same addresses.\n\n:::\n\n### Tensor views\n\n```{.python}\nt = torch.tensor([[1, 2, 3], [4, 5, 6]]); print(t)\nt.size()\nt.view(6)\nt.view(3, 2)\nt.view(3, -1) # Same: with -1, the size is inferred from other dimensions\n```\n\n:::{.info}\n\n**Note the difference**\n\n::: {#71f99fa6 .cell execution_count=54}\n``` {.python .cell-code}\nt1 = torch.tensor([[1, 2, 3], [4, 5, 6]])\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\ntensor([[1, 2, 3],\n        [4, 5, 6]])\n```\n:::\n:::\n\n\n::: {#bc29c382 .cell execution_count=55}\n``` {.python .cell-code}\nt2 = t1.t()\nt2\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\ntensor([[1, 4],\n        [2, 5],\n        [3, 6]])\n```\n:::\n:::\n\n\n::: {#f8b01cc4 .cell execution_count=56}\n``` {.python .cell-code}\nt3 = t1.view(3, 2)\nt3\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\ntensor([[1, 2],\n        [3, 4],\n        [5, 6]])\n```\n:::\n:::\n\n\n:::\n\n### Logical operations\n\n::: {#41924f2c .cell execution_count=57}\n``` {.python .cell-code}\nt1 = torch.randperm(5)\nt1\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\ntensor([2, 4, 0, 3, 1])\n```\n:::\n:::\n\n\n::: {#d22fd189 .cell execution_count=58}\n``` {.python .cell-code}\nt2 = torch.randperm(5)\nt2\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\ntensor([0, 3, 1, 2, 4])\n```\n:::\n:::\n\n\nTest each element:\n\n::: {#3aa9a682 .cell execution_count=59}\n``` {.python .cell-code}\nt1 > 3\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\ntensor([False,  True, False, False, False])\n```\n:::\n:::\n\n\nTest corresponding pairs of elements:\n\n::: {#c0d8bf0a .cell execution_count=60}\n``` {.python .cell-code}\nt1 < t2\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\ntensor([False, False,  True, False,  True])\n```\n:::\n:::\n\n\n## Device attribute\n\nTensor data can be placed in the memory of various processor types:\n\n- the RAM of CPU,\n- the RAM of a GPU with CUDA support,\n- the RAM of a GPU with [AMD's ROCm support](https://pytorch.org/blog/pytorch-for-amd-rocm-platform-now-available-as-python-package/),\n- the RAM of an [XLA device](https://www.tensorflow.org/xla) (e.g. [Cloud TPU](https://cloud.google.com/tpu)) with the [torch_xla package](https://github.com/pytorch/xla/).\n\nThe values for the device attributes are:\n\n- CPU: &nbsp;`'cpu'`,\n- GPU (CUDA & AMD's ROCm): &nbsp;`'cuda'`,\n- XLA: &nbsp;`xm.xla_device()`.\n\nThis last option requires to load the [torch_xla package](https://github.com/pytorch/xla/) first:\n\n```{.python}\nimport torch_xla\nimport torch_xla.core.xla_model as xm\n```\n\n### Creating a tensor on a specific device\n\nBy default, tensors are created on the CPU.\n\nYou can create a tensor on an accelerator by specifying the device attribute (our current training cluster does not have GPUs, so don't run this on it):\n\n```{.python}\nt_gpu = torch.rand(2, device='cuda')\n```\n\n### Copying a tensor to a specific device\n\nYou can also make copies of a tensor on other devices:\n\n```{.python}\n# Make a copy of t on the GPU\nt_gpu = t.to(device='cuda')\nt_gpu = t.cuda()             # Alternative syntax\n\n# Make a copy of t_gpu on the CPU\nt = t_gpu.to(device='cpu')\nt = t_gpu.cpu()              # Alternative syntax\n```\n\n### Multiple GPUs\n\nIf you have multiple GPUs, you can optionally specify which one a tensor should be created on or copied to:\n\n```{.python}\nt1 = torch.rand(2, device='cuda:0')  # Create a tensor on 1st GPU\nt2 = t1.to(device='cuda:0')          # Make a copy of t1 on 1st GPU\nt3 = t1.to(device='cuda:1')          # Make a copy of t1 on 2nd GPU\n```\n\nOr the equivalent short forms:\n\n```{.python}\nt2 = t1.cuda(0)\nt3 = t1.cuda(1)\n```\n\n",
    "supporting": [
      "pt_tensors_files"
    ],
    "filters": [],
    "includes": {}
  }
}