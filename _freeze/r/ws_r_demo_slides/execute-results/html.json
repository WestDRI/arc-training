{
  "hash": "c8f4781b758073c575383ed7bc9dc3e9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: A little demo of programming in\nfrontpic: img/logo_r.png\nfrontpicwidth: 40%\nnoshadow: noshadow\nauthor: Marie-H√©l√®ne Burle\ndate: 2024-02-15\ndate-format: long\nexecute:\n  error: true\n  echo: true\nformat:\n  revealjs:\n    embed-resources: true\n    theme: [default, ../revealjs.scss]\n    logo: /img/logo_sfudrac.png\n    highlight-style: monokai\n    code-line-numbers: false\n    template-partials:\n      - ../title-slide.html\n    pointer:\n      color: \"#b5111b\"\n      pointerSize: 32\n    link-external-newwindow: true\n    footer: <a href=\"ws_r_demo.html\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"rgb(153, 153, 153)\" class=\"bi bi-arrow-90deg-up\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z\"/></svg>&nbsp;Back to workshop page</a>\nrevealjs-plugins:\n  - pointer\n---\n\n\n# A few words about R\n\n## History {.center}\n\nCreated by academic statisticians [Ross Ihaka](https://en.wikipedia.org/wiki/Ross_Ihaka) and [Robert Gentleman](https://en.wikipedia.org/wiki/Robert_Gentleman_(statistician))\n\nThe name comes from the language S which was a great influence as well as the first initial of the developers\n\nLaunched in 1993\n\nA [GNU Project](https://en.wikipedia.org/wiki/GNU_Project) since 1997\n\n## Why R? {.center}\n\nFree and open source\n\nHigh-level and easy to learn\n\nLarge community\n\nVery well documented\n\nUnequalled number of statistics and modelling packages\n\nIntegrated package manager\n\nEasy connection with fast compiled languages such as C and C++\n\nPowerful IDEs (e.g. [RStudio](https://posit.co/download/rstudio-desktop/), [ESS](https://ess.r-project.org/), [Jupyter](https://jupyter.org/))\n\n## For whom? {.center}\n\nFields with heavy statistics, modelling, or Bayesian inference such as biology, linguistics, economics, or statistics\n\nData science\n\n## Downsides {.center}\n\nInconsistent syntax full of quirks\n\nSlow\n\nLarge memory usage\n\n# Running R\n\n## An interpreted language {.center}\n\nR being an interpreted language, it can be run non-interactively or interactively\n\n## Running R non-interactively {.center}\n\nIf you write code in a text file (called a script), you can then execute it with:\n\n```{.r}\nRscript my_script.R\n```\n\n:::{.note}\n\nThe command to execute scripts is `Rscript` rather than `R`. \\\nBy convention, R scripts take the extension `.R`.\n\n:::\n\n## Running R interactively {.center}\n\nThere are several ways to run R interactively:\n\n- directly in the **console** (the name for the R shell)\n- in **[Jupyter](https://jupyter.org/)** with the R kernel ([IRkernel package](https://cran.rstudio.com/web/packages/IRkernel/index.html))\n- in **another IDE** (e.g. in Emacs with [ESS](https://ess.r-project.org/))\n- in the **RStudio IDE**\n\n---\n\n### The R console\n\n![](img/console.png){fig-alt=\"noshadow\" width=\"80%\"}\n\n---\n\n### RStudio\n\n[Posit](https://posit.co/) (formerly RStudio Inc.) developed a great and very popular IDE called [RStudio](https://posit.co/download/rstudio-desktop/)\n\nHere is its cheatsheet:\n\n[![](img/rstudio-ide_1.jpg){width=\"50%\"}](https://posit.co/wp-content/uploads/2022/10/rstudio-ide-1.pdf)\n\n:::{.caption}\n\nfrom [Posit Cheatsheets](https://posit.co/resources/cheatsheets/)\n\n:::\n\n# A few basics\n\n## Documentation {.center}\n\nThe R documentation is excellent. Get info on any function with `?` (e.g. `?sum`)\n\n## Basic operations {.center}\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 5\n\n4 + a\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n\n## Statistics, probabilities, and modelling {.center}\n\nR really shines when it comes to statistics and modelling\n\nWe will spend the rest of the hour diving into very complex and heavy Bayesian statistics\n\n## Just kidding üôÇ {.center}\n\nIn this demo, I will stick to fun topics\n\n# Data visualization\n\n## Datasets {.center}\n\nR comes with a number of datasets. You can get a list by running `data()`\n\n## Datasets {.center}\n\nThe `ggplot2` package provides [additional ones](https://ggplot2.tidyverse.org/reference/#data), such as the `mpg` dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nhead(mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 √ó 11\n  manufacturer model displ  year   cyl trans      drv     cty   hwy fl   \n  <chr>        <chr> <dbl> <int> <int> <chr>      <chr> <int> <int> <chr>\n1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p    \n2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p    \n3 audi         a4      2    2008     4 manual(m6) f        20    31 p    \n4 audi         a4      2    2008     4 auto(av)   f        21    30 p    \n5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p    \n6 audi         a4      2.8  1999     6 manual(m5) f        18    26 p    \n  class  \n  <chr>  \n1 compact\n2 compact\n3 compact\n4 compact\n5 compact\n6 compact\n```\n\n\n:::\n:::\n\n\n## The canvas {.center}\n<br>\nThe first component is the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg)\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## The canvas {.center}\n\nThe second component sets the way variables are mapped on the axes. This is done with the `aes()` (aesthetics) function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy))\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## Geometric representations of the data {.center}\n\nOnto this canvas, we can add \"geoms\" (geometrical objects) representing the data. \\\nTo represent the data as a scatterplot, we use the `geom_point()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## Colour-coding based on variables {.center}\n\nWe can colour-code the points in the scatterplot based on the `drv` variable, showing the lower fuel efficiency of 4WD vehicles:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = drv))\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n## Colour-coding based on variables {.center}\n\nOr we can colour-code them based on the `class` variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class))\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n## Multiple geoms {.center}\n\nMultiple \"geoms\" can be added on top of each other. For instance, we can add a smoothed conditional means function that aids at seeing patterns in the data with `geom_smooth()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n---\n\nThe default smoothing function uses the LOESS (locally estimated scatterplot smoothing) method. We can change the method by passing it as an argument to `geom_smooth()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth(method = lm)\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n---\n\nWe can apply the smoothing function to each class instead of the entire data. It creates a busy plot but shows that the downward trend remains true within each type of car:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point(aes(color = class)) +\n  geom_smooth(method = lm)\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n---\n\nWe can remove the standard errors and customize the line for our linear model:\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth(\n    method = lm,\n    se = FALSE,\n    color = \"#999999\",\n    linewidth = 0.5\n  )\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n## Colour scales {.center}\n\n![](img/color_scale.png){width=\"80%\"}\n\n---\n\nLet's try the `Dark2` palette:\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  geom_smooth(\n    method = lm,\n    se = FALSE,\n    color = \"#999999\",\n    linewidth = 0.5\n  )\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n---\n\nWe can add title, axes labels, captions...\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  geom_smooth(\n    method = lm,\n    se = FALSE,\n    color = \"#999999\",\n    linewidth = 0.5\n  ) +\n  labs(\n    title = \"Fuel consumption per engine size on highways\",\n    x = \"Engine size (L)\",\n    y = \"Fuel economy (mpg) on highways\",\n    color = \"Type of car\",\n    caption = \"EPA data from https://fueleconomy.gov/\"\n  )\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n---\n\nLet's change the theme to remove all this background noise:\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\ngeom_point(aes(color = class)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  geom_smooth(\n    method = lm,\n    se = FALSE,\n    color = \"#999999\",\n    linewidth = 0.5\n  ) +\n  labs(\n    title = \"Fuel consumption per engine size on highways\",\n    x = \"Engine size (L)\",\n    y = \"Fuel economy (mpg) on highways\",\n    color = \"Type of car\",\n    caption = \"EPA data from https://fueleconomy.gov/\"\n  ) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n---\n\nThe `theme()` function allows to tweak the theme in any number of ways. For instance, what if we don't like the default position of the title and we'd rather have it centered?\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\ngeom_point(aes(color = class)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  geom_smooth(\n    method = lm,\n    se = FALSE,\n    color = \"#999999\",\n    linewidth = 0.5\n  ) +\n  labs(\n    title = \"Fuel consumption per engine size on highways\",\n    x = \"Engine size (L)\",\n    y = \"Fuel economy (mpg) on highways\",\n    color = \"Type of car\",\n    caption = \"EPA data from https://fueleconomy.gov/\"\n  ) +\n  theme_classic() +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n---\n\nMany things can be changed thanks to the `theme()` function. For instance, we can move the legend to give more space to the actual graph:\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\ngeom_point(aes(color = class)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  geom_smooth(\n    method = lm,\n    se = FALSE,\n    color = \"#999999\",\n    linewidth = 0.5\n  ) +\n  labs(\n    title = \"Fuel consumption per engine size on highways\",\n    x = \"Engine size (L)\",\n    y = \"Fuel economy (mpg) on highways\",\n    color = \"Type of car\",\n    caption = \"EPA data from https://fueleconomy.gov/\"\n  ) +\n  theme_classic() +\n  theme(plot.title = element_text(hjust = 0.5), legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n## ggplot extension packages\n\nMany extensions exist for `ggplot2`:\n\n\n```{=html}\n<iframe width=\"780\" height=\"1000\" src=\"https://exts.ggplot2.tidyverse.org/gallery/\"></iframe>\n```\n\n\n## Combining plots {.center}\n\nOne ggplot extension is the [patchwork](https://patchwork.data-imaginist.com/) package which allows to combine multiple plots on the same frame\n\n---\n\nLet's add a second plot next to our plot (we also make a few changes to the labels to improve the plots integration):\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nlibrary(patchwork)\n\nggplot(mpg, aes(x = displ, y = hwy)) +        # First plot\n  geom_point(aes(color = class)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  geom_smooth(\n    method = lm,\n    se = FALSE,\n    color = \"#999999\",\n    linewidth = 0.5\n  ) +\n  labs(\n    x = \"Engine size (L)\",\n    y = \"Fuel economy (mpg) on highways\",\n    color = \"Type of car\"\n  ) +\n  theme_classic() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.position = c(0.7, 0.75),           # Better legend position\n    legend.background = element_rect(         # Add a frame to the legend\n      linewidth = 0.1,\n      linetype = \"solid\",\n      colour = \"black\"\n    )\n  ) +\n  ggplot(mpg, aes(x = displ, y = hwy)) +      # Second plot\n  geom_point(aes(color = drv)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  labs(\n    x = \"Engine size (L)\",\n    y = element_blank(),                      # Remove redundant label\n    color = \"Type of drive train\",\n    caption = \"EPA data from https://fueleconomy.gov/\"\n  ) +\n  theme_classic() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.position = c(0.7, 0.87),\n    legend.background = element_rect(\n      linewidth = 0.1,\n      linetype = \"solid\",\n      colour = \"black\"\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n# Web scraping\n\n## HTML and CSS {.center}\n\n[HyperText Markup Language](https://en.wikipedia.org/wiki/HTML) (HTML) is the standard markup language for websites: it encodes the information related to the formatting and structure of webpages. Additionally, some of the customization can be stored in [Cascading Style Sheets](https://en.wikipedia.org/wiki/CSS) (CSS) files.\n\nHTML uses tags of the form:\n\n```{.html}\n<some_tag>Your content</some_tag>\n```\n\nSome tags have attributes:\n\n```{.html}\n<some_tag attribute_name=\"attribute value\">Your content</some_tag>\n```\n\n:::{.example}\n\nExamples:\n\n:::\n\n- `<h2>This is a heading of level 2</h2>`\n- `<b>This is bold</b>`\n- `<a href=\"https://some.url\">This is the text for a link</a>`\n\n## Example for this workshop {.center}\n\nWe will use [a website](https://trace.tennessee.edu/utk_graddiss/index.html) from the [University of Tennessee](https://www.utk.edu/) containing a database of PhD theses from that university\n\nOur goal is to scrape data from this site to produce a dataframe with the date, major, and advisor for each dissertation\n\n:::{.note}\n\nWe will only do this for the first page which contains the links to the 100 most recent theses. If you really wanted to gather all the data, you would have to do this for all pages\n\n:::\n\n## Package {.center}\n\nTo do all this, we will use the package [rvest](https://cran.r-project.org/web/packages/rvest/index.html), part of the [tidyverse](https://www.tidyverse.org/) (a modern set of R packages). It is a package influenced by the popular Python package [Beautiful Soup](https://en.wikipedia.org/wiki/Beautiful_Soup_(HTML_parser)) and it makes scraping websites with R really easy\n\nLet's load it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\n```\n:::\n\n\n## Read in HTML from main site {.center}\n\nAs mentioned above, our site is the [database of PhD dissertations from the University of Tennessee](https://trace.tennessee.edu/utk_graddiss/index.html)\n\nLet's create a character vector with the URL:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://trace.tennessee.edu/utk_graddiss/index.html\"\n```\n:::\n\n\nFirst, we read in the html data from that page:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml <- read_html(url)\n```\n:::\n\n\nLet's have a look at the raw data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{html_document}\n<html lang=\"en\">\n[1] <head>\\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ...\n[2] <body>\\n<!-- FILE /srv/sequoia/main/data/trace.tennessee.edu/assets/heade ...\n```\n\n\n:::\n:::\n\n\n## Extract all URLs {.center}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- html %>% html_elements(\".article-listing a\")\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{xml_nodeset (100)}\n [1] <a href=\"https://trace.tennessee.edu/utk_graddiss/8076\">Understanding ho ...\n [2] <a href=\"https://trace.tennessee.edu/utk_graddiss/9158\">Generating Diver ...\n [3] <a href=\"https://trace.tennessee.edu/utk_graddiss/8080\">FABRICATION, MEA ...\n [4] <a href=\"https://trace.tennessee.edu/utk_graddiss/8086\">Development and  ...\n [5] <a href=\"https://trace.tennessee.edu/utk_graddiss/8078\">The Light from P ...\n [6] <a href=\"https://trace.tennessee.edu/utk_graddiss/9185\">Image Deblurring ...\n [7] <a href=\"https://trace.tennessee.edu/utk_graddiss/8584\">Clickable Lipid  ...\n [8] <a href=\"https://trace.tennessee.edu/utk_graddiss/8703\">Retinoic Acid, I ...\n [9] <a href=\"https://trace.tennessee.edu/utk_graddiss/8987\">Development and  ...\n[10] <a href=\"https://trace.tennessee.edu/utk_graddiss/8734\">Defining Systemi ...\n[11] <a href=\"https://trace.tennessee.edu/utk_graddiss/8073\">Investigating th ...\n[12] <a href=\"https://trace.tennessee.edu/utk_graddiss/8088\">The Disparate Ef ...\n[13] <a href=\"https://trace.tennessee.edu/utk_graddiss/9077\">Social Wellness  ...\n[14] <a href=\"https://trace.tennessee.edu/utk_graddiss/8077\">A HIERARCHICAL P ...\n[15] <a href=\"https://trace.tennessee.edu/utk_graddiss/8094\">Nurse Staffing a ...\n[16] <a href=\"https://trace.tennessee.edu/utk_graddiss/8714\">Ruinous Natures: ...\n[17] <a href=\"https://trace.tennessee.edu/utk_graddiss/9050\">Toward Accelerat ...\n[18] <a href=\"https://trace.tennessee.edu/utk_graddiss/8737\">Implementing the ...\n[19] <a href=\"https://trace.tennessee.edu/utk_graddiss/8074\">Riding the Wave: ...\n[20] <a href=\"https://trace.tennessee.edu/utk_graddiss/9177\">A TWO-DIAMETER H ...\n...\n```\n\n\n:::\n:::\n\n\n## Extract all URLs {.center}\n\nWe now have a list of lists\n\nBefore running for loops, it is important to initialize empty loops. It is much more efficient than growing the result at each iteration\n\nSo let's initialize an empty list that we call `list_urls` of the appropriate size:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_urls <- vector(\"list\", length(dat))\n```\n:::\n\n\n## Extract all URLs {.center}\n\nNow we can run a loop to fill in our list:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in seq_along(dat)) {\n  list_urls[[i]] <- dat[[i]] %>% html_attr(\"href\")\n}\n```\n:::\n\n\nLet's print again the first element of `list_urls` to make sure all looks good:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_urls[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"https://trace.tennessee.edu/utk_graddiss/8076\"\n```\n\n\n:::\n:::\n\n\nWe now have a list of URLs (in the form of character vectors) as we wanted\n\n## Extract data from each page {.center}\n\nWe will now extract the data (date, major, and advisor) for all URLs in our list.\n\nAgain, before running a for loop, we need to allocate memory first by creating an empty container (here a list):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_data <- vector(\"list\", length(list_urls))\n\nfor (i in seq_along(list_urls)) {\n  html <- read_html(list_urls[[i]])\n  date <- html %>%\n    html_element(\"#publication_date p\") %>%\n    html_text2()\n  major <- html %>%\n    html_element(\"#department p\") %>%\n    html_text2()\n  advisor <- html %>%\n    html_element(\"#advisor1 p\") %>%\n    html_text2()\n  Sys.sleep(0.1)  # Add a little delay\n  list_data[[i]] <- cbind(date, major, advisor)\n}\n```\n:::\n\n\n## Store results in DataFrame {.center}\n\nWe can turn this big list into a dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- do.call(rbind.data.frame, list_data)\n```\n:::\n\n\nWe can capitalize the headers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(result) <- c(\"Date\", \"Major\", \"Advisor\")\n```\n:::\n\n\n## Our final data {.center}\n\n`result` is a long dataframe, so we will only print the first few elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(result, 15)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      Date                          Major               Advisor\n1   5-2023                  Life Sciences       Bode A. Olukolu\n2  12-2023         Industrial Engineering            Hugh Medal\n3   5-2023            Nuclear Engineering           Erik Lukosi\n4   5-2023 Energy Science and Engineering   Kyle R. Gluesenkamp\n5   5-2023                        English Margaret Lazarus Dean\n6  12-2023         Industrial Engineering          Hoon Hwangbo\n7   8-2023                      Chemistry       Michael D. Best\n8   8-2023           Nutritional Sciences         Jiangang Chen\n9  12-2023         Mechanical Engineering      Dustin L. Crouch\n10  8-2023            Counselor Education    Melinda M. Gibbons\n11  5-2023         Mechanical Engineering            Doug Aaron\n12  5-2023        Business Administration           Linda Myers\n13 12-2023            Counselor Education   Joel Foster Diambra\n14  5-2023         Industrial Engineering         John E. Kobza\n15  5-2023                        Nursing       Carole R. Myers\n```\n\n\n:::\n:::\n\n\n## Save results to file {.center}\n\nIf we wanted, we could save our data to a CSV file:\n\n```{.r}\nwrite.csv(result, \"dissertations_data.csv\", row.names = FALSE)\n```\n\n# GIS mapping{background-color=\"black\" background-image=\"img/bg_na_watersheds.png\" background-size=\"70%\"}\n\n:::footer\n\nImage credit: Sz≈±cs R√≥bert, Grasshopper Geography\n\n:::\n\n## Data reading and manipulation {.center}\n\n- Spatial vectors: great modern packages are [sf](https://github.com/r-spatial/sf) or [terra](https://github.com/rspatial/terra)\n- Raster data: the package [terra](https://github.com/rspatial/terra)\n\nI will skip the data preparation due to lack of time, but you can look at the code in [this webinar](https://mint.westdri.ca/r/wb_gis_mapping#example-glaciers-melt-in-north-america) or [this workshop](https://mint.westdri.ca/r/ws_gis_intro)\n\n## Map of glaciers in western North America {.center}\n\n```{.r}\ntm_shape(states, bbox = nwa_bbox) +\n  tm_polygons(col = \"#f2f2f2\", lwd = 0.2) +\n  tm_shape(ak) +\n  tm_borders(col = \"#3399ff\") +\n  tm_fill(col = \"#86baff\") +\n  tm_shape(wes) +\n  tm_borders(col = \"#3399ff\") +\n  tm_fill(col = \"#86baff\") +\n  tm_layout(\n    title = \"Glaciers of Western North America\",\n    title.position = c(\"center\", \"top\"),\n    title.size = 1.1,\n    bg.color = \"#fcfcfc\",\n    inner.margins = c(0.06, 0.01, 0.09, 0.01),\n    outer.margins = 0,\n    frame.lwd = 0.2\n  ) +\n  tm_compass(\n    type = \"arrow\",\n    position = c(\"right\", \"top\"),\n    size = 1.2,\n    text.size = 0.6\n  ) +\n  tm_scale_bar(\n    breaks = c(0, 1000, 2000),\n    position = c(\"right\", \"BOTTOM\")\n  )\n```\n\n---\n\n![](img/nwa_bg.jpg){fig-align=\"center\"}\n\n## Multi-layer map of the retreat of a glacier {.center}\n\n```{.r}\ntm_shape(ag) +\n  tm_polygons(\"year\", palette = \"Blues\") +\n  tm_layout(\n    title = \"Agassiz Glacier\",\n    title.position = c(\"center\", \"top\"),\n    legend.position = c(\"left\", \"bottom\"),\n    legend.title.color = \"#fcfcfc\",\n    legend.text.size = 1,\n    bg.color = \"#fcfcfc\",\n    inner.margins = c(0.07, 0.03, 0.07, 0.03),\n    outer.margins = 0\n  ) +\n  tm_compass(\n    type = \"arrow\",\n    position = c(\"right\", \"top\"),\n    text.size = 0.7\n  ) +\n  tm_scale_bar(\n    breaks = c(0, 0.5, 1),\n    position = c(\"right\", \"BOTTOM\"),\n    text.size = 1\n  )\n```\n\n---\n\n![](img/ag.png){fig-align=\"center\"}\n\n## Animated map of the retreat of a glacier {.center}\n\n```{.r}\ntmap_animation(tm_shape(ag) +\n                 tm_polygons(col = \"#86baff\") +\n                 tm_layout(\n                   title = \"Agassiz Glacier\",\n                   title.position = c(\"center\", \"top\"),\n                   legend.position = c(\"left\", \"bottom\"),\n                   legend.title.color = \"#fcfcfc\",\n                   legend.text.size = 1,\n                   bg.color = \"#fcfcfc\",\n                   inner.margins = c(0.08, 0, 0.08, 0),\n                   outer.margins = 0,\n                   panel.label.bg.color = \"#fcfcfc\"\n                 ) +\n                 tm_compass(\n                   type = \"arrow\",\n                   position = c(\"right\", \"top\"),\n                   text.size = 0.7\n                 ) +\n                 tm_scale_bar(\n                   breaks = c(0, 0.5, 1),\n                   position = c(\"right\", \"BOTTOM\"),\n                   text.size = 1\n                 ) +\n                 tm_facets(\n                   along = \"year\",\n                   free.coords = F\n                 )filename = \"ag.gif\",\n               dpi = 300,\n               inner.margins = c(0.08, 0, 0.08, 0),\n               delay = 100\n               )\n\n```\n\n---\n\n![](img/ag.gif){width=\"50%\" fig-align=\"center\"}\n\n# So, how to get started in R?\n\n## Three-day introductory workshop for the HSS {.center}\n\nAs a follow-up to this year HSS Series, we will be offering a free three-day hands-on introduction to R for researchers in the humanities, arts, and social sciences\n\nYou can register [here](https://docs.google.com/forms/d/e/1FAIpQLSegbJDI3x42wy-ExbhFRI0_ZtN-BlQnofLs83fbnHFXnYYYbQ/viewform)\n\n## Beyond the HSS series {.center}\n\nEach region under the Alliance offers regular courses and workshops in R (and many other topics)\n\nIn the west, Alex Razoumov and myself offer regular free workshops, courses, and webinars for researchers in Canadian academic institutions\n\nYou can find our program [here](https://training.westdri.ca/events/upcoming-training-winter-spring-2024/) or join our mailing list [here](https://training.westdri.ca/contact/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}