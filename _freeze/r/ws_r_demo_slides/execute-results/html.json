{
  "hash": "55ba95930b063cf6b73dc37d82f9d9ff",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: A little demo of programming in\nfrontpic: img/logo_r.png\nfrontpicwidth: 40%\nnoshadow: noshadow\nauthor: Marie-Hélène Burle\ndate: 2024-02-15\ndate-format: long\nexecute:\n  error: true\n  echo: true\nformat:\n  revealjs:\n    # embed-resources: true\n    theme: [default, ../revealjs.scss]\n    logo: /img/logo_sfudrac.png\n    highlight-style: monokai\n    code-line-numbers: false\n    template-partials:\n      - ../title-slide.html\n    pointer:\n      color: \"#b5111b\"\n      pointerSize: 32\n    link-external-newwindow: true\n    footer: <a href=\"ws_r_demo.html\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"rgb(153, 153, 153)\" class=\"bi bi-arrow-90deg-up\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z\"/></svg>&nbsp;Back to workshop page</a>\nrevealjs-plugins:\n  - pointer\n---\n\n\n# A few words about R\n\n## Why R? {.center}\n\n- Free and open source\n- High-level and easy to learn\n- Large community\n- Very well documented\n- Unequalled number of statistics and modelling packages\n- Integrated package manager\n- Easy connection with fast compiled languages such as C and C++\n- Powerful IDEs (e.g. [RStudio](https://posit.co/download/rstudio-desktop/), [ESS](https://ess.r-project.org/), [Jupyter](https://jupyter.org/))\n\n## For whom? {.center}\n\n- Fields with heavy statistics, modelling, or Bayesian analysis such as biology, linguistics, economics, or statistics\n- Data science using a lot of tabular data\n\n## Downsides {.center}\n\n- Inconsistent syntax full of quirks\n- Slow\n- Large memory usage\n\n# Statistics & modelling\n\n# Data visualization\n\n![](img/plot.png){fig-align=\"center\" width=\"60%\"}\n\n## Datasets {.center}\n\nR comes with a number of datasets. You can get a list by running `data()`. The `ggplot2` package provides [additional ones](https://ggplot2.tidyverse.org/reference/#data). We will use the `mpg` dataset from `ggplot2`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nhead(mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n  manufacturer model displ  year   cyl trans      drv     cty   hwy fl   \n  <chr>        <chr> <dbl> <int> <int> <chr>      <chr> <int> <int> <chr>\n1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p    \n2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p    \n3 audi         a4      2    2008     4 manual(m6) f        20    31 p    \n4 audi         a4      2    2008     4 auto(av)   f        21    30 p    \n5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p    \n6 audi         a4      2.8  1999     6 manual(m5) f        18    26 p    \n  class  \n  <chr>  \n1 compact\n2 compact\n3 compact\n4 compact\n5 compact\n6 compact\n```\n\n\n:::\n:::\n\n\n## The canvas {.center}\n<br>\nThe first component is the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg)\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n## The canvas {.center}\n\nThe second component sets the way variables are mapped on the axes. This is done with the `aes()` (aesthetics) function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy))\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## Geometric representations of the data {.center}\n\nOnto this canvas, we can add \"geoms\" (geometrical objects) representing the data. \\\nTo represent the data as a scatterplot, we use the `geom_point()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## Colour-coding based on variables {.center}\n\nWe can colour-code the points in the scatterplot based on the `drv` variable, showing the lower fuel efficiency of 4WD vehicles:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = drv))\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## Colour-coding based on variables {.center}\n\nOr we can colour-code them based on the `class` variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class))\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n## Multiple geoms {.center}\n\nMultiple \"geoms\" can be added on top of each other. For instance, we can add a smoothed conditional means function that aids at seeing patterns in the data with `geom_smooth()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n---\n\nThe default smoothing function uses the LOESS (locally estimated scatterplot smoothing) method. We can change the method by passing it as an argument to `geom_smooth()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth(method = lm)\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n---\n\nWe can apply the smoothing function to each class instead of the entire data. It creates a busy plot but shows that the downward trend remains true within each type of car:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point(aes(color = class)) +\n  geom_smooth(method = lm)\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth(\n    method = lm,\n    se = FALSE,\n    color = \"#999999\",\n    linewidth = 0.5\n  )\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n## Colour scales {.center}\n\n![](img/color_scale.png){width=\"90%\"}\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  geom_smooth(\n    method = lm,\n    se = FALSE,\n    color = \"#999999\",\n    linewidth = 0.5\n  )\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n---\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  geom_smooth(\n    method = lm,\n    se = FALSE,\n    color = \"#999999\",\n    linewidth = 0.5\n  ) +\n  labs(\n    title = \"Fuel consumption per engine size on highways\",\n    x = \"Engine size (L)\",\n    y = \"Fuel economy (mpg) on highways\",\n    color = \"Type of car\",\n    caption = \"EPA data from https://fueleconomy.gov/\"\n  )\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n---\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\ngeom_point(aes(color = class)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  geom_smooth(\n    method = lm,\n    se = FALSE,\n    color = \"#999999\",\n    linewidth = 0.5\n  ) +\n  labs(\n    title = \"Fuel consumption per engine size on highways\",\n    x = \"Engine size (L)\",\n    y = \"Fuel economy (mpg) on highways\",\n    color = \"Type of car\",\n    caption = \"EPA data from https://fueleconomy.gov/\"\n  ) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n---\n\nThe `theme()` function allows to tweak the theme in any number of ways. For instance, what if we don't like the default position of the title and we'd rather have it centered?\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\ngeom_point(aes(color = class)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  geom_smooth(\n    method = lm,\n    se = FALSE,\n    color = \"#999999\",\n    linewidth = 0.5\n  ) +\n  labs(\n    title = \"Fuel consumption per engine size on highways\",\n    x = \"Engine size (L)\",\n    y = \"Fuel economy (mpg) on highways\",\n    color = \"Type of car\",\n    caption = \"EPA data from https://fueleconomy.gov/\"\n  ) +\n  theme_classic() +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n---\n\nMany things can be changed thanks to the `theme()` function. For instance, we can move the legend to give more space to the actual graph:\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\ngeom_point(aes(color = class)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  geom_smooth(\n    method = lm,\n    se = FALSE,\n    color = \"#999999\",\n    linewidth = 0.5\n  ) +\n  labs(\n    title = \"Fuel consumption per engine size on highways\",\n    x = \"Engine size (L)\",\n    y = \"Fuel economy (mpg) on highways\",\n    color = \"Type of car\",\n    caption = \"EPA data from https://fueleconomy.gov/\"\n  ) +\n  theme_classic() +\n  theme(plot.title = element_text(hjust = 0.5), legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n## Combining plots {.center}\n\nFor instance the [`patchwork`](https://patchwork.data-imaginist.com/) package allows to easily combine multiple plots on the same frame.\n\nLet's add a second plot next to our plot. To add plots side by side, we simply add them to each other. We also make a few changes to the labels to improve the plots integration:\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nlibrary(patchwork)\n\nggplot(mpg, aes(x = displ, y = hwy)) +        # First plot\n  geom_point(aes(color = class)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  geom_smooth(\n    method = lm,\n    se = FALSE,\n    color = \"#999999\",\n    linewidth = 0.5\n  ) +\n  labs(\n    x = \"Engine size (L)\",\n    y = \"Fuel economy (mpg) on highways\",\n    color = \"Type of car\"\n  ) +\n  theme_classic() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.position = c(0.7, 0.75),           # Better legend position\n    legend.background = element_rect(         # Add a frame to the legend\n      linewidth = 0.1,\n      linetype = \"solid\",\n      colour = \"black\"\n    )\n  ) +\n  ggplot(mpg, aes(x = displ, y = hwy)) +      # Second plot\n  geom_point(aes(color = drv)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  labs(\n    x = \"Engine size (L)\",\n    y = element_blank(),                      # Remove redundant label\n    color = \"Type of drive train\",\n    caption = \"EPA data from https://fueleconomy.gov/\"\n  ) +\n  theme_classic() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.position = c(0.7, 0.87),\n    legend.background = element_rect(\n      linewidth = 0.1,\n      linetype = \"solid\",\n      colour = \"black\"\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](ws_r_demo_slides_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n## Extensions list {.center}\n\nMany extensions exist for `ggplot2`:\n\n\n```{=html}\n<iframe width=\"780\" height=\"1000\" src=\"https://exts.ggplot2.tidyverse.org/gallery/\"></iframe>\n```\n\n\n<!-- # Web scraping -->\n\n<!-- ## HTML and CSS -->\n\n<!-- [HyperText Markup Language](https://en.wikipedia.org/wiki/HTML) (HTML) is the standard markup language for websites: it encodes the information related to the formatting and structure of webpages. Additionally, some of the customization can be stored in [Cascading Style Sheets](https://en.wikipedia.org/wiki/CSS) (CSS) files. -->\n\n<!-- HTML uses tags of the form: -->\n\n<!-- ```{.html} -->\n<!-- <some_tag>Your content</some_tag> -->\n<!-- ``` -->\n\n<!-- Some tags have attributes: -->\n\n<!-- ```{.html} -->\n<!-- <some_tag attribute_name=\"attribute value\">Your content</some_tag> -->\n<!-- ``` -->\n\n<!-- :::{.example} -->\n\n<!-- Examples: -->\n\n<!-- ::: -->\n\n<!-- - `<h2>This is a heading of level 2</h2>` -->\n<!-- - `<b>This is bold</b>` -->\n<!-- - `<a href=\"https://some.url\">This is the text for a link</a>` -->\n\n<!-- ## Example for this workshop -->\n\n<!-- We will use [a website](https://trace.tennessee.edu/utk_graddiss/index.html) from the [University of Tennessee](https://www.utk.edu/) containing a database of PhD theses from that university. -->\n\n<!-- Our goal is to scrape data from this site to produce a dataframe with the date, major, and advisor for each dissertation. -->\n\n<!-- :::{.note} -->\n\n<!-- We will only do this for the first page which contains the links to the 100 most recent theses. If you really wanted to gather all the data, you would have to do this for all pages. -->\n\n<!-- ::: -->\n\n<!-- ## Package -->\n\n<!-- To do all this, we will use the package [rvest](https://cran.r-project.org/web/packages/rvest/index.html), part of the [tidyverse](https://www.tidyverse.org/) (a modern set of R packages). It is a package influenced by the popular Python package [Beautiful Soup](https://en.wikipedia.org/wiki/Beautiful_Soup_(HTML_parser)) and it makes scraping websites with R really easy. -->\n\n<!-- Let's load it: -->\n\n<!-- ```{r} -->\n<!-- library(rvest) -->\n<!-- ``` -->\n\n<!-- ## Read in HTML from main site -->\n\n<!-- As mentioned above, our site is the [database of PhD dissertations from the University of Tennessee](https://trace.tennessee.edu/utk_graddiss/index.html). -->\n\n<!-- Let's create a character vector with the URL: -->\n\n<!-- ```{r} -->\n<!-- url <- \"https://trace.tennessee.edu/utk_graddiss/index.html\" -->\n<!-- ``` -->\n\n<!-- First, we read in the html data from that page: -->\n\n<!-- ```{r} -->\n<!-- html <- read_html(url) -->\n<!-- ``` -->\n\n<!-- Let's have a look at the raw data: -->\n\n<!-- ```{r} -->\n<!-- html -->\n<!-- ``` -->\n\n<!-- ## Extract all URLs -->\n\n<!-- ```{r} -->\n<!-- dat <- html %>% html_elements(\".article-listing a\") -->\n<!-- dat -->\n<!-- ``` -->\n\n<!-- We now have a list of lists. -->\n\n<!-- Before running for loops, it is important to initialize empty loops. It is much more efficient than growing the result at each iteration. -->\n\n<!-- So let's initialize an empty list that we call `list_urls` of the appropriate size: -->\n\n<!-- ```{r} -->\n<!-- list_urls <- vector(\"list\", length(dat)) -->\n<!-- ``` -->\n\n<!-- Now we can run a loop to fill in our list: -->\n\n<!-- ```{r} -->\n<!-- for (i in seq_along(dat)) { -->\n<!--   list_urls[[i]] <- dat[[i]] %>% html_attr(\"href\") -->\n<!-- } -->\n<!-- ``` -->\n\n<!-- Let's print again the first element of `list_urls` to make sure all looks good: -->\n\n<!-- ```{r} -->\n<!-- list_urls[[1]] -->\n<!-- ``` -->\n\n<!-- We now have a list of URLs (in the form of character vectors) as we wanted. -->\n\n<!-- ## Extract data from each page -->\n\n<!-- We will now extract the data (date, major, and advisor) for all URLs in our list. -->\n\n<!-- Again, before running a for loop, we need to allocate memory first by creating an empty container (here a list): -->\n\n<!-- ```{r} -->\n<!-- list_data <- vector(\"list\", length(list_urls)) -->\n\n<!-- for (i in seq_along(list_urls)) { -->\n<!--   html <- read_html(list_urls[[i]]) -->\n<!--   date <- html %>% -->\n<!--     html_element(\"#publication_date p\") %>% -->\n<!--     html_text2() -->\n<!--   major <- html %>% -->\n<!--     html_element(\"#department p\") %>% -->\n<!--     html_text2() -->\n<!--   advisor <- html %>% -->\n<!--     html_element(\"#advisor1 p\") %>% -->\n<!--     html_text2() -->\n<!--   Sys.sleep(0.1)  # Add a little delay -->\n<!--   list_data[[i]] <- cbind(date, major, advisor) -->\n<!-- } -->\n<!-- ``` -->\n\n<!-- ## Store results in DataFrame -->\n\n<!-- We can turn this big list into a dataframe: -->\n\n<!-- ```{r} -->\n<!-- result <- do.call(rbind.data.frame, list_data) -->\n<!-- ``` -->\n\n<!-- We can capitalize the headers: -->\n\n<!-- ```{r} -->\n<!-- names(result) <- c(\"Date\", \"Major\", \"Advisor\") -->\n<!-- ``` -->\n\n<!-- `result` is a long dataframe, so we will only print the first few elements: -->\n\n<!-- ```{r} -->\n<!-- head(result) -->\n<!-- ``` -->\n\n<!-- ## Save results to file -->\n\n<!-- As a final step, we will save our data to a CSV file: -->\n\n<!-- ```{.r} -->\n<!-- write.csv(result, \"dissertations_data.csv\", row.names = FALSE) -->\n<!-- ``` -->\n\n# GIS mapping{background-color=\"black\" background-image=\"img/bg_na_watersheds.png\" background-size=\"70%\"}\n\n:::footer\n\nImage credit: Szűcs Róbert, Grasshopper Geography\n\n:::\n\n## <br><br><br>Data: glaciers melt in North America\n\n- the Alaska as well as the Western Canada & USA subsets of the [Randolph Glacier Inventory](http://www.glims.org/RGI/) version 6.0[^2]\n- the [USGS time series of the named glaciers of Glacier National Park](https://www.sciencebase.gov/catalog/item/58af7022e4b01ccd54f9f542)[^3]\n- the Alaska as well as the Western Canada & USA subsets of the [consensus estimate for the ice thickness distribution of all glaciers on Earth dataset](https://www.research-collection.ethz.ch/handle/20.500.11850/315707)[^4]\n\n[^2]: RGI Consortium (2017). Randolph Glacier Inventory – A Dataset of Global Glacier Outlines: Version 6.0: Technical Report, Global Land Ice Measurements from Space, Colorado, USA. Digital Media. DOI: https://doi.org/10.7265/N5-RGI-60.\n[^3]: Fagre, D.B., McKeon, L.A., Dick, K.A. & Fountain, A.G., 2017, Glacier margin time series (1966, 1998, 2005, 2015) of the named glaciers of Glacier National Park, MT, USA: U.S. Geological Survey data release. DOI: https://doi.org/10.5066/F7P26WB1.\n[^4]: Farinotti, Daniel, 2019, A consensus estimate for the ice thickness distribution of all glaciers on Earth - dataset, Zurich. ETH Zurich. DOI: https://doi.org/10.3929/ethz-b-000315707.\n\n## Packages {.center}\n\n```{.r}\nlibrary(sf)                 # spatial vector data manipulation\nlibrary(tmap)               # map production & tiled web map\nlibrary(dplyr)              # non GIS specific (tabular data manipulation)\nlibrary(magrittr)           # non GIS specific (pipes)\nlibrary(purrr)              # non GIS specific (functional programming)\nlibrary(rnaturalearth)      # basemap data access functions\nlibrary(rnaturalearthdata)  # basemap data\nlibrary(ggmap)              # download basemap data\nlibrary(magick)             # wrapper around ImageMagick STL\n```\n\n## Randolph Glacier Inventory dataset {.center}\n\n```{.r}\nak <- st_read(\"data/01_rgi60_Alaska\")\n```\n\n```\nReading layer `01_rgi60_Alaska' from data source `./data/01_rgi60_Alaska'\n\t\t\t   using driver `ESRI Shapefile'\nSimple feature collection with 27108 features and 22 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -176.1425 ymin: 52.05727 xmax: -126.8545 ymax: 69.35167\nGeodetic CRS:  WGS 84\n```\n\n## Structure of the data {.center}\n\n```{.r}\nstr(ak)\n```\n\n```\nClasses ‘sf’ and 'data.frame':\t27108 obs. of  23 variables:\n$ RGIId   : chr  \"RGI60-01.00001\" \"RGI60-01.00002\" \"RGI60-01.00003\" ...\n$ GLIMSId : chr  \"G213177E63689N\" \"G213332E63404N\" \"G213920E63376N\" ...\n$ BgnDate : chr  \"20090703\" \"20090703\" \"20090703\" \"20090703\" ...\n$ EndDate : chr  \"-9999999\" \"-9999999\" \"-9999999\" \"-9999999\" ...\n$ CenLon  : num  -147 -147 -146 -146 -147 ...\n$ CenLat  : num  63.7 63.4 63.4 63.4 63.6 ...\n$ O1Region: chr  \"1\" \"1\" \"1\" \"1\" ...\n$ O2Region: chr  \"2\" \"2\" \"2\" \"2\" ...\n$ Area    : num  0.36 0.558 1.685 3.681 2.573 ...\n$ Zmin    : int  1936 1713 1609 1273 1494 1201 1918 2826 1750 1280 ...\n$ Zmax    : int  2725 2144 2182 2317 2317 3547 2811 3555 2514 1998 ...\n$ Zmed    : int  2385 2005 1868 1944 1914 1740 2194 3195 1977 1666 ...\n$ Slope   : num  42 16 18 19 16 22 23 45 18 17 ...\n$ Aspect  : int  346 162 175 195 181 33 151 80 274 35 ...\n$ Lmax    : int  839 1197 2106 4175 2981 10518 1818 613 2255 3332 ...\n$ Status  : int  0 0 0 0 0 0 0 0 0 0 ...\n$ Connect : int  0 0 0 0 0 0 0 0 0 0 ...\n$ Form    : int  0 0 0 0 0 0 0 0 0 0 ...\n$ TermType: int  0 0 0 0 0 0 0 0 0 0 ...\n$ Surging : int  9 9 9 9 9 9 9 9 9 9 ...\n$ Linkages: int  9 9 9 9 9 9 9 9 9 9 ...\n$ Name    : chr  NA NA NA NA ...\n$ geometry:sfc_POLYGON of length 27108; first list element: List of 1\n..$ : num [1:65, 1:2] -147 -147 -147 -147 -147 ...\n..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\"\n- attr(*, \"sf_column\")= chr \"geometry\"\n- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA ...\n..- attr(*, \"names\")= chr [1:22] \"RGIId\" \"GLIMSId\" \"BgnDate\" \"EndDate\" ...\n```\n\n## Glacier National Park dataset {.center}\n\nCreate a function that reads and cleans the data:\n\n```{.r}\nprep <- function(dir) {\n  g <- st_read(dir)\n  g %<>% rename_with(~ tolower(gsub(\"Area....\", \"area\", .x)))\n  g %<>% dplyr::select(\n    year,\n    objectid,\n    glacname,\n    area,\n    shape_leng,\n    x_coord,\n    y_coord,\n    source_sca,\n    source\n  )\n}\n```\n\n---\n\nCreate a vector of dataset names:\n\n```{.r}\ndirs <- grep(\"data/GNPglaciers_.*\", list.dirs(), value = T)\n```\n\nPass each element of that vector through `prep()` thanks to `map()`:\n\n```{.r}\ngnp <- map(dirs, prep)\n```\n\nWe can `rbind` the elements of our list:\n\n```{.r}\ngnp <- do.call(\"rbind\", gnp)\n```\n\nLoad raster data:\n\n```{.r}\nras <- rast(\"data/RGI60-02/RGI60-02.16664_thickness.tif\")\n```\n\n## Map of glaciers in western North America {.center}\n\n```{.r}\ntm_shape(states, bbox = nwa_bbox) +\n  tm_polygons(col = \"#f2f2f2\", lwd = 0.2) +\n  tm_shape(ak) +\n  tm_borders(col = \"#3399ff\") +\n  tm_fill(col = \"#86baff\") +\n  tm_shape(wes) +\n  tm_borders(col = \"#3399ff\") +\n  tm_fill(col = \"#86baff\") +\n  tm_layout(\n    title = \"Glaciers of Western North America\",\n    title.position = c(\"center\", \"top\"),\n    title.size = 1.1,\n    bg.color = \"#fcfcfc\",\n    inner.margins = c(0.06, 0.01, 0.09, 0.01),\n    outer.margins = 0,\n    frame.lwd = 0.2\n  ) +\n  tm_compass(\n    type = \"arrow\",\n    position = c(\"right\", \"top\"),\n    size = 1.2,\n    text.size = 0.6\n  ) +\n  tm_scale_bar(\n    breaks = c(0, 1000, 2000),\n    position = c(\"right\", \"BOTTOM\")\n  )\n```\n\n---\n\n![](img/nwa_bg.jpg)\n\n## Map of the Agassiz Glacier {.center}\n\n```{.r}\ntm_shape(ag) +\n  tm_polygons(\"year\", palette = \"Blues\") +\n  tm_layout(\n    title = \"Agassiz Glacier\",\n    title.position = c(\"center\", \"top\"),\n    legend.position = c(\"left\", \"bottom\"),\n    legend.title.color = \"#fcfcfc\",\n    legend.text.size = 1,\n    bg.color = \"#fcfcfc\",\n    inner.margins = c(0.07, 0.03, 0.07, 0.03),\n    outer.margins = 0\n  ) +\n  tm_compass(\n    type = \"arrow\",\n    position = c(\"right\", \"top\"),\n    text.size = 0.7\n  ) +\n  tm_scale_bar(\n    breaks = c(0, 0.5, 1),\n    position = c(\"right\", \"BOTTOM\"),\n    text.size = 1\n  )\n```\n\n---\n\n![](img/ag.png)\n\n## Animated map of the Retreat of Agassiz {.center}\n\n```{.r}\ntmap_animation(tm_shape(ag) +\n                 tm_polygons(col = \"#86baff\") +\n                 tm_layout(\n                   title = \"Agassiz Glacier\",\n                   title.position = c(\"center\", \"top\"),\n                   legend.position = c(\"left\", \"bottom\"),\n                   legend.title.color = \"#fcfcfc\",\n                   legend.text.size = 1,\n                   bg.color = \"#fcfcfc\",\n                   inner.margins = c(0.08, 0, 0.08, 0),\n                   outer.margins = 0,\n                   panel.label.bg.color = \"#fcfcfc\"\n                 ) +\n                 tm_compass(\n                   type = \"arrow\",\n                   position = c(\"right\", \"top\"),\n                   text.size = 0.7\n                 ) +\n                 tm_scale_bar(\n                   breaks = c(0, 0.5, 1),\n                   position = c(\"right\", \"BOTTOM\"),\n                   text.size = 1\n                 ) +\n                 tm_facets(\n                   along = \"year\",\n                   free.coords = F\n                 )filename = \"ag.gif\",\n               dpi = 300,\n               inner.margins = c(0.08, 0, 0.08, 0),\n               delay = 100\n               )\n\n```\n\n---\n\n![](img/ag.gif)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}