{
  "hash": "43539ca4da82965ddecb7c6994e19181",
  "result": {
    "markdown": "---\ntitle: Optimizations\naliases:\n  - optimizations.html\nauthor: Marie-Hélène Burle\n---\n\n\n:::{.def}\n\nA lot of hardware is not the answer to poorly written code. Before considering parallelization, you should think about ways to optimize your code sequentially.\n\nWhy?\n\n- Not all code can be parallelized.\n- Parallelization is costly (waiting time to access a cluster or money).\n- The optimization of the sequential code will also benefit the parallel code.\n\nIn many cases, writing better code will save you more computing time than parallelization.\n\nIn this section, we will cover several principles by playing with the programmatic implementation of the [fizz buzz](https://en.wikipedia.org/wiki/Fizz_buzz#:~:text=Fizz%20buzz%20is%20a%20group,with%20the%20word%20%22fizzbuzz%22) game.\n\n:::\n\n## Toy example\n\n[Fizz buzz](https://en.wikipedia.org/wiki/Fizz_buzz#:~:text=Fizz%20buzz%20is%20a%20group,with%20the%20word%20%22fizzbuzz%22) is a children game to practice divisions. Players take turn counting out loud while replacing:\n\n- any number divisible by 3 with the word \"Fizz\",\n- any number divisible by 5 with the word \"Buzz\",\n- any number divisible by both 3 and 5 with the word \"FizzBuzz\".\n\nLet's write functions to solve the game and time them to draw some general principles about more efficient code.\n\n## Setup\n\nFirst of all, we need to load the necessary modules:\n\n```{.bash}\nmodule load StdEnv/2020 gcc/11.3.0 r/4.3.1\n```\n\nThen we need to launch a job.\n\n### Interactive job\n\nIf there are few of us, we will use interactive sessions with one CPU each with:\n\n```{.bash}\nsalloc --time=2:00:00 --mem-per-cpu=3500M\n```\n\nWe can then launch R and load the benchmarking package we will use throughout this section:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-1_ea52281d6ce36927302fcc64c7832eff'}\n\n```{.r .cell-code}\nlibrary(bench)\n```\n:::\n\n\n### Batch jobs\n\nIf there are more of us than there are CPUs in the cluster, we will run batch jobs. In this Case:\n\n- Create an R script called `optim.R` with the code to run (you can reuse the same script for all sections on this page by editing it). Don't forget to load the package `bench` in your script.\n- Create a bash script called `optim.sh` with the following:\n\n```{.bash filename=\"<your_job>.sh\"}\n#!/bin/bash\n#SBATCH --account=def-<your_account>\n#SBATCH --time=15\n#SBATCH --mem-per-cpu=3500M\n#SBATCH --cpus-per-task=4\n#SBATCH --job-name=\"<your_job>\"\nmodule load StdEnv/2020 gcc/11.3.0 r/4.3.1\nRscript <your_script>.R\n```\n\n- Run the jobs with:\n\n```sh\nsbatch optim.sh\n```\n\n## Optimizations\n\n### Pre-allocate memory\n\nIn this first function, we create an empty object `z` of class integer and of length `0` that will hold the result of a loop, then we run the loop and at each iteration, we add a new value to `z`:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-2_9c82f0f2025e5713556230094be4222b'}\n\n```{.r .cell-code}\nf1 <- function(n) {\n  z <- integer()\n  for(i in 1:n) {\n    if(i %% 3 == 0 && i %% 5 == 0) {\n      z[i] <- \"FizzBuzz\"\n    } else if(i %% 3 == 0) {\n      z[i] <- \"Fizz\"\n    } else if(i %% 5 == 0) {\n      z[i] <- \"Buzz\"\n    } else {\n      z[i] <- i\n    }\n  }\n  z\n}\n```\n:::\n\n\nThe second function is very similar, but this time, we create an empty object `z` of class integer and of length matching the final length `z` will have after running the loop. This means that we are pre-allocating memory for the full vector before we run the loop instead of growing the vector at each iteration:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-3_e126f17501b711f9942dae4b416a200e'}\n\n```{.r .cell-code}\nf2 <- function(n) {\n  z <- integer(n)\n  for(i in 1:n) {\n    if(i %% 3 == 0 && i %% 5 == 0) {\n      z[i] <- \"FizzBuzz\"\n    } else if(i %% 3 == 0) {\n      z[i] <- \"Fizz\"\n    } else if(i %% 5 == 0) {\n      z[i] <- \"Buzz\"\n    } else {\n      z[i] <- i\n    }\n  }\n  z\n}\n```\n:::\n\n\nLet's make sure that our functions work by testing it on a small number:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-4_0d07183f530283f017931937572e2d65'}\n\n```{.r .cell-code}\nf1(20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"1\"        \"2\"        \"Fizz\"     \"4\"        \"Buzz\"     \"Fizz\"    \n [7] \"7\"        \"8\"        \"Fizz\"     \"Buzz\"     \"11\"       \"Fizz\"    \n[13] \"13\"       \"14\"       \"FizzBuzz\" \"16\"       \"17\"       \"Fizz\"    \n[19] \"19\"       \"Buzz\"    \n```\n:::\n\n```{.r .cell-code}\nf2(20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"1\"        \"2\"        \"Fizz\"     \"4\"        \"Buzz\"     \"Fizz\"    \n [7] \"7\"        \"8\"        \"Fizz\"     \"Buzz\"     \"11\"       \"Fizz\"    \n[13] \"13\"       \"14\"       \"FizzBuzz\" \"16\"       \"17\"       \"Fizz\"    \n[19] \"19\"       \"Buzz\"    \n```\n:::\n:::\n\n\nNow, let's benchmark them for a large number:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-5_d936bcd74ff0b1c5986729b3893461f0'}\n\n```{.r .cell-code}\nn <- 1e5\nmark(f1(n), f2(n))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Some expressions had a GC in every iteration; so filtering is\ndisabled.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 f1(n)         332ms    346ms      2.89   16.55MB     10.1\n2 f2(n)         229ms    244ms      4.17    1.15MB     15.3\n```\n:::\n:::\n\n\n`f2()` is consistently faster. While in this example the difference is very slight, pre-allocating the object that will hold the result of a loop before running the loop can make a big difference.\n\nAlso, note the difference in memory allocation.\n\n### Aren't loops a big 'no no' in R?\n\nBy now, you might be thinking: \"Wait... aren't loops a big 'no no' in R? I've always been told that they are slow and that one should always use functional programming! We are talking about optimization in this course and we are using loops?!?\"\n\nThere are a lot of misconceptions around R loops. They can be very slow if you don't pre-allocate memory. Otherwise they are almost always faster than functions (the `apply()` family or the [tidyverse](https://www.tidyverse.org/) equivalent of the `purrr::map()` family). You can choose to use a functional programming approach for style and readability, but not for speed.\n\nLet's test it.\n\nFirst we create a function:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-6_c850ae750b5bdb815719e99e96c48a59'}\n\n```{.r .cell-code}\nfb <- function(n) {\n  if(n %% 3 == 0 && n %% 5 == 0) {\n    \"FizzBuzz\"\n  } else if(n %% 3 == 0) {\n    \"Fizz\"\n  } else if(n %% 5 == 0) {\n    \"Buzz\"\n  } else {\n    n\n  }\n}\n```\n:::\n\n\nThen we pass it through `sapply()`. We can test that it works on a small number:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-7_3888aaf8f79d1672c0a007fcc191ebe0'}\n\n```{.r .cell-code}\nsapply(1:20, fb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"1\"        \"2\"        \"Fizz\"     \"4\"        \"Buzz\"     \"Fizz\"    \n [7] \"7\"        \"8\"        \"Fizz\"     \"Buzz\"     \"11\"       \"Fizz\"    \n[13] \"13\"       \"14\"       \"FizzBuzz\" \"16\"       \"17\"       \"Fizz\"    \n[19] \"19\"       \"Buzz\"    \n```\n:::\n:::\n\n\nFinally, we compare the timing with that of `f2()`:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-8_3002d8d4ad5b0c16bb110d6b67cf0b99'}\n\n```{.r .cell-code}\nmark(f2(n), sapply(1:n, fb))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Some expressions had a GC in every iteration; so filtering is\ndisabled.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  expression           min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>      <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 f2(n)              264ms    271ms      3.70    1.15MB     18.5\n2 sapply(1:n, fb)    371ms    377ms      2.65    3.29MB     11.9\n```\n:::\n:::\n\n\nAs you can see, the loop is faster.\n\n### Avoid unnecessary operations\n\n#### Example 1\n\nCalling `z` as the last command in our function is the same as calling `return(z)`.\n\nFrom the R documentation:\n\n> If the end of a function is reached without calling return, the value of the last evaluated expression is returned.\n\nNow, what about using `print()` instead?\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-9_6b3c947302b8a572dc0099f31ed82f11'}\n\n```{.r .cell-code}\nf3 <- function(n) {\n  z <- integer(n)\n  for(i in 1:n) {\n    if(i %% 3 == 0 && i %% 5 == 0) {\n      z[i] <- \"FizzBuzz\"\n    } else if(i %% 3 == 0) {\n      z[i] <- \"Fizz\"\n    } else if(i %% 5 == 0) {\n      z[i] <- \"Buzz\"\n    } else {\n      z[i] <- i\n    }\n  }\n  print(z)\n}\n```\n:::\n\n\nLet's benchmark it against `f2()`:\n\n```{.r}\nmark(f2(n), f3(n))\n```\n\n```\n [1] \"1\"        \"2\"        \"Fizz\"     \"4\"        \"Buzz\"     \"Fizz\"    \n [7] \"7\"        \"8\"        \"Fizz\"     \"Buzz\"     \"11\"       \"Fizz\"    \n[13] \"13\"       \"14\"       \"FizzBuzz\" \"16\"       \"17\"       \"Fizz\"    \n[19] \"19\"       \"Buzz\"     \"Fizz\"     \"22\"       \"23\"       \"Fizz\"    \n[25] \"Buzz\"     \"26\"       \"Fizz\"     \"28\"       \"29\"       \"FizzBuzz\"\n[31] \"31\"       \"32\"       \"Fizz\"     \"34\"       \"Buzz\"     \"Fizz\"    \n[37] \"37\"       \"38\"       \"Fizz\"     \"Buzz\"     \"41\"       \"Fizz\"\n...\n\nWarning: Some expressions had a GC in every iteration; so filtering is\ndisabled.\n# A tibble: 2 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 f2(1e+05)  151.88ms 157.65ms     6.30     1.25MB     29.9\n2 f3(1e+05)     3.25s    3.25s     0.308    1.04GB     26.8\n```\n\nWhat happened?\n\n`print()` returns its argument, but it additionally prints it to the standard output. This is why the `mark()` function printed the output of `f3()` before printing the timings.\n\nAs you can see, printing takes a long time.\n\n:::{.note}\n\nThe code in this website is run by Quarto. Since, by default, RStudio will only print the first 1,000 results, the timing you will get for `f3()` in RStudio will be much less bad as it won't include the time it takes to print the remaining 99,000 results.\n\n:::\n\nIf you are evaluating `f2()` on its own (e.g. `f2(20)`), the returned result will also be printed to standard output and both functions will be equivalent. However, if you are using the function in another context, printing becomes an unnecessary and timely operation and `f3()` would be a very bad option. `f3()` is thus not a good function.\n\nHere is an example in which `f3()` would perform a totally unnecessary operation that `f2()` avoids:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-10_464a7f98efa992df678389a96b441dad'}\n\n```{.r .cell-code}\na <- f2(20)\n```\n:::\n\n\n:::{.note}\n\nNo unnecessary printing.\n\n:::\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-11_3e9b02ece99b9ded5edcb4367a9c834a'}\n\n```{.r .cell-code}\na <- f3(20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"1\"        \"2\"        \"Fizz\"     \"4\"        \"Buzz\"     \"Fizz\"    \n [7] \"7\"        \"8\"        \"Fizz\"     \"Buzz\"     \"11\"       \"Fizz\"    \n[13] \"13\"       \"14\"       \"FizzBuzz\" \"16\"       \"17\"       \"Fizz\"    \n[19] \"19\"       \"Buzz\"    \n```\n:::\n:::\n\n\n:::{.note}\n\nUnnecessary printing.\n\n:::\n\nFor 1e5, the difference in timing between running an unnecessary printing vs not is a factor of 21!\n\nEven worse would be to use:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-12_30158028903f50b9123621c8f931f2a3'}\n\n```{.r .cell-code}\nf4 <- function(n) {\n  for(i in 1:n) {\n    if(i %% 3 == 0 && i %% 5 == 0) {\n      print(\"FizzBuzz\")\n    } else if(i %% 3 == 0) {\n      print(\"Fizz\")\n    } else if(i %% 5 == 0) {\n      print(\"Buzz\")\n    } else {\n      print(i)\n    }\n  }\n}\n```\n:::\n\n\nHere the difference in timing is a factor of 50...\n\n#### Example 2\n\nOne modulo operation and equality test can be removed by replacing `i %% 3 == 0 && i %% 5 == 0` by `i %% 15 == 0`. The difference isn't huge, but there is a slight speedup:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-13_778d5e8d0ec8466b2cd0942efbb227de'}\n\n```{.r .cell-code}\nf5 <- function(n) {\n  z <- integer(n)\n  for(i in 1:n) {\n    if(i %% 15 == 0) {\n      z[i] <- \"FizzBuzz\"\n    } else if(i %% 3 == 0) {\n      z[i] <- \"Fizz\"\n    } else if(i %% 5 == 0) {\n      z[i] <- \"Buzz\"\n    } else {\n      z[i] <- i\n    }\n  }\n  z\n}\n\nmark(f2(n), f5(n))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Some expressions had a GC in every iteration; so filtering is\ndisabled.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 f2(n)         320ms    344ms      2.90    1.15MB     13.1\n2 f5(n)         301ms    302ms      3.31    1.22MB     14.9\n```\n:::\n:::\n\n\n#### Example 3\n\nLouis Arsenault-Mahjoubi—who attended this workshop—found ways to get rid of several additional operations and get a large speedup over `f5()`.\n\nFirst, we can assign `1:n` to `z` instead of pre-allocating memory with an empty vector, thus rendering the assignment of `i` to `z[i]` unnecessary in the last else statement:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-14_87a5753e2f67ca1134bd27d6a4392020'}\n\n```{.r .cell-code}\nf_louis1 <- function(n) {\n  z <- 1:n\n  for(i in z) {\n    if(i %% 3 == 0 && i %% 5 == 0) {\n      z[i] <- \"FizzBuzz\"\n    } else if(i %% 3 == 0) {\n      z[i] <- \"Fizz\"\n    } else if(i %% 5 == 0) {\n      z[i] <- \"Buzz\"\n    } \n  }\n  z\n}\n```\n:::\n\n\nThis function works:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-15_1c88e721dd743a4a5ec6f4c82212bcfc'}\n\n```{.r .cell-code}\nf_louis1(20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"1\"        \"2\"        \"Fizz\"     \"4\"        \"Buzz\"     \"Fizz\"    \n [7] \"7\"        \"8\"        \"Fizz\"     \"Buzz\"     \"11\"       \"Fizz\"    \n[13] \"13\"       \"14\"       \"FizzBuzz\" \"16\"       \"17\"       \"Fizz\"    \n[19] \"19\"       \"Buzz\"    \n```\n:::\n:::\n\n\n... and is faster (speedup of 1.3):\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-16_c1662970b34d6d6b8bf34f194db4bfb4'}\n\n```{.r .cell-code}\nmark(f5(n), f_louis1(n))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Some expressions had a GC in every iteration; so filtering is\ndisabled.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  expression       min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>  <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 f5(n)          215ms    218ms      4.56    1.15MB     16.7\n2 f_louis1(n)    168ms    171ms      5.59    1.15MB     20.5\n```\n:::\n:::\n\n\nThen, we can prevent the repetitions of the modulo operations and equality tests by saving them to variables:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-17_69b8189490577c6defddcfa0c6811fba'}\n\n```{.r .cell-code}\nf_louis2 <- function(n) {\n  z <- 1:n\n  for(i in z) {\n    div3 <- (i %% 3 == 0)\n    div5 <- (i %% 5 == 0)\n    if(div3 && div5) {\n      z[i] <- \"FizzBuzz\"\n    } else if(div3) {\n      z[i] <- \"Fizz\"\n    } else if(div5) {\n      z[i] <- \"Buzz\"\n    } \n  }\n  z\n}\n```\n:::\n\n\nThis gets us an even greater speedup of 1.7:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-18_1f72bb65e3cf7a09a26abc45565b9430'}\n\n```{.r .cell-code}\nmark(f5(n), f_louis2(n))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Some expressions had a GC in every iteration; so filtering is\ndisabled.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  expression       min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>  <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 f5(n)          229ms    231ms      4.34    1.15MB     18.8\n2 f_louis2(n)    122ms    153ms      6.74    1.21MB     15.2\n```\n:::\n:::\n\n\nBut it gets even better: we can actually get rid of the for loop!\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-19_67aea36d4233f17790bf3eeda3cb7e44'}\n\n```{.r .cell-code}\nf_louis3 <- function(n) {\n  z <- 1:n\n  div3 <- (z %% 3 == 0)\n  div5 <- (z %% 5 == 0)\n  z[div3] <- \"Fizz\"\n  z[div5] <- \"Buzz\"\n  z[(div3 & div5)] <- \"FizzBuzz\"\n  z\n}\n```\n:::\n\n\nNow we get a speedup of 6 compared to the `f5` function:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-20_dc2d88c3ec2324384a571f14edf35119'}\n\n```{.r .cell-code}\nmark(f5(n), f_louis3(n))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Some expressions had a GC in every iteration; so filtering is\ndisabled.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  expression       min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>  <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 f5(n)        207.8ms  221.5ms      4.53    1.15MB    18.1 \n2 f_louis3(n)   44.3ms   63.3ms     16.1     5.19MB     1.79\n```\n:::\n:::\n\n\nYou can ensure that we still get the same result:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-21_251e0a31cfdde2cf03649a4c9405bfba'}\n\n```{.r .cell-code}\nf_louis3(20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"1\"        \"2\"        \"Fizz\"     \"4\"        \"Buzz\"     \"Fizz\"    \n [7] \"7\"        \"8\"        \"Fizz\"     \"Buzz\"     \"11\"       \"Fizz\"    \n[13] \"13\"       \"14\"       \"FizzBuzz\" \"16\"       \"17\"       \"Fizz\"    \n[19] \"19\"       \"Buzz\"    \n```\n:::\n:::\n\n\n### Replace costly operations where possible\n\nNow imagine that we have a dataframe called `dat` with a first column called `datvar` filled with integers.\n\nWe want to write a function that will accept our dataframe as argument and play the fizz buzz game on the column `datvar`.\n\nOne could imagine the following function:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-22_80809cb61f23859ac3ce599984b723ef'}\n\n```{.r .cell-code}\nf6 <- function(dat) {\n  z <- integer(length(dat[[1]]))\n  for(i in seq_along(dat[[1]])) {\n    if(dat[[1]][i] %% 3 == 0 && dat[[1]][i] %% 5 == 0) {\n      z[i] <- \"FizzBuzz\"\n    } else if(dat[[1]][i] %% 3 == 0) {\n      z[i] <- \"Fizz\"\n    } else if(dat[[1]][i] %% 5 == 0) {\n      z[i] <- \"Buzz\"\n    } else {\n      z[i] <- dat[[1]][i]\n    }\n  }\n  z\n}\n```\n:::\n\n\nIndexing a column from a dataframe in this fashion is a very costly operation. It is much more efficient to index with the name of the column:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-23_cad865f4ae2eadf84fd92a0eef54f814'}\n\n```{.r .cell-code}\nf7 <- function(dat) {\n  z <- integer(length(dat$datvar))\n  for(i in seq_along(dat$datvar)) {\n    if(dat$datvar[i] %% 3 == 0 && dat$datvar[i] %% 5 == 0) {\n      z[i] <- \"FizzBuzz\"\n    } else if(dat$datvar[i] %% 3 == 0) {\n      z[i] <- \"Fizz\"\n    } else if(dat$datvar[i] %% 5 == 0) {\n      z[i] <- \"Buzz\"\n    } else {\n      z[i] <- dat$datvar[i]\n    }\n  }\n  z\n}\n```\n:::\n\nNow, let's create a random dataframe to benchmark `f6()` and `f7()`:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-24_62ed89c8bf5aefca5e0390ac0be759bd'}\n\n```{.r .cell-code}\nset.seed(123)\ndat <- data.frame(datvar = round(runif(n, 1, n)))\nmark(f6(dat), f7(dat))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Some expressions had a GC in every iteration; so filtering is\ndisabled.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 f6(dat)       3.29s    3.29s     0.304    1.26MB     15.8\n2 f7(dat)    700.21ms 700.21ms     1.43     1.26MB     12.9\n```\n:::\n:::\n\n\n### Avoid repetitions of costly operations\n\nThis made a big difference (speedup of 5), but notice that we are indexing the column 6 times in our function. Let's remove the repetition of this operation:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-25_9be71ecbce2289d36b6fb8d7f9b9b496'}\n\n```{.r .cell-code}\nf8 <- function(dat) {\n  var <- dat$datvar\n  z <- integer(length(var))\n  for(i in seq_along(var)) {\n    if(var[i] %% 3 == 0 && var[i] %% 5 == 0) {\n      z[i] <- \"FizzBuzz\"\n    } else if(var[i] %% 3 == 0) {\n      z[i] <- \"Fizz\"\n    } else if(var[i] %% 5 == 0) {\n      z[i] <- \"Buzz\"\n    } else {\n      z[i] <- var[i]\n    }\n  }\n  z\n}\n```\n:::\n\n\nLet's benchmark all 3 versions:\n\n\n::: {.cell hash='hpc_optimizations_cache/html/unnamed-chunk-26_f71cde62e8b392e168a71a8fddcbf3e2'}\n\n```{.r .cell-code}\nmark(f6(dat), f7(dat), f8(dat))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Some expressions had a GC in every iteration; so filtering is\ndisabled.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 f6(dat)       3.22s    3.22s     0.311    1.15MB    15.8 \n2 f7(dat)    651.03ms 651.03ms     1.54     1.15MB    15.4 \n3 f8(dat)    251.33ms 262.73ms     3.81     1.25MB     9.52\n```\n:::\n:::\n\n\n`f8()` gave us another speedup of almost 3 over `f7()`. `f8()` runs 14 times faster than our initial function!\n\n:::{.note}\n\nIndexing from a vector isn't costly. There is thus no advantage at removing the repetition of that operation.\n\n:::\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nShow that this last statement is true.\n\n:::\n\n<!-- ```{r} -->\n<!-- f9 <- function(dat) { -->\n<!--   var <- dat$datvar -->\n<!--   z <- integer(length(var)) -->\n<!--   for(i in seq_along(var)) { -->\n<!--     num <- var[i] -->\n<!--     if(num %% 3 == 0 && num %% 5 == 0) { -->\n<!--       z[i] <- \"FizzBuzz\" -->\n<!--     } else if(num %% 3 == 0) { -->\n<!--       z[i] <- \"Fizz\" -->\n<!--     } else if(num %% 5 == 0) { -->\n<!--       z[i] <- \"Buzz\" -->\n<!--     } else { -->\n<!--       z[i] <- i -->\n<!--     } -->\n<!--   } -->\n<!--   z -->\n<!-- } -->\n\n<!-- mark(f8(dat), f9(dat)) -->\n<!-- ``` -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}