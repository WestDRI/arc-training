{
  "hash": "fa9092e125ee94c9c3f1319ce73ae271",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: The future package\nauthor: Marie-Hélène Burle\n---\n\n\n:::{.def}\n\nThe [future](https://cran.r-project.org/web/packages/future/index.html) package is a modern package that brings a consistent and simple API for all evaluation strategies of futures in R.\n\nExcellent backends have been built on top of it.\n\n:::\n\n## Classic parallel packages in R\n\nWe talked in the previous section about various types of parallelism. Several options exist in R to run code in shared-memory or distributed parallelism.\n\nExamples of options for shared-memory parallelism:\n\n- The [foreach](https://cran.r-project.org/web/packages/foreach/index.html) package with backends such as [doMC](https://cran.r-project.org/web/packages/doMC/index.html), now also part of the [doParallel](https://cran.r-project.org/web/packages/doParallel/index.html) package.\n- `mclapply()` and `mcmapply()` from the `parallel` package (part of the core distribution of R).\n\nExamples of options for distributed parallelism:\n\n- The [foreach](https://cran.r-project.org/web/packages/foreach/index.html) package with backends such as [doSNOW](https://cran.r-project.org/web/packages/doSNOW/index.html), now also part of the [doParallel](https://cran.r-project.org/web/packages/doParallel/index.html) package.\n- The suite of `clusterApply()` and `par*apply()` functions from the `parallel` package.\n\n\n:::{.note}\n\nThe `parallel` package is a merger of the former `multicore` package for shared-memory and of the [snow](https://cran.r-project.org/web/packages/snow/index.html) package for distributed parallelism.\n\nSimilarly, the [doParallel](https://cran.r-project.org/web/packages/doParallel/index.html) package is merger of the [doMC](https://cran.r-project.org/web/packages/doMC/index.html) package for use with `foreach` in shared-memory and the [doSNOW](https://cran.r-project.org/web/packages/doSNOW/index.html) package for use with `foreach` for distributed parallelism.\n\n:::\n\n## The `future` package\n\nThe [future](https://cran.r-project.org/web/packages/future/index.html) package opened up a new landscape in the world of parallel R by providing a simple and consistent API for the evaluation of futures sequentially, through shared-memory parallelism, or through distributed parallelism.\n\n:::{.note}\n\nA [future](https://en.wikipedia.org/wiki/Futures_and_promises) is an object that acts as an abstract representation for a value in the future. A future can be *resolved* (if the value has been computed) or *unresolved*. If the value is queried while the future is unresolved, the process is blocked until the future is resolved. Futures thus allow for asynchronous and parallel evaluations.\n\n:::\n\nThe evaluation strategy is set with the `plan()` function:\n\n- `plan(sequential)`: \\\nFutures are evaluated sequentially in the current R session.\n\n- `plan(multisession)`: \\\nFutures are evaluated by new R sessions spawned in the background (*multi-processing in shared memory*).\n\n- `plan(multicore)`: \\\nFutures are evaluated in processes forked from the existing process (*multi-processing in shared memory*).\n\n- `plan(cluster)`: \\\nFutures are evaluated on an ad-hoc cluster (*distributed parallelism* across multiple nodes).\n\n:::{.note}\n\n###### Consistency\n\nTo ensure a consistent behaviour across plans, all evaluations are done in a local environment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(future)\n\na <- 1\n\nb %<-% {      # %<-% creates futures\n  a <- 2\n}\n\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n:::\n\n## the `future` ecosystem\n\nSeveral great packages have been built on top of the `future` API.\n\n- The [doFuture](https://cran.r-project.org/web/packages/doFuture/index.html) package allows to parallelize [foreach](https://cran.r-project.org/web/packages/foreach/index.html) expressions on the `future` evaluation strategies.\n- Similarly, the [future.apply](https://cran.r-project.org/web/packages/future.apply/index.html) package parallelizes the `*apply()` functions on these strategies.\n- The [furrr](https://cran.r-project.org/web/packages/furrr/index.html) package provides a parallel version of [purrr](https://cran.r-project.org/web/packages/purrr/index.html) for those who prefer this approach to functional programming.\n- The [future.callr](https://cran.r-project.org/web/packages/future.callr/index.html) package implements a future evaluation based on [callr](https://cran.r-project.org/web/packages/callr/index.html) that resolves every future in a new R session. This removes any limitation on the number of background R parallel processes that can be active at the same time.\n- The [future.batchtools](https://cran.r-project.org/web/packages/future.batchtools/index.html) package implements a future evaluation based on the [batchtools](https://cran.r-project.org/web/packages/batchtools/index.html) package—a package that provides functions to interact with HPC systems schedulers such as [Slurm](https://slurm.schedmd.com/documentation.html).\n\nIn this course, we will cover [foreach](https://cran.r-project.org/web/packages/foreach/index.html) with [doFuture](https://cran.r-project.org/web/packages/doFuture/index.html) in great details to explain all the important concepts. After that, you will be able to use any of these backends easily.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}