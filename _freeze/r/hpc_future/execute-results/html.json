{
  "hash": "b1c39a60d681164ddcc7158d6632712a",
  "result": {
    "markdown": "---\ntitle: The future package\nauthor: Marie-Hélène Burle\n---\n\n\n:::{.def}\n\nThe [future](https://cran.r-project.org/web/packages/future/index.html) package is a modern package that brings a consistent and simple API for all evaluation strategies of futures in R.\n\nExcellent backends have been built on top of it and this is the approach that we will learn in this course.\n\n:::\n\n## A vast field of packages\n\nWe talked in the previous section about various types of parallelism. Several options exist in R to run code in shared-memory or distributed parallelism.\n\nExamples of options for shared-memory parallelism:\n\n- The [foreach](https://cran.r-project.org/web/packages/foreach/index.html) package with backends such as [doMC](https://cran.r-project.org/web/packages/doMC/index.html), now also part of the [doParallel](https://cran.r-project.org/web/packages/doParallel/index.html) package.\n- `mclapply()` and `mcmapply()` from the `parallel` package (part of the core distribution of R).\n\nExamples of options for distributed parallelism:\n\n- The [foreach](https://cran.r-project.org/web/packages/foreach/index.html) package with backends such as [doSNOW](https://cran.r-project.org/web/packages/doSNOW/index.html), now also part of the [doParallel](https://cran.r-project.org/web/packages/doParallel/index.html) package.\n- The suite of `clusterApply()` and `par*apply()` functions from the `parallel` package.\n\n\n:::{.note}\n\nThe `parallel` package is a merger of the former `multicore` package for shared-memory and of the [snow](https://cran.r-project.org/web/packages/snow/index.html) package for distributed parallelism.\n\nSimilarly, the [doParallel](https://cran.r-project.org/web/packages/doParallel/index.html) package is merger of the [doMC](https://cran.r-project.org/web/packages/doMC/index.html) package for use with `foreach` in shared-memory and the [doSNOW](https://cran.r-project.org/web/packages/doSNOW/index.html) package for use with `foreach` for distributed parallelism.\n\n:::\n\n## The `future` package\n\nThe [future](https://cran.r-project.org/web/packages/future/index.html) package is a clean and new approach through all of this. It provides a simple and consistent way to evaluate futures sequentially, through shared-memory parallelism, or through distributed parallelism.\n\n:::{.info}\n\nA [future](https://en.wikipedia.org/wiki/Futures_and_promises) is an object that acts as an abstract representation for a value in the future. A future can be *resolved* (if the value has been computed) or *unresolved*. If the value is queried while the future is unresolved, the process is blocked until the future is resolved. Futures thus allow for asynchronous and parallel evaluations.\n\n:::\n\nIt provides an API on which backends can be built.\n\nExample of backends for the `future` package:\n\n- The [doFuture](https://cran.r-project.org/web/packages/doFuture/index.html) package to parallelize foreach expressions.\n- The [future.apply](https://cran.r-project.org/web/packages/future.apply/index.html) package to parallelize the `*apply()` functions.\n- The [furrr](https://cran.r-project.org/web/packages/furrr/index.html) package for those who prefer [purrr](https://cran.r-project.org/web/packages/purrr/index.html) over the *apply functions.\n\nThe evaluation strategy is set with the `plan` function:\n\n- `plan(sequential)`: \\\nFutures are evaluated sequentially in the current R session.\n\n- `plan(multisession)`: \\\nFutures are evaluated by new R sessions spawned in the background (*multi-processing in shared memory*).\n\n- `plan(multicore)`: \\\nFutures are evaluated in processes forked from the existing process (*multi-processing in shared memory*).\n\n- `plan(cluster)`: \\\nFutures are evaluated on an ad-hoc cluster (*distributed parallelism* across multiple nodes).\n\n:::{.note}\n\n###### Consistency\n\nTo ensure a consistent behaviour across plans, all evaluations are done in a local environment:\n\n\n::: {.cell hash='hpc_future_cache/html/unnamed-chunk-1_fb4070e32e0ee19f840df5ad983fcc95'}\n\n```{.r .cell-code}\nlibrary(future)\n\na <- 1\n\nb %<-% {      # %<-% is used instead of <- to use futures\n  a <- 2\n}\n\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n:::\n\nBeside evaluation the strategy, the code remains the same. This is the method we will use in this course.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}