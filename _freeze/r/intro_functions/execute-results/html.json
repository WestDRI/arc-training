{
  "hash": "f03033a015ca19fb96ef68ddc1e6691a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Function definition\naliases:\n  - functions.html\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nR comes with a number of built-in functions. Packages can provide additional ones. In many cases however, you will want to create your own functions to perform exactly the computations that you need.\n\nIn this section, we will see how to define new functions.\n\n:::\n\n## Syntax\n\nHere is the syntax to define a new function:\n\n```default\nname <- function(arguments) {\n  body\n}\n```\n\n## Example\n\nLet's define a function that we call `compare` which will compare the value between 2 numbers:\n\n::: {.cell}\n\n```{.r .cell-code}\ncompare <- function(x, y) {\n  x == y\n}\n```\n:::\n\n- `compare` is the name of our function.\n- `x` and `y` are the placeholders for the arguments that our function will accept (our function will need 2 arguments to run successfully).\n- `x == y` is the body of the function, that is, the computation performed by our function.\n\nWe can now use our function:\n\n::: {.cell}\n\n```{.r .cell-code}\ncompare(2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n## What is returned by a function?\n\nIn R, the result of the last statement is printed automatically:\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- function(x, y) {\n  x\n  y\n}\ntest(2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\nIf you want to also print other results, you need to explicitly use the `print()` function:\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- function(x, y) {\n  print(x)\n  y\n}\ntest(2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\nNote that, unlike `print()`, the function `return()` exits the function:\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- function(x, y) {\n  return(x)\n  y\n}\ntest(2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- function(x, y) {\n  return(x)\n  return(y)\n}\ntest(2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}