{
  "hash": "950b08867cf9282736703e8026307601",
  "result": {
    "markdown": "---\ntitle: Parallel loops with foreach & doFuture\nauthor: Marie-Hélène Burle\n---\n\n\n## The `foreach` package\n\nThe [`foreach`](https://cran.r-project.org/web/packages/foreach/index.html) package implements a looping construct without an explicit counter. It doesn't require the preallocation of an output container, it brings to R an equivalent of the Python or Julia list comprehensions, and mostly, it allows for an easy execution of loops in parallel. Unlike loops, it creates variables (loops are used for their side-effect).\n\nWe will explore an example to calculate the sum of 1e3 random vectors of length 3.\n\nFirst, let's launch an interactive job with a single task (by default Slurm grants one CPU per task, so we are asking for one CPU):\n\n```{.bash}\nsalloc --time=50 --mem-per-cpu=3700M --ntasks=1\n```\n\n:::{.note}\n\nYou can see the full list of `salloc` options [here](https://slurm.schedmd.com/salloc.html).\n\n:::\n\nThen we can launch R interactively:\n\n```{.bash}\nR\n```\n\n:::{.note}\n\nWe are now in the R terminal and can start typing R commands.\n\n:::\n\nLet's load the `foreach` package:\n\n\n::: {.cell hash='parallel_loops_cache/html/unnamed-chunk-1_5d3ad3e19b08ec1ab36e46e31717a73b'}\n\n```{.r .cell-code}\nlibrary(foreach)\n```\n:::\n\n\nBelow is a classic while loop:\n\n\n::: {.cell hash='parallel_loops_cache/html/unnamed-chunk-2_9ecb396a400cf5bc5424a0c933fdda06'}\n\n```{.r .cell-code}\nset.seed(2)\nresult1 <- numeric(3)             # Preallocate output container\ni <- 0                            # Initialise counter variable\n\nwhile(i < 1e3) {\n  result1 <- result1 + runif(3)   # Calculate the sum\n  i <- i + 1                      # Update the counter\n}\n```\n:::\n\n\nHere is the equivalent code using `foreach`:\n\n\n::: {.cell hash='parallel_loops_cache/html/unnamed-chunk-3_d06bdd81da5adfd64a9d96e94f3b502d'}\n\n```{.r .cell-code}\nset.seed(2)\nresult2 <- foreach(i = 1:1e3, .combine = '+') %do% runif(3)\n```\n:::\n\n\nWe can verify that both expressions return the same result:\n\n\n::: {.cell hash='parallel_loops_cache/html/unnamed-chunk-4_92c48332986b0cadddb2f30cd506f961'}\n\n```{.r .cell-code}\nidentical(result1, result2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nThe best part of `foreach` is that you can turn sequential loops into parallel ones.\n\nThere are many parallelization backends available: `doFuture`, `doMC`, `doMPI`, `doParallel`, `doRedis`, `doRNG`, `doSNOW`, and `doAzureParallel`.\n\nIn this lesson, we will use [`doFuture`](https://cran.r-project.org/web/packages/doFuture/index.html), a modern package which allows to evaluate `foreach` expressions following any of the strategies of the [`future`](https://cran.r-project.org/web/packages/future/index.html) package.\n\nSo first, what is the [`future`](https://cran.r-project.org/web/packages/future/index.html) package?\n\n## The `future` package\n\nA [future](https://en.wikipedia.org/wiki/Futures_and_promises) is an object that acts as an abstract representation for a value in the future. A future can be *resolved* (if the value has been computed) or *unresolved*. If the value is queried while the future is unresolved, the process is blocked until the future is resolved. Futures thus allow for asynchronous and parallel evaluations.\n\nThe [`future`](https://cran.r-project.org/web/packages/future/index.html) package allows to evaluate futures sequentially or in various forms of parallelism while keeping code simple and consistent. The evaluation strategy is set thanks to the `plan` function:\n\n- `plan(sequential)`: \\\nFutures are evaluated sequentially in the current R session.\n\n- `plan(multisession)`: \\\nFutures are evaluated by new R sessions spawned in the background (*multi-processing in shared memory*).\n\n- `plan(multicore)`: \\\nFutures are evaluated in processes forked from the existing process (*multi-processing in shared memory*).\n\n- `plan(cluster)`: \\\nFutures are evaluated on an ad-hoc cluster (*distributed parallelism* across multiple nodes).\n\n:::{.note}\n\n###### Consistency\n\nTo ensure a consistent behaviour across plans, all evaluations are done in a local environment:\n\n\n::: {.cell hash='parallel_loops_cache/html/unnamed-chunk-5_fd799efc10a17a566e1580f48c493402'}\n\n```{.r .cell-code}\nlibrary(future)\n\na <- 1\n\nb %<-% {      # %<-% is used instead of <- to use futures\n  a <- 2\n}\n\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n:::\n\n## The `doFuture` package\n\nThe [`doFuture`](https://cran.r-project.org/web/packages/doFuture/index.html) package allows to evaluate `foreach` expressions across the evaluation strategies of the [`future`](https://cran.r-project.org/web/packages/future/index.html) package very easily.\n\n### Register the parallel backend\n\nThe first step is to register a parallel backend.\n\nLet's load the `doFuture` package and register it as a backend:\n\n```{.r}\nlibrary(doFuture)\n\nregisterDoFuture()\n```\n\n### Choose a parallel strategy\n\nThen we need to choose a parallel strategy (e.g. `plan(multicore)`):\n\n```{.r}\nplan(multicore)\n```\n\n### Replace `%do%` with `%dopar%` or `%dorng%`\n\nTo run the code in parallel, we can now replace `%do%` with `%dopar%`.\n\nThere is however one last twist: whenever you create random numbers in parallel, you need to ensure that they are parallel-safe. The package [`doRNG`](https://cran.r-project.org/web/packages/doRNG/index.html) provides `%dorng%`, an alternative to `%dopar%` which follows L'Ecuyer-CMRG method[^1] and ensures reproducibility.\n\n[^1]: [L’Ecuyer, P. (1999). Good parameters and implementations for combined multiple recursive random number generators. Operations Research, 47, 159–164.](https://pubsonline.informs.org/doi/10.1287/opre.47.1.159)\n\n```{.r}\nlibrary(doRNG)\n\nset.seed(2)\nresult3 <- foreach(i = 1:1e3, .combine = '+') %dorng% {\n  runif(3)\n}\n```\n\n```{.r}\nlibrary(doRNG)\n\nset.seed(2)\nresult3 <- foreach(i = 1:1e3, .combine = '+') %dofuture% {\n  runif(3)\n} %seed% TRUE\n```\n\nOf course remember that we asked Slurm for a single CPU (`--ntasks=1`). So we don't have the hardware to run any code in parallel with our current job.\n\n## Let's parallelize our code\n\nWith the overhead of parallelization, it doesn't make sense to parallelize such a fast code: the parallel version will take longer than the serial one. Let's artificially make our code much slower without adding any complexity that would distract us from the parallelization question. To do that, we will simply add a delay at each iteration.\n\nThe classic while loop we replaced with `foreach` was the following:\n\n\n::: {.cell hash='parallel_loops_cache/html/unnamed-chunk-6_8b3acd0da04f4f755f062247fc66ef00'}\n\n```{.r .cell-code}\nset.seed(2)\nresult1 <- numeric(3)             # Preallocate output container\ni <- 0                            # Initialise counter variable\n\nwhile(i < 1e3) {\n  result1 <- result1 + runif(3)   # Calculate the sum\n  i <- i + 1                      # Update the counter\n}\n```\n:::\n\n\nLet's add a delay of 0.01s at each iteration:\n\n\n::: {.cell hash='parallel_loops_cache/html/unnamed-chunk-7_ac49d90d8791dbe8302d3e6a63d6c0f0'}\n\n```{.r .cell-code}\nset.seed(2)\nresult1 <- numeric(3)\ni <- 0               \n\nwhile(i < 1e3) {\n  Sys.sleep(0.01)                 # Wait for 0.01s\n  result1 <- result1 + runif(3)\n  i <- i + 1                   \n}\n```\n:::\n\n\nThe `foreach` version looked like this:\n\n\n::: {.cell hash='parallel_loops_cache/html/unnamed-chunk-8_b7bff964009f91574adffd4f24773944'}\n\n```{.r .cell-code}\nset.seed(2)\nresult2 <- foreach(i = 1:1e3, .combine = '+') %do% runif(3)\n```\n:::\n\n\nTo add the delay at each iteration, we can write it this way:\n\n\n::: {.cell hash='parallel_loops_cache/html/unnamed-chunk-9_06148047cb90b72335fe7192206c1e4d'}\n\n```{.r .cell-code}\nset.seed(2)\nresult2 <- foreach(i = 1:1e3, .combine = '+') %do% {\n  Sys.sleep(0.01)\n  runif(3)\n}\n```\n:::\n\n\n<!-- ## Toy example -->\n\n<!-- ### Load packages -->\n\n<!-- For this toy example, we will use a modified version of one of the examples in the [foreach vignette](https://cran.r-project.org/web/packages/foreach/vignettes/foreach.html): we will build a classification model made of a forest of decision trees thanks to the [`randomForest`](https://cran.r-project.org/web/packages/randomForest/index.html) package. -->\n\n<!-- Because the code includes randomly generated numbers, we will use the [`doRNG`](https://cran.r-project.org/web/packages/doRNG/index.html) package which replaces `foreach::%dopar%` with `doRNG::%dorng%`. This follows the recommendations of Pierre L'Ecuyer (1999)[^1] and ensures reproducibility. -->\n\n<!-- [^1]: [L'Ecuyer, P. (1999). Good parameters and implementations for combined multiple recursive random number generators. Operations Research, 47, 159–164.](https://pubsonline.informs.org/doi/10.1287/opre.47.1.159) -->\n\n<!-- ```{.r} -->\n<!-- library(doFuture)       # This will also load the `future` package -->\n<!-- library(doRNG)          # This will also load the `foreach` package -->\n<!-- library(randomForest) -->\n<!-- library(bench)          # To do some benchmarking -->\n<!-- ``` -->\n\n<!-- ``` -->\n<!-- Loading required package: foreach -->\n<!-- Loading required package: future -->\n<!-- Loading required package: rngtools -->\n<!-- ``` -->\n\n<!-- ### The code to parallelize -->\n\n<!-- The goal is to create a classifier based on some data (here a matrix of random numbers for simplicity) and a response variable (as factor). This model could then be passed in the `predict()` function with novel data to generate predictions of classification. But here we are only interested in the creation of the model as this is the part that is computationally intensive. We aren't interested in actually using it. -->\n\n<!-- ```{.r} -->\n<!-- set.seed(11) -->\n<!-- traindata <- matrix(runif(1e5), 100) -->\n<!-- fac <- gl(2, 50) -->\n\n<!-- rf <- foreach(ntree = rep(250, 8), .combine = combine) %do% -->\n<!--   randomForest(x = traindata, y = fac, ntree = ntree) -->\n\n<!-- rf -->\n<!-- ``` -->\n\n<!-- ``` -->\n<!-- Call: -->\n<!--  randomForest(x = traindata, y = fac, ntree = ntree) -->\n<!--                Type of random forest: classification -->\n<!--                      Number of trees: 2000 -->\n<!-- No. of variables tried at each split: 31 -->\n<!-- ``` -->\n\n### Reference timing\n\n<!-- This is the non parallelizable code with `%do%`: -->\n\n<!-- ```{.r} -->\n<!-- bm <- mark( -->\n<!--   rf <- foreach(ntree = rep(250, 8), .combine = combine) %do% -->\n<!--     randomForest(x = traindata, y = fac, ntree = ntree), -->\n<!--   memory = FALSE -->\n<!-- ) -->\n\n<!-- bm$median -->\n<!-- ``` -->\n\n<!-- ``` -->\n<!-- [1] 5.66s -->\n<!-- ``` -->\n\nThis is how long the while loop takes:\n\n```{.r}\n\n```\n\nNow, here is the timing with `foreach` run sequentially:\n\n```{.r}\n\n```\n\n:::{.note}\n\n`bench::mark()` is currently unable to provide memory information for parallel code. While it could output memory usage for this sequential run, we won't be able to compare it with parallel runs, so we might as well not ask for that information.\n\n:::\n\n:::{.note}\n\nThe `foreach` version is actually slower. Its advantage comes in when we run code in parallel.\n\n:::\n\n### Plan sequential\n\nThis is the parallelizable `foreach` code, but run sequentially:\n\n<!-- ```{.r} -->\n<!-- registerDoFuture()   # Set the parallel backend -->\n<!-- plan(sequential)     # Set the evaluation strategy -->\n\n<!-- # Using bench::mark() -->\n<!-- bm <- mark( -->\n<!--   rf <- foreach(ntree = rep(250, 8), .combine = combine) %dorng% -->\n<!--     randomForest(x = traindata, y = fac, ntree = ntree), -->\n<!--   memory = FALSE -->\n<!-- ) -->\n\n<!-- bm$median -->\n<!-- ``` -->\n\n<!-- ``` -->\n<!-- [1] 5.78s -->\n<!-- ``` -->\n\n```{.r}\n\n```\n\n:::{.note}\n\nNo surprise: those are similar.\n\n:::\n\n### Multi-processing in shared memory\n\n\n\n#### Number of cores\n\n`future` provides `availableCores()` to detect the number of available cores:\n\n```{.r}\navailableCores()\n```\n\n```\ncgroups.cpuset\n             1\n```\n\n:::{.note}\n\nSimilar to `parallel::detectCores()`.\n\n:::\n\nThis detects the number of CPU cores available to us on the current compute node, that is, what we can use for shared memory multi-processing. Since we asked for a single task (`--ntasks=1`) and since by default Slurm grants one CPU per task, we have a single CPU available.\n\nTo be able to run our code in parallel, we need to have access to at least 2 CPUs each. So let's quit the R session (with Ctrl+D or `quit()`—when asked whether to save a workspace image, answer `n`), terminate our interactive job (also with Ctrl+D) and ask for a different job.\n\n:::{.emph}\n\nDon't forget to relinquish your interactive job with Ctrl+D otherwise it will be running for the full 30 min, making the hardware it uses unavailable to all of us until the job expires.\n\n:::\n\nNow what job should we run?\n\nRemember that the cluster for this course is made of 10 nodes of 4 CPUs each. We want to test shared memory parallelism, so our job needs to stay within one node. We can thus ask for a maximum of 4 CPUs and we want to ensure that we aren't getting them on different nodes. If we all ask for 4 CPUs in an interactive session, the first 10 of us will get them and the job requests for the rest of us will remain pending, waiting for resources to become available, for as long as the lucky 10 are running their session. That's the big downside of interactive sessions.\n\nA much better approach here is to write the code in a script and run it with `sbatch`. That way, everybody will get to run their code with minimal delay.\n\nOpen a text file (let's call it `rf.R` since it creates a random forest object) with the text editor of your choice, for instance `nano`:\n\n```{.bash}\nnano rf.R\n```\n\nWe will first play with it to see how many cores are available to us, so write in your script:\n\n```{.r filename=\"rf.R\"}\nlibrary(future)\t  # Don't forget to load the packages in your script\navailableCores()\n```\n\nSave and close the text editor.\n\nNow, we want to create a shell script for Slurm. Let's call it `rf.sh`:\n\n```{.bash}\nnano rf.sh\n```\n\nIn it lives the hardware request and the code that needs to run:\n\n```{.bash filename=\"rf.sh\"}\n#!/bin/bash\n#SBATCH --time=10             # 10 min\n#SBATCH --mem-per-cpu=3700M\n#SBATCH --nodes=1\n#SBATCH --cpus-per-task=4\n\nRscript rf.R                  # This is the code that we are running\n```\n\n:::{.note}\n\nYou can see the full list of `sbatch` options [here](https://slurm.schedmd.com/sbatch.html).\n\n:::\n\nSave and close the text editor.\n\nWe can now run the batch script:\n\n```{.bash}\nsbatch rf.sh\n```\n\nYou can monitor it with `sq`, but this should be quasi instant. The result will be written to a file called `slurm-xx.out` with `xx` being the number of the job that just ran.\n\n:::{.note}\n\nYou can specify the output file name in the options of your sbatch script.\n\n:::\n\nTo see the result, we can simply print the content of that file to screen (you can run `ls` to see the list of files in the current directory):\n\n```{.bash}\ncat slurm-xx.out    # Replace xx by the job number\n```\n\n```\nsystem\n     4\n```\n\nWe now have 4 CPUs available on one node, so we can test shared memory parallelism.\n\n#### Plan multisession\n\nShared memory multi-processing can be run with `plan(multisession)` that will spawn new R sessions in the background to evaluate futures.\n\nEdit the R script (with `nano rf.R`):\n\n```{.r filename=\"rf.R\"}\nlibrary(doFuture)\nlibrary(doRNG)\nlibrary(randomForest)\nlibrary(bench)\n\nregisterDoFuture()   # Set the parallel backend\nplan(multisession)\n\nset.seed(11)\ntraindata <- matrix(runif(1e5), 100)\nfac <- gl(2, 50)\n\nbm <- mark(\n  rf <- foreach(ntree = rep(250, 8), .combine = combine) %dorng%\n    randomForest(x = traindata, y = fac, ntree = ntree),\n  memory = FALSE\n)\n\nbm$median\n```\n\nRun the job with the new R script:\n\n```{.bash}\nsbatch rf.sh\n```\n\nWe now get in the output file:\n\n```\nLoading required package: foreach\nLoading required package: future\nLoading required package: rngtools\nrandomForest 4.7-1.1\nType rfNews() to see new features/changes/bug fixes.\nWarning message:\nSome expressions had a GC in every iteration; so filtering is disabled.\n[1] 2.08s\n```\n\n:::{.note}\n\nWe got a speedup of `5.78 / 2.08 = 2.8`. Not bad considering that we have 4 CPU cores (the ideal speedup would be 4, but there is always some overhead to parallelization).\n\n:::\n\n#### Plan multicore\n\nShared memory multi-processing can also be run with `plan(multicore)` (except on Windows) that will fork the current R process to evaluate futures.\n\nLet's modify our R script again:\n\n```{.r filename=\"rf.R\"}\nlibrary(doFuture)\nlibrary(doRNG)\nlibrary(randomForest)\nlibrary(bench)\n\nregisterDoFuture()   # Set the parallel backend\nplan(multicore)\n\nset.seed(11)\ntraindata <- matrix(runif(1e5), 100)\nfac <- gl(2, 50)\n\nbm <- mark(\n  rf <- foreach(ntree = rep(250, 8), .combine = combine) %dorng%\n    randomForest(x = traindata, y = fac, ntree = ntree),\n  memory = FALSE\n)\n\nbm$median\n```\n\nRun the job:\n\n```{.bash}\nsbatch rf.sh\n```\n\nWe get:\n\n```\nLoading required package: foreach\nLoading required package: future\nLoading required package: rngtools\nrandomForest 4.7-1.1\nType rfNews() to see new features/changes/bug fixes.\nWarning message:\nSome expressions had a GC in every iteration; so filtering is disabled.\n[1] 1.89s\n```\n\n:::{.note}\n\nWe got a similar speedup of `5.78 / 1.89 = 3.1`.\n\n:::\n\n### Multi-processing in distributed memory\n\n#### Create a cluster of workers\n\nTo test parallel execution in distributed memory, let's ask [Slurm](https://en.wikipedia.org/wiki/Slurm_Workload_Manager) for 8 tasks by editing our `rf.sh` script:\n\n```{.bash filename=\"rf.sh\"}\n#!/bin/bash\n#SBATCH --time=10\n#SBATCH --mem-per-cpu=3700M\n#SBATCH --ntasks=8\n\nRscript rf.R      # This is the code that we are running\n```\n\nLet's verify that we do get 8 tasks by accessing the `SLURM_NTASKS` environment variable from within R.\n\nEdit `rf.R` to contain the following:\n\n```{.r filename=\"rf.R\"}\nas.numeric(Sys.getenv(\"SLURM_NTASKS\"))\n```\n\nRun the job:\n\n```{.bash}\nsbatch rf.sh\n```\n\nWe get:\n\n```\n[1] 8\n```\n\nLet's see which nodes we are using:\n\n```{.r filename=\"rf.R\"}\nsystem(\"srun hostname | cut -f 1 -d '.'\", intern = T)\n```\n\nWe get:\n\n```\n[1] \"node1\" \"node1\" \"node1\" \"node1\" \"node2\" \"node2\" \"node2\" \"node2\"\n```\n\nTo run the RandomForest code with distributed parallelism using 8 CPU cores across both nodes, we will need to create a cluster of workers. We do this with the `makeCluster()` function from the base R `parallel` package: we create a character vector with the names of the nodes our tasks are running on and pass this vector to the `makeCluster()` function:\n\n```{.r}\n## Create a character vector with the nodes names\nhosts <- system(\"srun hostname | cut -f 1 -d '.'\", intern = T)\n\n## Create the cluster of workers\ncl <- parallel::makeCluster(hosts)\n```\n\nLet's test it:\n\n```{.r filename=\"rf.R\"}\nlibrary(doFuture)\n\nhosts <- system(\"srun hostname | cut -f 1 -d '.'\", intern = T)\ncl <- parallel::makeCluster(hosts)\n\ncl\n```\n\nIf we run this code, we get:\n\n```\nLoading required package: foreach\nLoading required package: future\nsocket cluster with 8 nodes on hosts ‘node1’, ‘node2’\n```\n\n:::{.note}\n\nMake sure that your code has finished running before printing the output file. Remember that you can monitor the job with `sq`.\n\n:::\n\n#### Plan cluster\n\nWe can now run the code in distributed memory parallelism:\n\n```{.r filename=\"rf.R\"}\nlibrary(doFuture)\nlibrary(doRNG)\nlibrary(randomForest)\nlibrary(bench)\n\nregisterDoFuture()   # Set the parallel backend\n\nhosts <- system(\"srun hostname | cut -f 1 -d '.'\", intern = T)\ncl <- parallel::makeCluster(hosts)\nplan(cluster, workers = cl)\n\nset.seed(11)\ntraindata <- matrix(runif(1e5), 100)\nfac <- gl(2, 50)\n\nbm <- mark(\n  rf <- foreach(ntree = rep(250, 8), .combine = combine) %dorng%\n    randomForest(x = traindata, y = fac, ntree = ntree),\n  memory = FALSE\n)\n\nbm$median\n```\n\nWe get:\n\n```\nLoading required package: foreach\nLoading required package: future\nLoading required package: rngtools\nrandomForest 4.7-1.1\nType rfNews() to see new features/changes/bug fixes.\nWarning message:\nSome expressions had a GC in every iteration; so filtering is disabled.\n[1] 1.16s\n```\n\n:::{.note}\n\nSpeedup: `5.78 / 1.16 = 5.0`. Here again, this is not bad with 8 CPU cores, considering the added overhead of message passing between both nodes.\n\n:::\n\nThe cluster of workers can be stopped with:\n\n```{.r}\nparallel::stopCluster(cl)\n```\n\nHere, this is not necessary since our job stops running as soon as the execution is complete.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Hardware\n\nFirst, \n\nLet's kill the running job and launch a new one with multiple CPUs.\n\nxxx\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}