{
  "hash": "b9316c4c794ddc9a556cfea0f6797ea5",
  "result": {
    "markdown": "---\ntitle: Introduction to R for the humanities\nauthor: Marie-Hélène Burle\n---\n\n\n:::{.def}\n\nR is a free and open-source programming language for statistical computing, modelling, and graphics, with an unbeatable collection of statistical packages. It is extremely popular in some academic fields such as statistics, biology, bioinformatics, data mining, data analysis, and linguistics.\n\nThis introductory course does not assume any prior knowledge: it will take you through the first steps of importing, cleaning, and visualizing your data. Along the way, we will get familiar with R data types, functions writing, and control flow.\n\n:::\n\n## Running R\n\nR being an interpreted language, it can be run non-interactively or interactively.\n\n### Running R non-interactively\n\nIf you write code in a text file (called a script), you can then execute it with:\n\n```{.r}\nRscript my_script.R\n```\n\n:::{.note}\n\nThe command to execute scripts is `Rscript` rather than `R`. \\\nBy convention, R scripts take the extension `.R`.\n\n:::\n\n### Running R interactively\n\nThere are several ways to run R interactively.\n\n- Directly in the **console** (the name for the R shell):\n\n![](img/console.png){fig-alt=\"noshadow\"}\n\n- In **[Jupyter](https://jupyter.org/)** with the R kernel ([IRkernel package](https://cran.rstudio.com/web/packages/IRkernel/index.html)).\n- In **another IDE** (e.g. in Emacs with [ESS](https://ess.r-project.org/)).\n- In the **RStudio IDE**.\n\nThe RStudio IDE is popular and this is what we will use today. RStudio can can be run locally, but for this course, we will use an RStudio server.\n\n### Accessing our RStudio server\n\nFor this workshop, we will use a temporary RStudio server. To access it, go to the website given during the workshop and sign in using the username and password you will be given (you can ignore the OTP entry).\n\n### Using RStudio\n<br>\n![](img/rstudio-ide_1.jpg)\n\n![](img/rstudio-ide_2.jpg)\n\n:::{.caption}\n\nfrom [Posit Cheatsheets](https://posit.co/resources/cheatsheets/)\n\n:::\n\n## Help and documentation\n\nFor some general documentation on R, you can run:\n\n```{.r}\nhelp.start()\n```\n\nTo get help on a function (e.g. `sum`), you can run:\n\n```{.r}\nhelp(sum)\n```\n\nDepending on your settings, this will open a documentation for `sum` in a pager or in your browser.\n\n## Basic syntax\n\n### Assignment\n\nR can accept the equal sign (`=`) for assignments, but it is more idiomatic to use the assignment sign (`<-`) whenever you bind a name to a value and to use the equal sign everywhere else.\n\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-1_8e2dd2dcd3875f1c9b9b4e9216d0b62d'}\n\n```{.r .cell-code}\na <- 3\n```\n:::\n\n\nOnce you have bound a name to a value, you can recall the value with that name:\n\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-2_b0f924ff84128dcc799d9df901c8b942'}\n\n```{.r .cell-code}\na  # Note that you do not need to use a print() function in R\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nYou can remove an object from the environment by deleting its name:\n\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-3_4c84c360bcab7c45ea4264346db1e79a'}\n\n```{.r .cell-code}\nrm(a)\na\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'a' not found\n```\n:::\n:::\n\n\nThe garbage collector will take care of deleting the object itself from memory.\n\n### Comments\n\nAnything to the left of `#` is a comment and is ignored by R:\n\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-4_47a7b3db0d16a72bfb56c32efd0340d9'}\n\n```{.r .cell-code}\n# This is an inline comment\n\na <- 3  # This is also a comment\n```\n:::\n\n\n## Data types and structures\n\n| Dimension | Homogeneous   | Heterogeneous  |\n|-----------|---------------|----------------|\n| 1 d       | Atomic vector | List           |\n| 2 d       | Matrix        | Data frame     |\n| 3 d       | Array         |                |\n\n### Atomic vectors\n\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-5_b1355a9965fe3ca881559bfd9ecbda74'}\n\n```{.r .cell-code}\nvec <- c(2, 4, 1)\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 1\n```\n:::\n\n```{.r .cell-code}\ntypeof(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nstr(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:3] 2 4 1\n```\n:::\n:::\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-6_19b7fcac755a1a54823451765ec2b029'}\n\n```{.r .cell-code}\nvec <- c(TRUE, TRUE, NA, FALSE)\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE    NA FALSE\n```\n:::\n\n```{.r .cell-code}\ntypeof(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nstr(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n logi [1:4] TRUE TRUE NA FALSE\n```\n:::\n:::\n\n\n:::{.note}\n\n`NA` (\"Not Available\") is a logical constant of length one. It is an indicator for a missing value.\n\n:::\n\nVectors are homogeneous, so all elements need to be of the same type.\n\nIf you use elements of different types, R will convert some of them to ensure that they become of the same type:\n\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-7_2837324ef88222f4c06aa2a6423b0615'}\n\n```{.r .cell-code}\nvec <- c(\"This is a string\", 3, \"test\")\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"This is a string\" \"3\"                \"test\"            \n```\n:::\n\n```{.r .cell-code}\ntypeof(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nstr(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:3] \"This is a string\" \"3\" \"test\"\n```\n:::\n:::\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-8_7ae6431dc9e7fb6d02f5e3db2664af93'}\n\n```{.r .cell-code}\nvec <- c(TRUE, 3, FALSE)\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 0\n```\n:::\n\n```{.r .cell-code}\ntypeof(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nstr(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:3] 1 3 0\n```\n:::\n:::\n\n\n### Data frames\n\nData frames contain tabular data. Under the hood, a data frame is a list of vectors.\n\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-9_c0457326535e98aa2de6b55ab1cd6816'}\n\n```{.r .cell-code}\ndat <- data.frame(\n  country = c(\"Canada\", \"USA\", \"Mexico\"),\n  var = c(2.9, 3.1, 4.5)\n)\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  country var\n1  Canada 2.9\n2     USA 3.1\n3  Mexico 4.5\n```\n:::\n\n```{.r .cell-code}\ntypeof(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\nstr(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t3 obs. of  2 variables:\n $ country: chr  \"Canada\" \"USA\" \"Mexico\"\n $ var    : num  2.9 3.1 4.5\n```\n:::\n\n```{.r .cell-code}\nlength(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\ndim(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 2\n```\n:::\n:::\n\n\n## Function definition\n\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-10_67a69c072dd2ee3cfe62a9c93b542030'}\n\n```{.r .cell-code}\ncompare <- function(x, y) {\n  x == y\n}\n```\n:::\n\n\nWe can now use our function:\n\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-11_b0a6786d8e64d3ef9b8bb6b9a78cbda7'}\n\n```{.r .cell-code}\ncompare(2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nNote that the result of the last statement is printed automatically:\n\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-12_ec32cf39428d29370f8e1c952a83db3e'}\n\n```{.r .cell-code}\ntest <- function(x, y) {\n  x\n  y\n}\ntest(2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nIf you want to return other results, you need to explicitly use the `print()` function:\n\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-13_eb820a27e4a4f149e2585da803be0e09'}\n\n```{.r .cell-code}\ntest <- function(x, y) {\n  print(x)\n  y\n}\ntest(2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n## Control flow\n\n### Conditionals\n\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-14_edb9b1919b0b1e1262d4423813d585cc'}\n\n```{.r .cell-code}\ntest_sign <- function(x) {\n  if (x > 0) {\n    \"x is positif\"\n  } else if (x < 0) {\n    \"x is negatif\"\n  } else {\n    \"x is equal to zero\"\n  }\n}\n```\n:::\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-15_f2ec85d6e1b3544d2ab76b62952a2f62'}\n\n```{.r .cell-code}\ntest_sign(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x is positif\"\n```\n:::\n\n```{.r .cell-code}\ntest_sign(-2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x is negatif\"\n```\n:::\n\n```{.r .cell-code}\ntest_sign(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x is equal to zero\"\n```\n:::\n:::\n\n\n### Loops\n\n\n::: {.cell hash='intro_hss_cache/html/unnamed-chunk-16_8cf60c6212e21475ef26942f54f22c39'}\n\n```{.r .cell-code}\nfor (i in 1:10) {\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n```\n:::\n:::\n\n\nNotice that here we need to use the `print()` function.\n\n## Packages\n\nPackages are a set of functions and/or data that add functionality to R.\n\n### Looking for packages\n\n- [Package finder](https://rdrr.io/find/?repos=cran%2Cbioc%2Crforge%2Cgithub&fuzzy_slug=)\n- Your peers and the literature\n\n### Package documentation\n\n- [List of CRAN packages](https://cran.r-project.org/web/packages/available_packages_by_name.html)\n- [Package documentation](https://rdrr.io/)\n\n### Managing R packages\n\nR packages can be installed, updated, and removed from within R:\n\n```{.r}\ninstall.packages(\"package-name\")\nremove.packages(\"package-name\")\nupdate_packages()\n```\n\n### Loading packages\n\nTo make a package available in an R session, you load it with the `library()` function.\n\n:::{.example}\n\nExample:\n\n:::\n\n```{.r}\nlibrary(readxl)\n```\n\nAlternatively, you can access a function from a package without loading it with the syntax: `package::function()`.\n\n:::{.example}\n\nExample:\n\n:::\n\n```{.r}\nreadxl::read_excel(\"file.xlsx\")\n```\n\n## Publishing\n\nYou might have heard of [R Markdown](https://rmarkdown.rstudio.com/). It allows for the creation of dynamic publication-quality documents mixing code blocks, text, graphs...\n\nThe team which created R Markdown has now created an even better tool: [Quarto](https://quarto.org/). If you want to learn how to use Quarto, you should [join us](https://www.eventbrite.com/e/hss-series-authoring-dynamic-scientific-documents-with-markdown-quarto-tickets-510984316847?aff=odcleoeventsincollection&keep_tld=1) for the workshop coming up [later this week](https://hss23.netlify.app/quarto/).\n\n## Resources\n\n### Alliance wiki\n\n- [R page](https://docs.alliancecan.ca/wiki/R)\n\n### R main site\n\n- [Download page](https://mirror.rcg.sfu.ca/mirror/CRAN/)\n\n### RStudio\n\n- [Posit site](https://posit.co/) (Posit is the brand new name of the RStudio company)\n- [Posit cheatsheets](https://posit.co/resources/cheatsheets/)\n\n### Software Carpentry online workshop\n\n- [Data analysis using R in the digital humanities](https://uomresearchit.github.io/r-tidyverse-digital-humanities/)\n\n### Online book\n\n- [R for Data Science](https://r4ds.had.co.nz/index.html) (heavily based on the [tidyverse](https://www.tidyverse.org/))\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}