{
  "hash": "5d8e12bd8d71d30d20dd2e17619749ef",
  "result": {
    "markdown": "---\ntitle: Data types and structures\naliases:\n  - data_structure.html\nauthor: Marie-Hélène Burle\n---\n\n\n:::{.def}\n\nThis section covers the various data types and structures available in R.\n\n:::\n\n## Summary of structures\n\n| Dimension | Homogeneous   | Heterogeneous  |\n|-----------|---------------|----------------|\n| 1 d       | Atomic vector | List           |\n| 2 d       | Matrix        | Data frame     |\n| 3 d       | Array         |                |\n\n## Atomic vectors\n\n### With a single element\n\n\n::: {.cell hash='intro_data_structure_cache/html/unnamed-chunk-1_c14d01284fc5a0e7dc6afa41ded2f7d6'}\n\n```{.r .cell-code}\na <- 2\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\ntypeof(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nstr(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num 2\n```\n:::\n\n```{.r .cell-code}\nlength(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\ndim(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nThe `dim` attribute of a vector doesn't exist (hence the `NULL`). This makes vectors different from one-dimensional arrays which have a `dim` of `1`.\n\nYou might have noticed that `2` is a double (double precision floating point number, equivalent of \"float\" in other languages). In R, this is the default, even if you don't type `2.0`. This prevents the kind of weirdness you can find in, for instance, Python.\n\nIn Python:\n\n```{.python}\n>>> 2 == 2.0\nTrue\n>>> type(2) == type(2.0)\nFalse\n>>> type(2)\n<class 'int'>\n>>> type(2.0)\n<class 'float'>\n```\n\nIn R:\n\n```{.r}\n> 2 == 2.0\n[1] TRUE\n> typeof(2) == typeof(2.0)\n[1] TRUE\n> typeof(2)\n[1] \"double\"\n> typeof(2.0)\n[1] \"double\"\n```\n\nIf you want to define an integer variable, you use:\n\n\n::: {.cell hash='intro_data_structure_cache/html/unnamed-chunk-2_b750cfbf3baf6bd19b5364f97d6aeb98'}\n\n```{.r .cell-code}\nb <- 2L\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\ntypeof(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nmode(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nstr(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n int 2\n```\n:::\n:::\n\n\nThere are six vector types:\n\n- logical\n- integer\n- double\n- character\n- complex\n- raw\n\n### With multiple elements\n\n\n::: {.cell hash='intro_data_structure_cache/html/unnamed-chunk-3_e6514213851352015ed93dc46193d98e'}\n\n```{.r .cell-code}\nc <- c(2, 4, 1)\nc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 1\n```\n:::\n\n```{.r .cell-code}\ntypeof(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nmode(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nstr(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:3] 2 4 1\n```\n:::\n:::\n\n::: {.cell hash='intro_data_structure_cache/html/unnamed-chunk-4_cb166ae2e189da05b6cf903bd3710fdd'}\n\n```{.r .cell-code}\nd <- c(TRUE, TRUE, NA, FALSE)\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE    NA FALSE\n```\n:::\n\n```{.r .cell-code}\ntypeof(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nstr(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n logi [1:4] TRUE TRUE NA FALSE\n```\n:::\n:::\n\n\n:::{.note}\n\n`NA` (\"Not Available\") is a logical constant of length one. It is an indicator for a missing value.\n\n:::\n\nVectors are homogeneous, so all elements need to be of the same type.\n\nIf you use elements of different types, R will convert some of them to ensure that they become of the same type:\n\n\n::: {.cell hash='intro_data_structure_cache/html/unnamed-chunk-5_33cc0c037e1bd457e13854b89077a593'}\n\n```{.r .cell-code}\ne <- c(\"This is a string\", 3, \"test\")\ne\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"This is a string\" \"3\"                \"test\"            \n```\n:::\n\n```{.r .cell-code}\ntypeof(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nstr(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:3] \"This is a string\" \"3\" \"test\"\n```\n:::\n:::\n\n::: {.cell hash='intro_data_structure_cache/html/unnamed-chunk-6_5cc21a96dfbe5840f9b9e8918b6b74ae'}\n\n```{.r .cell-code}\nf <- c(TRUE, 3, FALSE)\nf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 0\n```\n:::\n\n```{.r .cell-code}\ntypeof(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nstr(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:3] 1 3 0\n```\n:::\n:::\n\n::: {.cell hash='intro_data_structure_cache/html/unnamed-chunk-7_62b5154f57f07258266767fafa270692'}\n\n```{.r .cell-code}\ng <- c(2L, 3, 4L)\ng\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4\n```\n:::\n\n```{.r .cell-code}\ntypeof(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nstr(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:3] 2 3 4\n```\n:::\n:::\n\n::: {.cell hash='intro_data_structure_cache/html/unnamed-chunk-8_22ed1b4fbce16b20080221042b76809a'}\n\n```{.r .cell-code}\nh <- c(\"string\", TRUE, 2L, 3.1)\nh\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"string\" \"TRUE\"   \"2\"      \"3.1\"   \n```\n:::\n\n```{.r .cell-code}\ntypeof(h)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nstr(h)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:4] \"string\" \"TRUE\" \"2\" \"3.1\"\n```\n:::\n:::\n\n\nThe binary operator `:` is equivalent to the `seq()` function and generates a regular sequence of integers:\n\n\n::: {.cell hash='intro_data_structure_cache/html/unnamed-chunk-9_446374664f4780a1e33bc2051bb52cb6'}\n\n```{.r .cell-code}\ni <- 1:5\ni\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\ntypeof(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nstr(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n int [1:5] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nidentical(2:8, seq(2, 8))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Matrices\n\n\n::: {.cell hash='intro_data_structure_cache/html/unnamed-chunk-10_b0d1e9115b65489df532cf6a3c5cfa59'}\n\n```{.r .cell-code}\nj <- matrix(1:12, nrow = 3, ncol = 4)\nj\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n```\n:::\n\n```{.r .cell-code}\ntypeof(j)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nstr(j)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n int [1:3, 1:4] 1 2 3 4 5 6 7 8 9 10 ...\n```\n:::\n\n```{.r .cell-code}\nlength(j)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\ndim(j)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4\n```\n:::\n:::\n\n\nThe default is `byrow = FALSE`. If you want the matrix to be filled in by row, you need to set this argument to `TRUE`:\n\n\n::: {.cell hash='intro_data_structure_cache/html/unnamed-chunk-11_105de3749bc123c3448e7359b946dd66'}\n\n```{.r .cell-code}\nk <- matrix(1:12, nrow = 3, ncol = 4, byrow = TRUE)\nk\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    5    6    7    8\n[3,]    9   10   11   12\n```\n:::\n:::\n\n\n## Arrays\n\n\n::: {.cell hash='intro_data_structure_cache/html/unnamed-chunk-12_041b4fd7fcea640c24172b46ea03c494'}\n\n```{.r .cell-code}\nl <- array(as.double(1:24), c(3, 2, 4))\nl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n, , 2\n\n     [,1] [,2]\n[1,]    7   10\n[2,]    8   11\n[3,]    9   12\n\n, , 3\n\n     [,1] [,2]\n[1,]   13   16\n[2,]   14   17\n[3,]   15   18\n\n, , 4\n\n     [,1] [,2]\n[1,]   19   22\n[2,]   20   23\n[3,]   21   24\n```\n:::\n\n```{.r .cell-code}\ntypeof(l)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nstr(l)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:3, 1:2, 1:4] 1 2 3 4 5 6 7 8 9 10 ...\n```\n:::\n\n```{.r .cell-code}\nlength(l)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24\n```\n:::\n\n```{.r .cell-code}\ndim(l)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 2 4\n```\n:::\n:::\n\n\n## Lists\n\n\n::: {.cell hash='intro_data_structure_cache/html/unnamed-chunk-13_83c916c177c61a75ef2761e035ee7231'}\n\n```{.r .cell-code}\nm <- list(2, 3)\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 2\n\n[[2]]\n[1] 3\n```\n:::\n\n```{.r .cell-code}\ntypeof(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\nstr(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 2\n $ : num 2\n $ : num 3\n```\n:::\n\n```{.r .cell-code}\nlength(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\ndim(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nAs with atomic vectors, lists do not have a `dim` attribute. Lists are in fact a different type of vectors.\n\nLists can be heterogeneous:\n\n\n::: {.cell hash='intro_data_structure_cache/html/unnamed-chunk-14_62a15977d990c89fd39caf92601b9173'}\n\n```{.r .cell-code}\nn <- list(2L, 3, c(2, 1), FALSE, \"string\")\nn\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 2\n\n[[2]]\n[1] 3\n\n[[3]]\n[1] 2 1\n\n[[4]]\n[1] FALSE\n\n[[5]]\n[1] \"string\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\nstr(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 5\n $ : int 2\n $ : num 3\n $ : num [1:2] 2 1\n $ : logi FALSE\n $ : chr \"string\"\n```\n:::\n\n```{.r .cell-code}\nlength(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n## Data frames\n\nData frames contain tabular data. Under the hood, a data frame is a list of vectors.\n\n\n::: {.cell hash='intro_data_structure_cache/html/unnamed-chunk-15_3117ff83dda4530b5bf5107e3abb975e'}\n\n```{.r .cell-code}\no <- data.frame(\n  country = c(\"Canada\", \"USA\", \"Mexico\"),\n  var = c(2.9, 3.1, 4.5)\n)\no\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  country var\n1  Canada 2.9\n2     USA 3.1\n3  Mexico 4.5\n```\n:::\n\n```{.r .cell-code}\ntypeof(o)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\nstr(o)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t3 obs. of  2 variables:\n $ country: chr  \"Canada\" \"USA\" \"Mexico\"\n $ var    : num  2.9 3.1 4.5\n```\n:::\n\n```{.r .cell-code}\nlength(o)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\ndim(o)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 2\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}