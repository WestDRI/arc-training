{
  "hash": "1b1ebba2f5f951ad063db37c593657f3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Data visualization\nauthor: Marie-Hélène Burle\n---\n\n\n:::{.def}\n\nTo understand data, it is often extremely useful to visualize them. In this section, we will plot the US infectious disease data.\n\n:::\n\n## Load packages\n\nThe most popular R package for data visualization is the tidyverse package [ggplot2](https://ggplot2.tidyverse.org/). Let's load it in addition to our previous packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n:::\n\n\nLet's start by plotting the total number of cases for all states and all diseases per year. We already saw in the previous section how to group and summarise the data. Let's create a new data frame with our prepared data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_year_totals <- us_contagious_diseases |>\n  group_by(year) |>\n  summarise(total = sum(count))\n```\n:::\n\n\nThis is what our data frame looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(us_year_totals)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n   year  total\n  <dbl>  <dbl>\n1  1928 524563\n2  1929 380196\n3  1930 439289\n4  1931 482886\n5  1932 404683\n6  1933 391485\n```\n\n\n:::\n:::\n\n\nNow we can use it to make a first plot.\n\n## The Canvas\n\nThe first component of a plot is the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(us_year_totals)\n```\n\n::: {.cell-output-display}\n![](hss_vis_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThe second component sets the way variables are mapped on the axes. This is done with the `aes()` (aesthetics) function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(us_year_totals, aes(year, total))\n```\n\n::: {.cell-output-display}\n![](hss_vis_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Geometric representations of the data\n\nOnto this canvas, we can add \"geoms\" (geometrical objects) representing the data. The type of \"geom\" defines the type of representation (e.g. boxplot, histogram, bar chart).\n\nTo represent the data as a scatterplot, we use the `geom_point()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(us_year_totals, aes(year, total)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](hss_vis_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThis immediately shows that the number of contagious infections in the US has declined sharply since the early 60s.\n\nMultiple \"geoms\" can be added on top of each other. For instance, we can add a smoothed conditional means function with `geom_smooth()`. That will help us see patterns in the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(us_year_totals, aes(year, total)) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](hss_vis_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThere is a bump of cases in the early 40s. Due to WWII maybe?\n\nThe default smoothing function uses the LOESS (locally estimated scatterplot smoothing) method, which is a nonlinear regression. We can change the method to a linear model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(us_year_totals, aes(year, total)) +\n  geom_point() +\n  geom_smooth(method = lm)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](hss_vis_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nLine width, color, and whether or not the standard error (`se`) is shown can be customized:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(us_year_totals, aes(year, total)) +\n  geom_point() +\n  geom_smooth(\n    method = lm,\n    se = FALSE,\n    color = \"#999999\",\n    linewidth = 0.5\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](hss_vis_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Colour representations\n\nSo far, we have pooled the data for all diseases together, but maybe different diseases show different trends.\n\nLet's create a new data frame with the totals per year and per disease so that we can create plots with more information:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_year_disease_totals <- us_contagious_diseases |>\n  group_by(year, disease) |>\n  summarise(total = sum(count), .groups = 'drop')\n\nhead(us_year_disease_totals)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n   year disease   total\n  <dbl> <fct>     <dbl>\n1  1928 Measles  483337\n2  1928 Polio      4756\n3  1928 Smallpox  36470\n4  1929 Measles  339061\n5  1929 Polio      2746\n6  1929 Smallpox  38389\n```\n\n\n:::\n:::\n\n\nNow we can use a different colour for each disease:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(us_year_disease_totals, aes(year, total)) +\n  geom_point(aes(color = disease))\n```\n\n::: {.cell-output-display}\n![](hss_vis_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nThis shows how prevalent measles was until the 70s.\n\nWhen plotting quickly to understand the data, aesthetics don't matter. If you want to produce plots for publications or presentations, of course you should then spend some time tweaking their style and readability.\n\n## Colour scales\n\nMany colour scales exist. `scale_color_brewer()`, based on [color brewer 2.0](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3), is one of many methods to change the color scale. Here is the list of available scales for this particular method:\n\n![](img/color_scale.png){width=\"70%\" fig-align=\"center\"}\n\nWhen choosing a colour scale, it is very important to remember that various forms of colour blindness are common. Try to choose distinctive colours. Some palettes are specifically designed to work well for everyone.\n\nHere, let's try the `Dark2` palette:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(us_year_disease_totals, aes(year, total)) +\n  geom_point(aes(color = disease)) +\n  scale_color_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](hss_vis_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## Labels\n\nLet's improve our axes labels and legend and add a title to the plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(us_year_disease_totals, aes(year, total)) +\n  geom_point(aes(color = disease)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  labs(\n    title = \"Infectious diseases in the US\",\n    x = \"Year\",\n    y = \"Number of cases\",\n    color = \"Diseases\"\n  )\n```\n\n::: {.cell-output-display}\n![](hss_vis_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Themes\n\n`ggplot2` comes with a number of preset themes.\n\n[Edward Tufte](https://en.wikipedia.org/wiki/Edward_Tufte) developed, amongst others, the principle of *data-ink ratio* which emphasizes that ink should be used primarily where it communicates meaningful messages. It is indeed common to see charts where more ink is used in labels or background than in the actual representation of the data.\n\nThe default `ggplot2` theme could be criticized as not following this principle. Let's change it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(us_year_disease_totals, aes(year, total)) +\n  geom_point(aes(color = disease)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  labs(\n    title = \"Infectious diseases in the US\",\n    x = \"Year\",\n    y = \"Number of cases\",\n    color = \"Diseases\"\n  ) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](hss_vis_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nThe `theme()` function allows to tweak the theme in any number of ways. For instance, what if we don't like the default position of the title and we would rather have it centered?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(us_year_disease_totals, aes(year, total)) +\n  geom_point(aes(color = disease)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  labs(\n    title = \"Infectious diseases in the US\",\n    x = \"Year\",\n    y = \"Number of cases\",\n    color = \"Diseases\"\n  ) +\n  theme_classic() +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](hss_vis_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nWe can also move the legend to give more space to the actual graph:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(us_year_disease_totals, aes(year, total)) +\n  geom_point(aes(color = disease)) +\n  scale_color_brewer(palette = \"Dark2\") +\n  labs(\n    title = \"Infectious diseases in the US\",\n    x = \"Year\",\n    y = \"Number of cases\",\n    color = \"Diseases\"\n  ) +\n  theme_classic() +\n  theme(plot.title = element_text(hjust = 0.5), legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](hss_vis_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## Facets\n\nInstead of plotting the data for all diseases on a single graph, we can create facets:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(us_year_disease_totals, aes(year, total)) +\n  geom_point(aes(color = disease), show.legend = FALSE) +\n  scale_color_brewer(palette = \"Dark2\") +\n  labs(\n    title = \"Infectious diseases in the US\",\n    x = \"Year\",\n    y = \"Number of cases\"\n  ) +\n  facet_wrap(~ disease) +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](hss_vis_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## `ggplot2` extensions\n\nThanks to its popularity, `ggplot2` has seen a proliferation of packages extending its capabilities. A full list can be found [here](https://exts.ggplot2.tidyverse.org/gallery/).\n\n\n```{=html}\n<iframe width=\"780\" height=\"1000\" src=\"https://exts.ggplot2.tidyverse.org/gallery/\"></iframe>\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}