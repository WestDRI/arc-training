{
  "hash": "c4593c64da5968efa5814f6e4e992e81",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Control flow\naliases:\n  - control_flow.html\nauthor: Marie-Hélène Burle\n---\n\n\n\n\n:::{.def}\n\nControl flow statements alter the linear execution of code, allowing for one or another section of code to be executed, or for one section of code to be executed multiple times.\n\n:::\n\n## Conditionals\n\nConditionals determine which section of code is to be ran based on predicates. A predicate is a test that returns either `TRUE` or `FALSE`.\n\nHere is an example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_sign <- function(x) {\n  if (x > 0) {\n    \"x is positif\"\n  } else if (x < 0) {\n    \"x is negatif\"\n  } else {\n    \"x is equal to zero\"\n  }\n}\n```\n:::\n\n\n\n\n`test_sign()` is a function that accepts one argument. Depending on the value of that argument, one of three snippets of code is executed:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_sign(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x is positif\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntest_sign(-2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x is negatif\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntest_sign(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x is equal to zero\"\n```\n\n\n:::\n:::\n\n\n\n\n## Loops\n\nLoops allow to run the same instruction on various elements:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:10) {\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}