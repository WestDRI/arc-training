{
  "hash": "71d5ac6ce23f30ee8486d2fd3171fc4d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: A tool to rule them all\nsubtitle: Versions, virtual env, and co with ~~pip, pipx, pyenv, virtualenv~~ **uv**\nfrontpic: img/uv.png\nfrontpicwidth: 35%\nnoshadow: noshadow\nauthor: Marie-Hélène Burle\ndate: 2025-05-06\ndate-format: long\nexecute:\n  freeze: auto\n  cache: true\n  error: true\n  echo: true\nformat:\n  revealjs:\n    embed-resources: true\n    theme: [default, ../revealjspink.scss]\n    logo: /img/favicon_sfudrac.png\n    highlight-style: ayu\n    code-line-numbers: false\n    template-partials:\n      - ../title-slide.html\n    pointer:\n      color: \"#b5111b\"\n      pointerSize: 32\n    link-external-newwindow: true\n    footer: <a href=\"wb_uv.html\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"rgb(38,18,48)\" class=\"bi bi-arrow-90deg-up\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z\"/></svg>&nbsp;Back to webinar page</a>\n    auto-stretch: false\nrevealjs-plugins:\n  - pointer\n---\n\n\n::: {.cell}\n\n:::\n\n\n# Context\n\n## A cluttered toolkit\n\n<iframe width=\"900\" height=\"600\" src=\"https://chadsmith.dev/python-packaging/\" data-external=\"1\"></iframe>\n\n## Age of Rust {.center}\n\n<iframe width=\"900\" height=\"600\" src=\"https://docs.astral.sh/uv/\" data-external=\"1\"></iframe>\n\n## **uv** {.center}\n\n- Universal tool\n- *Really* fast\n- Excellent dependency resolution with [PubGrub](https://github.com/pubgrub-rs/pubgrub) (you guessed it, also written in Rust)\n- Dependency deduplication\n\n# Warning\n\n:::{.info}\n\nDo not use **uv** on the Alliance clusters. This is for your local computer only\n\nFollowing is a recap of a good workflow on the Alliance clusters\n\n:::\n\n## Python versions on Alliance clusters (~~**uv**~~) {.center}\n\nUse `module`\n\n:::{.example}\n\nList available Python versions:\n\n:::\n\n```{.bash}\nmodule spider python\n```\n\n:::{.example}\n\nCheck how to load a particular version:\n\n:::\n\n```{.bash}\nmodule spider python/3.12.4\n```\n\n:::{.example}\n\nLoad a particular version:\n\n:::\n\n```{.bash}\nmodule load python/3.12.4\n```\n\n## Python packages on Alliance clusters (~~**uv**~~) {.center}\n\nCreate a Python virtual environment:\n\n```{.bash}\npython -m venv ~/env\n```\n\nActivate it:\n\n```{.bash}\nsource ~/env/bin/activate\n```\n\nUpdate pip from wheel:\n\n```{.bash}\npython -m pip install --upgrade pip --no-index\n```\n\nUse `pip` with `--no-index` to use [wheels](https://docs.alliancecan.ca/wiki/Available_Python_wheels) whenever possible:\n\n```{.bash}\npython -m pip install --no-index jax[cuda12] jax-ai-stack[grain]\n```\n\n# Getting started with **uv**\n\n## Install **uv** {.center}\n\n<iframe width=\"900\" height=\"600\" src=\"https://docs.astral.sh/uv/getting-started/installation/\" data-external=\"1\"></iframe>\n\n## Help {.center}\n\nList of commands and options:\n\n```{.bash}\nuv\n```\n\nList of options:\n\n```{.bash}\nuv <command> -h\t   # e.g. uv init -h\n```\n\nMan page:\n\n```{.bash}\nuv help <command>  # e.g. uv help init\n```\n\n# Stuck in a rut\n\n*(When you can't change your workflow)*\n\n## Drop-in replacement {.center}\n\nYou can add `uv` in front of your usual `venv` and `pip` commands\n\nThis actually runs `uv` (and neither `pip` nor `venv`) so you get the speedup, but it keeps everything compatible\n\n## Create a virtual env {.center}\n\n```{.bash}\nuv venv\n```\n\n:::{.example}\n\nWith specific Python version:\n\n:::\n\n```{.bash}\nuv venv --python 3.12\n```\n\nBy default, the virtual env is called `.venv`. If you don't change its name, `uv` will use it automatically so you don't need to source it\n\n## Install packages in virtual env {.center}\n\n```{.bash}\nuv pip install jax flax\n```\n\n:::{.example}\n\nFrom GitHub repo:\n\n:::\n\n```{.bash}\nuv pip install \"git+https://github.com/jax-ml/jax\"\nuv pip install \"git+https://github.com/jax-ml/jax@main\"\nuv pip install \"git+https://github.com/jax-ml/jax@766e68c4813a30e29b4fcefaa3253a42d0e197be\"\n```\n\n:::{.example}\n\nFrom requirements.txt or [pyproject.toml](https://peps.python.org/pep-0518/) files:\n\n:::\n\n```{.bash}\nuv pip install -r requirements.txt\nuv pip install -r pyproject.toml\n```\n\n## All your usual commands work {.center}\n\n```{.bash}\nuv pip uninstall jax\nuv pip list\nuv pip freeze\n…\n```\n\n# Python versions\n\n## Automatic installation {.center}\n\nMissing Python versions are automatically installed when required\n\n:::{.example}\n\nExample:\n\n:::\n\n```{.bash}\nuv venv --python 3.12\n```\n\n:::{.note}\n\nIf Python 3.12 is missing, `uv` will install it during the creation of this virtual env\n\n:::\n\n## Install Python {.center}\n\nPython versions can also be installed explicitly:\n\n```{.bash}\nuv python install 3.12.3\nuv python install '>=3.8,<3.10'\n```\n\n:::{.example}\n\nSpecific implementations (default is `cpython`):\n\n:::\n\n```{.bash}\nuv python install pypy\nuv python install 'pypy>=3.8,<3.10'\n```\n\n## Manage versions {.center}\n\nView installed and available versions:\n\n```{.bash}\nuv python list\n```\n\nUninstall Python version:\n\n```{.bash}\nuv python uninstall 3.10\n```\n\n:::{.note}\n\nNoe that this is a lot more convenient than `pyenv` which requires the exact Python version number to uninstall (e.g. `pyenv uninstall 3.10.6`)\n\n:::\n\n# Python projects\n\n## Initialize projects {.center}\n\n```{.bash}\nuv init my_project\n```\n\n:::{.example}\n\nWith specific Python version:\n\n:::\n\n```{.bash}\nuv init --python 3.12 my_project\n```\n\n:::{.example}\n\nCustomize which files get created:\n\n:::\n\n```{.bash}\nuv init --no-readme --no-description\n```\n\n## Project structure {.center}\n\n\n::: {.cell}\n\n```{.bash .cell-code}\neza -aT my_project\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\"my_project\": No such file or directory (os error 2)\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbat -p my_project/pyproject.toml\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\u001b[31m[bat error]\u001b[0m: 'my_project/pyproject.toml': No such file or directory (os error 2)\n```\n\n\n:::\n:::\n\n\n## Add dependencies {.center}\n\nYou need to `cd` into the project, then you can add dependencies:\n\n```{.bash}\ncd my_project\nuv add polars matplotlib\n```\n\nThis creates a virtual env called `.venv` and a `uv.lock`:\n\n```{.bash}\neza -aTL 1\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\"my_project\": No such file or directory (os error 2)\n```\n\n\n:::\n:::\n\n\nHere again, no need to source the virtual env as long as you use **uv**\n\n## Project file {.center}\n\nGets populated automatically with dependencies:\n\n```{.bash}\nbat -p pyproject.toml\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\u001b[31m[bat error]\u001b[0m: 'my_project/pyproject.toml': No such file or directory (os error 2)\n```\n\n\n:::\n:::\n\n\n## List explicitly installed dependencies {.center}\n\n```{.bash}\nuv tree -d 1\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nbash: line 1: cd: my_project: No such file or directory\nerror: No `pyproject.toml` found in current directory or any parent directory\n```\n\n\n:::\n:::\n\n\n## List all dependencies {.center}\n\n```{.bash}\nuv pip list\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nbash: line 1: cd: my_project: No such file or directory\nUsing Python 3.13.3 environment at: /usr\nPackage                   Version\n------------------------- -------------------------------\nabsl-py                   2.1.0\nadblock                   0.0.0\naiohappyeyeballs          2.6.1\naiohttp                   3.11.18\naiosignal                 1.3.2\naiosmtpd                  1.4.6\nannotated-types           0.7.0\nanyio                     4.9.0\nappdirs                   1.4.4\narandr                    0.1.11\nargcomplete               3.5.3\nargon2-cffi               23.1.0\nargon2-cffi-bindings      21.2.0\narrow                     1.3.0\nasciidoc                  10.2.1\nasttokens                 3.0.0\nasync-lru                 2.0.5\natpublic                  5.1\nattrs                     24.1.0\nautocommand               2.2.2\nautokey                   0.96.0\nautopage                  0.5.2\nbabel                     2.15.0\nbeautifulsoup4            4.13.3\nblack                     25.1.0\nbleach                    6.2.0\nborgbackup                1.4.1\nbottleneck                1.4.2\nbtrfsutil                 6.14\nbuild                     1.2.2\ncachetools                5.5.0\ncertifi                   2025.4.26\ncffi                      1.17.1\ncharset-normalizer        3.4.1\nclick                     8.1.8\ncliff                     4.8.0\ncmd2                      2.5.11\ncolorama                  0.4.6\ncomm                      0.2.2\ncommonmark                0.9.1\ncontourpy                 1.3.2\ncoverage                  7.8.0\ncryptography              44.0.2\ncycler                    0.12.1\ncymem                     2.0.9a3\ncython                    3.0.12\ndbus-python               1.4.0\ndebtcollector             3.0.0\ndebugpy                   1.8.14+0.g8b5b84ae.dirty\ndecorator                 5.2.1\ndefusedxml                0.7.1\ndeprecation               2.1.0\ndistro                    1.9.0\ndnspython                 2.7.0\ndocopt                    0.6.2\ndocutils                  0.21.2\ndogpile-cache             1.3.3\neditables                 0.5\nexecuting                 2.2.0\nfastjsonschema            2.21.1\nfilelock                  3.18.0\nflit-core                 3.12.0\nfonttools                 4.57.0\nfqdn                      1.5.1\nfrozenlist                1.6.0\nfsspec                    2025.3.2\ngoogle-auth               2.38.0\ngoogle-auth-oauthlib      1.2.1\ngreenlet                  3.2.1\ngrpcio                    1.72.0\ngrpcio-tools              1.72.0\nh11                       0.16.0\nh5py                      3.13.0\nhatch-jupyter-builder     0.9.1\nhatchling                 1.27.0\nhtml2text                 2024.2.26\nhtml5lib                  1.1\nhttpcore                  1.0.9\nhttplib2                  0.22.0\nhttpx                     0.28.1\nidna                      3.10\nimportlib-metadata        8.6.1\nimportlib-resources       6.5.2\ninflect                   7.5.0\ninflection                0.5.1\niniconfig                 2.1.0\ninstaller                 0.7.0\nipykernel                 6.29.5\nipython                   9.2.0\nipython-pygments-lexers   1.1.1\niso8601                   2.1.0\nisodate                   0.7.2\nisoduration               20.11.0\njaraco-collections        5.1.0\njaraco-context            6.0.1\njaraco-functools          4.1.0\njaraco-text               4.0.0\njedi                      0.19.2\njinja2                    3.1.5\njmespath                  1.0.1\njoblib                    1.4.2\njson5                     0.12.0\njsonpatch                 1.33\njsonpointer               3.0.0\njsonschema                4.23.0\njsonschema-specifications 2024.10.1\njupyter-cache             1.0.1\njupyter-client            8.6.3\njupyter-core              5.7.2\njupyter-events            0.12.0\njupyter-lsp               2.2.5\njupyter-packaging         0.12.3\njupyter-server            2.15.0\njupyterlab                4.4.1\njupyterlab-lsp            5.1.0\njupyterlab-pygments       0.3.0\njupyterlab-server         2.27.3\njupytext                  1.17.1\nkeystoneauth1             5.8.0\nkiwisolver                1.4.6\nlibtorrent                2.0.11\nlit                       19.1.7.dev0\nllfuse                    1.5.0\nllvmlite                  0.44.0\nmarkdown                  3.7\nmarkdown-it-py            3.0.0\nmarkupsafe                2.1.5\nmatplotlib                3.10.1\nmatplotlib-inline         0.1.7\nmdit-py-plugins           0.4.2\nmdurl                     0.1.2\nmeson                     1.8.0\nmistune                   3.1.3\nmore-itertools            10.6.0\nmsgpack                   1.0.5\nmultidict                 6.4.3\nmypy-extensions           1.0.0\nnbclient                  0.10.2\nnbconvert                 7.16.6\nnbformat                  5.10.4\nnest-asyncio              1.6.0\nnetaddr                   1.3.0\nnetifaces                 0.11.0\nnetsnmp-python            1.0a1\nnetworkx                  3.4.2\nnotebook-shim             0.2.4\nnumba                     0.61.0+0.g8ec16ceeb.dirty\nnumexpr                   2.10.2\nnumpy                     2.2.5\noauth2client              4.1.3\noauthlib                  3.2.2\nopenstacksdk              4.0.1\nopt-einsum                3.4.0\nos-service-types          1.7.0\nosc-lib                   3.1.0\noslo-config               9.5.0\noslo-i18n                 6.5.0\noslo-serialization        5.6.0\noslo-utils                7.1.0\noutcome                   1.3.0.post0\noverrides                 7.7.0\npackaging                 25.0\npandas                    2.2.3\npandocfilters             1.5.1\nparsedatetime             2.6\nparso                     0.8.4\npathspec                  0.12.1\npbr                       6.1.1\npexpect                   4.9.0\npickleshare               0.7.5\npillow                    11.2.1\npipx                      1.7.1\nplatformdirs              4.3.6\nplaywright                1.52.1.dev0+geec856f5.d20250430\npluggy                    1.5.0\npolars                    1.29.0\npooch                     1.8.2\nprettytable               3.16.0\nprometheus-client         0.21.1\nprompt-toolkit            3.0.51\npropcache                 0.3.1\nprotobuf                  6.30.2\npsutil                    7.0.0\npsycopg2                  2.9.10\nptpython                  3.0.29\nptyprocess                0.7.0\npure-eval                 0.2.3\npyaml                     24.12.0\npyarrow                   19.0.1\npyasn1                    0.6.0\npyasn1-modules            0.4.0\npycairo                   1.28.0\npycparser                 2.22\npydantic                  2.11.4\npydantic-core             2.33.2\npyee                      11.1.0\npyfiglet                  1.0.2\npygments                  2.19.1\npygobject                 3.52.3\npyinotify                 0.9.6\npylatexenc                2.10\npyparsing                 3.2.2\npyperclip                 1.9.0\npyproject-hooks           1.2.0\npyqt5                     5.15.11\npyqt5-sip                 12.17.0\npyqt6                     6.9.0\npyqt6-sip                 13.10.0\npyqt6-webengine           6.9.0\npytest                    8.3.5\npytest-cov                6.1.1\npytest-localserver        0.8.1\npython-cinderclient       9.6.0\npython-dateutil           2.9.0\npython-json-logger        3.3.0\npython-keystoneclient     5.6.0\npython-magic              0.4.27\npython-novaclient         18.9.0\npython-openstackclient    7.4.0\npython-slugify            8.0.4\npython-xlib               0.33\npytz                      2025.2\npyyaml                    6.0.2\npyzmq                     26.2.0\nqscintilla                2.14.1\nqutebrowser               3.5.0\nranger-fm                 1.9.4\nreferencing               0.35.1\nrequests                  2.32.3\nrequests-file             2.1.0\nrequests-oauthlib         1.3.1\nrequestsexceptions        1.4.0\nrfc3339-validator         0.1.4\nrfc3986                   2.0.0\nrfc3987                   1.3.8\nrich                      14.0.0\nrich-cli                  1.8.0\nrich-rst                  1.3.1\nrpds-py                   0.22.3\nrsa                       4.9\nruamel-yaml               0.18.10\nruamel-yaml-clib          0.2.12\nscikit-learn              1.6.1\nscipy                     1.15.2\nsend2trash                1.8.3\nsetuptools                80.0.0\nsix                       1.17.0\nsniffio                   1.3.1\nsortedcontainers          2.4.0\nsoupsieve                 2.6\nsqlalchemy                2.0.40\nstack-data                0.6.3\nstandard-cgi              3.13.0\nstevedore                 5.4.0\ntabulate                  0.9.0\ntbb                       0.2\ntensorboard               2.19.0\ntensorboard-data-server   0.8.0a0\ntensorboard-plugin-wit    1.8.1\ntermdown                  1.18.0\ntext-unidecode            1.3\ntextual                   3.2.0\nthreadpoolctl             3.5.0\ntinycss2                  1.4.0\ntldextract                5.3.0\ntoml                      0.10.2\ntomlkit                   0.13.2\ntoolz                     1.0.0\ntornado                   6.4.2\ntqdm                      4.67.1\ntraitlets                 5.14.3\ntrash-cli                 0.24.5.26\ntrio                      0.30.0\ntrove-classifiers         2025.4.28.22\ntypeguard                 4.4.2\ntypes-python-dateutil     2.9.0.20241206\ntyping-extensions         4.13.2\ntyping-inspection         0.4.0\nueberzug                  18.3.1\nuri-template              1.3.0\nurllib3                   2.4.0\nuserpath                  1.9.2\nwcwidth                   0.2.13\nwebcolors                 24.11.1\nwebencodings              0.5.1\nwebsocket-client          1.8.0\nwerkzeug                  3.1.3\nwheel                     0.45.1\nwrapt                     1.16.0\nxlsx2csv                  0.8.1\nyarl                      1.20.0\nyt-dlp                    2025.4.30\nzipp                      3.21.0\n```\n\n\n:::\n:::\n\n\n## Manage dependencies {.center}\n\nUpdate all dependencies in lock file and virtual env:\n\n```{.bash}\nuv sync -U\n```\n\nRemove dependencies:\n\n```{.bash}\nuv remove matplotlib\n```\n\n# Did you say fast?\n\n## Python versions **pyenv** vs **uv** {.center}\n\n### **pyenv**\n\n```{.bash}\npyenv install 3.10\n```\n\n![](img/coffee_break.jpg){width=\"20%\" fig-align=\"center\"}\n\n### **uv**\n\n```{.bash}\nuv python install 3.10\n```\n\n```\nInstalled Python 3.10.17 in 1.49s\n```\n\n:::{.note}\n\nYes, `uv` brags about how fast it installs things... but it can!\n\n:::\n\n## Packages: **pip** vs **uv pip** {.center}\n\n### **pip**\n\nCreate virtual env:\n\n```{.bash}\npython -m venv .venv\n```\n\nActivate it:\n\n```{.bash}\nsource .venv/bin/activate\n```\n\nUpdate pip:\n\n```{.bash}\npython -m pip install --upgrade pip\n```\n\nInstall package:\n\n```{.bash}\npython -m pip install jax-ai-stack\n```\n\n## Packages: **pip** vs **uv pip** {.center}\n\n### **uv pip**\n\nCreate virtual env:\n\n```{.bash}\nuv venv\n```\n\n:::{.info}\n\nI am deleting my entire `uv` cache to make sure that I am not cheating in the comparison. You normally never do that since the cache prevents deduplication (saves space) and makes installations much faster\n\n```{.bash}\nrm -rf ~/.cache/uv\n```\n\n:::\n\nInstall package:\n\n```{.bash}\nuv pip install jax-ai-stack\n```\n\n## Packages: **pip** vs **uv pip** {.center}\n\n### **uv pip**\n\nTo use the virtual env, I can activate it but I can also access it directly by running commands preceded by `uv run`\n\n:::{.example}\n\nFor instance, I can launch a JupyterLab with access to the project virtual env with:\n\n:::\n\n```{.bash}\nuv run --with jupyter jupyter lab\n```\n\n:::{.example}\n\nor run a script with:\n\n:::\n\n```{.bash}\nuv run script.py\n```\n\n# Convenience\n\n## Use case: virtual env with specific Python version {.center}\n\nI needed to install a number of packages for a deep learning course with JAX, including Grain which still requires Python 3.12\n\nFollowing are the workflows with classic tools vs **uv**\n\n## **pyenv**, **venv**, and **pip** {.center}\n\nInstall Python 3.12:\n\n```{.bash}\npyenv install 3.12\n```\n\nCreate virtual env with Python 3.12 (requires identifying the path):\n\n```{.bash}\n~/.pyenv/versions/3.12.10/bin/python -m venv .venv\n```\n\nActivate it:\n\n```{.bash}\nsource .venv/bin/activate\n```\n\nUpdate pip:\n\n```{.bash}\npython -m pip install --upgrade pip\n```\n\nInstall packages:\n\n```{.bash}\npython -m pip install datasets jax-ai-stack[grain] matplotlib tqdm transformers\n```\n\n## **uv** {.center}\n\n```{.bash}\nuv init --python 3.12 demo\n```\n\n:::{.note}\n\nAutomatically installs Python 3.12 if missing\n\n:::\n\n```{.bash}\ncd demo\nuv add datasets jax-ai-stack[grain] matplotlib tqdm transformers\n```\n\n## **uv** advantages {.center}\n\nMuch simpler\n\nMuch (*much*!) faster\n\nLeaves me with a nice `pyproject.toml` file:\n\n```\n[project]\nname = \"jxai\"\nversion = \"0.1.0\"\nrequires-python = \">=3.12\"\ndependencies = [\n    \"datasets>=3.5.0\",\n    \"jax-ai-stack[grain]>=2025.2.5\",\n    \"matplotlib>=3.10.1\",\n    \"tqdm>=4.67.1\",\n    \"transformers>=4.50.3\",\n]\n```\n\nand a `uv.lock` file that I can put under version control and share for reproducibility\n\n# Tools\n\n## **pipx** replacement {.center}\n\nPython tools are packages used for convenience (e.g. linters, formatters) across projects, but not necessary for running your code\n\nThey are commonly installed via your Linux distribution package manager, Homebrew, or `pipx`\n\nThey can also be installed by `uv`:\n\n```{.bash}\nuv tool install ruff\n```\n\n## Use tools without installation {.center}\n\nTools can even be used without installation (from a temporary install)\n\n```{.bash}\nuvx ruff\n```\n\n:::{.note}\n\n`uvx` is an alias for `uv tool run`\n\n:::\n\n# Resources\n\n[GitHub repo](https://github.com/astral-sh/uv)\n\n[Website](https://docs.astral.sh/uv/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}