{
  "hash": "5e3c698008cb39725c994146b8e9a7e0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: A tool to rule them all\nsubtitle: Versions, virtual env, and co with ~~pip, pipx, pyenv, virtualenv~~ **uv**\nfrontpic: img/uv.png\nfrontpicwidth: 35%\nnoshadow: noshadow\nauthor: Marie-Hélène Burle\ndate: 2025-05-06\ndate-format: long\nexecute:\n  freeze: auto\n  cache: true\n  error: true\n  echo: true\nformat:\n  revealjs:\n    embed-resources: true\n    theme: [default, ../revealjspink.scss]\n    logo: /img/favicon_sfudrac.png\n    highlight-style: ayu\n    code-line-numbers: false\n    template-partials:\n      - ../title-slide.html\n    pointer:\n      color: \"#b5111b\"\n      pointerSize: 32\n    link-external-newwindow: true\n    footer: <a href=\"wb_uv.html\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"rgb(38,18,48)\" class=\"bi bi-arrow-90deg-up\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z\"/></svg>&nbsp;Back to webinar page</a>\n    auto-stretch: false\nrevealjs-plugins:\n  - pointer\n---\n\n\n::: {.cell}\n\n:::\n\n\n# Context\n\n## A cluttered toolkit\n\n<iframe width=\"900\" height=\"600\" src=\"https://chadsmith.dev/python-packaging/\" data-external=\"1\"></iframe>\n\n## Age of Rust {.center}\n\n<iframe width=\"900\" height=\"600\" src=\"https://docs.astral.sh/uv/\" data-external=\"1\"></iframe>\n\n## **uv** {.center}\n\n- Universal tool\n- *Really* fast\n- Excellent dependency resolution with [PubGrub](https://github.com/pubgrub-rs/pubgrub) (you guessed it, also written in Rust)\n- Dependency deduplication\n\n# Warning\n\n:::{.info}\n\nDo not use **uv** on the Alliance clusters. This is for your local computer only\n\nFollowing is a recap of a good workflow on the Alliance clusters\n\n:::\n\n## Python versions on Alliance clusters (~~**uv**~~) {.center}\n\nUse `module`\n\n:::{.example}\n\nList available Python versions:\n\n:::\n\n```{.bash}\nmodule spider python\n```\n\n:::{.example}\n\nCheck how to load a particular version:\n\n:::\n\n```{.bash}\nmodule spider python/3.12.4\n```\n\n:::{.example}\n\nLoad a particular version:\n\n:::\n\n```{.bash}\nmodule load python/3.12.4\n```\n\n## Python packages on Alliance clusters (~~**uv**~~) {.center}\n\nCreate a Python virtual environment:\n\n```{.bash}\npython -m venv ~/env\n```\n\nActivate it:\n\n```{.bash}\nsource ~/env/bin/activate\n```\n\nUpdate pip from wheel:\n\n```{.bash}\npython -m pip install --upgrade pip --no-index\n```\n\nUse `pip` with `--no-index` to use [wheels](https://docs.alliancecan.ca/wiki/Available_Python_wheels) whenever possible:\n\n```{.bash}\npython -m pip install --no-index jax[cuda12] jax-ai-stack[grain]\n```\n\n# Getting started with **uv**\n\n## Install **uv** {.center}\n\n<iframe width=\"900\" height=\"600\" src=\"https://docs.astral.sh/uv/getting-started/installation/\" data-external=\"1\"></iframe>\n\n## Help {.center}\n\nList of commands and options:\n\n```{.bash}\nuv\n```\n\nList of options:\n\n```{.bash}\nuv <command> -h\t   # e.g. uv init -h\n```\n\nMan page:\n\n```{.bash}\nuv help <command>  # e.g. uv help init\n```\n\n# Stuck in a rut\n\n*(When you can't change your workflow)*\n\n## Drop-in replacement {.center}\n\nYou can add `uv` in front of your usual `venv` and `pip` commands\n\nThis actually runs `uv` (and neither `pip` nor `venv`) so you get the speedup, but it keeps everything compatible\n\n## Create a virtual env {.center}\n\n```{.bash}\nuv venv\n```\n\n:::{.example}\n\nWith specific Python version:\n\n:::\n\n```{.bash}\nuv venv --python 3.12\n```\n\nBy default, the virtual env is called `.venv`. If you don't change its name, `uv` will use it automatically so you don't need to source it\n\n## Install packages in virtual env {.center}\n\n```{.bash}\nuv pip install jax flax\n```\n\n:::{.example}\n\nFrom GitHub repo:\n\n:::\n\n```{.bash}\nuv pip install \"git+https://github.com/jax-ml/jax\"\nuv pip install \"git+https://github.com/jax-ml/jax@main\"\nuv pip install \"git+https://github.com/jax-ml/jax@766e68c4813a30e29b4fcefaa3253a42d0e197be\"\n```\n\n:::{.example}\n\nFrom requirements.txt or [pyproject.toml](https://peps.python.org/pep-0518/) files:\n\n:::\n\n```{.bash}\nuv pip install -r requirements.txt\nuv pip install -r pyproject.toml\n```\n\n## All your usual commands work {.center}\n\n```{.bash}\nuv pip uninstall jax\nuv pip list\nuv pip freeze\n…\n```\n\n# Python versions\n\n## Automatic installation {.center}\n\nMissing Python versions are automatically installed when required\n\n:::{.example}\n\nExample:\n\n:::\n\n```{.bash}\nuv venv --python 3.12\n```\n\n:::{.note}\n\nIf Python 3.12 is missing, `uv` will install it during the creation of this virtual env\n\n:::\n\n## Install Python {.center}\n\nPython versions can also be installed explicitly:\n\n```{.bash}\nuv python install 3.12.3\nuv python install '>=3.8,<3.10'\n```\n\n:::{.example}\n\nSpecific implementations (default is `cpython`):\n\n:::\n\n```{.bash}\nuv python install pypy\nuv python install 'pypy>=3.8,<3.10'\n```\n\n## Manage versions {.center}\n\nView installed and available versions:\n\n```{.bash}\nuv python list\n```\n\nUninstall Python version:\n\n```{.bash}\nuv python uninstall 3.10\n```\n\n:::{.note}\n\nNoe that this is a lot more convenient than `pyenv` which requires the exact Python version number to uninstall (e.g. `pyenv uninstall 3.10.6`)\n\n:::\n\n# Python projects\n\n## Initialize projects {.center}\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nuv init my_project\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nInitialized project `my-project` at `/home/marie/parvus/prog/mint/tools/my_project`\n```\n\n\n:::\n:::\n\n\n:::{.example}\n\nWith specific Python version:\n\n:::\n\n```{.bash}\nuv init --python 3.12 my_project\n```\n\n:::{.example}\n\nCustomize which files get created:\n\n:::\n\n```{.bash}\nuv init --no-readme --no-description\n```\n\n## Project structure {.center}\n\n\n::: {.cell}\n\n```{.bash .cell-code}\neza -aT my_project\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nmy_project\n├── .python-version\n├── main.py\n├── pyproject.toml\n└── README.md\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbat -p my_project/pyproject.toml\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[project]\nname = \"my-project\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \">=3.13\"\ndependencies = []\n```\n\n\n:::\n:::\n\n\n## Add dependencies {.center}\n\nYou need to `cd` into the project, then you can add dependencies:\n\n```{.bash}\ncd my_project\nuv add polars matplotlib\n```\n\nThis creates a virtual env called `.venv` and a `uv.lock`:\n\n```{.bash}\neza -aTL 1\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nmy_project\n├── .python-version\n├── main.py\n├── pyproject.toml\n└── README.md\n```\n\n\n:::\n:::\n\n\nHere again, no need to source the virtual env as long as you use **uv**\n\n## Project file {.center}\n\nGets populated automatically with dependencies:\n\n```{.bash}\nbat -p pyproject.toml\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[project]\nname = \"my-project\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \">=3.13\"\ndependencies = []\n```\n\n\n:::\n:::\n\n\n## List explicitly installed dependencies {.center}\n\n```{.bash}\nuv tree -d 1\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nUsing CPython 3.13.7 interpreter at: /usr/bin/python3.13\nResolved 1 package in 12ms\nmy-project v0.1.0\n```\n\n\n:::\n:::\n\n\n## List all dependencies {.center}\n\n```{.bash}\nuv pip list\n```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nUsing Python 3.12.10 environment at: /home/marie/.local/share/uv/python/cpython-3.12.10-linux-x86_64-gnu\nPackage Version\n------- -------\npip     24.3.1\n```\n\n\n:::\n:::\n\n\n## Manage dependencies {.center}\n\nUpdate all dependencies in lock file and virtual env:\n\n```{.bash}\nuv sync -U\n```\n\nRemove dependencies:\n\n```{.bash}\nuv remove matplotlib\n```\n\n# Did you say fast?\n\n## Python versions **pyenv** vs **uv** {.center}\n\n### **pyenv**\n\n```{.bash}\npyenv install 3.10\n```\n\n![](img/coffee_break.jpg){width=\"20%\" fig-align=\"center\"}\n\n### **uv**\n\n```{.bash}\nuv python install 3.10\n```\n\n```\nInstalled Python 3.10.17 in 1.49s\n```\n\n:::{.note}\n\nYes, `uv` brags about how fast it installs things... but it can!\n\n:::\n\n## Packages: **pip** vs **uv pip** {.center}\n\n### **pip**\n\nCreate virtual env:\n\n```{.bash}\npython -m venv .venv\n```\n\nActivate it:\n\n```{.bash}\nsource .venv/bin/activate\n```\n\nUpdate pip:\n\n```{.bash}\npython -m pip install --upgrade pip\n```\n\nInstall package:\n\n```{.bash}\npython -m pip install jax-ai-stack\n```\n\n## Packages: **pip** vs **uv pip** {.center}\n\n### **uv pip**\n\nCreate virtual env:\n\n```{.bash}\nuv venv\n```\n\n:::{.info}\n\nI am deleting my entire `uv` cache to make sure that I am not cheating in the comparison. You normally never do that since the cache prevents deduplication (saves space) and makes installations much faster\n\n```{.bash}\nrm -rf ~/.cache/uv\n```\n\n:::\n\nInstall package:\n\n```{.bash}\nuv pip install jax-ai-stack\n```\n\n## Packages: **pip** vs **uv pip** {.center}\n\n### **uv pip**\n\nTo use the virtual env, I can activate it but I can also access it directly by running commands preceded by `uv run`\n\n:::{.example}\n\nFor instance, I can launch a JupyterLab with access to the project virtual env with:\n\n:::\n\n```{.bash}\nuv run --with jupyter jupyter lab\n```\n\n:::{.example}\n\nor run a script with:\n\n:::\n\n```{.bash}\nuv run script.py\n```\n\n# Convenience\n\n## Use case: virtual env with specific Python version {.center}\n\nI needed to install a number of packages for a deep learning course with JAX, including Grain which still requires Python 3.12\n\nFollowing are the workflows with classic tools vs **uv**\n\n## **pyenv**, **venv**, and **pip** {.center}\n\nInstall Python 3.12:\n\n```{.bash}\npyenv install 3.12\n```\n\nCreate virtual env with Python 3.12 (requires identifying the path):\n\n```{.bash}\n~/.pyenv/versions/3.12.10/bin/python -m venv .venv\n```\n\nActivate it:\n\n```{.bash}\nsource .venv/bin/activate\n```\n\nUpdate pip:\n\n```{.bash}\npython -m pip install --upgrade pip\n```\n\nInstall packages:\n\n```{.bash}\npython -m pip install datasets jax-ai-stack[grain] matplotlib tqdm transformers\n```\n\n## **uv** {.center}\n\n```{.bash}\nuv init --python 3.12 demo\n```\n\n:::{.note}\n\nAutomatically installs Python 3.12 if missing\n\n:::\n\n```{.bash}\ncd demo\nuv add datasets jax-ai-stack[grain] matplotlib tqdm transformers\n```\n\n## **uv** advantages {.center}\n\nMuch simpler\n\nMuch (*much*!) faster\n\nLeaves me with a nice `pyproject.toml` file:\n\n```\n[project]\nname = \"jxai\"\nversion = \"0.1.0\"\nrequires-python = \">=3.12\"\ndependencies = [\n    \"datasets>=3.5.0\",\n    \"jax-ai-stack[grain]>=2025.2.5\",\n    \"matplotlib>=3.10.1\",\n    \"tqdm>=4.67.1\",\n    \"transformers>=4.50.3\",\n]\n```\n\nand a `uv.lock` file that I can put under version control and share for reproducibility\n\n# Tools\n\n## **pipx** replacement {.center}\n\nPython tools are packages used for convenience (e.g. linters, formatters) across projects, but not necessary for running your code\n\nThey are commonly installed via your Linux distribution package manager, Homebrew, or `pipx`\n\nThey can also be installed by `uv`:\n\n```{.bash}\nuv tool install ruff\n```\n\n## Use tools without installation {.center}\n\nTools can even be used without installation (from a temporary install)\n\n```{.bash}\nuvx ruff\n```\n\n:::{.note}\n\n`uvx` is an alias for `uv tool run`\n\n:::\n\n# Resources\n\n[GitHub repo](https://github.com/astral-sh/uv)\n\n[Website](https://docs.astral.sh/uv/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}