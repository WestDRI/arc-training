{
  "hash": "b3db6623a82f84422516b9c8a9a73170",
  "result": {
    "markdown": "---\ntitle: \"Tips & tricks to get help in any programming language\"\nauthor: Marie-Hélène Burle\ndate: November 13, 2020\ndate-format: long\nexecute:\n  error: true\n  echo: true\nformat:\n  revealjs:\n    # embed-resources: true\n    theme: [default, ../revealjs.scss]\n    logo: /img/sfudrac_logo.png\n    highlight-style: monokai\n    code-line-numbers: false\n    code-overflow: wrap\n    template-partials:\n      - ../title-slide.html\n    pointer:\n      color: \"#b5111b\"\n      pointerSize: 32\n    link-external-newwindow: true\n    footer: <a href=\"help.html\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"rgb(153, 153, 153)\" class=\"bi bi-arrow-90deg-up\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z\"/></svg>&nbsp;Back to workshop page</a>\nrevealjs-plugins:\n  - pointer\n---\n\n\n# So, you are stuck ... now what?\n\n## When you are stuck\n<br>\n\n. . .\n\n*First,* **look** for information that is already out there\n\n. . .\n\n*Then,* **ask** for help\n\n## Look for information\n<br>\n\n\n::: {.cell hash='help_slides_cache/revealjs/unnamed-chunk-1_8d4dd1c4426dd181b13b23987ad60bb4'}\n\n```{.r .cell-code}\n3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n1. Read carefully any **error message**\n2. Read the **documentation** (local or online)\n3. Make sure you have **up-to-date versions**\n4. **Google** (using carefully selected keywords or the error message)\n5. Look for **open issues** & **bug reports**\n\n## Error messages\n<br>\n\n. . .\n\n### Read them!\n\n. . .\n\nFamiliarise yourself with the error types in the languages you use\\\n\n:::{.example}\n\nExample: Python's **syntax errors** vs **exceptions**\n\n:::\n\n. . .\n\nWarnings ≠ errors\n\n. . .\n\nLook for bits you understand (don't get put off by what you don't understand)\n\n. . .\n\nIdentify the locations of the errors to go investigate that part of the code\n\n\n## Documentation\n<br>\n\n. . .\n\n**You need to [find]{.emph} it**\n\n. . .\n\n**You need to [understand]{.emph} it**\n\n## Finding documentation online\n<br>\n\nTake the time to look for the official documentation & other high quality sources for the languages & tools you use.<br><br>\n\n. . .\n\n:::{.example}\n\n&emsp;*Examples:*\n\n&emsp;&emsp;Python: [Reference manual](https://docs.python.org/3/reference/index.html), [Standard library manual](https://docs.python.org/3/library/index.html), [Tutorial](https://docs.python.org/3/tutorial/index.html) \\\n&emsp;&emsp;NumPy: [Tutorial](https://numpy.org/devdocs/user/tutorials_index.html) \\\n&emsp;&emsp;R: [Open source book \"R for Data Science\"](https://r4ds.had.co.nz/index.html), [Open source book \"Advanced R\"](https://adv-r.hadley.nz/) \\\n&emsp;&emsp;Julia: [Documentation](https://docs.julialang.org/en/v1/) \\\n&emsp;&emsp;Bash: [Manual](https://www.gnu.org/software/bash/manual/html_node/index.html) \\\n&emsp;&emsp;Git: [Manual](https://git-scm.com/docs), [Open source book](https://git-scm.com/book/en/v2)\n\n:::\n\n## Finding documentation locally\n\n\n## Understanding the documentation\n\n\n## Up-to-date versions\n<br>\n\n. . .\n\n**First, you need to know what needs to be updated.**\n\n. . .\n\nKeeping a system up to date includes updating:\n\n- the OS\n- the program\n- (any potential IDE)\n- packages\n\n. . .\n\n**Then, you need to update regularly.**\n\n## Google\n<br>\n\nGoogle's algorithms are great at guessing what we are looking for.\n\n. . .\n\n*But* there is a frequency problem:\n\nSearches relating to programming-specific questions represent too small &emsp;&emsp;&emsp;a fraction of the overall searches for results to be relevant unless you use **key vocabulary**.\n\n. . .\n\nBe precise.\n\n. . .\n\nLearn the vocabulary of your language/tool to know what to search for.\n\n## Open issues & bug reports\n<br>\n\nIf the tool you are using is open source, look for issues matching your problem in the source repository (e.g. on GitHub or GitLab).\n\n## What if the answer isn't out there?\n<br>\n\nWhen everything has failed & you have to ask for help, you need to know:\n\n. . .\n\n## [Where]{.emph} to ask\n\n. . .\n\n## [How]{.emph} to ask\n\n## [Where]{.emph} to ask\n\n. . .\n\n## Q&A sites\n\nMostly, **[Stack Overflow](https://en.wikipedia.org/wiki/Stack_Overflow)** & **[the Stack Exchange network](https://en.wikipedia.org/wiki/Stack_Exchange)**.\n\nCo-founded in 2008 & 2009 by [Jeff Atwood](https://en.wikipedia.org/wiki/Jeff_Atwood) & [Joel Spolsky](https://en.wikipedia.org/wiki/Joel_Spolsky).\n\n. . .\n\n## Forums\n\nMostly, **[Discourse](https://en.wikipedia.org/wiki/Discourse_(software))**.\n\nCo-founded in 2013 by [Jeff Atwood](https://en.wikipedia.org/wiki/Jeff_Atwood), Robin Ward & Sam Saffron.\n\nA few other older forums.\n\n## [Where]{.emph} to ask\n\n**Which one to choose is a matter of personal preference.**\n\nPossible considerations:\n\n- Some niche topics have very active communities on Discourse\n- Stack Overflow & some older forums can be intimidating with higher expectations for the questions quality & a more direct handling of mistakes\n- For conversations, advice, or multiple step questions, go to Discourse\n- Stack Overflow has over 13 million users\n- Stack Overflow & co have a very efficient approach\n\n## Stack Overflow & co\n\nPick the best site to ask your question. \\\nA few of the Stack Exchange network sites:\n\n[Stack Overflow](https://stackoverflow.com/): programming \\\n[Super User](https://superuser.com): computer hardware & software \\\n[Unix & Linux](https://unix.stackexchange.com/): *nix OS\n[TEX](https://tex.stackexchange.com/): TeX/LaTeX \\\n[Cross Validated](https://stats.stackexchange.com/): stats; data mining, collecting, analysis & visualization; ML \\\n[Data Science](https://datascience.stackexchange.com/): focus on implementation & processes \\\n[Open Data](https://opendata.stackexchange.com/) \\\n[GIS](https://gis.stackexchange.com/)\n\n## [How]{.emph} to ask\n\n. . .\n\n**Familiarize yourself with the site by reading posts**\n\n. . .\n\nRead the \"Tour\" page (SO/SE) or take the \"New user tutorial\" (Discourse)\n\n. . .\n\nMake sure the question has not already been asked\n\n. . .\n\n**Format the question properly**\n\n. . .\n\n**Give a minimum reproducible example**\n\n. . .\n\n**Do not share sensitive data**\n\n. . .\n\n**Show your attempts**\n\n. . .\n\nAvoid cross-posting. If you really have to, make sure to cross-reference\n\n## [How]{.emph} to ask: [SO & co]{.emph}\n\n. . .\n\n**Don't ask opinion-based questions**\n\n. . .\n\n**Don't ask for package, tool, or service recommendations**\n\n. . .\n\n**Don't ask more than one question in a single post**\n\n. . .\n\nCheck your spelling, grammar, punctuation, capitalized sentences, etc.\n\n. . .\n\nAvoid greetings, signatures, thank-yous; keep it to the point\n\n. . .\n\nAvoid apologies about being a beginner, this being your first post, the question being stupid, etc: do the best you can & skip the personal, self-judgmental & irrelevant bits\n\n## Formatting your question\n\nNowadays, most sites (including Stack Overflow & Discourse) allow [markdown](https://en.wikipedia.org/wiki/Markdown) rendering.\n\nSome older forums implement other markup languages (e.g. [BBCode](https://en.wikipedia.org/wiki/BBCode)).\n\nThe information is always easy to find. **Spend the time to format your question properly.** People will be much less inclined to help you if you don't show any effort & if your question is a nightmare to read.\n\n## Example of a typical downvoted question\n\n```\nhowdy!!\ni am new to R sorry for a very silly question.i looked all oever the itnernwet, but i dint find\nanyanswer. i tried to use ggplot i get the error: Error in loadNamespace(i, c(lib.loc, .libPaths()),\nversionCheck = vI[[i]]) : there is no package called 'stringi'\nthank youu very much!!!!!\nmarie\n```\n\n<div style=\"font-size: 20px; margin: 25px 0 12px 1px; text-align: left; color: #802b00\">[Out]</div>\n\n![](img/so_question_pre.png)\n\n## Same question, fixed\n\n````\nWhen I try to load the package `ggplot2` with:\n\n```{{r}}\nlibrary(ggplot2)\n```\nI get the error:\n\n> Error in loadNamespace(i, c(lib.loc, .libPaths()), versionCheck = vI[[i]]) :\nthere is no package called 'stringi'\n\nWhat am I doing wrong?\n````\n\n![](img/so_question_post.png)\n\n## Still not good enough\n<br>\n\nThis question is actually a duplicate of [a question asked](https://stackoverflow.com/q/30983013/9210961) which is itself a duplicate of [another question](https://stackoverflow.com/q/31038636/9210961).\n\n## Creating a minimal reproducible example\n<br>\n\nThere are great posts on how to create a good minimal reproducible example. In particular:\n\n&emsp;[How to create a Minimal, Reproducible Example](https://stackoverflow.com/help/minimal-reproducible-example)\n<br><br>\nFor R (but concepts apply to any language):\n\n&emsp;[How to make a great R reproducible example](https://stackoverflow.com/q/5963269/9210961) \\\n&emsp;[What's a reproducible example (`reprex`) and how do I do one?](https://community.rstudio.com/t/faq-whats-a-reproducible-example-reprex-and-how-do-i-do-one/5219?u=prosoitos)\n\n## Creating a minimal reproducible example\n<br>\n\n- Load all necessary packages\n- Load or create necessary data\n- Simplify the data & the code as much as possible while still reproducing the problem\n- Use simple variable names\n\n## Data for your reproducible example: your own data\n<br>\n\nDo not upload data somewhere on the web to be downloaded.\n\nMake sure that the data is anonymised.\n\nDon't keep more variables & more data points than are necessary to reproduce the problem.\n\nSimplify the variable names.\n\nIn R, you can use functions such as `dput()` to turn your reduced, anonymised data into text that is easy to copy/paste & can then be used to recreate the data.\n\n## Data for your reproducible example: create a toy dataset\n<br>\n\nYou can also create a toy dataset.\n\nFunctions that create random data, series, or repetitions are very useful here.\n\n## Data for your reproducible example: pre-packaged datasets\n<br>\n\nSome languages/packages come with pre-packaged datasets. If your code involves such languages/packages, you can make use of these datasets to create your reproducible example.\n\nFor example, R comes with many datasets directly available, including `iris`, `mtcars`, `trees`, `airquality`. In the R console, try:\n<br>\n\n```{.r}\n?iris\n?mtcars\n```\n\n## Additional considerations\n<br>\n\nEven if you always find answers to your questions without having to post yourself, **consider signing up** to these sites:\n\n- It allows you to upvote (SO/SE) or like (Discourse) the questions & answers that help you—and why not thank in this fashion those that are making your life easier?\n\n- It makes you a part of these communities.\n\n- Once you are signed up, maybe you will start being more involved & contribute with questions & answers of your own.\n\n## A last word\n<br>\n\nWhile it takes some work to ask a good question, do not let this discourage you from posting on Stack Overflow: if you ask a good question, you will get many great answers.\n\nYou will learn in the process of developing your question (you may actually find the answer in that process) & you will learn from the answers.\n\nIt is forth the effort.\n\n[Here](https://stackoverflow.com/help/how-to-ask) is the Stack Overflow documentation on how to ask a good question.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}