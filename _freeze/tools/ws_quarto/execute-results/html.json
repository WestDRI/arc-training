{
  "hash": "41b91f576464887d7aeb9534413e2ae2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Authoring scientific documents with Markdown and Quarto\naliases:\n  - quarto.html\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nThis workshop will show you how to easily create beautiful scientific documents (html, pdf, websites, books…)—complete with formatted text, dynamic code, and figures with [Quarto](https://quarto.org/), an open-source tool combining the powers of Jupyter or knitr with Pandoc to turn your text and code blocks into fully dynamic and formatted documents.\n\n:::\n\n## Markup and Markdown\n\n### Markup languages\n\nMarkup languages control the formatting of text documents. They are powerful but complex and the raw text (before it is rendered into its formatted version) is visually cluttered and hard to read.\n\nExamples of markup languages include LaTeX and HTML.\n\n- Tex (often with the macro package LaTeX) is used to create pdf.\n\n:::{.note}\n\nExample LaTeX:\n\n:::\n\n```{.latex}\n\\documentclass{article}\n\\title{My title}\n\\author{My name}\n\\usepackage{datetime}\n\\newdate{date}{24}{11}{2022}\n\\date{\\displaydate{date}}\n\\begin{document}\n \\maketitle\n \\section{First section}\n Some text in the first section.\n\\end{document}\n```\n- HTML (often with css or scss files to customize the format) is used to create webpages.\n\n:::{.note}\n\nExample HTML:\n\n:::\n\n```{.html}\n<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>My title</title>\n\t<address class=\"author\">My name</address>\n\t<input type=\"date\" value=\"2022-11-24\" />\n  </head>\n  <h1>First section</h1>\n  <body>\n\tSome text in the first section.\n  </body>\n</html>\n```\n\n### Markdown\n\nA number of minimalist markup languages intend to remove all the visual clutter and complexity to create raw texts that are readable prior to rendering. [Markdown](https://en.wikipedia.org/wiki/Markdown) (note the pun with \"markup\"), created in 2004, is the most popular of them. Due to its simplicity, it has become quasi-ubiquitous. Many implementations exist which add a varying number of features (as you can imagine, a very simple markup language is also fairly limited).\n\nMarkdown files are simply text files and they use the `.md` extension.\n\n### Basic Markdown syntax\n\nIn its [basic form](https://daringfireball.net/projects/markdown/), Markdown is mostly used to create webpages. Conveniently, raw HTML can be included whenever the limited markdown syntax isn't sufficient.\n\n[Here](https://www.markdownguide.org/basic-syntax/) is an overview of the Markdown syntax supported by many applications.\n\n### Pandoc and its extended Markdown syntax\n\nWhile the basic syntax is good enough for HTML outputs, it is very limited for other formats.\n\n[Pandoc](https://pandoc.org/) is a free and open-source markup format converter. Pandoc supports [an extended Markdown syntax](https://quarto.org/docs/authoring/markdown-basics.html) with functionality for figures, tables, callout blocks, LaTeX mathematical equations, citations, and YAML metadata blocks. In short, everything needed for the creation of scientific documents.\n\nSuch documents remain as readable as basic Markdown documents (thus respecting the Markdown philosophy), but they can now be rendered in sophisticated pdf, books, entire websites, Word documents, etc.\n\nAnd of course, as such documents remain text files, you can put them under version control with [Git](https://git-scm.com/).\n\n:::{.note}\n\nPrevious example using Pandoc's Markdown:\n\n:::\n\n```{.markdown}\n---\ntitle: My title\nauthor: My name\ndate: 2022-11-24\n---\n# First section\nSome text in the first section.\n```\n\n## Literate programming\n\n[Literate programming](https://en.wikipedia.org/wiki/Literate_programming) is a methodology that combines snippets of code and written text. While first introduced in 1984, this approach to the creation of documents has truly exploded in popularity in recent years thanks to the development of new tools such as [R Markdown](https://r4ds.had.co.nz/r-markdown.html) and, later, [Jupyter notebooks](https://jupyter.org/).\n\n## Quarto\n\n### How it works\n\nQuarto files are transformed into Pandoc's extended Markdown by Jupyter (when used with Python or Julia) or by knitr (when used with R), then pandoc turns the Markdown document into the output of your choice.\n\n:::{.note}\n\nJulia and Python make use of the Jupyter engine:\n\n:::\n\n![](img/qmd_jupyter.png){fig-alt=\"noshadow\"}\n[From [Quarto documentation](https://quarto.org/)]{.caption}\n\n:::{.note}\n\nR uses the knitr engine:\n\n:::\n\n![](img/qmd_knitr.png){fig-alt=\"noshadow\"}\n[From [Quarto documentation](https://quarto.org/)]{.caption}\n\nQuarto files use the extension `.qmd`.\n\nWhen using R, you can use Quarto directly from RStudio: if you are used to R Markdown, Quarto is the new and better R Markdown.\n\nWhen using Python or Julia, you can use Quarto directly from a Jupyter notebook (with `.ipynb` extension).\n\n:::{.note}\n\nUsing Quarto directly from a Jupyter notebook:\n\n:::\n\n![](img/ipynb.png){fig-alt=\"noshadow\"}\n[From [Quarto documentation](https://quarto.org/)]{.caption}\n\nIn this workshop, we will see the most general workflow: simply using a text editor.\n\n:::{.callout-note collapse=\"true\"}\n\n### Supported languages\n\nQuarto renders highlighting in countless languages and generates dynamic output for code blocks in:\n\n- Python\n- R\n- Julia\n- Observable JS\n\nYou can render documents in a wide variety of formats:\n\n- HTML\n- PDF\n- MS Word\n- OpenOffice\n- ePub\n- Revealjs\n- PowerPoint\n- Beamer\n- GitHub Markdown\n- CommonMark\n- Hugo\n- Docusaurus\n- Markua\n- MediaWiki\n- DokuWiki\n- ZimWiki\n- Jira Wiki\n- XWiki\n- JATS\n- Jupyter\n- ConTeXt\n- RTF\n- reST\n- AsciiDoc\n- Org-Mode\n- Muse\n- GNU\n- Groff\n\nThis training website is actually built with Quarto!\n\n:::\n\n### Installation\n\n1. Download Quarto [here](https://quarto.org/docs/get-started/).\n\n2. Download the language(s) (R, Python, or Julia) you will want to use with Quarto as well as their corresponding engine (knitr for R; Jupyter for Python and Julia):\n\n[If you want to use Quarto with R, you will need:]{.underline}\n\n- R (download [here](https://cran.r-project.org/) if you don't have R already on your system),\n- the `rmarkdown` package. For this, launch R and run:\n\n```{.r}\ninstall.packages(\"rmarkdown\")\n```\n\n[If you want to use it with Python, you will need:]{.underline}\n\n- Python 3 (download [here](https://www.python.org/downloads/) if don't have it on your system),\n- JupyterLab. For this, open a terminal and run:\n\n```{.bash}\npython3 -m pip install jupyter  # if you are on macOS or Linux\npython -m pip install jupyter   # if you are on Windows\n```\n\n[Finally, if you want to use Quarto with Julia, you will need:]{.underline}\n\n- Julia (download [here](https://julialang.org/downloads/) if you don't have Julia),\n- the [IJulia](https://github.com/JuliaLang/IJulia.jl) and [Revise](https://github.com/timholy/Revise.jl) packages. For this, launch Julia and run:\n\n```{.julia}\n] add IJulia Revise\n# <Backspace>\nusing IJulia\nnotebook()      # to install a minimal Python+Jupyter distribution\n```\n\nRunning `notebook()` allows you to install Jupyter if you don't already have it.\n\n### Document structure and syntax\n\n#### Front matter\n\nWritten in YAML. Sets the options for the document. Let's see a few examples.\n\n:::{.note}\n\nHTML output:\n\n:::\n\n```{.yaml}\n---\ntitle: \"My title\"\nauthor: \"My name\"\nformat: html\n---\n```\n\n:::{.note}\n\nHTML output with a few options:\n\n:::\n\n```{.yaml}\n---\ntitle: \"My title\"\nauthor: \"My name\"\nformat:\n  html:\n    toc: true\n    css: <my_file>.css\n---\n```\n\n:::{.note}\n\nMS Word output with Python code blocks:\n\n:::\n\n```{.yaml}\n---\ntitle: \"My title\"\nauthor: \"My name\"\nformat: docx\njupyter: python3\n---\n```\n\n:::{.note}\n\nrevealjs output with some options and Julia code blocks:\n\n:::\n\n```{.yaml}\n---\ntitle: \"Some title\"\nsubtitle: \"Some subtitle\"\ninstitute: \"Simon Fraser University\"\ndate: \"2022-11-24\"\nexecute:\n  error: true\n  echo: true\nformat:\n  revealjs:\n    theme: [default, custom.scss]\n    highlight-style: monokai\n    code-line-numbers: false\n    embed-resources: true\njupyter: julia-1.8\n---\n```\n\nSee [the Quarto documentation](https://quarto.org/docs/guide/) for an exhaustive list of options for all formats.\n\n#### Written sections\n\nWritten sections are written in [Pandoc's extended Markdown](https://quarto.org/docs/authoring/markdown-basics.html).\n\n#### Code blocks\n\nIf all you want is **syntax highlighting** of the code blocks, use this syntax:\n\n````\n```{.language}\n<some code>\n```\n````\n\nIf you want **syntax highlighting** of the blocks and **for the code to run**, use instead:\n\n````\n```{language}\n<some code>\n```\n````\n\nIn addition, options can be added to individual code blocks:\n\n````\n```{language}\n#| <some option name>: <some option value>\n\n<some code>\n```\n````\n\n### Rendering\n\nUsing Quarto is very simple: there are only two commands you need to know.\n\nIn a terminal, simply run either of:\n\n```{.bash}\nquarto render <file>.qmd     # Render the document\nquarto preview <file>.qmd\t # Display a live preview\n```\n\n## Let's create a webpage together\n\nFirst, create a file called `test.qmd` with the text editor of your choice.\n\n:::{.note}\n\nExample:\n\n:::\n\n```{.bash}\nnano test.qmd\n```\n\nAdd a minimal front matter with the title of your document and the output format (`html` here since we are creating a webpage):\n\n```{.yaml}\n---\ntitle: Test webpage\nformat: html\n---\n```\n\nThen open a new terminal, `cd` to the location of the file, and run the command:\n\n```{.bash}\nquarto preview test.qmd\n```\n\nThis will open the rendered document in your browser.\n\nWe will play with this `test.qmd` file and see how it is rendered by Quarto as we go.\n\n## Examples\n\nBelow are a few basic example files and their outputs.\n\n### Revealjs presentation\n\n:::{.callout-note collapse=\"true\"}\n\n## Code\n\n```{.markdown}\n---\ntitle: \"My title\"\nauthor: \"My name\"\ninstitute: \"Simon Fraser University\"\nformat:\n  revealjs:\n    highlight-style: monokai\n    code-line-numbers: false\n    embed-resources: true\n---\n\n## First section\n\nWhen exporting to revealjs, second level sections mark the start of new slides,\nwith a slide title.\n\nThis can be changed in options.\n\n---\n\nNew slides can be started without titles this way.\n\n# There are title slides\n\n## Formatting\n\nText can be rendered *in italic* or **in bold** as well as [underlined]{.underline}.\n\nYou can use superscripts^2^, subscripts~test~, ~~strikethrough~~, and `inline code`.\n\n> This is a quote.\n\n## Columns\n\n:::: {.columns}\n\n::: {.column width=\"30%\"}\n\nYou can create columns.\n\n:::\n\n::: {.column width=\"70%\"}\n\nAnd you can set their respective width.\n\n:::\n\n::::\n\n## Lists\n\n::: {.incremental}\n\n- List can happen one line at a time\n- like\n- this\n\n:::\n\n## Lists\n\n- Or all at the same time\n- like\n- that\n\n## Ordered lists\n\n1. Item 1\n2. Item 2\n3. Item 3\n\n## Images\n\n![Example image](qmd_jupyter.png)\n\n## Tables\n\n| Col 1 | Col 2 | Col 3  |\n|-------|-------|--------|\n| a     | 1     | red    |\n| b     | 2     | orange | \n| c     | 3     | yellow |\n\n:::{.callout-note}\n\nTables can be fully customized (or you could use raw html).\n\n:::\n\n## Equations\n\n$$\n\\frac{\\partial \\mathrm C}{ \\partial \\mathrm t } + \\frac{1}{2}\\sigma^{2} \\mathrm S^{2}\n\\frac{\\partial^{2} \\mathrm C}{\\partial \\mathrm C^2}\n  + \\mathrm r \\mathrm S \\frac{\\partial \\mathrm C}{\\partial \\mathrm S}\\ =\n  \\mathrm r \\mathrm C \n$$\n```\n\n:::\n\nRendered document (click on it to open it in a new tab):\n\n[![](img/revealjs.png)](quarto/revealjs.html){target=\"_blank\"}\n\n### pdf\n\n:::{.callout-note collapse=\"true\"}\n\n## Code\n\n```{.markdown}\n---\ntitle: \"My title\"\nauthor: \"My name\"\nformat:\n  pdf:\n    toc: true\n---\n\n## Heading\n\nSome text.\n\n### Subheading\n\nMore text.\n\n## Formatting\n\nText can be rendered *in italic* or **in bold** as well as [underlined]{.underline}.\n\nYou can use superscripts^2^, subscripts~test~, ~~strikethrough~~, and `inline code`.\n\n> This is a quote.\n\n## Lists\n\n### Unordered\n\n- Item 1\n- Item 2\n- Item 3\n\n### Ordered\n\n1. Item 1\n2. Item 2\n3. Item 3\n\n## Images\n\n![Example image](qmd_jupyter.png)\n\n## Tables\n\n| Col 1 | Col 2 | Col 3  |\n|-------|-------|--------|\n| a     | 1     | red    |\n| b     | 2     | orange | \n| c     | 3     | yellow |\n\n:::{.callout-note}\n\nTables can be fully customized (or you could use raw html).\n\n:::\n\n## Equations\n\n$$\n\\frac{\\partial \\mathrm C}{ \\partial \\mathrm t } + \\frac{1}{2}\\sigma^{2} \\mathrm S^{2}\n\\frac{\\partial^{2} \\mathrm C}{\\partial \\mathrm C^2}\n  + \\mathrm r \\mathrm S \\frac{\\partial \\mathrm C}{\\partial \\mathrm S}\\ =\n  \\mathrm r \\mathrm C \n$$\n```\n\n:::\n\nRendered document (click on it to open it in a new tab):\n\n[![](img/pdf.png)](quarto/pdf.pdf)\n\n:::{.note}\n\nIn order to export to pdf, you need a TeX distribution. You probably already have one installed on your machine, so you should first try to render or preview a document to pdf to see whether it works. If it doesn't work, you can install the minimalist distribution TinyTex by running in your terminal:\n\n:::\n\n```{.bash}\nquarto install tool tinytex\n```\n\n### HTML with R code blocks\n\n:::{.callout-note collapse=\"true\"}\n\n## Code\n\n````\n---\ntitle: \"My title\"\nauthor: \"My name\"\ninstitute: \"Simon Fraser University\"\nformat: html\n---\n\n## Heading\n\n### Subheading\n\nSome text.\n\n## Formatting  {#sec-formatting}\n\n::: aside\n\nNote that each heading automatically creates an anchor, making it easy to link to specific sections of your documents.\n\n:::\n\nText can be rendered *in italic* or **in bold** as well as [underlined]{.underline}.\n\nYou can use superscripts^2^, subscripts~test~, ~~strikethrough~~, and `inline code`.\n\n> This is a quote.\n\n## Columns\n\n:::: {.columns}\n\n::: {.column width=\"30%\"}\n\nYou can create columns.\n\n:::\n\n::: {.column width=\"70%\"}\n\nAnd you can set their respective width.\n\n:::\n\n::::\n\n## Lists\n\n- Item 1\n- Item 2\n- Item 3\n\n## Ordered lists\n\n1. Item 1\n2. Item 2\n3. Item 3\n\n## Images\n\n![Example image](qmd_jupyter.png)\n\n## Tables\n\n| Col 1 | Col 2 | Col 3  |\n|-------|-------|--------|\n| a     | 1     | red    |\n| b     | 2     | orange | \n| c     | 3     | yellow |\n\n:::{.callout-note}\n\nTables can be fully customized (or you could use raw html).\n\n:::\n\n## Equations\n\n$$\n\\frac{\\partial \\mathrm C}{ \\partial \\mathrm t } + \\frac{1}{2}\\sigma^{2} \\mathrm S^{2}\n\\frac{\\partial^{2} \\mathrm C}{\\partial \\mathrm C^2}\n  + \\mathrm r \\mathrm S \\frac{\\partial \\mathrm C}{\\partial \\mathrm S}\\ =\n  \\mathrm r \\mathrm C \n$$\n\n## Cross-references\n\nSee @sec-formatting.\n\n*Note that you can add bibliographies, flow charts, the equivalent of HTML \"div\",\nand just so much more. Remember that this is a tiny overview.*\n\n## Let's try some code blocks now\n\n```{{r}}\n# This is a block that runs\n2 + 3\n```\n\n::: aside\n\nDid you notice that the content of your code blocks can be copied with a click?\nOf course, this is customizable.\n\n:::\n\n```{{.r}}\n# This is a block that doesn't run\n2 + 3\n```\n\n```{{r}}\n#| echo: false\n# And this is a block showing only the output\ndata.frame(\n  country = c(\"Canada\", \"USA\", \"Mexico\"),\n  var = c(2.9, 3.1, 4.5)\n)\n```\n\n## Plots\n\n```{{r}}\nplot(cars)\n```\n\n<br>\nYou can play with options to add a title:\n\n```{{r}}\n#| fig-cap: \"Stopping distance as a function of speed in cars\"\n\nplot(cars)\n```\n\n<br>\nYou can have more complex multi-plot layouts:\n\n```{{r}}\n#| layout-ncol: 2\n#| fig-cap: \n#|   - \"Stopping distance as a function of speed in cars\"\n#|   - \"Vapor pressure of mercury as a function of temperature\"\n\nplot(cars)\nplot(pressure)\n```\n\nFor those who have `ggplot2`[^1], you can try that too:\n\n```{{r}}\nlibrary(ggplot2)\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(mapping = aes(color = class)) + \n  geom_smooth()\n```\n\n[^1]: You can install it with:\n    ```{{.r}}\n    install.packages(\"ggplot2\")\n\t```\n````\n\n:::\n\nRendered document (click on it to open it in a new tab):\n\n[![](img/html.png)](quarto/html.html){target=\"_blank\"}\n\n### Beamer with Python code blocks\n\nBeamer is LaTeX presentation framework: a way to create beautiful pdf slides.\n\n:::{.callout-note collapse=\"true\"}\n\n## Code\n\n````\n---\ntitle: \"Some title\"\nauthor: \"Some name\"\nformat: beamer\njupyter: python3\n---\n\n## First slide\n\nWith some content\n\n## Formatting\n\nText can be rendered *in italic* or **in bold** as well as [underlined]{.underline}.\n\nYou can use superscripts^2^, subscripts~test~, ~~strikethrough~~, and `inline code`.\n\n## Lists\n\n- Item 1\n- Item 2\n- Item 3\n\n## Ordered lists\n\n1. Item 1\n2. Item 2\n3. Item 3\n\n## Images\n\n![Example image](qmd_jupyter.png)\n\n## Tables\n\n| Col 1 | Col 2 | Col 3  |\n|-------|-------|--------|\n| a     | 1     | red    |\n| b     | 2     | orange | \n| c     | 3     | yellow |\n\n:::{.callout-note}\n\nTables can be fully customized (or you could use raw html).\n\n:::\n\n## Equations\n\n$$\n\\frac{\\partial \\mathrm C}{ \\partial \\mathrm t } + \\frac{1}{2}\\sigma^{2} \\mathrm S^{2}\n\\frac{\\partial^{2} \\mathrm C}{\\partial \\mathrm C^2}\n  + \\mathrm r \\mathrm S \\frac{\\partial \\mathrm C}{\\partial \\mathrm S}\\ =\n  \\mathrm r \\mathrm C \n$$\n\n## Some basic code block\n\n```{{python}}\n#| echo: true\n\n2 + 3\n```\n\n## Some plot\n\n```{{python}}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nt = np.arange(0.0, 2.0, 0.01)\ns = 1 + np.sin(2 * np.pi * t)\n\nfig, ax = plt.subplots()\nax.plot(t, s)\n\nax.set(xlabel='time (s)', ylabel='voltage (mV)',\n       title='Here goes the title')\nax.grid()\n\nfig.savefig(\"test.png\")\nplt.show()\n```\n````\n\n:::\n\nRendered document (click on it to open it in a new tab):\n\n[![](img/beamer.png)](quarto/beamer.pdf)\n\n## Recording\n\n{{< video https://www.youtube.com/embed/_bDaDk36kiY >}}\n\n",
    "supporting": [
      "ws_quarto_files"
    ],
    "filters": [],
    "includes": {}
  }
}