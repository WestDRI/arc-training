{
  "hash": "90f6aafb5b20c13bae9751cc63f85c23",
  "result": {
    "markdown": "---\ntitle: Collections\nauthor: Marie-Hélène Burle\n---\n\n## Lists\n\nLists are declared in square brackets. They are mutable and ordered (thus indexable) collections of values.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nT = [27.3, 27.5, 27.7, 27.5, 27.6]\nprint('temperature:', T)\nprint('length:', len(T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntemperature: [27.3, 27.5, 27.7, 27.5, 27.6]\nlength: 5\n```\n:::\n:::\n\n\nPython starts indexing at `0`:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nprint('zeroth item of T is', T[0])\nprint('fourth item of T is', T[4])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nzeroth item of T is 27.3\nfourth item of T is 27.6\n```\n:::\n:::\n\n\nLists are mutable (they can be modified):\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nT[0] = 21.3\nprint('temperature is now:', T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntemperature is now: [21.3, 27.5, 27.7, 27.5, 27.6]\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\na = [2, 3, 5]\nprint('a is initially', a)\na.append(7)\na.append(11)\nprint('a has become', a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na is initially [2, 3, 5]\na has become [2, 3, 5, 7, 11]\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nprint('a before', a)\ndel a[4]                 # Remove 4th element\nprint('a after', a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na before [2, 3, 5, 7, 11]\na after [2, 3, 5, 7]\n```\n:::\n:::\n\n\nYou can initialize an empty list and fill it in:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\na = []                   # Start with an empty list\na.append('Vancouver')\na.append('Toronto')\na.append('Kelowna')\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Vancouver', 'Toronto', 'Kelowna']\n```\n:::\n:::\n\n\nLists can be heterogeneous and nested:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\na = [11, 21, 31]\nb = ['Mercury', 'Venus', 'Earth']\nc = 'hello'\nnestedList = [a, b, c]\nprint(nestedList)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[11, 21, 31], ['Mercury', 'Venus', 'Earth'], 'hello']\n```\n:::\n:::\n\n\nYou can search inside a list:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nprint('Venus' in b)\nprint('Mars' in b)\nb.index('Venus')      # Returns the index\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nFalse\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n1\n```\n:::\n:::\n\n\nAnd you sort lists alphabetically:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nb.sort()\nprint(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Earth', 'Mercury', 'Venus']\n```\n:::\n:::\n\n\nTo delete an item from a list:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nb.pop(2)              # Using its index\nprint(b)\n\nb.remove('Earth')     # Using its value\nprint(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Earth', 'Mercury']\n['Mercury']\n```\n:::\n:::\n\n\n## Strings\n\nStrings are lists of characters\n\nUse square brackets to get a substring:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nelement = 'helium'\nprint(element[0])\nprint(element[0:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nh\nhel\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nname = 'Paul'\nprint(name+' Smith')   # You can add strings\nprint(name*10)         # You can replicate strings by mutliplying by a number\nprint(len(name))       # Strings have lengths\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPaul Smith\nPaulPaulPaulPaulPaulPaulPaulPaulPaulPaul\n4\n```\n:::\n:::\n\n\n## Arrays\n\nPython comes with a built-in [array](https://docs.python.org/3/library/array.html) module. When you need arrays for storing and retrieving data, this module is perfectly suitable and extremely light-weight. [This tutorial](https://www.softwaretestinghelp.com/how-to-use-python-array/) covers the syntax in detail.\n\nWhenever you plan on performing calculations on your data however (which is the vast majority of cases), you should instead use the [NumPy](https://numpy.org/) package that Alex will cover this afternoon.\n\n## Tuples\n\nTuples are declared in parentheses. They are immutable and ordered (thus indexable) collections of values.\n\n## Sets\n\nSets are declared in square brackets.\n\n## Dictionaries\n\nDictionaries are declared in curly braces. They are mutable and unordered sets of key/value pairs.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nfavs = {'mary': 'orange', 'john': 'green', 'eric': 'blue'}\nprint(favs)\nprint(favs['john'])\nprint(favs['mary'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'mary': 'orange', 'john': 'green', 'eric': 'blue'}\ngreen\norange\n```\n:::\n:::\n\n\nNow let's see how to add items to a dictionary:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nconcepts = {}\nconcepts['list'] = 'An ordered collection of values'\nconcepts['dictionary'] = 'A collection of key-value pairs'\nprint(concepts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'list': 'An ordered collection of values', 'dictionary': 'A collection of key-value pairs'}\n```\n:::\n:::\n\n\nWe can modify the values:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nconcepts['list'] = 'Simple: ' + concepts['list']\nconcepts['dictionary'] = 'Complex: ' + concepts['dictionary']\nprint(concepts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'list': 'Simple: An ordered collection of values', 'dictionary': 'Complex: A collection of key-value pairs'}\n```\n:::\n:::\n\n\nDeleting dictionary pairs:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndel concepts['list']      # Removes the key 'list' and its value\nprint(concepts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'dictionary': 'Complex: A collection of key-value pairs'}\n```\n:::\n:::\n\n\nValues can be numerical:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ngrades = {}\ngrades['mary'] = 5\ngrades['john'] = 4.5\nprint(grades)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'mary': 5, 'john': 4.5}\n```\n:::\n:::\n\n\nThe keys can also be numerical:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ngrades[1] = 2\nprint(grades)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'mary': 5, 'john': 4.5, 1: 2}\n```\n:::\n:::\n\n\n## Collections module\n\nPython has a built-in [collections](https://docs.python.org/3/library/collections.html) module providing the additional data structures: [deque](https://docs.python.org/3/library/collections.html#collections.deque), [defaultdict](https://docs.python.org/3/library/collections.html#collections.defaultdict), [namedtuple](https://docs.python.org/3/library/collections.html#collections.namedtuple), [OrderedDict](https://docs.python.org/3/library/collections.html#collections.OrderedDict), [Counter](https://docs.python.org/3/library/collections.html#collections.Counter), [ChainMap](https://docs.python.org/3/library/collections.html#collections.ChainMap), [UserDict](https://docs.python.org/3/library/collections.html#collections.UserDict), [UserList](https://docs.python.org/3/library/collections.html#collections.UserList), and [UserList](https://docs.python.org/3/library/collections.html#collections.UserString), but we will not cover these in this workshop.\n\n",
    "supporting": [
      "collections_files"
    ],
    "filters": [],
    "includes": {}
  }
}