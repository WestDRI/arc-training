{
  "hash": "30a930b57b7096d3016d0ac16320a918",
  "result": {
    "markdown": "---\ntitle: Collections\nauthor: Marie-Hélène Burle\n---\n\n## Lists\n\nLists are declared in square brackets.\n\n[They are mutable, ordered (thus indexable), and possibly heterogeneous collections of values.]{.emph}\n\nWhat does this all mean? Let's go over all these points and more.\n\nLists can be homogeneous:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ntype(['b', 'a', 'x', 'e'])\n```\n\n::: {.cell-output .cell-output-display execution_count=683}\n```\nlist\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ntype('b') == type('a') == type('x') == type('e')\n```\n\n::: {.cell-output .cell-output-display execution_count=684}\n```\nTrue\n```\n:::\n:::\n\n\nor heterogeneous:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntype([3, 'some string', 2.9, 'z'])\n```\n\n::: {.cell-output .cell-output-display execution_count=685}\n```\nlist\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ntype(3) == type('some string') == type(2.9) == type('z')\n```\n\n::: {.cell-output .cell-output-display execution_count=686}\n```\nFalse\n```\n:::\n:::\n\n\nThey can even be nested:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ntype([3, ['b', 'e', 3.9, ['some string', 9.9]], 8])\n```\n\n::: {.cell-output .cell-output-display execution_count=687}\n```\nlist\n```\n:::\n:::\n\n\nThe length of a list is the number of items it contains and can be obtained with the function `len`:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nlen([3, ['b', 'e', 3.9, ['some string', 9.9]], 8])\n```\n\n::: {.cell-output .cell-output-display execution_count=688}\n```\n3\n```\n:::\n:::\n\n\nTo extract an item from a list, you index it:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][0]\n```\n\n::: {.cell-output .cell-output-display execution_count=689}\n```\n3\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][1]\n```\n\n::: {.cell-output .cell-output-display execution_count=690}\n```\n['b', 'e', 3.9, ['some string', 9.9]]\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][2]\n```\n\n::: {.cell-output .cell-output-display execution_count=691}\n```\n8\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Of course you can't extract items that don't exist\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][3]\n```\n\n::: {.cell-output .cell-output-error}\n```\nIndexError: list index out of range\n```\n:::\n:::\n\n\n:::{.note}\n\nPython starts indexing at `0`, so what we tend to think of as the \"first\" element of a list is for Python the \"zeroth\" element.\n\n:::\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nHow could you extract the string `'some string'` from the list `[3, ['b', 'e', 3.9, ['some string', 9.9]], 8]`?\n\n:::\n\nYou can test whether an item is in a list:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n3 in [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n\n::: {.cell-output .cell-output-display execution_count=693}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n9 in [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n\n::: {.cell-output .cell-output-display execution_count=694}\n```\nFalse\n```\n:::\n:::\n\n\nYou can get the index (position) of an item inside a list:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8].index(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=695}\n```\n0\n```\n:::\n:::\n\n\n:::{.note}\n\nNote that this only returns the index of the first occurrence:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n[3, 3, ['b', 'e', 3.9, ['some string', 9.9]], 8].index(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=696}\n```\n0\n```\n:::\n:::\n\n\n:::\n\nLists are mutable (they can be modified):\n\n- You can replace items in a list by other items:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nL = [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=697}\n```\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nL[1] = 2\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=698}\n```\n[3, 2, 8]\n```\n:::\n:::\n\n\n- You can delete items from a list:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# Using their indices with list.pop\nL.pop(2)\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=699}\n```\n[3, 2]\n```\n:::\n:::\n\n\n:::{.note}\n\nHere, because we are using `list.pop`, `2` represents the index (the 3rd item).\n\n:::\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# Using their indexes with del\ndel L[0]\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=700}\n```\n[2]\n```\n:::\n:::\n\n\n:::{.note}\n\nNotice how a list can have a single item:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nlen(L)\n```\n\n::: {.cell-output .cell-output-display execution_count=701}\n```\n1\n```\n:::\n:::\n\n\n:::\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# Using their values\nL.remove(2)\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=702}\n```\n[]\n```\n:::\n:::\n\n\n:::{.note}\n\nHere, because we are using `list.remove`, `2` is the value `2`.\n\n:::\n\n:::{.note}\n\nNotice how a list can even be empty:\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nlen(L)\n```\n\n::: {.cell-output .cell-output-display execution_count=703}\n```\n0\n```\n:::\n:::\n\n\nYou can actually initialise empty lists:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nM = []\ntype(M)\n```\n\n::: {.cell-output .cell-output-display execution_count=704}\n```\nlist\n```\n:::\n:::\n\n\n:::\n\n- You can add items to a list:\n\nOne at a time:\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nL.append(7)\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=705}\n```\n[7]\n```\n:::\n:::\n\n\nAnd if you want to add multiple items at once?\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# This doesn't work...\nL.append(3, 6, 9)\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: list.append() takes exactly one argument (3 given)\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n# This doesn't work either (that's not what we wanted)\nL.append([3, 6, 9])\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=707}\n```\n[7, [3, 6, 9]]\n```\n:::\n:::\n\n\nIn this case, you need to use different method:\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nL.extend([3, 6, 9])\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=708}\n```\n[7, [3, 6, 9], 3, 6, 9]\n```\n:::\n:::\n\n\n- You can sort an homogeneous list:\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n# Items of different types cannot be sorted\nL = [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\nL.sort()\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: '<' not supported between instances of 'list' and 'int'\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nL = [3, 9, 10, 0]\nL.sort()\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=710}\n```\n[0, 3, 9, 10]\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nL = ['some string', 'b', 'a']\nL.sort()\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=711}\n```\n['a', 'b', 'some string']\n```\n:::\n:::\n\n\n## Strings\n\nStrings behave (a little) like lists of characters in that they have a length (the number of characters):\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nS = 'This is a string.'\nlen(S)\n```\n\n::: {.cell-output .cell-output-display execution_count=712}\n```\n17\n```\n:::\n:::\n\n\nand you can index them:\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nS[10:16]\n```\n\n::: {.cell-output .cell-output-display execution_count=713}\n```\n'string'\n```\n:::\n:::\n\n\nThis is where the similarities stop however: methods such as `list.sort`, `list.append`, etc. will not work on strings. You can also do with strings things you can't do with lists:\n\n- Strings can be concatenated with `+`:\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nT = 'This is another string.'\nprint(S + ' ' + T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is a string. This is another string.\n```\n:::\n:::\n\n\n- Strings can be repeated with `*`:\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nprint(S * 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is a string.This is a string.This is a string.\n```\n:::\n:::\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nprint((S + ' ') * 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is a string. This is a string. This is a string. \n```\n:::\n:::\n\n\n## Arrays\n\nPython comes with a built-in [array](https://docs.python.org/3/library/array.html) module. When you need arrays for storing and retrieving data, this module is perfectly suitable and extremely light-weight. [This tutorial](https://www.softwaretestinghelp.com/how-to-use-python-array/) covers the syntax in detail.\n\nWhenever you plan on performing calculations on your data however (which is the vast majority of cases), you should instead use the [NumPy](https://numpy.org/) package that Alex will cover this afternoon.\n\n## Tuples\n\nTuples are declared in parentheses. They are immutable and ordered (thus indexable) collections of values.\n\n## Sets\n\nSets are declared in square brackets.\n\n## Dictionaries\n\n<!-- Dictionaries are declared in curly braces. They are mutable and unordered sets of key/value pairs. -->\n\n<!-- ```{python} -->\n<!-- favs = {'mary': 'orange', 'john': 'green', 'eric': 'blue'} -->\n<!-- print(favs) -->\n<!-- print(favs['john']) -->\n<!-- print(favs['mary']) -->\n<!-- ``` -->\n\n<!-- Now let's see how to add items to a dictionary: -->\n\n<!-- ```{python} -->\n<!-- concepts = {} -->\n<!-- concepts['list'] = 'An ordered collection of values' -->\n<!-- concepts['dictionary'] = 'A collection of key-value pairs' -->\n<!-- print(concepts) -->\n<!-- ``` -->\n\n<!-- We can modify the values: -->\n\n<!-- ```{python} -->\n<!-- concepts['list'] = 'Simple: ' + concepts['list'] -->\n<!-- concepts['dictionary'] = 'Complex: ' + concepts['dictionary'] -->\n<!-- print(concepts) -->\n<!-- ``` -->\n\n<!-- Deleting dictionary pairs: -->\n\n<!-- ```{python} -->\n<!-- del concepts['list']      # Removes the key 'list' and its value -->\n<!-- print(concepts) -->\n<!-- ``` -->\n\n<!-- Values can be numerical: -->\n\n<!-- ```{python} -->\n<!-- grades = {} -->\n<!-- grades['mary'] = 5 -->\n<!-- grades['john'] = 4.5 -->\n<!-- print(grades) -->\n<!-- ``` -->\n\n<!-- The keys can also be numerical: -->\n\n<!-- ```{python} -->\n<!-- grades[1] = 2 -->\n<!-- print(grades) -->\n<!-- ``` -->\n\n## Collections module\n\nPython has a built-in [collections](https://docs.python.org/3/library/collections.html) module providing the additional data structures: [deque](https://docs.python.org/3/library/collections.html#collections.deque), [defaultdict](https://docs.python.org/3/library/collections.html#collections.defaultdict), [namedtuple](https://docs.python.org/3/library/collections.html#collections.namedtuple), [OrderedDict](https://docs.python.org/3/library/collections.html#collections.OrderedDict), [Counter](https://docs.python.org/3/library/collections.html#collections.Counter), [ChainMap](https://docs.python.org/3/library/collections.html#collections.ChainMap), [UserDict](https://docs.python.org/3/library/collections.html#collections.UserDict), [UserList](https://docs.python.org/3/library/collections.html#collections.UserList), and [UserList](https://docs.python.org/3/library/collections.html#collections.UserString), but we will not cover these in this workshop.\n\n",
    "supporting": [
      "collections_files"
    ],
    "filters": [],
    "includes": {}
  }
}