{
  "hash": "472e805cb4f097eb1d2df8474927fa15",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Collections\naliases:\n  - collections.html\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nValues can be stored in collections. This section introduces tuples, dictionaries, sets, and arrays in Python.\n\n:::\n\n## Lists\n\nLists are declared in square brackets:\n\n::: {#528bd5db .cell execution_count=2}\n``` {.python .cell-code}\nl = [2, 1, 3]\n```\n:::\n\n\n::: {#0aca5566 .cell execution_count=3}\n``` {.python .cell-code}\ntype(l)\n```\n\n::: {.cell-output .cell-output-display execution_count=330}\n```\nlist\n```\n:::\n:::\n\n\nThey are ordered:\n\n::: {#e419657f .cell execution_count=4}\n``` {.python .cell-code}\n['b', 'a'] == ['a', 'b']\n```\n\n::: {.cell-output .cell-output-display execution_count=331}\n```\nFalse\n```\n:::\n:::\n\n\nThey can have repeat values:\n\n::: {#6eeae2a5 .cell execution_count=5}\n``` {.python .cell-code}\n['a', 'a', 'a', 't']\n```\n\n::: {.cell-output .cell-output-display execution_count=332}\n```\n['a', 'a', 'a', 't']\n```\n:::\n:::\n\n\nThey can be homogeneous:\n\n::: {#630d8e10 .cell execution_count=6}\n``` {.python .cell-code}\n['b', 'a', 'x', 'e']\n```\n\n::: {.cell-output .cell-output-display execution_count=333}\n```\n['b', 'a', 'x', 'e']\n```\n:::\n:::\n\n\n::: {#114a7b25 .cell execution_count=7}\n``` {.python .cell-code}\ntype('b') == type('a') == type('x') == type('e')\n```\n\n::: {.cell-output .cell-output-display execution_count=334}\n```\nTrue\n```\n:::\n:::\n\n\nor heterogeneous:\n\n::: {#b3118dc1 .cell execution_count=8}\n``` {.python .cell-code}\n[3, 'some string', 2.9, 'z']\n```\n\n::: {.cell-output .cell-output-display execution_count=335}\n```\n[3, 'some string', 2.9, 'z']\n```\n:::\n:::\n\n\n::: {#0479a28c .cell execution_count=9}\n``` {.python .cell-code}\ntype(3) == type('some string') == type(2.9) == type('z')\n```\n\n::: {.cell-output .cell-output-display execution_count=336}\n```\nFalse\n```\n:::\n:::\n\n\nThey can even be nested:\n\n::: {#00e021d9 .cell execution_count=10}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n\n::: {.cell-output .cell-output-display execution_count=337}\n```\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n:::\n:::\n\n\nThe length of a list is the number of items it contains and can be obtained with the function `len`:\n\n::: {#f874f3ab .cell execution_count=11}\n``` {.python .cell-code}\nlen([3, ['b', 'e', 3.9, ['some string', 9.9]], 8])\n```\n\n::: {.cell-output .cell-output-display execution_count=338}\n```\n3\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWhat are the 3 elements of this list? \\\nWhat are their respective types?\n\n:::\n\nTo extract an item from a list, you index it:\n\n::: {#e6bb2de6 .cell execution_count=12}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][0]\n```\n\n::: {.cell-output .cell-output-display execution_count=339}\n```\n3\n```\n:::\n:::\n\n\n:::{.note}\n\nPython starts indexing at `0`, so what we tend to think of as the \"first\" element of a list is for Python the \"zeroth\" element.\n\n:::\n\n::: {#3aa5d86a .cell execution_count=13}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][1]\n```\n\n::: {.cell-output .cell-output-display execution_count=340}\n```\n['b', 'e', 3.9, ['some string', 9.9]]\n```\n:::\n:::\n\n\n::: {#b5bc0bc5 .cell execution_count=14}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][2]\n```\n\n::: {.cell-output .cell-output-display execution_count=341}\n```\n8\n```\n:::\n:::\n\n\nOf course you can't extract items that don't exist:\n\n::: {#d47babb9 .cell execution_count=15}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][3]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">IndexError</span>                                Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[342]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">[</span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">3</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">[</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">b</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">e</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">3.9</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">[</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">some string</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">9.9</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">]</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">]</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">8</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">]</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">[</span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">3</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">]</span>\n\n<span class=\"ansi-bright-red-fg\">IndexError</span>: list index out of range</pre>\n```\n:::\n\n:::\n:::\n\n\nYou can index from the end of the list with negative values (here you start at `-1` for the last element):\n\n::: {#34294135 .cell execution_count=16}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=343}\n```\n8\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nHow could you extract the string `'some string'` from the list:\n\n```{.python}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n\n:::\n\nYou can also slice a list:\n\n::: {#67615400 .cell execution_count=17}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][0:1]\n```\n\n::: {.cell-output .cell-output-display execution_count=344}\n```\n[3]\n```\n:::\n:::\n\n\n:::{.note}\n\nNotice how slicing returns a list. \\\nNotice also how the left index is included but the right index excluded.\n\n:::\n\nIf you omit the first index, the slice starts at the beginning of the list:\n\n::: {#6f77cb2c .cell execution_count=18}\n``` {.python .cell-code}\n[1, 2, 3, 4, 5, 6, 7, 8, 9][:6]\n```\n\n::: {.cell-output .cell-output-display execution_count=345}\n```\n[1, 2, 3, 4, 5, 6]\n```\n:::\n:::\n\n\nIf you omit the second index, the slice goes to the end of the list:\n\n::: {#5e82a349 .cell execution_count=19}\n``` {.python .cell-code}\n[1, 2, 3, 4, 5, 6, 7, 8, 9][6:]\n```\n\n::: {.cell-output .cell-output-display execution_count=346}\n```\n[7, 8, 9]\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nFrom the list:\n\n```{.python}\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\nExtract the list `[4, 5, 6]`.\n\n:::\n\nWhen slicing, you can specify the stride (the step size):\n\n::: {#06216f95 .cell execution_count=20}\n``` {.python .cell-code}\n[1, 2, 3, 4, 5, 6, 7, 8, 9][2:7:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=347}\n```\n[3, 5, 7]\n```\n:::\n:::\n\n\n:::{.notenoit}\n\nThe default stride is `1`:\n\n::: {#be241e9e .cell execution_count=21}\n``` {.python .cell-code}\n[1, 2, 3, 4, 5, 6, 7, 8, 9][2:7] == [1, 2, 3, 4, 5, 6, 7, 8, 9][2:7:1]\n```\n\n::: {.cell-output .cell-output-display execution_count=348}\n```\nTrue\n```\n:::\n:::\n\n\n:::\n\nYou can reverse the order of a list with a `-1` stride applied on the whole list:\n\n::: {#c3c14b41 .cell execution_count=22}\n``` {.python .cell-code}\n[1, 2, 3, 4, 5, 6, 7, 8, 9][::-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=349}\n```\n[9, 8, 7, 6, 5, 4, 3, 2, 1]\n```\n:::\n:::\n\n\nYou can test whether an item is in a list:\n\n::: {#224e0893 .cell execution_count=23}\n``` {.python .cell-code}\n3 in [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n\n::: {.cell-output .cell-output-display execution_count=350}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#62b5b608 .cell execution_count=24}\n``` {.python .cell-code}\n9 in [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n\n::: {.cell-output .cell-output-display execution_count=351}\n```\nFalse\n```\n:::\n:::\n\n\nor not in a list:\n\n::: {#ebf8892f .cell execution_count=25}\n``` {.python .cell-code}\n3 not in [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n\n::: {.cell-output .cell-output-display execution_count=352}\n```\nFalse\n```\n:::\n:::\n\n\nYou can get the index (position) of an item inside a list:\n\n::: {#68f385fc .cell execution_count=26}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8].index(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=353}\n```\n0\n```\n:::\n:::\n\n\n:::{.notenoit}\n\nNote that this only returns the index of the first occurrence:\n\n::: {#6459f9d0 .cell execution_count=27}\n``` {.python .cell-code}\n[3, 3, ['b', 'e', 3.9, ['some string', 9.9]], 8].index(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=354}\n```\n0\n```\n:::\n:::\n\n\n:::\n\nLists are mutable (they can be modified), so you can replace items in a list by other items:\n\n::: {#e68f444a .cell execution_count=28}\n``` {.python .cell-code}\nL = [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n:::\n\n\n::: {#784bb91f .cell execution_count=29}\n``` {.python .cell-code}\nL[1] = 2\nprint(L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[3, 2, 8]\n```\n:::\n:::\n\n\nYou can delete items from a list using their indices with `list.pop`:\n\n::: {#b5238666 .cell execution_count=30}\n``` {.python .cell-code}\nL.pop(2)\nprint(L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[3, 2]\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWhy is `2` still in the list after using `L.pop(2)`?\n\n:::\n\nor with `del`:\n\n::: {#ccd823e0 .cell execution_count=31}\n``` {.python .cell-code}\ndel L[0]\nprint(L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2]\n```\n:::\n:::\n\n\n:::{.notenoit}\n\nNotice how a list can have a single item:\n\n::: {#769e7081 .cell execution_count=32}\n``` {.python .cell-code}\nlen(L)\n```\n\n::: {.cell-output .cell-output-display execution_count=359}\n```\n1\n```\n:::\n:::\n\n\nIt is then called a \"singleton list\".\n\n:::\n\nYou can also delete items from a list using their values with `list.remove`:\n\n::: {#d3cdf6be .cell execution_count=33}\n``` {.python .cell-code}\nL.remove(2)\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=360}\n```\n[]\n```\n:::\n:::\n\n\n:::{.note}\n\nHere, because we are using `list.remove`, `2` represents the value `2`, not the index.\n\n:::\n\n:::{.notenoit}\n\nNotice how a list can even be empty:\n\n::: {#2a198d92 .cell execution_count=34}\n``` {.python .cell-code}\nlen(L)\n```\n\n::: {.cell-output .cell-output-display execution_count=361}\n```\n0\n```\n:::\n:::\n\n\nYou can actually initialise empty lists:\n\n::: {#b4c074b2 .cell execution_count=35}\n``` {.python .cell-code}\nM = []\ntype(M)\n```\n\n::: {.cell-output .cell-output-display execution_count=362}\n```\nlist\n```\n:::\n:::\n\n\n:::\n\nYou can add items to a list. One at a time as we saw at the top of this page:\n\n::: {#48a7c917 .cell execution_count=36}\n``` {.python .cell-code}\nL.append(7)\nprint(L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[7]\n```\n:::\n:::\n\n\nAnd if you want to add multiple items at once?\n\n::: {#4930267c .cell execution_count=37}\n``` {.python .cell-code}\n# This doesn't work...\nL.append(3, 6, 9)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[364]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-bright-green-fg\">      1</span> <span style=\"color:rgb(138,138,138)\"># This doesn't work...</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">2</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">L</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">append</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">3</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">6</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">9</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: list.append() takes exactly one argument (3 given)</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#77208e42 .cell execution_count=38}\n``` {.python .cell-code}\n# This doesn't work either (that's not what we wanted)\nL.append([3, 6, 9])\nprint(L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[7, [3, 6, 9]]\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nFix this mistake we just made and delete the nested list `[3, 6, 9]`.\n\n:::\n\nTo add multiple values to a list (and not a nested list), you need to use `list.extend`:\n\n::: {#4bc1bc91 .cell execution_count=39}\n``` {.python .cell-code}\nL.extend([3, 6, 9])\nprint(L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[7, [3, 6, 9], 3, 6, 9]\n```\n:::\n:::\n\n\nIf you don't want to add an item at the end of a list, you can use `list.insert(<index>, <object>)`.\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nBetween which elements will `'test'` be inserted?\n\n:::\n\nYou can sort homogeneous lists:\n\n::: {#87e73e13 .cell execution_count=40}\n``` {.python .cell-code}\nL = [3, 9, 10, 0]\nL.sort()\nprint(L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 3, 9, 10]\n```\n:::\n:::\n\n\n::: {#2a39c6d5 .cell execution_count=41}\n``` {.python .cell-code}\nL = ['some string', 'b', 'a']\nL.sort()\nprint(L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['a', 'b', 'some string']\n```\n:::\n:::\n\n\n:::{.notenoit}\n\nHeterogeneous lists cannot be sorted:\n\n::: {#fa0ab5bb .cell execution_count=42}\n``` {.python .cell-code}\nL = [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\nL.sort()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[369]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-bright-green-fg\">      1</span> <span class=\"ansi-bright-white-fg\">L</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">[</span><span style=\"color:rgb(175,135,255)\">3</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">[</span><span style=\"color:rgb(215,215,135)\">'</span><span style=\"color:rgb(215,215,135)\">b</span><span style=\"color:rgb(215,215,135)\">'</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(215,215,135)\">'</span><span style=\"color:rgb(215,215,135)\">e</span><span style=\"color:rgb(215,215,135)\">'</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">3.9</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">[</span><span style=\"color:rgb(215,215,135)\">'</span><span style=\"color:rgb(215,215,135)\">some string</span><span style=\"color:rgb(215,215,135)\">'</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">9.9</span><span class=\"ansi-bright-white-fg\">]</span><span class=\"ansi-bright-white-fg\">]</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">8</span><span class=\"ansi-bright-white-fg\">]</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">2</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">L</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">sort</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: '&lt;' not supported between instances of 'list' and 'int'</pre>\n```\n:::\n\n:::\n:::\n\n\n:::\n\nYou can also get the min and max value of homogeneous lists:\n\n::: {#5ed8f204 .cell execution_count=43}\n``` {.python .cell-code}\nmin([3, 9, 10, 0])\n```\n\n::: {.cell-output .cell-output-display execution_count=370}\n```\n0\n```\n:::\n:::\n\n\n::: {#49955a53 .cell execution_count=44}\n``` {.python .cell-code}\nmax(['some string', 'b', 'a'])\n```\n\n::: {.cell-output .cell-output-display execution_count=371}\n```\n'some string'\n```\n:::\n:::\n\n\n:::{.notenoit}\n\nFor heterogeneous lists, this also doesn't work:\n\n::: {#99afae51 .cell execution_count=45}\n``` {.python .cell-code}\nmin([3, ['b', 'e', 3.9, ['some string', 9.9]], 8])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[372]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">min</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">[</span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">3</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">[</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">b</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">e</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">3.9</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">[</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">some string</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">9.9</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">]</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">]</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">8</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">]</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: '&lt;' not supported between instances of 'list' and 'int'</pre>\n```\n:::\n\n:::\n:::\n\n\n:::\n\nLists can be concatenated with `+`:\n\n::: {#8bf0443c .cell execution_count=46}\n``` {.python .cell-code}\nL + [3, 6, 9]\n```\n\n::: {.cell-output .cell-output-display execution_count=373}\n```\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8, 3, 6, 9]\n```\n:::\n:::\n\n\nor repeated with `*`:\n\n::: {#d3f48bfb .cell execution_count=47}\n``` {.python .cell-code}\nL * 3\n```\n\n::: {.cell-output .cell-output-display execution_count=374}\n```\n[3,\n ['b', 'e', 3.9, ['some string', 9.9]],\n 8,\n 3,\n ['b', 'e', 3.9, ['some string', 9.9]],\n 8,\n 3,\n ['b', 'e', 3.9, ['some string', 9.9]],\n 8]\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nDo you remember this exercise from [an earlier section](intro_objects#assignment)?\n\n:::{.notenoit}\n\n```{.python}\na = 1\nb = a\na = 2\n```\n\nWhat do you think the value of `b` is now?\n\n:::\n\nHere is a new exercise for you:\n\n```{.python}\na = [0, 1, 2]\nb = a\na.append(3)\n```\n\nWhat do you think the value of `b` is now?\n\n:::\n\n:::{.callout-note collapse=\"true\"}\n\n## Explanation\n\nWait, what? 😵\n\nThis is because, in Python, a scalar (an object with a single value) is immutable, meaning that you can't change its value.\n\nSo in the first example, when we run `a = 2`, we are creating a new object (because the value of the initial object cannot be changed).\n\nLists however are mutable. So when we run `a.append(3)`, we are not creating a new object. Instead we are modifying the existing object. Since both `a` and `b` point to that object, if the object changes, the value of both `a` and `b` changes.\n\nIn this case, if you want to create a copy, you have to use the [`copy` function from the `copy` module](https://docs.python.org/3/library/copy.html) (we will talk about modules [later in the course](intro_pkg)):\n\n::: {#ffdb433a .cell execution_count=48}\n``` {.python .cell-code}\nimport copy\n\na = [0, 1, 2]\nb = a.copy()\na.append(3)\n\nprint(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 1, 2]\n```\n:::\n:::\n\n\n:::\n\n:::{.info}\n\nTo sum up, lists are declared in square brackets. They are mutable, ordered (thus indexable), and possibly heterogeneous collections of values.\n\n:::\n\n### List comprehensions\n\n[List comprehensions](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions) allow to create lists by applying a function to or testing a condition on each element of iterables.\n\n:::{.example}\n\nExamples:\n\n:::\n\nCreate a new list by applying a function to each element of a first list:\n\n::: {#5447bce6 .cell execution_count=49}\n``` {.python .cell-code}\nl = [-3, 5, -2, 0, 9]\nl2 = [x**2 for x in l]\nprint(l2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[9, 25, 4, 0, 81]\n```\n:::\n:::\n\n\nCreate a new list by testing a condition on each element of a first list:\n\n::: {#68fcabb6 .cell execution_count=50}\n``` {.python .cell-code}\nl3 = [x for x in l if x<=0]\nprint(l3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[-3, -2, 0]\n```\n:::\n:::\n\n\nCreate a new list by applying a function to each element of a first list matching a condition:\n\n::: {#efc4c5e9 .cell execution_count=51}\n``` {.python .cell-code}\nl4 = [x**2 for x in l if x<=0]\nprint(l4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[9, 4, 0]\n```\n:::\n:::\n\n\nFlatten a list with two `for` statements:\n\n::: {#a1f65dd3 .cell execution_count=52}\n``` {.python .cell-code}\nnested_l = [[1, 2], [3], [4, 5, 6]]\nflat_l = [x for y in nested_l for x in y]\nprint(flat_l)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4, 5, 6]\n```\n:::\n:::\n\n\nBy adding more `for` statements, you can flatten more deeply nested lists:\n\n::: {#0bc16ace .cell execution_count=53}\n``` {.python .cell-code}\nl = [[[3, 4], [4]]]\n[x for y in l for z in y for x in z]\n```\n\n::: {.cell-output .cell-output-display execution_count=380}\n```\n[3, 4, 4]\n```\n:::\n:::\n\n\n### Strings\n\nStrings behave (a little) like lists of characters in that they have a length (the number of characters):\n\n::: {#92672486 .cell execution_count=54}\n``` {.python .cell-code}\nS = 'This is a string.'\nlen(S)\n```\n\n::: {.cell-output .cell-output-display execution_count=381}\n```\n17\n```\n:::\n:::\n\n\nThey have a min and a max:\n\n::: {#575ba7d1 .cell execution_count=55}\n``` {.python .cell-code}\nmin(S)\n```\n\n::: {.cell-output .cell-output-display execution_count=382}\n```\n' '\n```\n:::\n:::\n\n\n::: {#38cabda5 .cell execution_count=56}\n``` {.python .cell-code}\nmax(S)\n```\n\n::: {.cell-output .cell-output-display execution_count=383}\n```\n't'\n```\n:::\n:::\n\n\nYou can index them:\n\n::: {#bb3f6fdc .cell execution_count=57}\n``` {.python .cell-code}\nS[3]\n```\n\n::: {.cell-output .cell-output-display execution_count=384}\n```\n's'\n```\n:::\n:::\n\n\nSlice them:\n\n::: {#3b5d634a .cell execution_count=58}\n``` {.python .cell-code}\nS[10:16]\n```\n\n::: {.cell-output .cell-output-display execution_count=385}\n```\n'string'\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nReverse the order of the string `S`.\n\n:::\n\nThey can also be concatenated with `+`:\n\n::: {#d024ce9e .cell execution_count=59}\n``` {.python .cell-code}\nT = 'This is another string.'\nprint(S + ' ' + T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is a string. This is another string.\n```\n:::\n:::\n\n\nor repeated with `*`:\n\n::: {#e843f300 .cell execution_count=60}\n``` {.python .cell-code}\nprint(S * 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is a string.This is a string.This is a string.\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nModify the last expression to have spaces after the periods.\n\n:::\n\nThis is where the similarities stop however: methods such as `list.sort`, `list.append`, etc. will not work on strings.\n\n::: {#ac05a050 .cell execution_count=61}\n``` {.python .cell-code}\nS.append('This will fail.')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">AttributeError</span>                            Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[388]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">S</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">append</span><span class=\"ansi-bright-white-fg\">(</span><span style=\"color:rgb(215,215,135)\">'</span><span style=\"color:rgb(215,215,135)\">This will fail.</span><span style=\"color:rgb(215,215,135)\">'</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">AttributeError</span>: 'str' object has no attribute 'append'</pre>\n```\n:::\n\n:::\n:::\n\n\n## Arrays\n\nPython comes with a built-in [array](https://docs.python.org/3/library/array.html) module. When you need arrays for storing and retrieving data, this module is perfectly suitable and extremely lightweight. [This tutorial](https://www.softwaretestinghelp.com/how-to-use-python-array/) covers the syntax in detail.\n\nWhenever you plan on performing calculations on your data however (which is the vast majority of cases), you should instead use the [NumPy](https://numpy.org/) package. We will talk about NumPy briefly [in another section](intro_numpy).\n\n## Tuples\n\nTuples are defined with parentheses:\n\n::: {#9f534136 .cell execution_count=62}\n``` {.python .cell-code}\nt = (3, 1, 4, 2)\n```\n:::\n\n\n::: {#ee4b36d4 .cell execution_count=63}\n``` {.python .cell-code}\ntype(t)\n```\n\n::: {.cell-output .cell-output-display execution_count=390}\n```\ntuple\n```\n:::\n:::\n\n\nThey are ordered:\n\n::: {#ef50f985 .cell execution_count=64}\n``` {.python .cell-code}\n(2, 3) == (3, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=391}\n```\nFalse\n```\n:::\n:::\n\n\nThis means that they are indexable and sliceable:\n\n::: {#691b450d .cell execution_count=65}\n``` {.python .cell-code}\n(2, 4, 6)[2]\n```\n\n::: {.cell-output .cell-output-display execution_count=392}\n```\n6\n```\n:::\n:::\n\n\n::: {#83ebddb0 .cell execution_count=66}\n``` {.python .cell-code}\n(2, 4, 6)[::-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=393}\n```\n(6, 4, 2)\n```\n:::\n:::\n\n\nThey can be nested:\n\n::: {#6af95df1 .cell execution_count=67}\n``` {.python .cell-code}\ntype((3, 1, (0, 2)))\n```\n\n::: {.cell-output .cell-output-display execution_count=394}\n```\ntuple\n```\n:::\n:::\n\n\n::: {#5f0f83fc .cell execution_count=68}\n``` {.python .cell-code}\nlen((3, 1, (0, 2)))\n```\n\n::: {.cell-output .cell-output-display execution_count=395}\n```\n3\n```\n:::\n:::\n\n\n::: {#0b738c3c .cell execution_count=69}\n``` {.python .cell-code}\nmax((3, 1, 2))\n```\n\n::: {.cell-output .cell-output-display execution_count=396}\n```\n3\n```\n:::\n:::\n\n\nThey can be heterogeneous:\n\n::: {#95ff5121 .cell execution_count=70}\n``` {.python .cell-code}\ntype(('string', 2, True))\n```\n\n::: {.cell-output .cell-output-display execution_count=397}\n```\ntuple\n```\n:::\n:::\n\n\nYou can create empty tuples:\n\n::: {#29c96f77 .cell execution_count=71}\n``` {.python .cell-code}\ntype(())\n```\n\n::: {.cell-output .cell-output-display execution_count=398}\n```\ntuple\n```\n:::\n:::\n\n\nYou can also create singleton tuples, but the syntax is a bit odd:\n\n::: {#8ff8addb .cell execution_count=72}\n``` {.python .cell-code}\n# This is not a tuple...\ntype((1))\n```\n\n::: {.cell-output .cell-output-display execution_count=399}\n```\nint\n```\n:::\n:::\n\n\n::: {#fcee8f4b .cell execution_count=73}\n``` {.python .cell-code}\n# This is the weird way to define a singleton tuple\ntype((1,))\n```\n\n::: {.cell-output .cell-output-display execution_count=400}\n```\ntuple\n```\n:::\n:::\n\n\nHowever, the big difference with lists is that tuples are **immutable**:\n\n::: {#67262c60 .cell execution_count=74}\n``` {.python .cell-code}\nT = (2, 5)\nT[0] = 8\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[401]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-bright-green-fg\">      1</span> <span class=\"ansi-bright-white-fg\">T</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">(</span><span style=\"color:rgb(175,135,255)\">2</span><span class=\"ansi-bright-white-fg\">,</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">5</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">2</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">T</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">[</span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">0</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">]</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(175,135,255)\">8</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: 'tuple' object does not support item assignment</pre>\n```\n:::\n\n:::\n:::\n\n\nTuples are quite fascinating:\n\n::: {#f87d85fa .cell execution_count=75}\n``` {.python .cell-code}\na, b = 1, 2\nprint(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2\n```\n:::\n:::\n\n\n::: {#5e1dea24 .cell execution_count=76}\n``` {.python .cell-code}\na, b = b, a\nprint(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2 1\n```\n:::\n:::\n\n\n:::{.info}\n\nTuples are declared in parentheses. They are immutable, ordered (thus indexable), and possibly heterogeneous collections of values.\n\n:::\n\n## Sets\n\nSets are declared in curly braces:\n\n::: {#b431cd4a .cell execution_count=77}\n``` {.python .cell-code}\ns = {3, 2, 5}\n```\n:::\n\n\n::: {#b5df9706 .cell execution_count=78}\n``` {.python .cell-code}\ntype(s)\n```\n\n::: {.cell-output .cell-output-display execution_count=405}\n```\nset\n```\n:::\n:::\n\n\nThey are unordered:\n\n::: {#05ec841d .cell execution_count=79}\n``` {.python .cell-code}\n{2, 4, 1} == {4, 2, 1}\n```\n\n::: {.cell-output .cell-output-display execution_count=406}\n```\nTrue\n```\n:::\n:::\n\n\nConsequently, it makes no sense to index a set:\n\n::: {#f0f95c60 .cell execution_count=80}\n``` {.python .cell-code}\ns[0]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[407]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">s</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">[</span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">0</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">]</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: 'set' object is not subscriptable</pre>\n```\n:::\n\n:::\n:::\n\n\nSets can be heterogeneous:\n\n::: {#06bd415d .cell execution_count=81}\n``` {.python .cell-code}\nS = {2, 'a', 'string'}\nisinstance(S, set)\n```\n\n::: {.cell-output .cell-output-display execution_count=408}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#fae398ef .cell execution_count=82}\n``` {.python .cell-code}\ntype(2) == type('a') == type('string')\n```\n\n::: {.cell-output .cell-output-display execution_count=409}\n```\nFalse\n```\n:::\n:::\n\n\nThere are no duplicates in a set:\n\n::: {#0a3ab225 .cell execution_count=83}\n``` {.python .cell-code}\n{2, 2, 'a', 2, 'string', 'a'}\n```\n\n::: {.cell-output .cell-output-display execution_count=410}\n```\n{2, 'a', 'string'}\n```\n:::\n:::\n\n\nYou can define an empty set, but only with the `set` function (because empty curly braces define a dictionary as we will see below):\n\n::: {#2078c7aa .cell execution_count=84}\n``` {.python .cell-code}\nt = set()\n```\n:::\n\n\n::: {#a090f072 .cell execution_count=85}\n``` {.python .cell-code}\nlen(t)\n```\n\n::: {.cell-output .cell-output-display execution_count=412}\n```\n0\n```\n:::\n:::\n\n\n::: {#fbbfd8d8 .cell execution_count=86}\n``` {.python .cell-code}\ntype(t)\n```\n\n::: {.cell-output .cell-output-display execution_count=413}\n```\nset\n```\n:::\n:::\n\n\nSince strings an iterables, you can use `set` to get a set of the unique characters:\n\n::: {#67e0523d .cell execution_count=87}\n``` {.python .cell-code}\nset('abba')\n```\n\n::: {.cell-output .cell-output-display execution_count=414}\n```\n{'a', 'b'}\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nHow could you create a set with the single element `'abba'` in it?\n\n:::\n\n:::{.info}\n\nSets are declared in curly brackets. They are mutable, unordered (thus non indexable), possibly heterogeneous collections of unique values.\n\n:::\n\n## Dictionaries\n\nDictionaries are also declared in curly braces. They associate values to keys:\n\n::: {#ba4a12ef .cell execution_count=88}\n``` {.python .cell-code}\nd = {'key1': 'value1', 'key2': 'value2'}\n```\n:::\n\n\n::: {#d5402375 .cell execution_count=89}\n``` {.python .cell-code}\ntype(d)\n```\n\n::: {.cell-output .cell-output-display execution_count=416}\n```\ndict\n```\n:::\n:::\n\n\nThe key/value pairs are unique:\n\n::: {#3e029364 .cell execution_count=90}\n``` {.python .cell-code}\n{'key1': 'value1', 'key2': 'value2', 'key1': 'value1'}\n```\n\n::: {.cell-output .cell-output-display execution_count=417}\n```\n{'key1': 'value1', 'key2': 'value2'}\n```\n:::\n:::\n\n\nThey are unordered:\n\n::: {#be90a2d7 .cell execution_count=91}\n``` {.python .cell-code}\n{'a': 1, 'b': 2} == {'b': 2, 'a': 1}\n```\n\n::: {.cell-output .cell-output-display execution_count=418}\n```\nTrue\n```\n:::\n:::\n\n\nConsequently, the pairs themselves cannot be indexed:\n\n::: {#b7bc4ec5 .cell execution_count=92}\n``` {.python .cell-code}\nd[0]\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">KeyError</span>                                  Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[419]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">d</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">[</span><span style=\"color:rgb(175,135,255)\" class=\"ansi-yellow-bg\">0</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">]</span>\n\n<span class=\"ansi-bright-red-fg\">KeyError</span>: 0</pre>\n```\n:::\n\n:::\n:::\n\n\nHowever, you can access values from their keys:\n\n::: {#5e99349f .cell execution_count=93}\n``` {.python .cell-code}\nD = {'c': 1, 'a': 3, 'b': 2}\nD['b']\n```\n\n::: {.cell-output .cell-output-display execution_count=420}\n```\n2\n```\n:::\n:::\n\n\nor:\n\n::: {#0ef15676 .cell execution_count=94}\n``` {.python .cell-code}\nD.get('b')\n```\n\n::: {.cell-output .cell-output-display execution_count=421}\n```\n2\n```\n:::\n:::\n\n\nThere are methods to get the items (the pairs), the values, or the keys:\n\n::: {#646969e9 .cell execution_count=95}\n``` {.python .cell-code}\nD.items()\n```\n\n::: {.cell-output .cell-output-display execution_count=422}\n```\ndict_items([('c', 1), ('a', 3), ('b', 2)])\n```\n:::\n:::\n\n\n::: {#941abb49 .cell execution_count=96}\n``` {.python .cell-code}\nD.values()\n```\n\n::: {.cell-output .cell-output-display execution_count=423}\n```\ndict_values([1, 3, 2])\n```\n:::\n:::\n\n\n::: {#6db78d2b .cell execution_count=97}\n``` {.python .cell-code}\nD.keys()\n```\n\n::: {.cell-output .cell-output-display execution_count=424}\n```\ndict_keys(['c', 'a', 'b'])\n```\n:::\n:::\n\n\nTo return a sorted list of keys:\n\n::: {#9d2e3d3b .cell execution_count=98}\n``` {.python .cell-code}\nsorted(D)\n```\n\n::: {.cell-output .cell-output-display execution_count=425}\n```\n['a', 'b', 'c']\n```\n:::\n:::\n\n\nYou can create empty dictionaries:\n\n::: {#3e62e8b9 .cell execution_count=99}\n``` {.python .cell-code}\nE = {}\ntype(E)\n```\n\n::: {.cell-output .cell-output-display execution_count=426}\n```\ndict\n```\n:::\n:::\n\n\nDictionaries are mutable, so you can add, remove, or replace items.\n\nLet's add an item to our empty dictionary `E`:\n\n::: {#9dcae69e .cell execution_count=100}\n``` {.python .cell-code}\nE['author'] = 'Proust'\nprint(E)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'author': 'Proust'}\n```\n:::\n:::\n\n\nWe can add another one:\n\n::: {#9759b40b .cell execution_count=101}\n``` {.python .cell-code}\nE['title'] = 'In search of lost time'\nprint(E)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'author': 'Proust', 'title': 'In search of lost time'}\n```\n:::\n:::\n\n\nWe can modify one:\n\n::: {#e37d97c8 .cell execution_count=102}\n``` {.python .cell-code}\nE['author'] = 'Marcel Proust'\nE\n```\n\n::: {.cell-output .cell-output-display execution_count=429}\n```\n{'author': 'Marcel Proust', 'title': 'In search of lost time'}\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nAdd a third item to `E` with the number of volumes.\n\n:::\n\nWe can also remove items:\n\n::: {#c639af07 .cell execution_count=103}\n``` {.python .cell-code}\nE.pop('author')\nprint(E)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'title': 'In search of lost time'}\n```\n:::\n:::\n\n\nor:\n\n::: {#165dcb99 .cell execution_count=104}\n``` {.python .cell-code}\ndel E['title']\nprint(E)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{}\n```\n:::\n:::\n\n\n:::{.info}\n\nDictionaries are declared in curly braces. They are mutable and unordered collections of unique key/value pairs. They play the role of an associative array.\n\n:::\n\n## Conversion between collections\n\nFrom tuple to list:\n\n::: {#b084ab74 .cell execution_count=105}\n``` {.python .cell-code}\nlist((3, 8, 1))\n```\n\n::: {.cell-output .cell-output-display execution_count=432}\n```\n[3, 8, 1]\n```\n:::\n:::\n\n\nFrom tuple to set:\n\n::: {#a8c9ed67 .cell execution_count=106}\n``` {.python .cell-code}\nset((3, 2, 3, 3))\n```\n\n::: {.cell-output .cell-output-display execution_count=433}\n```\n{2, 3}\n```\n:::\n:::\n\n\nFrom list to tuple:\n\n::: {#286e6719 .cell execution_count=107}\n``` {.python .cell-code}\ntuple([3, 1, 4])\n```\n\n::: {.cell-output .cell-output-display execution_count=434}\n```\n(3, 1, 4)\n```\n:::\n:::\n\n\nFrom list to set:\n\n::: {#9ef75daa .cell execution_count=108}\n``` {.python .cell-code}\nset(['a', 2, 4])\n```\n\n::: {.cell-output .cell-output-display execution_count=435}\n```\n{2, 4, 'a'}\n```\n:::\n:::\n\n\nFrom set to tuple:\n\n::: {#b9017e44 .cell execution_count=109}\n``` {.python .cell-code}\ntuple({2, 3})\n```\n\n::: {.cell-output .cell-output-display execution_count=436}\n```\n(2, 3)\n```\n:::\n:::\n\n\nFrom set to list:\n\n::: {#ed4017d9 .cell execution_count=110}\n``` {.python .cell-code}\nlist({2, 3})\n```\n\n::: {.cell-output .cell-output-display execution_count=437}\n```\n[2, 3]\n```\n:::\n:::\n\n\n## Collections module\n\nPython has a built-in [collections](https://docs.python.org/3/library/collections.html) module providing the additional much more niche data structures: [deque](https://docs.python.org/3/library/collections.html#collections.deque), [defaultdict](https://docs.python.org/3/library/collections.html#collections.defaultdict), [namedtuple](https://docs.python.org/3/library/collections.html#collections.namedtuple), [OrderedDict](https://docs.python.org/3/library/collections.html#collections.OrderedDict), [Counter](https://docs.python.org/3/library/collections.html#collections.Counter), [ChainMap](https://docs.python.org/3/library/collections.html#collections.ChainMap), [UserDict](https://docs.python.org/3/library/collections.html#collections.UserDict), [UserList](https://docs.python.org/3/library/collections.html#collections.UserList), and [UserList](https://docs.python.org/3/library/collections.html#collections.UserString).\n\n",
    "supporting": [
      "intro_collections_files"
    ],
    "filters": [],
    "includes": {}
  }
}