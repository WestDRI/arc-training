{
  "hash": "b6843b2e1855bd6046c469ba85dbc4cf",
  "result": {
    "markdown": "---\ntitle: Collections\naliases:\n  - collections.html\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nValues can be stored in collections. This section introduces tuples, dictionaries, sets, and arrays in Python.\n\n:::\n\n## Lists\n\nLists are declared in square brackets:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nl = [2, 1, 3]\nl\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n[2, 1, 3]\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ntype(l)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nlist\n```\n:::\n:::\n\n\nThey are mutable:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nl.append(0)\nl\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n[2, 1, 3, 0]\n```\n:::\n:::\n\n\nLists are ordered:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n['b', 'a'] == ['a', 'b']\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nFalse\n```\n:::\n:::\n\n\nThey can have repeat values:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n['a', 'a', 'a', 't']\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n['a', 'a', 'a', 't']\n```\n:::\n:::\n\n\nLists can be homogeneous:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n['b', 'a', 'x', 'e']\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n['b', 'a', 'x', 'e']\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ntype('b') == type('a') == type('x') == type('e')\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nTrue\n```\n:::\n:::\n\n\nor heterogeneous:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n[3, 'some string', 2.9, 'z']\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n[3, 'some string', 2.9, 'z']\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ntype(3) == type('some string') == type(2.9) == type('z')\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nFalse\n```\n:::\n:::\n\n\nThey can even be nested:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n:::\n:::\n\n\nThe length of a list is the number of items it contains and can be obtained with the function `len`:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nlen([3, ['b', 'e', 3.9, ['some string', 9.9]], 8])\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n3\n```\n:::\n:::\n\n\nTo extract an item from a list, you index it:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][0]\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n3\n```\n:::\n:::\n\n\n:::{.note}\n\nPython starts indexing at `0`, so what we tend to think of as the \"first\" element of a list is for Python the \"zeroth\" element.\n\n:::\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][1]\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n['b', 'e', 3.9, ['some string', 9.9]]\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][2]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n8\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# Of course you can't extract items that don't exist\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][3]\n```\n\n::: {.cell-output .cell-output-error}\n```\nIndexError: list index out of range\n```\n:::\n:::\n\n\nYou can index from the end of the list with negative values (here you start at `-1` for the last element):\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n8\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nHow could you extract the string `'some string'` from the list `[3, ['b', 'e', 3.9, ['some string', 9.9]], 8]`?\n\n:::\n\nYou can also slice a list:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][0:1]\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n[3]\n```\n:::\n:::\n\n\n:::{.note}\n\nNotice how slicing returns a list.\n\nNotice also how the left index is included but the right index excluded.\n\n:::\n\nIf you omit the first index, the slice starts at the beginning of the list:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n[1, 2, 3, 4, 5, 6, 7, 8, 9][:6]\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n[1, 2, 3, 4, 5, 6]\n```\n:::\n:::\n\n\nIf you omit the second index, the slice goes to the end of the list:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n[1, 2, 3, 4, 5, 6, 7, 8, 9][6:]\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n[7, 8, 9]\n```\n:::\n:::\n\n\nWhen slicing, you can specify the stride:\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n[1, 2, 3, 4, 5, 6, 7, 8, 9][2:7:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n[3, 5, 7]\n```\n:::\n:::\n\n\n:::{.note}\n\nThe default stride is `1`:\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n[1, 2, 3, 4, 5, 6, 7, 8, 9][2:7] == [1, 2, 3, 4, 5, 6, 7, 8, 9][2:7:1]\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nTrue\n```\n:::\n:::\n\n\n:::\n\nYou can reverse the order of a list with a `-1` stride applied on the whole list:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n[1, 2, 3, 4, 5, 6, 7, 8, 9][::-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n[9, 8, 7, 6, 5, 4, 3, 2, 1]\n```\n:::\n:::\n\n\nYou can test whether an item is in a list:\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n3 in [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n9 in [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\nFalse\n```\n:::\n:::\n\n\nor not in a list:\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n3 not in [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nFalse\n```\n:::\n:::\n\n\nYou can get the index (position) of an item inside a list:\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8].index(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n0\n```\n:::\n:::\n\n\n:::{.note}\n\nNote that this only returns the index of the first occurrence:\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n[3, 3, ['b', 'e', 3.9, ['some string', 9.9]], 8].index(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n0\n```\n:::\n:::\n\n\n:::\n\nLists are mutable (they can be modified). For instance, you can replace items in a list by other items:\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nL = [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nL[1] = 2\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n[3, 2, 8]\n```\n:::\n:::\n\n\nYou can delete items from a list using their indices with `list.pop`:\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nL.pop(2)\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n[3, 2]\n```\n:::\n:::\n\n\n:::{.note}\n\nHere, because we are using `list.pop`, `2` represents the index (the 3rd item).\n\n:::\n\nor with `del`:\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ndel L[0]\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n[2]\n```\n:::\n:::\n\n\n:::{.note}\n\nNotice how a list can have a single item:\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nlen(L)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n1\n```\n:::\n:::\n\n\nIt is then called a \"singleton list\".\n\n:::\n\nYou can also delete items from a list using their values with `list.remove`:\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nL.remove(2)\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n[]\n```\n:::\n:::\n\n\n:::{.note}\n\nHere, because we are using `list.remove`, `2` is the value `2`.\n\n:::\n\n:::{.note}\n\nNotice how a list can even be empty:\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nlen(L)\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n0\n```\n:::\n:::\n\n\nYou can actually initialise empty lists:\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nM = []\ntype(M)\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\nlist\n```\n:::\n:::\n\n\n:::\n\nYou can add items to a list. One at a time:\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nL.append(7)\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n[7]\n```\n:::\n:::\n\n\nAnd if you want to add multiple items at once?\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\n# This doesn't work...\nL.append(3, 6, 9)\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: list.append() takes exactly one argument (3 given)\n```\n:::\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\n# This doesn't work either (that's not what we wanted)\nL.append([3, 6, 9])\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n[7, [3, 6, 9]]\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nFix this mistake we just made and remove the nested list `[3, 6, 9]`.\n\n:::\n\n:::{.callout collapse=\"true\"}\n\n## Solution\n\nOne option is:\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\ndel L[1]\n```\n:::\n\n\n:::\n\nTo add multiple values to a list (and not a nested list), you need to use `list.extend`:\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nL.extend([3, 6, 9])\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n[7, 3, 6, 9]\n```\n:::\n:::\n\n\nIf you don't want to add an item at the end of a list, you can use `list.insert(<index>, <object>)`:\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nL.insert(3, 'test')\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n[7, 3, 6, 'test', 9]\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nLet's have the following list:\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\nL = [7, [3, 6, 9], 3, 'test', 6, 9]\n```\n:::\n\n\nInsert the string `'nested'` in the zeroth position of the nested list `[3, 6, 9]` in `L`.\n\n:::\n\nYou can sort an homogeneous list:\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nL = [3, 9, 10, 0]\nL.sort()\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\n[0, 3, 9, 10]\n```\n:::\n:::\n\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nL = ['some string', 'b', 'a']\nL.sort()\nL\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n['a', 'b', 'some string']\n```\n:::\n:::\n\n\n:::{.note}\n\nHeterogeneous lists cannot be sorted:\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nL = [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]\nL.sort()\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: '<' not supported between instances of 'list' and 'int'\n```\n:::\n:::\n\n\n:::\n\nYou can also get the min and max value of homogeneous lists:\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nmin([3, 9, 10, 0])\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\n0\n```\n:::\n:::\n\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nmax(['some string', 'b', 'a'])\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n'some string'\n```\n:::\n:::\n\n\n:::{.note}\n\nFor heterogeneous lists, this also doesn't work:\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nmin([3, ['b', 'e', 3.9, ['some string', 9.9]], 8])\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: '<' not supported between instances of 'list' and 'int'\n```\n:::\n:::\n\n\n:::\n\nLists can be concatenated with `+`:\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nL + [3, 6, 9]\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\n[3, ['b', 'e', 3.9, ['some string', 9.9]], 8, 3, 6, 9]\n```\n:::\n:::\n\n\nor repeated with `*`:\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\nL * 3\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\n[3,\n ['b', 'e', 3.9, ['some string', 9.9]],\n 8,\n 3,\n ['b', 'e', 3.9, ['some string', 9.9]],\n 8,\n 3,\n ['b', 'e', 3.9, ['some string', 9.9]],\n 8]\n```\n:::\n:::\n\n\n:::{.info}\n\nTo sum up, lists are declared in square brackets. They are mutable, ordered (thus indexable), and possibly heterogeneous collections of values.\n\n:::\n\n## Strings\n\nStrings behave (a little) like lists of characters in that they have a length (the number of characters):\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\nS = 'This is a string.'\nlen(S)\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\n17\n```\n:::\n:::\n\n\nThey have a min and a max:\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\nmin(S)\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n' '\n```\n:::\n:::\n\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\nmax(S)\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\n't'\n```\n:::\n:::\n\n\nYou can index them:\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\nS[3]\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\n's'\n```\n:::\n:::\n\n\nSlice them:\n\n::: {.cell execution_count=56}\n``` {.python .cell-code}\nS[10:16]\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\n'string'\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nReverse the order of the string `S`.\n\n:::\n\nThey can also be concatenated with `+`:\n\n::: {.cell execution_count=57}\n``` {.python .cell-code}\nT = 'This is another string.'\nprint(S + ' ' + T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is a string. This is another string.\n```\n:::\n:::\n\n\nor repeated with `*`:\n\n::: {.cell execution_count=58}\n``` {.python .cell-code}\nprint(S * 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is a string.This is a string.This is a string.\n```\n:::\n:::\n\n\n::: {.cell execution_count=59}\n``` {.python .cell-code}\nprint((S + ' ') * 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is a string. This is a string. This is a string. \n```\n:::\n:::\n\n\nThis is where the similarities stop however: methods such as `list.sort`, `list.append`, etc. will not work on strings.\n\n## Arrays\n\nPython comes with a built-in [array](https://docs.python.org/3/library/array.html) module. When you need arrays for storing and retrieving data, this module is perfectly suitable and extremely lightweight. [This tutorial](https://www.softwaretestinghelp.com/how-to-use-python-array/) covers the syntax in detail.\n\nWhenever you plan on performing calculations on your data however (which is the vast majority of cases), you should instead use the [NumPy](https://numpy.org/) package, covered in another section.\n\n## Tuples\n\nTuples are defined with parentheses:\n\n::: {.cell execution_count=60}\n``` {.python .cell-code}\nt = (3, 1, 4, 2)\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\n(3, 1, 4, 2)\n```\n:::\n:::\n\n\n::: {.cell execution_count=61}\n``` {.python .cell-code}\ntype(t)\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\ntuple\n```\n:::\n:::\n\n\nTuples are ordered:\n\n::: {.cell execution_count=62}\n``` {.python .cell-code}\n(2, 3) == (3, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\nFalse\n```\n:::\n:::\n\n\nThis means that they are indexable and sliceable:\n\n::: {.cell execution_count=63}\n``` {.python .cell-code}\n(2, 4, 6)[2]\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\n6\n```\n:::\n:::\n\n\n::: {.cell execution_count=64}\n``` {.python .cell-code}\n(2, 4, 6)[::-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\n(6, 4, 2)\n```\n:::\n:::\n\n\nThey can be nested:\n\n::: {.cell execution_count=65}\n``` {.python .cell-code}\ntype((3, 1, (0, 2)))\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\ntuple\n```\n:::\n:::\n\n\n::: {.cell execution_count=66}\n``` {.python .cell-code}\nlen((3, 1, (0, 2)))\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```\n3\n```\n:::\n:::\n\n\n::: {.cell execution_count=67}\n``` {.python .cell-code}\nmax((3, 1, 2))\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```\n3\n```\n:::\n:::\n\n\nThey can be heterogeneous:\n\n::: {.cell execution_count=68}\n``` {.python .cell-code}\ntype(('string', 2, True))\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\ntuple\n```\n:::\n:::\n\n\nYou can create empty tuples:\n\n::: {.cell execution_count=69}\n``` {.python .cell-code}\ntype(())\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```\ntuple\n```\n:::\n:::\n\n\nYou can also create singleton tuples, but the syntax is a bit odd:\n\n::: {.cell execution_count=70}\n``` {.python .cell-code}\n# This is not a tuple...\ntype((1))\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```\nint\n```\n:::\n:::\n\n\n::: {.cell execution_count=71}\n``` {.python .cell-code}\n# This is the weird way to define a singleton tuple\ntype((1,))\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\ntuple\n```\n:::\n:::\n\n\nHowever, the big difference with lists is that tuples are **immutable**:\n\n::: {.cell execution_count=72}\n``` {.python .cell-code}\nT = (2, 5)\nT[0] = 8\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: 'tuple' object does not support item assignment\n```\n:::\n:::\n\n\nTuples are quite fascinating:\n\n::: {.cell execution_count=73}\n``` {.python .cell-code}\na, b = 1, 2\na, b\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```\n(1, 2)\n```\n:::\n:::\n\n\n::: {.cell execution_count=74}\n``` {.python .cell-code}\na, b = b, a\na, b\n```\n\n::: {.cell-output .cell-output-display execution_count=73}\n```\n(2, 1)\n```\n:::\n:::\n\n\n:::{.info}\n\nTuples are declared in parentheses. They are immutable, ordered (thus indexable), and possibly heterogeneous collections of values.\n\n:::\n\n## Sets\n\nSets are declared in curly braces:\n\n::: {.cell execution_count=75}\n``` {.python .cell-code}\ns = {3, 2, 5}\ns\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```\n{2, 3, 5}\n```\n:::\n:::\n\n\n::: {.cell execution_count=76}\n``` {.python .cell-code}\ntype(s)\n```\n\n::: {.cell-output .cell-output-display execution_count=75}\n```\nset\n```\n:::\n:::\n\n\nSets are unordered:\n\n::: {.cell execution_count=77}\n``` {.python .cell-code}\n{2, 4, 1} == {4, 2, 1}\n```\n\n::: {.cell-output .cell-output-display execution_count=76}\n```\nTrue\n```\n:::\n:::\n\n\nConsequently, it makes no sense to index a set.\n\nSets can be heterogeneous:\n\n::: {.cell execution_count=78}\n``` {.python .cell-code}\nS = {2, 'a', 'string'}\nisinstance(S, set)\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```\nTrue\n```\n:::\n:::\n\n\n::: {.cell execution_count=79}\n``` {.python .cell-code}\ntype(2) == type('a') == type('string')\n```\n\n::: {.cell-output .cell-output-display execution_count=78}\n```\nFalse\n```\n:::\n:::\n\n\nThere are no duplicates in a set:\n\n::: {.cell execution_count=80}\n``` {.python .cell-code}\n{2, 2, 'a', 2, 'string', 'a'}\n```\n\n::: {.cell-output .cell-output-display execution_count=79}\n```\n{2, 'a', 'string'}\n```\n:::\n:::\n\n\nYou can define an empty set, but only with the `set` function (because empty curly braces define a dictionary):\n\n::: {.cell execution_count=81}\n``` {.python .cell-code}\nt = set()\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=80}\n```\nset()\n```\n:::\n:::\n\n\n::: {.cell execution_count=82}\n``` {.python .cell-code}\nlen(t)\n```\n\n::: {.cell-output .cell-output-display execution_count=81}\n```\n0\n```\n:::\n:::\n\n\n::: {.cell execution_count=83}\n``` {.python .cell-code}\ntype(t)\n```\n\n::: {.cell-output .cell-output-display execution_count=82}\n```\nset\n```\n:::\n:::\n\n\nSince strings an iterables, you can use `set` to get a set of the unique characters:\n\n::: {.cell execution_count=84}\n``` {.python .cell-code}\nset('abba')\n```\n\n::: {.cell-output .cell-output-display execution_count=83}\n```\n{'a', 'b'}\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nHow could you create a set with the single element `'abba'` in it?\n\n:::\n\n:::{.info}\n\nSets are declared in curly brackets. They are mutable, unordered (thus non indexable), possibly heterogeneous collections of unique values.\n\n:::\n\n## Dictionaries\n\nDictionaries are declared in curly braces. They associate values to keys:\n\n::: {.cell execution_count=85}\n``` {.python .cell-code}\nd = {'key1': 'value1', 'key2': 'value2'}\nd\n```\n\n::: {.cell-output .cell-output-display execution_count=84}\n```\n{'key1': 'value1', 'key2': 'value2'}\n```\n:::\n:::\n\n\n::: {.cell execution_count=86}\n``` {.python .cell-code}\ntype(d)\n```\n\n::: {.cell-output .cell-output-display execution_count=85}\n```\ndict\n```\n:::\n:::\n\n\nDictionaries are unordered:\n\n::: {.cell execution_count=87}\n``` {.python .cell-code}\n{'a': 1, 'b': 2} == {'b': 2, 'a': 1}\n```\n\n::: {.cell-output .cell-output-display execution_count=86}\n```\nTrue\n```\n:::\n:::\n\n\nConsequently, the pairs themselves cannot be indexed. However, you can access values in a dictionary from their keys:\n\n::: {.cell execution_count=88}\n``` {.python .cell-code}\nD = {'c': 1, 'a': 3, 'b': 2}\nD['b']\n```\n\n::: {.cell-output .cell-output-display execution_count=87}\n```\n2\n```\n:::\n:::\n\n\n::: {.cell execution_count=89}\n``` {.python .cell-code}\nD.get('b')\n```\n\n::: {.cell-output .cell-output-display execution_count=88}\n```\n2\n```\n:::\n:::\n\n\n::: {.cell execution_count=90}\n``` {.python .cell-code}\nD.items()\n```\n\n::: {.cell-output .cell-output-display execution_count=89}\n```\ndict_items([('c', 1), ('a', 3), ('b', 2)])\n```\n:::\n:::\n\n\n::: {.cell execution_count=91}\n``` {.python .cell-code}\nD.values()\n```\n\n::: {.cell-output .cell-output-display execution_count=90}\n```\ndict_values([1, 3, 2])\n```\n:::\n:::\n\n\n::: {.cell execution_count=92}\n``` {.python .cell-code}\nD.keys()\n```\n\n::: {.cell-output .cell-output-display execution_count=91}\n```\ndict_keys(['c', 'a', 'b'])\n```\n:::\n:::\n\n\nTo return a sorted list of keys:\n\n::: {.cell execution_count=93}\n``` {.python .cell-code}\nsorted(D)\n```\n\n::: {.cell-output .cell-output-display execution_count=92}\n```\n['a', 'b', 'c']\n```\n:::\n:::\n\n\nYou can create empty dictionaries:\n\n::: {.cell execution_count=94}\n``` {.python .cell-code}\nE = {}\ntype(E)\n```\n\n::: {.cell-output .cell-output-display execution_count=93}\n```\ndict\n```\n:::\n:::\n\n\nDictionaries are mutable, so you can add, remove, or replace items.\n\nLet's add an item to our empty dictionary `E`:\n\n::: {.cell execution_count=95}\n``` {.python .cell-code}\nE['author'] = 'Proust'\nE\n```\n\n::: {.cell-output .cell-output-display execution_count=94}\n```\n{'author': 'Proust'}\n```\n:::\n:::\n\n\nWe can add another one:\n\n::: {.cell execution_count=96}\n``` {.python .cell-code}\nE['title'] = 'In search of lost time'\nE\n```\n\n::: {.cell-output .cell-output-display execution_count=95}\n```\n{'author': 'Proust', 'title': 'In search of lost time'}\n```\n:::\n:::\n\n\nWe can modify one:\n\n::: {.cell execution_count=97}\n``` {.python .cell-code}\nE['author'] = 'Marcel Proust'\nE\n```\n\n::: {.cell-output .cell-output-display execution_count=96}\n```\n{'author': 'Marcel Proust', 'title': 'In search of lost time'}\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nAdd a third item to E with the number of volumes.\n\n:::\n\nWe can also remove items:\n\n::: {.cell execution_count=98}\n``` {.python .cell-code}\nE.pop('author')\nE\n```\n\n::: {.cell-output .cell-output-display execution_count=97}\n```\n{'title': 'In search of lost time'}\n```\n:::\n:::\n\n\nAnother method to remove items:\n\n::: {.cell execution_count=99}\n``` {.python .cell-code}\ndel E['title']\nE\n```\n\n::: {.cell-output .cell-output-display execution_count=98}\n```\n{}\n```\n:::\n:::\n\n\n:::{.info}\n\nDictionaries are declared in curly braces. They are mutable and unordered collections of key/value pairs. They play the role of an associative array.\n\n:::\n\n## Conversion between collections\n\nFrom tuple to list:\n\n::: {.cell execution_count=100}\n``` {.python .cell-code}\nlist((3, 8, 1))\n```\n\n::: {.cell-output .cell-output-display execution_count=99}\n```\n[3, 8, 1]\n```\n:::\n:::\n\n\nFrom tuple to set:\n\n::: {.cell execution_count=101}\n``` {.python .cell-code}\nset((3, 2, 3, 3))\n```\n\n::: {.cell-output .cell-output-display execution_count=100}\n```\n{2, 3}\n```\n:::\n:::\n\n\nFrom list to tuple:\n\n::: {.cell execution_count=102}\n``` {.python .cell-code}\ntuple([3, 1, 4])\n```\n\n::: {.cell-output .cell-output-display execution_count=101}\n```\n(3, 1, 4)\n```\n:::\n:::\n\n\nFrom list to set:\n\n::: {.cell execution_count=103}\n``` {.python .cell-code}\nset(['a', 2, 4])\n```\n\n::: {.cell-output .cell-output-display execution_count=102}\n```\n{2, 4, 'a'}\n```\n:::\n:::\n\n\nFrom set to tuple:\n\n::: {.cell execution_count=104}\n``` {.python .cell-code}\ntuple({2, 3})\n```\n\n::: {.cell-output .cell-output-display execution_count=103}\n```\n(2, 3)\n```\n:::\n:::\n\n\nFrom set to list:\n\n::: {.cell execution_count=105}\n``` {.python .cell-code}\nlist({2, 3})\n```\n\n::: {.cell-output .cell-output-display execution_count=104}\n```\n[2, 3]\n```\n:::\n:::\n\n\n## Collections module\n\nPython has a built-in [collections](https://docs.python.org/3/library/collections.html) module providing the additional data structures: [deque](https://docs.python.org/3/library/collections.html#collections.deque), [defaultdict](https://docs.python.org/3/library/collections.html#collections.defaultdict), [namedtuple](https://docs.python.org/3/library/collections.html#collections.namedtuple), [OrderedDict](https://docs.python.org/3/library/collections.html#collections.OrderedDict), [Counter](https://docs.python.org/3/library/collections.html#collections.Counter), [ChainMap](https://docs.python.org/3/library/collections.html#collections.ChainMap), [UserDict](https://docs.python.org/3/library/collections.html#collections.UserDict), [UserList](https://docs.python.org/3/library/collections.html#collections.UserList), and [UserList](https://docs.python.org/3/library/collections.html#collections.UserString).\n\n",
    "supporting": [
      "intro_collections_files"
    ],
    "filters": [],
    "includes": {}
  }
}