{
  "hash": "609f591d7078a10cb46ef47384823566",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Getting the data\nauthor: Marie-Hélène Burle\n---\n\n\n\n\n:::{.def}\n\nIn this section, we will import the pdf of a book from an online URL into Python.\n\n:::\n\n## The text\n\n::::{layout=\"[8, -1, 12]\"}\n\n:::{.col1}\n\n[Wyrd Sisters](https://en.wikipedia.org/wiki/Wyrd_Sisters), the sixth [Discworld](https://en.wikipedia.org/wiki/Discworld) novel by [Terry Pratchett](https://en.wikipedia.org/wiki/Terry_Pratchett) published in 1988, has countless references to [Macbeth](https://en.wikipedia.org/wiki/Macbeth) (including, obviously, the title), other [Shakespeare](https://en.wikipedia.org/wiki/William_Shakespeare)'s plays, [the Marx Brothers](https://en.wikipedia.org/wiki/Marx_Brothers), [Charlie Chaplin](https://en.wikipedia.org/wiki/Charlie_Chaplin), and [Laurel and Hardy](https://en.wikipedia.org/wiki/Laurel_and_Hardy).\n<br><br>\nThe book is available as a pdf at [this URL](https://funnyengwish.wordpress.com/wp-content/uploads/2017/05/pratchett_terry_wyrd_sisters_-_royallib_ru.pdf) and this is the text we will use for this course.\n\n:::\n\n:::{.col2}\n\n![Art by [Josh Kirby](https://en.wikipedia.org/wiki/Josh_Kirby) used for the cover of Wyrd Sisters](img/wyrd.jpg)\n\n:::\n\n::::\n\n## Packages needed\n\nFirst off, we need to load two of the packages that you installed in the previous section:\n\n- [Requests](https://requests.readthedocs.io/en/latest/): this package sends requests to websites to download information. We will use it to download the pdf.\n- [PyMuPDF](https://pymupdf.readthedocs.io/en/latest/): this package will allow us to extract the content from the pdf.\n\nLet's load the packages into our session to make them available:\n\n::: {#583a3c69 .cell execution_count=2}\n``` {.python .cell-code}\nimport requests\nimport pymupdf\n```\n:::\n\n\n## Download the data\n\nFirst, let's create a string with the URL of the online pdf:\n\n::: {#ee0812c6 .cell execution_count=3}\n``` {.python .cell-code}\nurl = \"https://funnyengwish.wordpress.com/wp-content/uploads/2017/05/pratchett_terry_wyrd_sisters_-_royallib_ru.pdf\"\n```\n:::\n\n\nNow we can send a request to that URL to download the data and create a `response` object:\n\n::: {#3d4611cc .cell execution_count=4}\n``` {.python .cell-code}\nresponse = requests.get(url)\n```\n:::\n\n\nLet's print the value of our response to ensure that it was successful:\n\n::: {#b6a05862 .cell execution_count=5}\n``` {.python .cell-code}\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Response [200]>\n```\n:::\n:::\n\n\n:::{.note}\n\nOn the list of [HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes), you can see that `200` means OK. So our request was successful.\n\n:::\n\nThen we extract the text from the pdf:\n\n::: {#61081bd6 .cell execution_count=6}\n``` {.python .cell-code}\ndata = response.content\ndoc = pymupdf.Document(stream=data)\n```\n:::\n\n\nLet's explore this `doc` object that we created.\n\nIt is a `Document` object from the pymupdf package:\n\n::: {#e8d44864 .cell execution_count=7}\n``` {.python .cell-code}\ntype(doc)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\npymupdf.Document\n```\n:::\n:::\n\n\nThe first element corresponds to the first page of the pdf:\n\n::: {#fc4598cf .cell execution_count=8}\n``` {.python .cell-code}\ndoc[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\npage 0 of <memory, doc# 1>\n```\n:::\n:::\n\n\n:::{.note}\n\nRemember that indexing in Python starts at `0`.\n\n:::\n\n::: {#068912e6 .cell execution_count=9}\n``` {.python .cell-code}\ntype(doc[0])\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\npymupdf.Page\n```\n:::\n:::\n\n\nThe pdf had 139 pages:\n\n::: {#31a2c59f .cell execution_count=10}\n``` {.python .cell-code}\nlen(doc)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n139\n```\n:::\n:::\n\n\nWe can get the text of the first page with the `get_text` method. Let's create an string that we call `page1` with this text:\n\n::: {#bdfa4edf .cell execution_count=11}\n``` {.python .cell-code}\npage1 = doc[0].get_text()\n```\n:::\n\n\nWe can now print the text of the first page of the pdf:\n\n::: {#16d80320 .cell execution_count=12}\n``` {.python .cell-code}\nprint(page1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n \nTerry Pratchett \n \nWyrd Sisters \n \n(Starring Three Witches, also kings, daggers, crowns, storms, dwarfs, cats, ghosts, spectres, \napes, bandits, demons, forests, heirs, jesters, tortures, trolls, turntables, general rejoicing and \ndrivers alarums.)  \n \nThe wind howled. Lightning stabbed at the earth erratically, like an inefficient assassin. \nThunder rolled back and forth across the dark, rain-lashed hills. \nThe night was as black as the inside of a cat. It was the kind of night, you could believe, on \nwhich gods moved men as though they were pawns on the chessboard of fate. In the middle of this \nelemental storm a fire gleamed among the dripping furze bushes like the madness in a weasel's eye. \nIt illuminated three hunched figures. As the cauldron bubbled an eldritch voice shrieked: 'When \nshall we three meet again?' \nThere was a pause. \nFinally another voice said, in far more ordinary tones: 'Well, I can do next Tuesday.' \n \nThrough the fathomless deeps of space swims the star turtle Great A'Tuin, bearing on its back \nthe four giant elephants who carry on their shoulders the mass of the Discworld. A tiny sun and \nmoon spin around them, on a complicated orbit to induce seasons, so probably nowhere else in the \nmultiverse is it sometimes necessary for an elephant to cock a leg to allow the sun to go past. \nExactly why this should be may never be known. Possibly the Creator of the universe got \nbored with all the usual business of axial inclination, albedos and rotational velocities, and decided \nto have a bit of fun for once. \nIt would be a pretty good bet that the gods of a world like this probably do not play chess and \nindeed this is the case. In fact no gods anywhere play chess. They haven't got the imagination. Gods \nprefer simple, vicious games, where you Do Not Achieve Transcendence but Go Straight To \nOblivion; a key to the understanding of all religion is that a god's idea of amusement is Snakes and \nLadders with greased rungs. \nMagic glues the Discworld together – magic generated by the turning of the world itself, \nmagic wound like silk out of the underlying structure of existence to suture the wounds of reality. \nA lot of it ends up in the Ramtop Mountains, which stretch from the frozen lands near the Hub \nall the way, via a lengthy archipelago, to the warm seas which flow endlessly into space over the \nRim. \nRaw magic crackles invisibly from peak to peak and earths itself in the mountains. It is the \nRamtops that supply the world with most of its witches and wizards. In the Ramtops the leaves on \nthe trees move even when there is no breeze. Rocks go for a stroll of an evening. \nEven the land, at times, seems alive . . . \n \nAt times, so does the sky. \nThe storm was really giving it everything it had. This was its big chance. It had spent years \nhanging around the provinces, putting in some useful work as a squall, building up experience, \nmaking contacts, occasionally leaping out on unsuspecting shepherds or blasting quite small oak \ntrees. Now an opening in the weather had given it an opportunity to strut its hour, and it was \nbuilding up its role in the hope of being spotted by one of the big climates. \nIt was a good  storm. There was quite effective projection and passion there, and critics \nagreed that if it would only learn to control its thunder it would be, in years to come, a storm to \nwatch. \nThe woods roared their applause and were full of mists and flying leaves. \n\n```\n:::\n:::\n\n\n",
    "supporting": [
      "nlp_data_files"
    ],
    "filters": [],
    "includes": {}
  }
}