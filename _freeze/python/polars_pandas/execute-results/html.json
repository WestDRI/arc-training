{
  "hash": "89af7b4108f0066604a3b431e972582f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Comparison with pandas\nauthor: Marie-Hélène Burle\n---\n\n\n:::{.def}\n\nAs pandas was the only data frame library for Python for a long time, many Python users are familiar with it and a comparison with Polars might be useful.\n\n:::\n\n## Overview\n\n| | pandas | Polars |\n|--|--|--|\n| Available for | Python | Rust, Python, R, NodeJS |\n| Written in | Cython | Rust |\n| Multithreading | Some operations | Yes (GIL released) |\n| Index | Rows are indexed | Integer positions are used |\n| Evaluation | Eager only | Lazy and eager |\n| Query optimizer | No | Yes |\n| Out-of-core | No | Yes |\n| [SIMD](https://en.wikipedia.org/wiki/Single_instruction,_multiple_data) vectorization | Yes | Yes |\n| Data in memory | With [NumPy](https://github.com/numpy/numpy) arrays | With [Apache Arrow](https://github.com/apache/arrow) arrays |\n| Memory efficiency | Poor | Excellent |\n| Handling of missing data | Inconsistent | Consistent, promotes type stability |\n\n## Performance\n\nLet's use the [FizzBuzz](https://en.wikipedia.org/wiki/Fizz_buzz#:~:text=Fizz%20buzz%20is%20a%20group,with%20the%20word%20%22fizzbuzz%22.) problem.\n\nIn his pandas course, Alex compares multiple methods and shows that [the best method uses masks](https://wgpages.netlify.app/python2/python-13-pandas/#three-solutions-to-a-classification-problem). Let's see how Polars fares in comparison to pandas' best method.\n\nFirst, let's load the packages we will need:\n\n::: {#04fc2935 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport polars as pl\n```\n:::\n\n\nAnd let's make sure that the code works.\n\nWith pandas:\n\n```{.python}\ndf_pd = pd.DataFrame()\nsize = 10_000\ndf_pd[\"number\"] = np.arange(1, size+1)\ndf_pd[\"response\"] = df_pd[\"number\"].astype(str)\ndf_pd.loc[df_pd[\"number\"] % 3 == 0, \"response\"] = \"Fizz\"\ndf_pd.loc[df_pd[\"number\"] % 5 == 0, \"response\"] = \"Buzz\"\ndf_pd.loc[df_pd[\"number\"] % 15 == 0, \"response\"] = \"FizzBuzz\"\n\ndf_pd\n```\n\n```\n      number response\n0          1        1\n1          2        2\n2          3     Fizz\n3          4        4\n4          5     Buzz\n...      ...      ...\n9995    9996     Fizz\n9996    9997     9997\n9997    9998     9998\n9998    9999     Fizz\n9999   10000     Buzz\n\n[10000 rows x 2 columns]\n```\n\nWith Polars:\n\n```{.python}\nsize = 10_000\ndf_pl = pl.DataFrame({\"number\": np.arange(1, size+1)})\ndf_pl.with_columns(pl.col(\"number\").cast(pl.String).alias(\"response\"))\ndf_pl.with_columns(\n    pl.when(pl.col(\"number\") % 3 == 0)\n    .then(pl.lit(\"Fizz\"))\n    .when(pl.col(\"number\") % 5 == 0)\n    .then(pl.lit(\"Buzz\"))\n    .when(pl.col(\"number\") % 15 == 0)\n    .then(pl.lit(\"FizzBuzz\"))\n    .otherwise(pl.col(\"number\"))\n    .alias(\"response\")\n)\n```\n\n```\nshape: (10_000, 2)\n┌────────┬──────────┐\n│ number ┆ response │\n│ ---    ┆ ---      │\n│ i64    ┆ str      │\n╞════════╪══════════╡\n│ 1      ┆ 1        │\n│ 2      ┆ 2        │\n│ 3      ┆ Fizz     │\n│ 4      ┆ 4        │\n│ 5      ┆ Buzz     │\n│ …      ┆ …        │\n│ 9996   ┆ Fizz     │\n│ 9997   ┆ 9997     │\n│ 9998   ┆ 9998     │\n│ 9999   ┆ Fizz     │\n│ 10000  ┆ Buzz     │\n└────────┴──────────┘\n```\n\nNow, let's time them.\n\npandas:\n\n```{.python}\n%%timeit\n\ndf_pd = pd.DataFrame()\nsize = 10_000\ndf_pd[\"number\"] = np.arange(1, size+1)\ndf_pd[\"response\"] = df_pd[\"number\"].astype(str)\ndf_pd.loc[df_pd[\"number\"] % 3 == 0, \"response\"] = \"Fizz\"\ndf_pd.loc[df_pd[\"number\"] % 5 == 0, \"response\"] = \"Buzz\"\ndf_pd.loc[df_pd[\"number\"] % 15 == 0, \"response\"] = \"FizzBuzz\"\n```\n\n```\n4.75 ms ± 9.76 μs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n```\n\nPolars:\n\n```{.python}\n%%timeit\n\nsize = 10_000\ndf_pl = pl.DataFrame({\"number\": np.arange(1, size+1)})\ndf_pl.with_columns(pl.col(\"number\").cast(pl.String).alias(\"response\"))\ndf_pl.with_columns(\n    pl.when(pl.col(\"number\") % 3 == 0)\n    .then(pl.lit(\"Fizz\"))\n    .when(pl.col(\"number\") % 5 == 0)\n    .then(pl.lit(\"Buzz\"))\n    .when(pl.col(\"number\") % 15 == 0)\n    .then(pl.lit(\"FizzBuzz\"))\n    .otherwise(pl.col(\"number\"))\n    .alias(\"response\")\n)\n```\n\n```\n518 μs ± 580 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n```\n\nThat's a speedup of almost 10 (the longer the series, the larger this speedup will be).\n\nPolars: 1, pandas: 0\n\nFor a second example, let's go back to [the jeopardy example with a large file](https://wgpages.netlify.app/python2/python-13-pandas/#example-with-a-larger-dataframe) and compare the timing of pandas and Polar.\n\npandas:\n\n```{.python}\n%%timeit\n\ndf_pd = pd.read_csv(\"https://raw.githubusercontent.com/razoumov/publish/master/jeopardy.csv\")\ndf_pd.loc[df_pd[\"Category\"] == \"HISTORY\"].shape\n```\n\n```\n887 ms ± 164 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```\n\nPolars:\n\n```{.python}\n%%timeit\n\ndf_pl = pl.read_csv(\"https://raw.githubusercontent.com/razoumov/publish/master/jeopardy.csv\")\ndf_pl.filter(pl.col(\"Category\") == \"HISTORY\").shape\n```\n\n```\n446 ms ± 89.3 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```\n\nThat's a speedup of 2.\n\nBut it gets even better: **Polars support [lazy evaluation](https://en.wikipedia.org/wiki/Lazy_evaluation)**. \n\n[Lazy evaluation is not yet implemented when reading files from the cloud](https://github.com/pola-rs/polars/issues/13115) (Polars is a very new tool, but its functionalities are expanding very fast). This means that we cannot test the benefit of lazy evaluation in our example by using the CSV file in its current location (<https://github.com/pola-rs/polars/issues/13115>).\n\nI downloaded it on our training cluster however so that we can run the test.\n\nFirst, let's make sure that the code works.\n\npandas:\n\n```{.python}\ndf_pd = pd.read_csv(\"/project/def-sponsor00/data/jeopardy.csv\")\ndf_pd.loc[df_pd[\"Category\"] == \"HISTORY\"].shape\n```\n\n```\n(349, 7)\n```\n\nPolars:\n\n```{.python}\ndf_pl = pl.scan_csv(\"/project/def-sponsor00/data/jeopardy.csv\")\ndf_pl.filter(pl.col(\"Category\") == \"HISTORY\").collect().shape\n```\n\n```\n(349, 7)\n```\n\nAnd now for the timing.\n\npandas:\n\n```{.python}\n%%timeit\n\ndf_pd = pd.read_csv(\"/project/def-sponsor00/data/jeopardy.csv\")\ndf_pd.loc[df_pd[\"Category\"] == \"HISTORY\"].shape\n```\n\n```\n331 ms ± 2.29 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```\n\nPolars:\n\n```{.python}\n%%timeit\n\ndf_pl = pl.scan_csv(\"/project/def-sponsor00/data/jeopardy.csv\")\ndf_pl.filter(pl.col(\"Category\") == \"HISTORY\").collect().shape\n```\n\n```\n13.1 ms ± 175 μs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n```\n\nThat's a speedup of 25 (the larger the file, the larger this speedup will be). This is because `pl.scan_csv` doesn't read the file. Instead, it creates a future. By using a lazy query, only the part of the file that is necessary actually gets read in. This potentially saves a lot of time for very large files and it even allows to work with files too large to fit in memory.\n\nLazy evaluation also allows the query optimizer to combine operations where possible, very much the way compiled languages work.\n\nTo evaluate the future and get a result, we use the `collect` method.\n\n:::{.note}\n\nNote that Polars also has a `pl.read_csv` function if you want to use eager evaluation.\n\n:::\n\nPolars: 2, pandas: 0\n\n:::{.hnote}\n\nPandas is trying to fight back: v 2.0 came with optional Arrow support instead of NumPy, then [it became the default engine](https://dataalgo.medium.com/pandas-2-0-ditches-numpy-for-pyarrow-what-you-need-to-know-cbba4cb60249), but performance remains way below that of Polars (e.g. in [DataCamp benchmarks](https://www.datacamp.com/tutorial/high-performance-data-manipulation-in-python-pandas2-vs-polars), [official benchmarks](https://pola.rs/posts/benchmarks/), many blog posts for [whole scripts](https://medium.com/@asimandia/benchmarking-performance-polars-vs-vaex-vs-pandas-f1c889dccc12) or [individual tasks](https://medium.com/cuenex/pandas-2-0-vs-polars-the-ultimate-battle-a378eb75d6d1)).\n\n:::\n\n:::{.info}\n\n**Comparison with other frameworks**\n\nComparisons between Polars and distributed (Dask, Ray, Spark) or GPU (RAPIDS) libraries aren't the most pertinent since they can be used in *combination with* Polars and the benefits can thus be combined.\n\nIt only makes sense to compare Polars with other libraries occupying the same \"niche\" such as pandas or Vaex.\n\nFor [Vaex](https://github.com/vaexio/vaex), [some benchmark found it twice slower](https://medium.com/@asimandia/benchmarking-performance-polars-vs-vaex-vs-pandas-f1c889dccc12), but this could have changed with recent developments.\n\nOne framework performing better than Polars in some benchmarks is [datatable](https://github.com/h2oai/datatable) (derived from the R package [data.table](https://cran.r-project.org/web/packages/data.table/index.html)), but it hasn't been developed for a year—a sharp contrast with the fast development of Polars.\n\n:::\n\n## Table visualization\n\nWhile pandas comes with internal capabilities [to make publication ready tables](https://pandas.pydata.org/docs/user_guide/style.html), Polars [integrates very well](https://posit-dev.github.io/great-tables/blog/polars-styling/) with [great-tables](https://github.com/posit-dev/great-tables) to achieve the same goal.\n\n",
    "supporting": [
      "polars_pandas_files"
    ],
    "filters": [],
    "includes": {}
  }
}