{
  "hash": "3739137762c35765855c170829e0dd23",
  "result": {
    "markdown": "---\ntitle: Modules, packages, and libraries\nauthor: Marie-Hélène Burle\n---\n\n:::{.box}\n\n**Running Python**\n\nFor this workshop, you can either use your own machine or our temporary JupyterHub.\n\n:::{.note}\n\nTo access our JupyterHub, you will need a username and password that I will give you during the workshop.\n\n:::\n\n[This page](jh_instructions.qmd){target=\"_blank\"} provides instructions on how to access our JupyterHub.\n\n:::\n\n## Definitions\n\n\"Modules\" are Python files containing reusable code (e.g. functions, constants, utilities).\n\n\"Packages\" are collections of modules.\n\n\"Libraries\", technically, are collections of packages, although \"packages\" and \"libraries\" are often used loosely and interchangeably in Python.\n\n## The standard library\n\nPython comes with a [standard library](https://docs.python.org/3/library/index.html#library-index). As soon as you launch the program, you can access part of the standard library such as the [built-in functions](https://docs.python.org/3/library/functions.html) and [built-in constants](https://docs.python.org/3/library/constants.html):\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ntype(3)    # type is a built-in function\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nint\n```\n:::\n:::\n\n\nMost of the standard library however is held in [several thematic modules](https://docs.python.org/3/py-modindex.html). Each module contains additional functions, constants, and facilities. Before you can use them, you need to load them into your session.\n\n### Example: the [os](https://docs.python.org/3/library/os.html#module-os) module\n\nThe [os](https://docs.python.org/3/library/os.html#module-os) module contains the function `getcwd` returning the path of the current working directory as a string.\n\nThis function cannot be used directly:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ngetcwd()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'getcwd' is not defined\n```\n:::\n:::\n\n\nIn order to access it, you have several options:\n\n- Load the module, then access the function as a method of the module:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport os\nos.getcwd()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'/home/marie/parvus/prog/mint/python'\n```\n:::\n:::\n\n\n:::{.note}\n\nYou can create an alias for the module:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport os as o\no.getcwd()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'/home/marie/parvus/prog/mint/python'\n```\n:::\n:::\n\n\nWhile it is a little silly for a module with such a short name, it is very convenient with modules of longer names.\n\n:::\n\n- Import the function directly:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfrom os import getcwd\ngetcwd()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n'/home/marie/parvus/prog/mint/python'\n```\n:::\n:::\n\n\n:::{.note}\n\nYou can get help on a module, but only after you have loaded it into your session:\n\n```{.python}\nhelp(os)\n```\n\n```\nHelp on module os:\n\nNAME\n    os - OS routines for NT or Posix depending on what system we're on.\n\nMODULE REFERENCE\n    https://docs.python.org/3.10/library/os.html\n\n    The following documentation is automatically generated from the Python\n    source files.  It may be incomplete, incorrect or include features that\n    are considered implementation detail and may vary between Python\n    implementations.  When in doubt, consult the module reference at the\n    location listed above.\n\t\n...\t\n```\n\n:::\n\n## Installing external packages\n\nYou can install external packages containing additional functions, constants, and utilities to extend the capabilities of Python.\n\nThe [Python Package Index](https://pypi.org/) is a public repository of open source packages contributed by users.\n\nInstallation of packages can be done via [pip](https://pip.pypa.io/en/stable/):\n\n```{.bash}\npip install --no-index --upgrade pip\npython -m pip install <package>\n```\n\nOn your local machine, particularly if you are on Windows and want to install a complex software stack, [conda](https://packaging.python.org/en/latest/key_projects/#conda) can makes things easy by installing from the [Anaconda Distribution](https://docs.anaconda.com/anaconda/). **This is however never what you want to do when using the Alliance clusters.**\n\nOn the clusters, you always want to:\n\n1. create a virtual environment,\n2. install packages in it with `pip`.\n\n## Virtual environments\n\nInstead of installing packages system wide or for your user, you can create a semi-isolated Python environment in which you install the packages needed for a particular project. This makes reproducibility and collaboration easier. It also helps handle dependency conflicts.\n\n\n\n## Installing packages on the clusters\n\nOn the Alliance clusters, you should install packages inside a virtual environment.\n\nFirst, you need to load the Python module\n\nSee which Python modules are available:\n\n```{.bash}\nmodule spider python\n```\n\nSee how to install one module:\n\n:::{.example}\n\nExample:\n\n:::\n\n```{.bash}\nmodule spider python/3.10.2\n```\n\nLoad the required dependencies (first) and the module:\n\n```{.bash}\nmodule load StdEnv/2020 python/3.10.2\n```\n\nYou can check that the modules were loaded with:\n\n```{.bash}\nmodule list\n```\n\nAnd verify the Python version with:\n\n```{.bash}\npython --version\n```\n\n",
    "supporting": [
      "packages_files"
    ],
    "filters": [],
    "includes": {}
  }
}