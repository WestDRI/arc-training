{
  "hash": "9d0296a4b38b2d2712b5d5c89c52d8d3",
  "result": {
    "markdown": "---\ntitle: \"Python: the basics\"\nauthor: Marie-Hélène Burle\n---\n\n## Running Python\n\nFor this workshop, you can either use your own machine or our temporary JupyterHub.\n\n:::{.note}\n\nTo access our JupyterHub, you will need a username and password that I will give you during the workshop.\n\n:::\n\n[This page](jh_instructions.qmd){target=\"_blank\"} provides instructions on how to access our JupyterHub.\n\n## Help and documentation\n\nYou can access the internal Python documentation thanks to the `help` function:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nhelp(max)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on built-in function max in module builtins:\n\nmax(...)\n    max(iterable, *[, default=obj, key=func]) -> value\n    max(arg1, arg2, *args, *[, key=func]) -> value\n    \n    With a single iterable argument, return its biggest item. The\n    default keyword-only argument specifies an object to return if\n    the provided iterable is empty.\n    With two or more arguments, return the largest argument.\n\n```\n:::\n:::\n\n\n:::{.note}\n\nIn Jupyter, you can also use `?max` or `max?`.\n\n:::\n\n## Syntax\n\nCommands can often written one per line, but you can write multiple commands on the same line with the separator `;`:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\na = 2.0; a\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n2.0\n```\n:::\n:::\n\n\nTabs or 4 spaces (the number of spaces can be customized in many IDEs) have a syntactic meaning in Python and are not just for human readability:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfor i in [1, 2]:\nprint(i)\n```\n\n::: {.cell-output .cell-output-error}\n```\nIndentationError: expected an indented block after 'for' statement on line 1 (1970439420.py, line 2)\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfor i in [1, 2]:\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n```\n:::\n:::\n\n\n:::{.note}\n\nIDEs and good text editors can indent the code automatically.\n\n:::\n\nComments (snippets of text for human consumption and ignored by Python) are marked by `#`:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# This is a full line comment\n\na         # This is an inline comment\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n2.0\n```\n:::\n:::\n\n\n[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length)—the style guide for Python code—suggests a maximum of 72 characters per line for comments. Try to keep comments to the point and spread them over multiple lines if they are too long.\n\n## Creating and deleting objects\n\n### Assignment\n\nThe assignment statement `=` binds a name and a value to create an [object](https://en.wikipedia.org/wiki/Object_(computer_science)) ([variable](https://en.wikipedia.org/wiki/Variable_(computer_science)), [data structure](https://en.wikipedia.org/wiki/Data_structure), [function](https://en.wikipedia.org/wiki/Function_(computer_programming)), or [method](https://en.wikipedia.org/wiki/Method_(computer_programming))).\n\n:::{.example}\n\nFor instance, we can bind the name `a` and the value `1` to create the variable `a`:\n\n:::\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\na = 1\n```\n:::\n\n\nYou can define multiple objects at once (here variables), assigning them the same value:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\na = b = 10\nprint(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10 10\n```\n:::\n:::\n\n\n... or different values:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\na, b = 1, 2\nprint(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2\n```\n:::\n:::\n\n\n### Choosing names\n\nMake sure not to use the names of [built-in functions and types](https://docs.python.org/3/library/functions.html).\n\n### Deleting objects\n\nDeletion of the names can be done with the `del` statement:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nprint(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndel a, b\na\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'a' is not defined\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nb\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'b' is not defined\n```\n:::\n:::\n\n\nThe Python garbage collector automatically removes values without names from memory.\n\n## Data types\n\nPython is [dynamically-typed](https://en.wikipedia.org/wiki/Type_system#DYNAMIC): variables are bound to typed objects, but they can be dynamically reallocated to objects of different types.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nprint(type(52))\nprint(type(52.0))\nprint(type('52'))\n\nvar = 2.3\ntype1 = type(var)\nvar = \"This is a string.\"\ntype2 = type(var)\n\ntype1, type2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'int'>\n<class 'float'>\n<class 'str'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n(float, str)\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWhat is the final value of the variable `b` in the following code?\n\n:::\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\na = \"left\"\nb = a\na = \"right\"\n```\n:::\n\n\n## Quotes\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nprint(\"Jason's age in three years:\", age)  # Note that we have to use double quotes here\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'age' is not defined\n```\n:::\n:::\n\n\n## Basic operations\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nage += 3                                   # Another syntax for: age = age + 3\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'age' is not defined\n```\n:::\n:::\n\n\n",
    "supporting": [
      "basics_files"
    ],
    "filters": [],
    "includes": {}
  }
}