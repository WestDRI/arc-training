{
  "hash": "cb2ec1b822f555c833df13096a958938",
  "result": {
    "markdown": "---\ntitle: \"Python: the basics\"\nauthor: Marie-Hélène Burle\n---\n\n## About Python\n\nPython is a hugely popular interpreted language with a simple, easily readable syntax and a large collection of external packages.\n\nIt was created by Dutch programmer [Guido van Rossum](https://en.wikipedia.org/wiki/Guido_van_Rossum) in the 80s, with a launch in 1989. Since the start of the [PYPL PopularitY of Programming Language index](https://pypl.github.io/PYPL.html) (based on the number of tutorial searches on Google), its popularity has steadily gone up, reaching the number one place in 2018.\n\n## Help and documentation\n\n### Functions\n\nYou can access the internal Python documentation on a function thanks to the `help` function:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nhelp(max)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on built-in function max in module builtins:\n\nmax(...)\n    max(iterable, *[, default=obj, key=func]) -> value\n    max(arg1, arg2, *args, *[, key=func]) -> value\n    \n    With a single iterable argument, return its biggest item. The\n    default keyword-only argument specifies an object to return if\n    the provided iterable is empty.\n    With two or more arguments, return the largest argument.\n\n```\n:::\n:::\n\n\n:::{.note}\n\nIn Jupyter, you can also use `?max` or `max?`.\n\n:::\n\nAlternatively, you can print the `__doc__` method of the function:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nprint(max.__doc__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmax(iterable, *[, default=obj, key=func]) -> value\nmax(arg1, arg2, *args, *[, key=func]) -> value\n\nWith a single iterable argument, return its biggest item. The\ndefault keyword-only argument specifies an object to return if\nthe provided iterable is empty.\nWith two or more arguments, return the largest argument.\n```\n:::\n:::\n\n\n### Methods of object types\n\nSome methods belong to specific objects types (e.g. lists have a method called `append`).\n\nIn those cases, `help(<method>)` won't work.\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nhelp(append)\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'append' is not defined\n```\n:::\n:::\n\n\nWhat you need to run instead is `help(<object>.<method>)`.\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nhelp(list.append)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on method_descriptor:\n\nappend(self, object, /)\n    Append object to the end of the list.\n\n```\n:::\n:::\n\n\n## Syntax\n\nCommands are usually written one per line, but you can write multiple commands on the same line with the separator `;`:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\na = 2.0; a\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n2.0\n```\n:::\n:::\n\n\nTabs or 4 spaces (the number of spaces can be customized in many IDEs) have a syntactic meaning in Python and are not just for human readability:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Incorrect code\nfor i in [1, 2]:\nprint(i)\n```\n\n::: {.cell-output .cell-output-error}\n```\nIndentationError: expected an indented block after 'for' statement on line 2 (1993980772.py, line 3)\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Correct code\nfor i in [1, 2]:\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n```\n:::\n:::\n\n\n:::{.note}\n\nIDEs and good text editors can indent the code automatically.\n\n:::\n\nComments (snippets of text for human consumption and ignored by Python) are marked by `#`:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# This is a full-line comment\n\na         # This is an inline comment\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n2.0\n```\n:::\n:::\n\n\n[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length)—the style guide for Python code—suggests a maximum of 72 characters per line for comments. Try to keep comments to the point and spread them over multiple lines if they are too long.\n\n## Creating and deleting objects\n\n### Assignment\n\nThe assignment statement `=` binds a name (a reference) and a value to create an [object](https://en.wikipedia.org/wiki/Object_(computer_science)) ([variable](https://en.wikipedia.org/wiki/Variable_(computer_science)), [data structure](https://en.wikipedia.org/wiki/Data_structure), [function](https://en.wikipedia.org/wiki/Function_(computer_programming)), or [method](https://en.wikipedia.org/wiki/Method_(computer_programming))).\n\n:::{.example}\n\nFor instance, we can bind the name `a` and the value `1` to create the variable `a`:\n\n:::\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\na = 1\n```\n:::\n\n\nYou can define multiple objects at once (here variables), assigning them the same value:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\na = b = 10\nprint(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10 10\n```\n:::\n:::\n\n\n... or different values:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\na, b = 1, 2\nprint(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\na = 1\nb = a\na = 2\n```\n:::\n\n\nWhat do you think the value of `b` is now?\n\n:::\n\n### Choosing names\n\nWhile I am using `a` and `b` a lot in this workshop (since the code has no other purpose than to demo the language itself), in your scripts you should use meaningful names (e.g. `survival`, `age`, `year`, `species`, `temperature`). It will make reading the code this much easier.\n\nMake sure not to use the names of [built-in functions](https://docs.python.org/3/library/functions.html) or [built-in constants](https://docs.python.org/3/library/constants.html).\n\n### Deleting objects\n\nDeletion of the names can be done with the `del` statement:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nvar = 3\nvar\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n3\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndel var\nvar\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'var' is not defined\n```\n:::\n:::\n\n\nThe Python garbage collector automatically removes values with no names bound to them from memory.\n\n## Data types\n\nPython comes with multiple [built-in types](https://docs.python.org/3/library/stdtypes.html).\n\n:::{.example}\n\nExamples (non exhaustive):\n\n:::\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ntype(1), type(1.0), type('1'), type(3+2j), type(True)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n(int, float, str, complex, bool)\n```\n:::\n:::\n\n\n:::{.note}\n\n`int` = integer \\\n`float` = floating point number \\\n`complex` = complex number \\\n`str` = string \\\n`bool` = Boolean\n\n:::\n\nPython is [dynamically-typed](https://en.wikipedia.org/wiki/Type_system#DYNAMIC): names do not have types, but they are bound to typed values and they can be bound over time to values of different types.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nvar = 2.3\ntype1 = type(var)\nvar = \"A string.\"\ntype2 = type(var)\n\ntype1, type2\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n(float, str)\n```\n:::\n:::\n\n\n## Quotes\n\nPairs of single and double quotes are used to create strings. [PEP 8](https://peps.python.org/pep-0008/#maximum-line-length) does not recommend one style over the other. It does suggest however that once you have chosen a style, you stick to it to make scripts consistent.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n\"This is a string.\"\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n'This is a string.'\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ntype(\"This is a string.\")\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nstr\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n'This is also a string.'\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n'This is also a string.'\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ntype('This is also a string.')\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nstr\n```\n:::\n:::\n\n\nApostrophes and textual quotes interfere with Python quotes. In these cases, use the opposite style to avoid any problem:\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# This doesn't work\n'This string isn't easy'\n```\n\n::: {.cell-output .cell-output-error}\n```\nSyntaxError: unterminated string literal (detected at line 2) (368933316.py, line 2)\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n# This is good\n\"This string isn't easy\"\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n\"This string isn't easy\"\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n# This doesn't work\n\"He said: \"this is a problem.\"\"\n```\n\n::: {.cell-output .cell-output-error}\n```\nSyntaxError: invalid syntax (466663664.py, line 2)\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# This is good\n'He said: \"this is a problem.\"'\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n'He said: \"this is a problem.\"'\n```\n:::\n:::\n\n\nSometimes, neither option works and you have to escape some of the quotes with `\\`:\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n# This doesn't work\n\"He said: \"this string isn't easy\"\"\n```\n\n::: {.cell-output .cell-output-error}\n```\nSyntaxError: unterminated string literal (detected at line 2) (392662328.py, line 2)\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n# This doesn't work either\n'He said: \"this string isn't easy\"'\n```\n\n::: {.cell-output .cell-output-error}\n```\nSyntaxError: unterminated string literal (detected at line 2) (521375870.py, line 2)\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n# You can use double quotes and escape double quotes in the string\n\"He said: \\\"this string isn't easy\\\"\"\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n'He said: \"this string isn\\'t easy\"'\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\n# Or you can use single quotes and escape single quotes in the string\n'He said: \"this string isn\\'t easy\"'\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n'He said: \"this string isn\\'t easy\"'\n```\n:::\n:::\n\n\n## Basic operations\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\n3 + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n5\n```\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\n3.0 - 2.0\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n1.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\n10 / 2\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n5.0\n```\n:::\n:::\n\n\n:::{.note}\n\nNotice how the result can be of a different type\n\n:::\n\nVariables can be used in operations:\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\na = 3\na + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n5\n```\n:::\n:::\n\n\n`a = a + 10` can be replaced by the more elegant:\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\na += 10\na\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n13\n```\n:::\n:::\n\n\n",
    "supporting": [
      "basics_files"
    ],
    "filters": [],
    "includes": {}
  }
}