{
  "hash": "bf34760bae6d17a2144b908bd03cef13",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Syntax\naliases:\n  - basics.html\n  - intro_intro.html\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nFirst, let's cover some basics of the Python syntax.\n\n:::\n\n## Commands\n\nShort commands are usually written one per line:\n\n::: {#2797820e .cell execution_count=2}\n``` {.python .cell-code}\na = 2.0\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.0\n```\n:::\n:::\n\n\nbut you can write multiple commands on the same line with the semi-colon separator:\n\n::: {#b673fb81 .cell execution_count=3}\n``` {.python .cell-code}\na = 2.0; print(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.0\n```\n:::\n:::\n\n\nSome commands (e.g. function definitions, for loops, if else statements) span over multiple lines. The first line starts normally, but subsequent lines are indented to mark that they are part of the same command.\n\n**This indentation—one tab or a series of spaces (often 4 spaces, but the number can be customized in many IDEs)—has a syntactic meaning in Python and is not just for human readability:**\n\n::: {#77702734 .cell execution_count=4}\n``` {.python .cell-code}\n# Incorrect code\nfor i in [1, 2]:\nprint(i)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[3]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">print(i)</span>\n<span class=\"ansi-bright-white-fg\">    ^</span>\n<span class=\"ansi-bright-red-fg\">IndentationError</span><span class=\"ansi-bright-red-fg\">:</span> expected an indented block after 'for' statement on line 2\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#eddb38bb .cell execution_count=5}\n``` {.python .cell-code}\n# Correct code\nfor i in [1, 2]:\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n```\n:::\n:::\n\n\n:::{.note}\n\nIDEs and good text editors indent code automatically.\n\n:::\n\n## Comments\n\nComments (snippets of text for human consumption and ignored by the Python interpreter) are marked by the hashtag:\n\n::: {#7549f6a2 .cell execution_count=6}\n``` {.python .cell-code}\n# This is a full-line comment\n\nprint(a)         # This is an inline comment\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.0\n```\n:::\n:::\n\n\n:::{.note}\n\n[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length)—the style guide for Python code—suggests a maximum of 72 characters per line for comments. Try to keep comments to the point and spread them over multiple lines if they are too long.\n\n:::\n\n## Basic operations\n\n::: {#990b45c2 .cell execution_count=7}\n``` {.python .cell-code}\n3 + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n5\n```\n:::\n:::\n\n\n::: {#212650dc .cell execution_count=8}\n``` {.python .cell-code}\n3.0 - 2.0\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n1.0\n```\n:::\n:::\n\n\n::: {#ff88e41b .cell execution_count=9}\n``` {.python .cell-code}\n10 / 2\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n5.0\n```\n:::\n:::\n\n\n:::{.note}\n\nNotice how the result can be of a different type.\n\n:::\n\nVariables can be used in operations:\n\n::: {#210366dd .cell execution_count=10}\n``` {.python .cell-code}\na = 3\na + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n5\n```\n:::\n:::\n\n\n`a = a + 10` can be replaced by the more elegant:\n\n::: {#6e3b7e0a .cell execution_count=11}\n``` {.python .cell-code}\na += 10\na\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n13\n```\n:::\n:::\n\n\n",
    "supporting": [
      "intro_syntax_files"
    ],
    "filters": [],
    "includes": {}
  }
}