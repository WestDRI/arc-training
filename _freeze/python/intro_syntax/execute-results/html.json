{
  "hash": "47d882f57d1a60945eec7a8be1024206",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Syntax\naliases:\n  - basics.html\n  - intro_intro.html\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nFirst, let's cover some basics of the Python syntax.\n\n:::\n\n## Commands\n\nShort commands are usually written one per line:\n\n::: {#d6b2451a .cell execution_count=1}\n``` {.python .cell-code}\na = 2.0\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.0\n```\n:::\n:::\n\n\nbut you can write multiple commands on the same line with the semi-colon separator:\n\n::: {#262e1d09 .cell execution_count=2}\n``` {.python .cell-code}\na = 2.0; print(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.0\n```\n:::\n:::\n\n\n:::{.notenoit}\n\nIn a Python shell or when using Jupyter, you can omit the `print` function if you want to return a result directly (this is not true in [functions definitions](intro_functions)).\n\nSo the above could be run as:\n\n::: {#08b911a2 .cell execution_count=3}\n``` {.python .cell-code}\na = 2.0\na\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n2.0\n```\n:::\n:::\n\n\nand\n\n::: {#2a743514 .cell execution_count=4}\n``` {.python .cell-code}\na = 2.0; a\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n2.0\n```\n:::\n:::\n\n\nBe careful though that if you are running a script (i.e. you write this code in a text file with a `.py` extension and execute it by running `python <your-script>.py` in the command line), nothing will get printed with this method and you have to explicitly use the `print` function.\n\n:::\n\nSome commands (e.g. function definitions, for loops, if else statements) span over multiple lines. The first line starts normally, but subsequent lines are indented to mark that they are part of the same command.\n\n**This indentation—one tab or a series of spaces (often 4 spaces, but the number can be customized in many IDEs)—has a syntactic meaning in Python and is not just for human readability:**\n\n::: {#3e34b00b .cell execution_count=5}\n``` {.python .cell-code}\n# Incorrect code\nfor i in [1, 2]:\nprint(i)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[5]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">print(i)</span>\n<span class=\"ansi-bright-white-fg\">    ^</span>\n<span class=\"ansi-bright-red-fg\">IndentationError</span><span class=\"ansi-bright-red-fg\">:</span> expected an indented block after 'for' statement on line 2\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#15a33685 .cell execution_count=6}\n``` {.python .cell-code}\n# Correct code\nfor i in [1, 2]:\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n```\n:::\n:::\n\n\n:::{.note}\n\nIDEs and good text editors indent code automatically.\n\n:::\n\n## Comments\n\nComments (snippets of text for human consumption and ignored by the Python interpreter) are marked by the hashtag:\n\n::: {#24b8880e .cell execution_count=7}\n``` {.python .cell-code}\n# This is a full-line comment\n\nprint(a)         # This is an inline comment\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.0\n```\n:::\n:::\n\n\n:::{.note}\n\n[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length)—the style guide for Python code—suggests a maximum of 72 characters per line for comments. Try to keep comments to the point and spread them over multiple lines if they are too long.\n\n:::\n\n## Basic operations\n\n::: {#7841018c .cell execution_count=8}\n``` {.python .cell-code}\nprint(3 + 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n```\n:::\n:::\n\n\n::: {#dafac410 .cell execution_count=9}\n``` {.python .cell-code}\nprint(3.0 - 2.0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.0\n```\n:::\n:::\n\n\n::: {#09835e0b .cell execution_count=10}\n``` {.python .cell-code}\nprint(10 / 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5.0\n```\n:::\n:::\n\n\n:::{.note}\n\nNotice how the result can be of a different type.\n\n:::\n\nVariables can be used in operations:\n\n::: {#590daa65 .cell execution_count=11}\n``` {.python .cell-code}\na = 3\nprint(a + 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n```\n:::\n:::\n\n\n`a = a + 10` can be replaced by the more elegant:\n\n::: {#b388c55b .cell execution_count=12}\n``` {.python .cell-code}\na += 10\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n13\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nTransform the following code:\n\n```{.python}\na = a * 2\nprint(a)\n```\n\nby following these rules:\n\n- turn the code as a one-liner,\n- add a comment to it,\n- replace the operation with a more elegant form.\n\n:::\n\n## Quotes\n\nPairs of single and double quotes are used to create strings.\n\n:::{.note}\n\n[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length) does not recommend one style over the other. It does suggest however that once you have chosen a style, you stick to it to make scripts consistent.\n\n:::\n\n::: {#72d873ad .cell execution_count=13}\n``` {.python .cell-code}\n\"This is a string.\"\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n'This is a string.'\n```\n:::\n:::\n\n\n::: {#6678470b .cell execution_count=14}\n``` {.python .cell-code}\ntype(\"This is a string.\")\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nstr\n```\n:::\n:::\n\n\n::: {#2fb1a2a3 .cell execution_count=15}\n``` {.python .cell-code}\n'This is also a string.'\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n'This is also a string.'\n```\n:::\n:::\n\n\n::: {#69a8cc38 .cell execution_count=16}\n``` {.python .cell-code}\ntype('This is also a string.')\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nstr\n```\n:::\n:::\n\n\nApostrophes and textual quotes interfere with Python quotes. In these cases, use the opposite style to avoid any problem:\n\n::: {#61ac0bb4 .cell execution_count=17}\n``` {.python .cell-code}\n# This doesn't work\n'This string isn't easy'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[17]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">'This string isn't easy'</span>\n<span class=\"ansi-bright-white-fg\">                           ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> unterminated string literal (detected at line 2)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#04b07635 .cell execution_count=18}\n``` {.python .cell-code}\n# This is good\n\"This string isn't easy\"\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n\"This string isn't easy\"\n```\n:::\n:::\n\n\n::: {#9c94d732 .cell execution_count=19}\n``` {.python .cell-code}\n# This doesn't work\n\"He said: \"this is a problem.\"\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[19]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">\"He said: \"this is a problem.\"\"</span>\n<span class=\"ansi-bright-white-fg\">               ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> invalid syntax\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a53c016e .cell execution_count=20}\n``` {.python .cell-code}\n# This is good\n'He said: \"this is a problem.\"'\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n'He said: \"this is a problem.\"'\n```\n:::\n:::\n\n\nSometimes, neither option works and you have to escape some of the quotes with `\\`:\n\n::: {#3e0fc3a1 .cell execution_count=21}\n``` {.python .cell-code}\n# This doesn't work\n\"He said: \"this string isn't easy\"\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[21]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">\"He said: \"this string isn't easy\"\"</span>\n<span class=\"ansi-bright-white-fg\">                              ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> unterminated string literal (detected at line 2)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#8e3662a2 .cell execution_count=22}\n``` {.python .cell-code}\n# This doesn't work either\n'He said: \"this string isn't easy\"'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[22]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">'He said: \"this string isn't easy\"'</span>\n<span class=\"ansi-bright-white-fg\">                                     ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> unterminated string literal (detected at line 2)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f8c5cae4 .cell execution_count=23}\n``` {.python .cell-code}\n# You can use double quotes and escape double quotes in the string\n\"He said: \\\"this string isn't easy\\\"\"\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n'He said: \"this string isn\\'t easy\"'\n```\n:::\n:::\n\n\n::: {#f99dac94 .cell execution_count=24}\n``` {.python .cell-code}\n# Or you can use single quotes and escape single quotes in the string\n'He said: \"this string isn\\'t easy\"'\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n'He said: \"this string isn\\'t easy\"'\n```\n:::\n:::\n\n\n",
    "supporting": [
      "intro_syntax_files"
    ],
    "filters": [],
    "includes": {}
  }
}