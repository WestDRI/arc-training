{
  "hash": "5dea6fffbd4b1c91757bc6bcb082b673",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Text processing\nauthor: Marie-Hélène Burle\n---\n\n\n\n\n:::{.def}\n\nIn this section, we will use the [TextBlob package](https://textblob.readthedocs.io/en/stable/index.html) for part of speech tagging and basic tokenization.\n\n:::\n\n:::{.callout-note collapse=\"true\"}\n\n## Necessary code from previous sessions\n\nHere is the necessary code from the previous session, stripped to the minimum:\n\n::: {#c997f9f0 .cell execution_count=1}\n``` {.python .cell-code}\n# Load packages\nimport requests\nimport pymupdf\n\n# Download the data\nurl = \"https://funnyengwish.wordpress.com/wp-content/uploads/2017/05/pratchett_terry_wyrd_sisters_-_royallib_ru.pdf\"\nresponse = requests.get(url)\n\n# Extract data from pdf\ndata = response.content\ndoc = pymupdf.Document(stream=data)\n\n# Create text from first pdf page\npage1 = doc[0].get_text()\n```\n:::\n\n\n:::\n\n## TextBlob\n\n[TextBlob](https://textblob.readthedocs.io/en/stable/index.html) is the NLP package that we will use in this course for tagging, tokenization, normalization, and sentiment analysis.\n\nWe first need to load it in our session:\n\n::: {#767596fc .cell execution_count=2}\n``` {.python .cell-code}\nfrom textblob import TextBlob\n```\n:::\n\n\nBefore we can use TextBlob on our text, we need to convert the `page1` string into a `TextBlob` object:\n\n::: {#be5cd40b .cell execution_count=3}\n``` {.python .cell-code}\ntext = TextBlob(page1)\ntype(text)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\ntextblob.blob.TextBlob\n```\n:::\n:::\n\n\n## Part of speech tagging\n\n[Part of speech tagging](https://en.wikipedia.org/wiki/Part-of-speech_tagging) attributes [parts of speech (POS)](https://en.wikipedia.org/wiki/Part_of_speech) tags to each word of a text.\n\nYou can do this simply by using the `tags` property on a TextBlob object: `text.tags`. Because there are a lot of words in the first pdf page, this would create a very long output.\n\nThe result is a list:\n\n::: {#af71f3d8 .cell execution_count=4}\n``` {.python .cell-code}\ntype(text.tags)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nlist\n```\n:::\n:::\n\n\nAnd each element of the list is a tuple:\n\n::: {#c16fadbb .cell execution_count=5}\n``` {.python .cell-code}\ntype(text.tags[0])\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\ntuple\n```\n:::\n:::\n\n\nWe don't have to print the full list. Let's only print the first 20 tuples:\n\n::: {#bf7ce11c .cell execution_count=6}\n``` {.python .cell-code}\ntext.tags[:20]\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n[('Terry', 'NNP'),\n ('Pratchett', 'NNP'),\n ('Wyrd', 'NNP'),\n ('Sisters', 'NNP'),\n ('Starring', 'VBG'),\n ('Three', 'NNP'),\n ('Witches', 'NNP'),\n ('also', 'RB'),\n ('kings', 'NNS'),\n ('daggers', 'NNS'),\n ('crowns', 'NNS'),\n ('storms', 'NNS'),\n ('dwarfs', 'NN'),\n ('cats', 'NNS'),\n ('ghosts', 'NNS'),\n ('spectres', 'NNS'),\n ('apes', 'NNS'),\n ('bandits', 'NNS'),\n ('demons', 'NNS'),\n ('forests', 'NNS')]\n```\n:::\n:::\n\n\n:::{.callout-note collapse=\"true\"}\n\n## [Tagset from the University of Pennsylvania](https://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html) as reference\n\n| Tag | Description|\n|---|---|\n| CC | Coordinating conjunction |\n| CD | Cardinal number |\n| DT | Determiner |\n| EX | Existential there |\n| FW | Foreign word |\n| IN | Preposition or subordinating conjunction |\n| JJ | Adjective |\n| JJR | Adjective, comparative |\n| JJS | Adjective, superlative |\n| LS | List item marker |\n| MD | Modal |\n| NN | Noun, singular or mass |\n| NNS | Noun, plural |\n| NNP | Proper noun, singular |\n| NNPS | Proper noun, plural |\n| PDT | Predeterminer |\n| POS | Possessive ending |\n| PRP | Personal pronoun |\n| PRP$ | Possessive pronoun |\n| RB | Adverb |\n| RBR | Adverb, comparative |\n| RBS | Adverb, superlative |\n| RP | Particle |\n| SYM | Symbol |\n| TO | to |\n| UH | Interjection |\n| VB | Verb, base form |\n| VBD | Verb, past tense |\n| VBG | Verb, gerund or present participle |\n| VBN | Verb, past participle |\n| VBP | Verb, non-3rd person singular present |\n| VBZ | Verb, 3rd person singular present |\n| WDT | Wh-determiner |\n| WP | Wh-pronoun |\n| WP$ | Possessive wh-pronoun |\n| WRB | Wh-adverb |\n\n:::\n\n## Noun phrases extraction\n\n[Noun phrases](https://en.wikipedia.org/wiki/Noun_phrase) can be extracted with the `noun_phrases` property:\n\n::: {#fc67e4d0 .cell execution_count=7}\n``` {.python .cell-code}\nprint(text.noun_phrases)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['terry pratchett wyrd sisters', 'starring', 'witches', 'drivers alarums', 'lightning', 'inefficient assassin', 'thunder', 'elemental storm', 'furze bushes', \"weasel 's eye\", 'eldritch voice', 'ordinary tones', 'fathomless deeps', 'space swims', 'star turtle', \"a'tuin\", 'giant elephants', 'discworld', 'tiny sun', 'moon spin', 'exactly', 'possibly', 'creator', 'usual business', 'axial inclination', 'rotational velocities', 'vicious games', 'achieve transcendence', 'straight', 'oblivion', \"god 's idea\", 'snakes', 'ladders', 'magic', 'discworld', '– magic', 'ramtop', 'frozen lands', 'hub', 'lengthy archipelago', 'warm seas', 'rim', 'raw', 'magic crackles', 'ramtops', 'ramtops', 'rocks', 'big chance', 'useful work', 'small oak trees', 'big climates', 'good storm', 'effective projection']\n```\n:::\n:::\n\n\nThe output is a `WordList` object:\n\n::: {#5bc56b9b .cell execution_count=8}\n``` {.python .cell-code}\ntype(text.noun_phrases)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\ntextblob.blob.WordList\n```\n:::\n:::\n\n\n## Tokenization\n\n### Words\n\nTextBlob allows to extract words easily with the `words` attribute:\n\n::: {#3ecca244 .cell execution_count=9}\n``` {.python .cell-code}\nprint(text.words)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Terry', 'Pratchett', 'Wyrd', 'Sisters', 'Starring', 'Three', 'Witches', 'also', 'kings', 'daggers', 'crowns', 'storms', 'dwarfs', 'cats', 'ghosts', 'spectres', 'apes', 'bandits', 'demons', 'forests', 'heirs', 'jesters', 'tortures', 'trolls', 'turntables', 'general', 'rejoicing', 'and', 'drivers', 'alarums', 'The', 'wind', 'howled', 'Lightning', 'stabbed', 'at', 'the', 'earth', 'erratically', 'like', 'an', 'inefficient', 'assassin', 'Thunder', 'rolled', 'back', 'and', 'forth', 'across', 'the', 'dark', 'rain-lashed', 'hills', 'The', 'night', 'was', 'as', 'black', 'as', 'the', 'inside', 'of', 'a', 'cat', 'It', 'was', 'the', 'kind', 'of', 'night', 'you', 'could', 'believe', 'on', 'which', 'gods', 'moved', 'men', 'as', 'though', 'they', 'were', 'pawns', 'on', 'the', 'chessboard', 'of', 'fate', 'In', 'the', 'middle', 'of', 'this', 'elemental', 'storm', 'a', 'fire', 'gleamed', 'among', 'the', 'dripping', 'furze', 'bushes', 'like', 'the', 'madness', 'in', 'a', 'weasel', \"'s\", 'eye', 'It', 'illuminated', 'three', 'hunched', 'figures', 'As', 'the', 'cauldron', 'bubbled', 'an', 'eldritch', 'voice', 'shrieked', \"'When\", 'shall', 'we', 'three', 'meet', 'again', 'There', 'was', 'a', 'pause', 'Finally', 'another', 'voice', 'said', 'in', 'far', 'more', 'ordinary', 'tones', \"'Well\", 'I', 'can', 'do', 'next', 'Tuesday', 'Through', 'the', 'fathomless', 'deeps', 'of', 'space', 'swims', 'the', 'star', 'turtle', 'Great', \"A'Tuin\", 'bearing', 'on', 'its', 'back', 'the', 'four', 'giant', 'elephants', 'who', 'carry', 'on', 'their', 'shoulders', 'the', 'mass', 'of', 'the', 'Discworld', 'A', 'tiny', 'sun', 'and', 'moon', 'spin', 'around', 'them', 'on', 'a', 'complicated', 'orbit', 'to', 'induce', 'seasons', 'so', 'probably', 'nowhere', 'else', 'in', 'the', 'multiverse', 'is', 'it', 'sometimes', 'necessary', 'for', 'an', 'elephant', 'to', 'cock', 'a', 'leg', 'to', 'allow', 'the', 'sun', 'to', 'go', 'past', 'Exactly', 'why', 'this', 'should', 'be', 'may', 'never', 'be', 'known', 'Possibly', 'the', 'Creator', 'of', 'the', 'universe', 'got', 'bored', 'with', 'all', 'the', 'usual', 'business', 'of', 'axial', 'inclination', 'albedos', 'and', 'rotational', 'velocities', 'and', 'decided', 'to', 'have', 'a', 'bit', 'of', 'fun', 'for', 'once', 'It', 'would', 'be', 'a', 'pretty', 'good', 'bet', 'that', 'the', 'gods', 'of', 'a', 'world', 'like', 'this', 'probably', 'do', 'not', 'play', 'chess', 'and', 'indeed', 'this', 'is', 'the', 'case', 'In', 'fact', 'no', 'gods', 'anywhere', 'play', 'chess', 'They', 'have', \"n't\", 'got', 'the', 'imagination', 'Gods', 'prefer', 'simple', 'vicious', 'games', 'where', 'you', 'Do', 'Not', 'Achieve', 'Transcendence', 'but', 'Go', 'Straight', 'To', 'Oblivion', 'a', 'key', 'to', 'the', 'understanding', 'of', 'all', 'religion', 'is', 'that', 'a', 'god', \"'s\", 'idea', 'of', 'amusement', 'is', 'Snakes', 'and', 'Ladders', 'with', 'greased', 'rungs', 'Magic', 'glues', 'the', 'Discworld', 'together', '–', 'magic', 'generated', 'by', 'the', 'turning', 'of', 'the', 'world', 'itself', 'magic', 'wound', 'like', 'silk', 'out', 'of', 'the', 'underlying', 'structure', 'of', 'existence', 'to', 'suture', 'the', 'wounds', 'of', 'reality', 'A', 'lot', 'of', 'it', 'ends', 'up', 'in', 'the', 'Ramtop', 'Mountains', 'which', 'stretch', 'from', 'the', 'frozen', 'lands', 'near', 'the', 'Hub', 'all', 'the', 'way', 'via', 'a', 'lengthy', 'archipelago', 'to', 'the', 'warm', 'seas', 'which', 'flow', 'endlessly', 'into', 'space', 'over', 'the', 'Rim', 'Raw', 'magic', 'crackles', 'invisibly', 'from', 'peak', 'to', 'peak', 'and', 'earths', 'itself', 'in', 'the', 'mountains', 'It', 'is', 'the', 'Ramtops', 'that', 'supply', 'the', 'world', 'with', 'most', 'of', 'its', 'witches', 'and', 'wizards', 'In', 'the', 'Ramtops', 'the', 'leaves', 'on', 'the', 'trees', 'move', 'even', 'when', 'there', 'is', 'no', 'breeze', 'Rocks', 'go', 'for', 'a', 'stroll', 'of', 'an', 'evening', 'Even', 'the', 'land', 'at', 'times', 'seems', 'alive', 'At', 'times', 'so', 'does', 'the', 'sky', 'The', 'storm', 'was', 'really', 'giving', 'it', 'everything', 'it', 'had', 'This', 'was', 'its', 'big', 'chance', 'It', 'had', 'spent', 'years', 'hanging', 'around', 'the', 'provinces', 'putting', 'in', 'some', 'useful', 'work', 'as', 'a', 'squall', 'building', 'up', 'experience', 'making', 'contacts', 'occasionally', 'leaping', 'out', 'on', 'unsuspecting', 'shepherds', 'or', 'blasting', 'quite', 'small', 'oak', 'trees', 'Now', 'an', 'opening', 'in', 'the', 'weather', 'had', 'given', 'it', 'an', 'opportunity', 'to', 'strut', 'its', 'hour', 'and', 'it', 'was', 'building', 'up', 'its', 'role', 'in', 'the', 'hope', 'of', 'being', 'spotted', 'by', 'one', 'of', 'the', 'big', 'climates', 'It', 'was', 'a', 'good', 'storm', 'There', 'was', 'quite', 'effective', 'projection', 'and', 'passion', 'there', 'and', 'critics', 'agreed', 'that', 'if', 'it', 'would', 'only', 'learn', 'to', 'control', 'its', 'thunder', 'it', 'would', 'be', 'in', 'years', 'to', 'come', 'a', 'storm', 'to', 'watch', 'The', 'woods', 'roared', 'their', 'applause', 'and', 'were', 'full', 'of', 'mists', 'and', 'flying', 'leaves']\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nHow many words are there in the first pdf page of Wyrd Sisters?\n\n:::\n\n### Sentences\n\nExtracting sentences is just as easy with the `sentences` attribute.\n\nLet's extract the first 10 sentences:\n\n::: {#c58e822b .cell execution_count=10}\n``` {.python .cell-code}\ntext.sentences[:10]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n[Sentence(\" \n Terry Pratchett \n  \n Wyrd Sisters \n  \n (Starring Three Witches, also kings, daggers, crowns, storms, dwarfs, cats, ghosts, spectres, \n apes, bandits, demons, forests, heirs, jesters, tortures, trolls, turntables, general rejoicing and \n drivers alarums.)\"),\n Sentence(\"The wind howled.\"),\n Sentence(\"Lightning stabbed at the earth erratically, like an inefficient assassin.\"),\n Sentence(\"Thunder rolled back and forth across the dark, rain-lashed hills.\"),\n Sentence(\"The night was as black as the inside of a cat.\"),\n Sentence(\"It was the kind of night, you could believe, on \n which gods moved men as though they were pawns on the chessboard of fate.\"),\n Sentence(\"In the middle of this \n elemental storm a fire gleamed among the dripping furze bushes like the madness in a weasel's eye.\"),\n Sentence(\"It illuminated three hunched figures.\"),\n Sentence(\"As the cauldron bubbled an eldritch voice shrieked: 'When \n shall we three meet again?'\"),\n Sentence(\"There was a pause.\")]\n```\n:::\n:::\n\n\nThe output is however quite ugly. We could make this a lot more readable by printing each sentence separated by a blank line:\n\n::: {#a40e857b .cell execution_count=11}\n``` {.python .cell-code}\nfor s in text.sentences[:10]:\n    print(s)\n    print(\"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n \nTerry Pratchett \n \nWyrd Sisters \n \n(Starring Three Witches, also kings, daggers, crowns, storms, dwarfs, cats, ghosts, spectres, \napes, bandits, demons, forests, heirs, jesters, tortures, trolls, turntables, general rejoicing and \ndrivers alarums.)\n\n\nThe wind howled.\n\n\nLightning stabbed at the earth erratically, like an inefficient assassin.\n\n\nThunder rolled back and forth across the dark, rain-lashed hills.\n\n\nThe night was as black as the inside of a cat.\n\n\nIt was the kind of night, you could believe, on \nwhich gods moved men as though they were pawns on the chessboard of fate.\n\n\nIn the middle of this \nelemental storm a fire gleamed among the dripping furze bushes like the madness in a weasel's eye.\n\n\nIt illuminated three hunched figures.\n\n\nAs the cauldron bubbled an eldritch voice shrieked: 'When \nshall we three meet again?'\n\n\nThere was a pause.\n\n\n```\n:::\n:::\n\n\n:::{.note}\n\nIn Python strings (as in many other languages), `\"\\n\"` represents a new line.\n\n:::\n\nOr you could add lines of hyphens between the sentences:\n\n::: {#790e5019 .cell execution_count=12}\n``` {.python .cell-code}\nfor s in text.sentences[:10]:\n    print(s)\n    print(\"-\" * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n \nTerry Pratchett \n \nWyrd Sisters \n \n(Starring Three Witches, also kings, daggers, crowns, storms, dwarfs, cats, ghosts, spectres, \napes, bandits, demons, forests, heirs, jesters, tortures, trolls, turntables, general rejoicing and \ndrivers alarums.)\n----------------------------------------------------------------------------------------------------\nThe wind howled.\n----------------------------------------------------------------------------------------------------\nLightning stabbed at the earth erratically, like an inefficient assassin.\n----------------------------------------------------------------------------------------------------\nThunder rolled back and forth across the dark, rain-lashed hills.\n----------------------------------------------------------------------------------------------------\nThe night was as black as the inside of a cat.\n----------------------------------------------------------------------------------------------------\nIt was the kind of night, you could believe, on \nwhich gods moved men as though they were pawns on the chessboard of fate.\n----------------------------------------------------------------------------------------------------\nIn the middle of this \nelemental storm a fire gleamed among the dripping furze bushes like the madness in a weasel's eye.\n----------------------------------------------------------------------------------------------------\nIt illuminated three hunched figures.\n----------------------------------------------------------------------------------------------------\nAs the cauldron bubbled an eldritch voice shrieked: 'When \nshall we three meet again?'\n----------------------------------------------------------------------------------------------------\nThere was a pause.\n----------------------------------------------------------------------------------------------------\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n- What is the type of `text.sentences`? \\\n- Could you print just the 5^th^ sentence? \\\n- Just the last sentence?\n\n:::\n\n## Word counts\n\nWe already saw that we can extract words with the `words` attribute. Now, we can add the `count` method to get the frequency of specific words.\n\n::: {#dce02d24 .cell execution_count=13}\n``` {.python .cell-code}\ntext.words.count(\"gods\")\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n4\n```\n:::\n:::\n\n\n",
    "supporting": [
      "nlp_processing_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}