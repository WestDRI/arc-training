{
  "hash": "497a3e52d72eeaf9a85c4d82534dbee3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Python basics\naliases:\n  - basics.html\nauthor: Marie-Hélène Burle\n---\n\n## Syntax\n\nShort commands are usually written one per line:\n\n::: {#a08f7b01 .cell execution_count=1}\n``` {.python .cell-code}\na = 2.0\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.0\n```\n:::\n:::\n\n\nbut you can write multiple commands on the same line with the semi-colon separator:\n\n::: {#779366aa .cell execution_count=2}\n``` {.python .cell-code}\na = 2.0; print(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.0\n```\n:::\n:::\n\n\nSome commands (e.g. function definitions, for loops, if else statements) span over multiple lines. The first line starts normally, but subsequent lines are indented to mark that they are part of the same command.\n\n**This indentation—one tab or a series of spaces (often 4 spaces, but the number can be customized in many IDEs)—has a syntactic meaning in Python and is not just for human readability:**\n\n::: {#84a9497c .cell execution_count=3}\n``` {.python .cell-code}\n# Incorrect code\nfor i in [1, 2]:\nprint(i)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[3]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">print(i)</span>\n<span class=\"ansi-bright-white-fg\">    ^</span>\n<span class=\"ansi-bright-red-fg\">IndentationError</span><span class=\"ansi-bright-red-fg\">:</span> expected an indented block after 'for' statement on line 2\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2f0ea578 .cell execution_count=4}\n``` {.python .cell-code}\n# Correct code\nfor i in [1, 2]:\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n```\n:::\n:::\n\n\n:::{.note}\n\nIDEs and good text editors indent code automatically.\n\n:::\n\n## Comments\n\nComments (snippets of text for human consumption and ignored by the Python interpreter) are marked by the hashtag:\n\n::: {#76e020ad .cell execution_count=5}\n``` {.python .cell-code}\n# This is a full-line comment\n\nprint(a)         # This is an inline comment\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.0\n```\n:::\n:::\n\n\n:::{.note}\n\n[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length)—the style guide for Python code—suggests a maximum of 72 characters per line for comments. Try to keep comments to the point and spread them over multiple lines if they are too long.\n\n:::\n\n## Creating and deleting objects\n\n### Assignment\n\nThe assignment statement (`=`) binds a name (a reference) and a value to create an [object](https://en.wikipedia.org/wiki/Object_(computer_science)) ([variable](https://en.wikipedia.org/wiki/Variable_(computer_science)), [data structure](https://en.wikipedia.org/wiki/Data_structure), [function](https://en.wikipedia.org/wiki/Function_(computer_programming)), or [method](https://en.wikipedia.org/wiki/Method_(computer_programming))).\n\n:::{.example}\n\nFor instance, we can bind the name `a` and the value `1` to create the variable `a`:\n\n:::\n\n::: {#1f83f212 .cell execution_count=6}\n``` {.python .cell-code}\na = 1\n```\n:::\n\n\nYou can define multiple objects at once, assigning them the same value:\n\n::: {#5a9b2b01 .cell execution_count=7}\n``` {.python .cell-code}\na = b = 10\nprint(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10 10\n```\n:::\n:::\n\n\n... or different values:\n\n::: {#da4006ce .cell execution_count=8}\n``` {.python .cell-code}\na, b = 1, 2\nprint(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n::: {#93ec8a23 .cell execution_count=9}\n``` {.python .cell-code}\na = 1\nb = a\na = 2\n```\n:::\n\n\nWhat do you think the value of `b` is now?\n\n:::\n\n### Choosing names\n\nWhile I am using `a` and `b` a lot in this workshop (since the code has no other purpose than to demo the language itself), in your scripts you should use meaningful names (e.g. `survival`, `age`, `year`, `species`, `temperature`). It will make reading the code this much easier.\n\nMake sure not to use the names of [built-in functions](https://docs.python.org/3/library/functions.html) or [built-in constants](https://docs.python.org/3/library/constants.html).\n\n### Deleting objects\n\nDeletion of the names can be done with the `del` statement:\n\n::: {#e41b5496 .cell execution_count=10}\n``` {.python .cell-code}\nvar = 3\nvar\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n3\n```\n:::\n:::\n\n\n::: {#1c1248ea .cell execution_count=11}\n``` {.python .cell-code}\ndel var\nvar\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[11]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-bright-green-fg\">      1</span> <span style=\"color:rgb(95,215,255)\">del</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">var</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">2</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">var</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'var' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe Python garbage collector automatically removes values with no names bound to them from memory.\n\n## Data types\n\nPython comes with multiple [built-in types](https://docs.python.org/3/library/stdtypes.html).\n\n:::{.example}\n\nExamples (non exhaustive):\n\n:::\n\n::: {#07cc94e4 .cell execution_count=12}\n``` {.python .cell-code}\ntype(1), type(1.0), type('1'), type(3+2j), type(True), type(sum)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n(int, float, str, complex, bool, builtin_function_or_method)\n```\n:::\n:::\n\n\n:::{.note}\n\n`int` = integer \\\n`float` = floating point number \\\n`complex` = complex number \\\n`str` = string \\\n`bool` = Boolean\n\n:::\n\nPython is [dynamically-typed](https://en.wikipedia.org/wiki/Type_system#DYNAMIC): names do not have types, but they are bound to typed values and they can be bound over time to values of different types.\n\n::: {#133f7062 .cell execution_count=13}\n``` {.python .cell-code}\nvar = 2.3\ntype1 = type(var)\nvar = \"A string.\"\ntype2 = type(var)\n\ntype1, type2\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n(float, str)\n```\n:::\n:::\n\n\nYou can also convert the type of some values:\n\n::: {#8f4f6f95 .cell execution_count=14}\n``` {.python .cell-code}\n'4', type('4'), int('4'), type(int('4'))\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n('4', str, 4, int)\n```\n:::\n:::\n\n\n::: {#b6329a05 .cell execution_count=15}\n``` {.python .cell-code}\nfloat(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n3.0\n```\n:::\n:::\n\n\n::: {#c67bc900 .cell execution_count=16}\n``` {.python .cell-code}\nstr(3.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n'3.4'\n```\n:::\n:::\n\n\n::: {#26c1cf34 .cell execution_count=17}\n``` {.python .cell-code}\nbool(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#c3e35749 .cell execution_count=18}\n``` {.python .cell-code}\nbool(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#550b104d .cell execution_count=19}\n``` {.python .cell-code}\nint(True)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n1\n```\n:::\n:::\n\n\n::: {#17e192c4 .cell execution_count=20}\n``` {.python .cell-code}\nfloat(False)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n0.0\n```\n:::\n:::\n\n\nOf course, not all conversions are possible:\n\n::: {#d0e89820 .cell execution_count=21}\n``` {.python .cell-code}\nint('red')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">ValueError</span>                                Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[21]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">int</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">red</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">ValueError</span>: invalid literal for int() with base 10: 'red'</pre>\n```\n:::\n\n:::\n:::\n\n\nYou might be surprised by some of the conversions:\n\n::: {#72923390 .cell execution_count=22}\n``` {.python .cell-code}\nint(3.9)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n3\n```\n:::\n:::\n\n\n::: {#b5ecd4b7 .cell execution_count=23}\n``` {.python .cell-code}\nbool(3.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nTrue\n```\n:::\n:::\n\n\n## Quotes\n\nPairs of single and double quotes are used to create strings.\n\n:::{.note}\n\n[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length) does not recommend one style over the other. It does suggest however that once you have chosen a style, you stick to it to make scripts consistent.\n\n:::\n\n::: {#782ae837 .cell execution_count=24}\n``` {.python .cell-code}\n\"This is a string.\"\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n'This is a string.'\n```\n:::\n:::\n\n\n::: {#3a83068d .cell execution_count=25}\n``` {.python .cell-code}\ntype(\"This is a string.\")\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nstr\n```\n:::\n:::\n\n\n::: {#ea7e6866 .cell execution_count=26}\n``` {.python .cell-code}\n'This is also a string.'\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n'This is also a string.'\n```\n:::\n:::\n\n\n::: {#23b9f496 .cell execution_count=27}\n``` {.python .cell-code}\ntype('This is also a string.')\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nstr\n```\n:::\n:::\n\n\nApostrophes and textual quotes interfere with Python quotes. In these cases, use the opposite style to avoid any problem:\n\n::: {#e7817b03 .cell execution_count=28}\n``` {.python .cell-code}\n# This doesn't work\n'This string isn't easy'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[28]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">'This string isn't easy'</span>\n<span class=\"ansi-bright-white-fg\">                           ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> unterminated string literal (detected at line 2)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ea74c40c .cell execution_count=29}\n``` {.python .cell-code}\n# This is good\n\"This string isn't easy\"\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n\"This string isn't easy\"\n```\n:::\n:::\n\n\n::: {#a5aeb2e1 .cell execution_count=30}\n``` {.python .cell-code}\n# This doesn't work\n\"He said: \"this is a problem.\"\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[30]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">\"He said: \"this is a problem.\"\"</span>\n<span class=\"ansi-bright-white-fg\">               ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> invalid syntax\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#31b9e8b0 .cell execution_count=31}\n``` {.python .cell-code}\n# This is good\n'He said: \"this is a problem.\"'\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n'He said: \"this is a problem.\"'\n```\n:::\n:::\n\n\nSometimes, neither option works and you have to escape some of the quotes with `\\`:\n\n::: {#ca2de5ae .cell execution_count=32}\n``` {.python .cell-code}\n# This doesn't work\n\"He said: \"this string isn't easy\"\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[32]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">\"He said: \"this string isn't easy\"\"</span>\n<span class=\"ansi-bright-white-fg\">                              ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> unterminated string literal (detected at line 2)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9d3dffef .cell execution_count=33}\n``` {.python .cell-code}\n# This doesn't work either\n'He said: \"this string isn't easy\"'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[33]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">'He said: \"this string isn't easy\"'</span>\n<span class=\"ansi-bright-white-fg\">                                     ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> unterminated string literal (detected at line 2)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f33baf67 .cell execution_count=34}\n``` {.python .cell-code}\n# You can use double quotes and escape double quotes in the string\n\"He said: \\\"this string isn't easy\\\"\"\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n'He said: \"this string isn\\'t easy\"'\n```\n:::\n:::\n\n\n::: {#49da1e22 .cell execution_count=35}\n``` {.python .cell-code}\n# Or you can use single quotes and escape single quotes in the string\n'He said: \"this string isn\\'t easy\"'\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n'He said: \"this string isn\\'t easy\"'\n```\n:::\n:::\n\n\n## Basic operations\n\n::: {#27c5dbdf .cell execution_count=36}\n``` {.python .cell-code}\n3 + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n5\n```\n:::\n:::\n\n\n::: {#276976b4 .cell execution_count=37}\n``` {.python .cell-code}\n3.0 - 2.0\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n1.0\n```\n:::\n:::\n\n\n::: {#ecb8e69c .cell execution_count=38}\n``` {.python .cell-code}\n10 / 2\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n5.0\n```\n:::\n:::\n\n\n:::{.note}\n\nNotice how the result can be of a different type.\n\n:::\n\nVariables can be used in operations:\n\n::: {#eec9d18e .cell execution_count=39}\n``` {.python .cell-code}\na = 3\na + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n5\n```\n:::\n:::\n\n\n`a = a + 10` can be replaced by the more elegant:\n\n::: {#88b5ee83 .cell execution_count=40}\n``` {.python .cell-code}\na += 10\na\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n13\n```\n:::\n:::\n\n\n",
    "supporting": [
      "intro_basics_files"
    ],
    "filters": [],
    "includes": {}
  }
}