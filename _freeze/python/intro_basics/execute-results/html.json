{
  "hash": "a99c2395d0ec003927d7cfd4abc0859a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Python: the basics\"\naliases:\n  - basics.html\nauthor: Marie-Hélène Burle\n---\n\n## Syntax\n\nCommands are usually written one per line, but you can write multiple commands on the same line with the separator `;`:\n\n::: {#34cf204d .cell execution_count=1}\n``` {.python .cell-code}\na = 2.0; a\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n2.0\n```\n:::\n:::\n\n\nTabs or 4 spaces (the number of spaces can be customized in many IDEs) have a syntactic meaning in Python and are not just for human readability:\n\n::: {#2afcf544 .cell execution_count=2}\n``` {.python .cell-code}\n# Incorrect code\nfor i in [1, 2]:\nprint(i)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[45]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">print(i)</span>\n<span class=\"ansi-bright-white-fg\">    ^</span>\n<span class=\"ansi-bright-red-fg\">IndentationError</span><span class=\"ansi-bright-red-fg\">:</span> expected an indented block after 'for' statement on line 2\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#63d3cf20 .cell execution_count=3}\n``` {.python .cell-code}\n# Correct code\nfor i in [1, 2]:\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n```\n:::\n:::\n\n\n:::{.note}\n\nIDEs and good text editors can indent the code automatically.\n\n:::\n\nComments (snippets of text for human consumption and ignored by Python) are marked by `#`:\n\n::: {#0aa878dd .cell execution_count=4}\n``` {.python .cell-code}\n# This is a full-line comment\n\na         # This is an inline comment\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n2.0\n```\n:::\n:::\n\n\n[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length)—the style guide for Python code—suggests a maximum of 72 characters per line for comments. Try to keep comments to the point and spread them over multiple lines if they are too long.\n\n## Creating and deleting objects\n\n### Assignment\n\nThe assignment statement `=` binds a name (a reference) and a value to create an [object](https://en.wikipedia.org/wiki/Object_(computer_science)) ([variable](https://en.wikipedia.org/wiki/Variable_(computer_science)), [data structure](https://en.wikipedia.org/wiki/Data_structure), [function](https://en.wikipedia.org/wiki/Function_(computer_programming)), or [method](https://en.wikipedia.org/wiki/Method_(computer_programming))).\n\n:::{.example}\n\nFor instance, we can bind the name `a` and the value `1` to create the variable `a`:\n\n:::\n\n::: {#9b64901a .cell execution_count=5}\n``` {.python .cell-code}\na = 1\n```\n:::\n\n\nYou can define multiple objects at once (here variables), assigning them the same value:\n\n::: {#bb773af1 .cell execution_count=6}\n``` {.python .cell-code}\na = b = 10\nprint(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10 10\n```\n:::\n:::\n\n\n... or different values:\n\n::: {#f9c4280e .cell execution_count=7}\n``` {.python .cell-code}\na, b = 1, 2\nprint(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n::: {#2bf41932 .cell execution_count=8}\n``` {.python .cell-code}\na = 1\nb = a\na = 2\n```\n:::\n\n\nWhat do you think the value of `b` is now?\n\n:::\n\n### Choosing names\n\nWhile I am using `a` and `b` a lot in this workshop (since the code has no other purpose than to demo the language itself), in your scripts you should use meaningful names (e.g. `survival`, `age`, `year`, `species`, `temperature`). It will make reading the code this much easier.\n\nMake sure not to use the names of [built-in functions](https://docs.python.org/3/library/functions.html) or [built-in constants](https://docs.python.org/3/library/constants.html).\n\n### Deleting objects\n\nDeletion of the names can be done with the `del` statement:\n\n::: {#c67d0c19 .cell execution_count=9}\n``` {.python .cell-code}\nvar = 3\nvar\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n3\n```\n:::\n:::\n\n\n::: {#29ba981a .cell execution_count=10}\n``` {.python .cell-code}\ndel var\nvar\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[53]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-bright-green-fg\">      1</span> <span style=\"color:rgb(95,215,255)\">del</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">var</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">2</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">var</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'var' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe Python garbage collector automatically removes values with no names bound to them from memory.\n\n## Data types\n\nPython comes with multiple [built-in types](https://docs.python.org/3/library/stdtypes.html).\n\n:::{.example}\n\nExamples (non exhaustive):\n\n:::\n\n::: {#524c8fa4 .cell execution_count=11}\n``` {.python .cell-code}\ntype(1), type(1.0), type('1'), type(3+2j), type(True)\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\n(int, float, str, complex, bool)\n```\n:::\n:::\n\n\n:::{.note}\n\n`int` = integer \\\n`float` = floating point number \\\n`complex` = complex number \\\n`str` = string \\\n`bool` = Boolean\n\n:::\n\nPython is [dynamically-typed](https://en.wikipedia.org/wiki/Type_system#DYNAMIC): names do not have types, but they are bound to typed values and they can be bound over time to values of different types.\n\n::: {#9b258164 .cell execution_count=12}\n``` {.python .cell-code}\nvar = 2.3\ntype1 = type(var)\nvar = \"A string.\"\ntype2 = type(var)\n\ntype1, type2\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\n(float, str)\n```\n:::\n:::\n\n\nYou can also convert the type of some values:\n\n::: {#30d1a390 .cell execution_count=13}\n``` {.python .cell-code}\n'4', type('4'), int('4'), type(int('4'))\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\n('4', str, 4, int)\n```\n:::\n:::\n\n\n::: {#6b77f242 .cell execution_count=14}\n``` {.python .cell-code}\nfloat(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n3.0\n```\n:::\n:::\n\n\n::: {#f683b4e6 .cell execution_count=15}\n``` {.python .cell-code}\nstr(3.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\n'3.4'\n```\n:::\n:::\n\n\n::: {#73b5e6cb .cell execution_count=16}\n``` {.python .cell-code}\nbool(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#b71ff338 .cell execution_count=17}\n``` {.python .cell-code}\nbool(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#2792caef .cell execution_count=18}\n``` {.python .cell-code}\nint(True)\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\n1\n```\n:::\n:::\n\n\n::: {#fa27fa3e .cell execution_count=19}\n``` {.python .cell-code}\nfloat(False)\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\n0.0\n```\n:::\n:::\n\n\nOf course, not all conversions are possible:\n\n::: {#db5daadf .cell execution_count=20}\n``` {.python .cell-code}\nint('red')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">ValueError</span>                                Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[63]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">int</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">red</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">ValueError</span>: invalid literal for int() with base 10: 'red'</pre>\n```\n:::\n\n:::\n:::\n\n\nYou might be surprised by some of the conversions:\n\n::: {#570c7b57 .cell execution_count=21}\n``` {.python .cell-code}\nint(3.9)\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\n3\n```\n:::\n:::\n\n\n::: {#244f7cb4 .cell execution_count=22}\n``` {.python .cell-code}\nbool(3.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```\nTrue\n```\n:::\n:::\n\n\n## Quotes\n\nPairs of single and double quotes are used to create strings. [PEP 8](https://peps.python.org/pep-0008/#maximum-line-length) does not recommend one style over the other. It does suggest however that once you have chosen a style, you stick to it to make scripts consistent.\n\n::: {#e8e1c1b4 .cell execution_count=23}\n``` {.python .cell-code}\n\"This is a string.\"\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```\n'This is a string.'\n```\n:::\n:::\n\n\n::: {#a4e49e96 .cell execution_count=24}\n``` {.python .cell-code}\ntype(\"This is a string.\")\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\nstr\n```\n:::\n:::\n\n\n::: {#c63bb9cd .cell execution_count=25}\n``` {.python .cell-code}\n'This is also a string.'\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```\n'This is also a string.'\n```\n:::\n:::\n\n\n::: {#24611df1 .cell execution_count=26}\n``` {.python .cell-code}\ntype('This is also a string.')\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```\nstr\n```\n:::\n:::\n\n\nApostrophes and textual quotes interfere with Python quotes. In these cases, use the opposite style to avoid any problem:\n\n::: {#3affd198 .cell execution_count=27}\n``` {.python .cell-code}\n# This doesn't work\n'This string isn't easy'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[70]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">'This string isn't easy'</span>\n<span class=\"ansi-bright-white-fg\">                           ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> unterminated string literal (detected at line 2)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b8b3b86e .cell execution_count=28}\n``` {.python .cell-code}\n# This is good\n\"This string isn't easy\"\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\n\"This string isn't easy\"\n```\n:::\n:::\n\n\n::: {#406a1140 .cell execution_count=29}\n``` {.python .cell-code}\n# This doesn't work\n\"He said: \"this is a problem.\"\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[72]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">\"He said: \"this is a problem.\"\"</span>\n<span class=\"ansi-bright-white-fg\">               ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> invalid syntax\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#aa669cd8 .cell execution_count=30}\n``` {.python .cell-code}\n# This is good\n'He said: \"this is a problem.\"'\n```\n\n::: {.cell-output .cell-output-display execution_count=73}\n```\n'He said: \"this is a problem.\"'\n```\n:::\n:::\n\n\nSometimes, neither option works and you have to escape some of the quotes with `\\`:\n\n::: {#345ffd6e .cell execution_count=31}\n``` {.python .cell-code}\n# This doesn't work\n\"He said: \"this string isn't easy\"\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[74]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">\"He said: \"this string isn't easy\"\"</span>\n<span class=\"ansi-bright-white-fg\">                              ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> unterminated string literal (detected at line 2)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#7d7cefa1 .cell execution_count=32}\n``` {.python .cell-code}\n# This doesn't work either\n'He said: \"this string isn't easy\"'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[75]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">'He said: \"this string isn't easy\"'</span>\n<span class=\"ansi-bright-white-fg\">                                     ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> unterminated string literal (detected at line 2)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a532aa39 .cell execution_count=33}\n``` {.python .cell-code}\n# You can use double quotes and escape double quotes in the string\n\"He said: \\\"this string isn't easy\\\"\"\n```\n\n::: {.cell-output .cell-output-display execution_count=76}\n```\n'He said: \"this string isn\\'t easy\"'\n```\n:::\n:::\n\n\n::: {#aead6be1 .cell execution_count=34}\n``` {.python .cell-code}\n# Or you can use single quotes and escape single quotes in the string\n'He said: \"this string isn\\'t easy\"'\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```\n'He said: \"this string isn\\'t easy\"'\n```\n:::\n:::\n\n\n## Basic operations\n\n::: {#0a077188 .cell execution_count=35}\n``` {.python .cell-code}\n3 + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=78}\n```\n5\n```\n:::\n:::\n\n\n::: {#9b233c9e .cell execution_count=36}\n``` {.python .cell-code}\n3.0 - 2.0\n```\n\n::: {.cell-output .cell-output-display execution_count=79}\n```\n1.0\n```\n:::\n:::\n\n\n::: {#968a6d9c .cell execution_count=37}\n``` {.python .cell-code}\n10 / 2\n```\n\n::: {.cell-output .cell-output-display execution_count=80}\n```\n5.0\n```\n:::\n:::\n\n\n:::{.note}\n\nNotice how the result can be of a different type\n\n:::\n\nVariables can be used in operations:\n\n::: {#83a800f0 .cell execution_count=38}\n``` {.python .cell-code}\na = 3\na + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=81}\n```\n5\n```\n:::\n:::\n\n\n`a = a + 10` can be replaced by the more elegant:\n\n::: {#4beb27d2 .cell execution_count=39}\n``` {.python .cell-code}\na += 10\na\n```\n\n::: {.cell-output .cell-output-display execution_count=82}\n```\n13\n```\n:::\n:::\n\n\n",
    "supporting": [
      "intro_basics_files"
    ],
    "filters": [],
    "includes": {}
  }
}