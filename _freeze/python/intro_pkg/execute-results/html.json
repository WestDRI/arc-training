{
  "hash": "2a380a06277163c37f264e6d8106b7d7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Modules, packages, and libraries\naliases:\n  - packages.html\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nSo far, we have talked about functionality that is available whenever you launch Python. Python however comes with a lot more capabilities, some of it out of the box, some of it after you have installed third-party components.\n\nThis session covers the types of additional code that can be loaded in a Python session.\n\n:::\n\n## Definitions\n\n***Modules*** are Python files containing reusable code (e.g. functions, constants, utilities).\n\n***Packages*** are collections of modules.\n\n***Libraries***, technically, are collections of packages, although *packages* and *libraries* are often used loosely and interchangeably in Python.\n\n## The standard library\n\nPython comes with an extensive [standard library](https://docs.python.org/3/library/index.html#library-index). As soon as you launch the program, you can access part of it such as the [built-in functions](https://docs.python.org/3/library/functions.html) and [built-in constants](https://docs.python.org/3/library/constants.html):\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {#1419da0d .cell execution_count=2}\n``` {.python .cell-code}\ntype(3)    # type is a built-in function\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nint\n```\n:::\n:::\n\n\nMost of the standard library however is held in [several thematic modules](https://docs.python.org/3/py-modindex.html). Each module contains additional functions, constants, and facilities. Before you can use them, you need to load them into your session.\n\n### Example: the [math](https://docs.python.org/3/library/math.html) module\n\nThe [math](https://docs.python.org/3/library/math.html) module contains many mathematical functions and constants, including the `sqrt` function.\n\nThis function cannot be accessed directly:\n\n::: {#59fa4658 .cell execution_count=3}\n``` {.python .cell-code}\nsqrt(9)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[2]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">sqrt</span><span class=\"ansi-bright-white-fg\">(</span><span style=\"color:rgb(175,135,255)\">9</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'sqrt' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nIn order to use it, you have two options:\n\n- Load the module, then access the function as a method of the module:\n\n::: {#7439d431 .cell execution_count=4}\n``` {.python .cell-code}\nimport math\nmath.sqrt(9)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n3.0\n```\n:::\n:::\n\n\n:::{.notenoit}\n\nYou can create an alias for the module:\n\n::: {#65f768cf .cell execution_count=5}\n``` {.python .cell-code}\nimport math as m\nm.sqrt(9)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n3.0\n```\n:::\n:::\n\n\nThis is particularly convenient with modules of longer names.\n\n:::\n\n- Import the function directly:\n\n::: {#a22ac2b3 .cell execution_count=6}\n``` {.python .cell-code}\nfrom math import sqrt\nsqrt(9)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n3.0\n```\n:::\n:::\n\n\n## Installing packages on your machine\n\nYou can install external packages containing additional functions, constants, datasets, and utilities to extend the capabilities of Python.\n\nThe [Python Package Index](https://pypi.org/) is a public repository of open source packages contributed by users.\n\nInstallation of packages can be done via [pip](https://pip.pypa.io/en/stable/) or (better and much faster) with the new Python package and project manager [uv](https://docs.astral.sh/uv/).\n\nInstead of installing packages system wide or for your user, you can create a semi-isolated Python environment in which you install the packages needed for a particular project. This makes reproducibility and collaboration easier. It also helps handle dependency conflicts. It is a great practice to always use virtual environments.\n\n:::{.note}\n\nSome Linux distributions will not let you use `pip` outside a virtual environment anymore.\n\n`uv` will automatically install packages in virtual environments.\n\n:::\n\n### Traditional workflow with pip\n\n:::{.note}\n\nNote that the method with `uv` in the next section is a better (and much faster) option.\n\n:::\n\nCreate a Python virtual environment called `env`:\n\n```{.bash}\npython -m venv ~/env\n```\n\nActivate it:\n\n```{.bash}\nsource ~/env/bin/activate\n```\n\nUpdate pip:\n\n```{.bash}\npython -m pip install --upgrade pip\n```\n\nInstall packages:\n\n```{.bash}\npython -m pip install <package>\n```\n\nTo deactivate a virtual environment, run:\n\n```{.bash}\ndeactivate\n```\n\n### Modern workflow with uv\n\n[uv](https://docs.astral.sh/uv/) is an amazing new package and project manager for Python written in Rust that replaces all the old tools (`pip`, `pyenv`, `virtualenv`, `poetry`, `pipx`, etc.). It does everything very well and *very fast*.\n\nThe best approach while using `uv` is to create [projects](https://docs.astral.sh/uv/guides/projects/). In addition to a virtual environment, a project contains a TOML file with a list of dependencies (Python packages), a file setting the Python version for the project, and a lock. This is extremely convenient.\n\nCreate a new project:\n\n```{.bash}\nuv init <project-name>\n```\n\nInstall packages in the virtual environment of the project:\n\n```{.bash}\nuv add <package>\n```\n\n:::{.note}\n\nYou don't need to activate the virtual environment as long as you are using `uv` commands.\n\n:::\n\nIf you want to [launch Jupyter from a `uv` project](https://docs.astral.sh/uv/guides/integration/jupyter/), run:\n\n```{.bash}\nuv run --with jupyter jupyter lab\n```\n\nIf you already have a workflow involving `pip` that you cannot change and you still would like to use `uv`, you can use [the pip interface](https://docs.astral.sh/uv/pip/). It is not as convenient as the project approach, but it allows you to benefit from `uv` speed.\n\n:::{.note}\n\nFor more information on uv, you can have a look at [the webinar](https://mint.westdri.ca/python/wb_uv) I gave on this tool in May 2025.\n\n:::\n\n### Non-Python dependencies\n\nWhile `uv` is fantastic to handle all things Python-related (Python versions, packages, environments, projects, etc.), if you need to install a software stack involving non-Python dependencies on your local machine, you will need to use [Mamba](https://mamba.readthedocs.io/en/latest/), [conda](https://docs.conda.io/projects/conda/en/stable/), or another package manager that can handle non-Python packages.\n\n## Installing packages on the clusters\n\n[**Don't use conda or Anaconda on the Alliance clusters**](https://docs.alliancecan.ca/wiki/Anaconda/en). If you really must, do it in a container with [Apptainer](https://docs.alliancecan.ca/wiki/Apptainer).\n\nOn the Alliance clusters, install packages inside a virtual environment and use [Python wheels](https://pythonwheels.com/) whenever possible.\n\nYou can see whether a wheel is available with `avail_wheels <package>` or look at [the list of available wheels](https://docs.alliancecan.ca/wiki/Available_Python_wheels). To install from wheels instead of downloading from PyPI, add the `--no-index` flag to the install command.\n\nAdvantages of wheels:\n\n- compiled for the clusters hardware,\n- ensures no missing or conflicting dependencies,\n- much faster installation.\n\nThe workflow thus looks like:\n\n```{.bash}\npython -m venv ~/env\nsource ~/env/bin/activate\npython -m pip install --upgrade --no-index pip\npython -m pip install --no-index <package>\n```\n\n:::{.note}\n\nAt this point, `uv` is not technically supported on Alliance clusters. Some people have had success using it, others have had issues while interacting with the clusters module system.\n\n:::\n\n## Installing packages from Jupyter\n\nYou can run either of [the `pip`](#traditional-workflow-with-pip) or [`uv` commands](#modern-workflow-with-uv) from within a Jupyter notebook cell by preceding them with the IPython magic command `!` which lets it know that it is a Bash (rather than a Python) command.\n\n:::{.example}\n\nExample:\n\n:::\n\n```{.bash}\n!uv init project\n```\n\n",
    "supporting": [
      "intro_pkg_files"
    ],
    "filters": [],
    "includes": {}
  }
}