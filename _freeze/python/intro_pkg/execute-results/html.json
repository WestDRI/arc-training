{
  "hash": "cc759e3d487b4d8b8a8caf9d658de562",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Modules, packages, and libraries\naliases:\n  - packages.html\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\n\n\n:::\n\n## The standard library\n\nPython comes with a [standard library](https://docs.python.org/3/library/index.html#library-index). As soon as you launch the program, you can access part of the standard library such as the [built-in functions](https://docs.python.org/3/library/functions.html) and [built-in constants](https://docs.python.org/3/library/constants.html):\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {#bb93573f .cell execution_count=2}\n``` {.python .cell-code}\ntype(3)    # type is a built-in function\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nint\n```\n:::\n:::\n\n\nMost of the standard library however is held in [several thematic modules](https://docs.python.org/3/py-modindex.html). Each module contains additional functions, constants, and facilities. Before you can use them, you need to load them into your session.\n\n### Example: the [os](https://docs.python.org/3/library/os.html#module-os) module\n\nThe [os](https://docs.python.org/3/library/os.html#module-os) module contains the function `getcwd` returning the path of the current working directory as a string.\n\nThis function cannot be used directly:\n\n::: {#38b914a0 .cell execution_count=3}\n``` {.python .cell-code}\ngetcwd()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[2]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">getcwd</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'getcwd' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nIn order to access it, you have several options:\n\n- Load the module, then access the function as a method of the module:\n\n::: {#7de71bd1 .cell execution_count=4}\n``` {.python .cell-code}\nimport os\nos.getcwd()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'/home/marie/parvus/prog/mint/python'\n```\n:::\n:::\n\n\n:::{.note}\n\nYou can create an alias for the module:\n\n::: {#1369d814 .cell execution_count=5}\n``` {.python .cell-code}\nimport os as o\no.getcwd()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'/home/marie/parvus/prog/mint/python'\n```\n:::\n:::\n\n\nWhile it is a little silly for a module with such a short name, it is very convenient with modules of longer names.\n\n:::\n\n- Import the function directly:\n\n::: {#120d1b1c .cell execution_count=6}\n``` {.python .cell-code}\nfrom os import getcwd\ngetcwd()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n'/home/marie/parvus/prog/mint/python'\n```\n:::\n:::\n\n\n## Definitions\n\n\"Modules\" are Python files containing reusable code (e.g. functions, constants, utilities).\n\n\"Packages\" are collections of modules.\n\n\"Libraries\", technically, are collections of packages, although \"packages\" and \"libraries\" are often used loosely and interchangeably in Python.\n\n## Installing packages on your machine\n\nYou can install external packages containing additional functions, constants, and utilities to extend the capabilities of Python.\n\nThe [Python Package Index](https://pypi.org/) is a public repository of open source packages contributed by users.\n\nInstallation of packages can be done via [pip](https://pip.pypa.io/en/stable/).\n\nInstead of installing packages system wide or for your user, you can create a semi-isolated Python environment in which you install the packages needed for a particular project. This makes reproducibility and collaboration easier. It also helps handle dependency conflicts. Some Linux distributions will not let you use `pip` outside a virtual environment anymore. It is a great practice to always use virtual environments.\n\nCreate a Python virtual environment called `env`:\n\n```{.bash}\npython -m venv ~/env\n```\n\nActivate it:\n\n```{.bash}\nsource ~/env/bin/activate\n```\n\nUpdate pip:\n\n```{.bash}\npython -m pip install --upgrade pip\n```\n\nInstall packages:\n\n```{.bash}\npython -m pip install <package>\n```\n\nOn your local machine, particularly if you are on Windows and want to install a complex software stack, [conda](https://packaging.python.org/en/latest/key_projects/#conda) can makes things easy by installing from the [Anaconda Distribution](https://docs.anaconda.com/anaconda/).\n\n## Installing packages on the clusters\n\n**[Don't use conda or Anaconda on the Alliance clusters.](https://docs.alliancecan.ca/wiki/Anaconda/en)** If you really must, do it in a container with [Apptainer](https://docs.alliancecan.ca/wiki/Apptainer).\n\nOn the Alliance clusters, install packages inside a virtual environment and use [Python wheels](https://pythonwheels.com/) whenever possible.\n\nYou can see whether a wheel is available with `avail_wheels <package>` or look at [the list of available wheels](https://docs.alliancecan.ca/wiki/Available_Python_wheels). To install from wheels instead of downloading from PyPI, add the `--no-index` flag to the install command.\n\nAdvantages of wheels:\n\n- compiled for the clusters hardware,\n- ensures no missing or conflicting dependencies,\n- much faster installation.\n\nThe workflow thus looks like:\n\n```{.bash}\npython -m venv ~/env\nsource ~/env/bin/activate\npython -m pip install --upgrade --no-index pip\npython -m pip install --no-index <package>\n```\n\n",
    "supporting": [
      "intro_pkg_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}