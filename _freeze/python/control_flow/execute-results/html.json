{
  "hash": "81d3ad377a7fdec687ecdac066e699fd",
  "result": {
    "markdown": "---\ntitle: Control flow\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nControl flow statements alter the linear execution of code, allowing for one or another section of code to be executed, or for one section of code to be executed multiple times.\n\n:::\n\n## Conditionals\n\nConditionals dictate the flow of information based on predicates (statements that return `True` or `False`).\n\n:::{.example}\n\nExample predicates:\n\n:::\n\n```{.python}\n4 < 3\n2 == 4\n2 != 4\n2 in range(5)\n2 not in range(5)\n3 <= 4 and 4 > 5\n3 <= 4 and 4 > 5 and 3 != 2\n3 <= 4 or 4 > 5\n```\n\n### If statements\n\nIn the simplest case, we have:\n\n```\nif <predicate>:\n    <some action>\n```\n\nThis translates to:\n\n- If `<predicate>` evaluates to `True`, the body of the if statement gets evaluated (`<some action>` is run),\n- If `<predicate>` evaluates to `False`, nothing happens.\n\n:::{.example}\n\nExamples:\n\n:::\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nx = 3\nif x >= 0:\n    print(x, 'is positive')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3 is positive\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nx = -3\nif x >= 0:\n    print(x, 'is positive')\n```\n:::\n\n\n:::{.note}\n\nNothing gets returned since the predicate returned `False`.\n\n:::\n\n### If else statements\n\nLet's add an `else` statement so that our code also returns something when the predicate evaluates to `False`:\n\n```\nif <predicate>:\n    <some action>\nelse:\n    <some other action>\n```\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nx = -3\nif x >= 0:\n    print(x, 'is positive')\nelse:\n    print(x, 'is negative')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-3 is negative\n```\n:::\n:::\n\n\n### If elif else\n\nWe can make this even more complex with:\n\n```\nif <predicate1>:\n    <some action>\nelif <predicate2>:\n    <some other action>    \nelse:\n    <yet some other action>\n```\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nx = -3\nif x > 0:\n    print(x, 'is positive')\nelif x < 0:\n    print(x, 'is negative')\nelse:\n    print(x, 'is zero')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-3 is negative\n```\n:::\n:::\n\n\n## Loops\n\n### For loops\n\nFor loops run a set of instructions for each element of an iterable.\n\nAn iterable is any Python object cable of returning the items it contains one at a time.\n\n:::{.example}\n\nExamples of iterables:\n\n:::\n\n```{.python}\nrange(5)\n'a string is an iterable'\n[2, 'word', 4.0]\n```\n\nFor loops follow the syntax:\n\n```\nfor <iterable>:\n    <some action>\n```\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfor i in range(5):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nRemember that the indentation matters in Python. \\\nWhat do you think that this will print?\n\n```{.python}\nfor i in range(5):\n    print(i)\nprint(i)\n```\n\n:::\n\nStrings are iterables too, so this works:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfor i in 'a string is an iterable':\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na\n \ns\nt\nr\ni\nn\ng\n \ni\ns\n \na\nn\n \ni\nt\ne\nr\na\nb\nl\ne\n```\n:::\n:::\n\n\nTo iterate over multiple iterables at the same time, a convenient option is to use the function `zip` which creates an iterator of tuples:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfor i, j in zip([1, 2, 3, 4], [3, 4, 5, 6]):\n    print(i + j)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n6\n8\n10\n```\n:::\n:::\n\n\n### While loops\n\nWhile loops run as long as a predicate remains true. They follow the syntax:\n\n```\nwhile <predicate>:\n    <some action>\n```\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ni = 0\nwhile i <= 10:\n    print(i)\n    i += 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n```\n:::\n:::\n\n\n",
    "supporting": [
      "control_flow_files"
    ],
    "filters": [],
    "includes": {}
  }
}