{
  "hash": "24deb956153ebe8b811ed23fa3d3fc72",
  "result": {
    "markdown": "---\ntitle: Control flow\nauthor:\n  - Alex Razoumov\n  - Marie-Hélène Burle\n---\n\n## Loops\n\n### For loops\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfor number in [2, 3, 5]:\n    print(number)          # The indentation is important!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n3\n5\n```\n:::\n:::\n\n\nThis is equivalent to:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nprint(2)\nprint(3)\nprint(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n3\n5\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWhat do you think that this will print?\n\n:::\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nfor number in [2, 3, 5]:\n    print(number)\nprint(number)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n3\n5\n5\n```\n:::\n:::\n\n\nThe loop variable could be called anything:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfor i in 'hello':\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nh\ne\nl\nl\no\n```\n:::\n:::\n\n\nUse `range` to iterate over a sequence of numbers:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfor i in range(0, 3):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n```\n:::\n:::\n\n\nLet's add numbers 1 to 10:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ntotal = 0\nfor number in range(10):\n    total += number + 1\nprint(total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n55\n```\n:::\n:::\n\n\n### While loops\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nx = 2\nwhile x > 1.0:\n    x /= 1.1\n    print(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.8181818181818181\n1.652892561983471\n1.5026296018031553\n1.366026910730141\n1.2418426461183099\n1.1289478601075542\n1.026316236461413\n0.9330147604194662\n```\n:::\n:::\n\n\n## Conditionals\n\nPython implements conditionals via `if`, `elif` (short for \"else if\") and `else`. Use an `if` statement to control\nwhether some block of code is executed or not.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nmass = 3.54\nif mass > 3.0:\n    print(mass, 'is large')  # The indentation is important!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.54 is large\n```\n:::\n:::\n\n\nLet's modify the mass:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nmass = 2.07\nif mass > 3.0:\n    print (mass, 'is large')\n```\n:::\n\n\n:::{.note}\n\nNote that we don't get any output.\n\n:::\n\nAdd an `else` statement:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nmass = 2.07\nif mass > 3.0:\n    print(mass, 'is large')\nelse:\n    print(mass, 'is small')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.07 is small\n```\n:::\n:::\n\n\nAdd an `elif` statement:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nx = 5\nif x > 0:\n    print(x, 'is positive')\nelif x < 0:\n    print(x, 'is negative')\nelse:\n    print(x, 'is zero')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5 is positive\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWhat is the problem with the following code?\n\n:::\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ngrade = 85\nif grade >= 70:\n    print('grade is C')\nelif grade >= 80:\n    print('grade is B')\nelif grade >= 90:\n    print('grade is A')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngrade is C\n```\n:::\n:::\n\n\n",
    "supporting": [
      "control_flow_files"
    ],
    "filters": [],
    "includes": {}
  }
}