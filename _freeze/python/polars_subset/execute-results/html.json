{
  "hash": "d15bb51820aa0275c7db729879242248",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Subsetting data\nauthor: Marie-Hélène Burle\n---\n\n\n\n\n:::{.def}\n\nThe syntax to subset data is very different in Polars compared to the indexing of pandas and other languages. Action verbs are used in a style very similar to that of [R's dplyr](https://cran.r-project.org/web/packages/dplyr/index.html) from [the tidyverse](https://www.tidyverse.org/).\n\n:::\n\nLet's start with the same data frame we used in the previous section:\n\n::: {#e83fd47a .cell execution_count=2}\n``` {.python .cell-code}\nimport polars as pl\n\ndf = pl.read_csv(\"https://raw.githubusercontent.com/razoumov/publish/master/jeopardy.csv\")\n\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (216_930, 7)\n┌─────────────┬──────────┬───────────┬─────────────────┬─────────┬────────────────┬────────────────┐\n│ Show Number ┆ Air Date ┆ Round     ┆ Category        ┆ Value   ┆ Question       ┆ Answer         │\n│ ---         ┆ ---      ┆ ---       ┆ ---             ┆ ---     ┆ ---            ┆ ---            │\n│ i64         ┆ str      ┆ str       ┆ str             ┆ str     ┆ str            ┆ str            │\n╞═════════════╪══════════╪═══════════╪═════════════════╪═════════╪════════════════╪════════════════╡\n│ 4680        ┆ 12/31/04 ┆ Jeopardy! ┆ HISTORY         ┆ $200    ┆ For the last 8 ┆ Copernicus     │\n│             ┆          ┆           ┆                 ┆         ┆ years of his   ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ li…            ┆                │\n│ 4680        ┆ 12/31/04 ┆ Jeopardy! ┆ ESPN's TOP 10   ┆ $200    ┆ No. 2: 1912    ┆ Jim Thorpe     │\n│             ┆          ┆           ┆ ALL-TIME        ┆         ┆ Olympian;      ┆                │\n│             ┆          ┆           ┆ ATHLETE…        ┆         ┆ football…      ┆                │\n│ 4680        ┆ 12/31/04 ┆ Jeopardy! ┆ EVERYBODY TALKS ┆ $200    ┆ The city of    ┆ Arizona        │\n│             ┆          ┆           ┆ ABOUT IT...     ┆         ┆ Yuma in this   ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ state…         ┆                │\n│ 4680        ┆ 12/31/04 ┆ Jeopardy! ┆ THE COMPANY     ┆ $200    ┆ In 1963, live  ┆ McDonald's     │\n│             ┆          ┆           ┆ LINE            ┆         ┆ on \"The Art    ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ Link…          ┆                │\n│ 4680        ┆ 12/31/04 ┆ Jeopardy! ┆ EPITAPHS &      ┆ $200    ┆ Signer of the  ┆ John Adams     │\n│             ┆          ┆           ┆ TRIBUTES        ┆         ┆ Dec. of        ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ Indep., …      ┆                │\n│ …           ┆ …        ┆ …         ┆ …               ┆ …       ┆ …              ┆ …              │\n│ 4999        ┆ 5/11/06  ┆ Double    ┆ RIDDLE ME THIS  ┆ $2,000  ┆ This Puccini   ┆ Turandot       │\n│             ┆          ┆ Jeopardy! ┆                 ┆         ┆ opera turns on ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ th…            ┆                │\n│ 4999        ┆ 5/11/06  ┆ Double    ┆ \"T\" BIRDS       ┆ $2,000  ┆ In North       ┆ a titmouse     │\n│             ┆          ┆ Jeopardy! ┆                 ┆         ┆ America this   ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ term is …      ┆                │\n│ 4999        ┆ 5/11/06  ┆ Double    ┆ AUTHORS IN      ┆ $2,000  ┆ In Penny Lane, ┆ Clive Barker   │\n│             ┆          ┆ Jeopardy! ┆ THEIR YOUTH     ┆         ┆ where this     ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ \"Hel…          ┆                │\n│ 4999        ┆ 5/11/06  ┆ Double    ┆ QUOTATIONS      ┆ $2,000  ┆ From Ft. Sill, ┆ Geronimo       │\n│             ┆          ┆ Jeopardy! ┆                 ┆         ┆ Okla. he made  ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ t…             ┆                │\n│ 4999        ┆ 5/11/06  ┆ Final     ┆ HISTORIC NAMES  ┆ None    ┆ A silent movie ┆ Grigori        │\n│             ┆          ┆ Jeopardy! ┆                 ┆         ┆ title includes ┆ Alexandrovich  │\n│             ┆          ┆           ┆                 ┆         ┆ …              ┆ Potemkin       │\n└─────────────┴──────────┴───────────┴─────────────────┴─────────┴────────────────┴────────────────┘\n```\n:::\n:::\n\n\n## Selecting rows\n\nYou can select rows based on any expression that evaluates to a Boolean with `filter`:\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {#f879b544 .cell execution_count=3}\n``` {.python .cell-code}\nfrom datetime import date\n\ndf_sub = df.filter(\n    pl.col(\"Air Date\") == \"5/8/09\"\n    )\n\nprint(df_sub)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (61, 7)\n┌─────────────┬──────────┬───────────┬─────────────────┬─────────┬────────────────┬────────────────┐\n│ Show Number ┆ Air Date ┆ Round     ┆ Category        ┆ Value   ┆ Question       ┆ Answer         │\n│ ---         ┆ ---      ┆ ---       ┆ ---             ┆ ---     ┆ ---            ┆ ---            │\n│ i64         ┆ str      ┆ str       ┆ str             ┆ str     ┆ str            ┆ str            │\n╞═════════════╪══════════╪═══════════╪═════════════════╪═════════╪════════════════╪════════════════╡\n│ 5690        ┆ 5/8/09   ┆ Jeopardy! ┆ OLD FOLKS IN    ┆ $200    ┆ goop.com is a  ┆ Gwyneth        │\n│             ┆          ┆           ┆ THEIR 30s       ┆         ┆ lifestyles     ┆ Paltrow        │\n│             ┆          ┆           ┆                 ┆         ┆ websi…         ┆                │\n│ 5690        ┆ 5/8/09   ┆ Jeopardy! ┆ MOVIES & TV     ┆ $200    ┆ On March 19,   ┆ Jay Leno       │\n│             ┆          ┆           ┆                 ┆         ┆ 2009 he said,  ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ \"I'…           ┆                │\n│ 5690        ┆ 5/8/09   ┆ Jeopardy! ┆ A STATE OF      ┆ $200    ┆ Baylor,        ┆ Texas          │\n│             ┆          ┆           ┆ COLLEGE-NESS    ┆         ┆ Stephen F.     ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ Austin, Ric…   ┆                │\n│ 5690        ┆ 5/8/09   ┆ Jeopardy! ┆ ANIMAL          ┆ $200    ┆ Synonym for    ┆ a pride        │\n│             ┆          ┆           ┆ COLLECTIVE      ┆         ┆ dignity that's ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ the…           ┆                │\n│ 5690        ┆ 5/8/09   ┆ Jeopardy! ┆ I'D RATHER BE   ┆ $200    ┆ If you're a    ┆ a bunny hill   │\n│             ┆          ┆           ┆ SKIING          ┆         ┆ beginner, you  ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ migh…          ┆                │\n│ …           ┆ …        ┆ …         ┆ …               ┆ …       ┆ …              ┆ …              │\n│ 5690        ┆ 5/8/09   ┆ Double    ┆ ANATOMY         ┆ $2,000  ┆ The pons       ┆ the cerebellum │\n│             ┆          ┆ Jeopardy! ┆                 ┆         ┆ connects the 2 ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ hemisp…        ┆                │\n│ 5690        ┆ 5/8/09   ┆ Double    ┆ MATHEM-ATTACK!  ┆ $2,000  ┆ (<a href=\"http ┆ volume         │\n│             ┆          ┆ Jeopardy! ┆                 ┆         ┆ ://www.j-archi ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ ve…            ┆                │\n│ 5690        ┆ 5/8/09   ┆ Double    ┆ NAME THE DECADE ┆ $2,000  ┆ Man first      ┆ the 1910s      │\n│             ┆          ┆ Jeopardy! ┆                 ┆         ┆ reaches the    ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ South Po…      ┆                │\n│ 5690        ┆ 5/8/09   ┆ Double    ┆ WORD ORIGINS    ┆ $2,000  ┆ A type of ear  ┆ cochlear       │\n│             ┆          ┆ Jeopardy! ┆                 ┆         ┆ implant to     ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ help …         ┆                │\n│ 5690        ┆ 5/8/09   ┆ Final     ┆ EUROPEAN        ┆ None    ┆ He filed for   ┆ Henry VIII     │\n│             ┆          ┆ Jeopardy! ┆ HISTORY         ┆         ┆ divorce citing ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ Le…            ┆                │\n└─────────────┴──────────┴───────────┴─────────────────┴─────────┴────────────────┴────────────────┘\n```\n:::\n:::\n\n\nYou can combine conditions:\n\n::: {#76088633 .cell execution_count=4}\n``` {.python .cell-code}\ndf_sub = df.filter(\n    pl.col(\"Air Date\") == \"5/8/09\",\n    pl.col(\"Round\") != \"Double Jeopardy!\"    \n    )\n\nprint(df_sub)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (31, 7)\n┌─────────────┬──────────┬───────────┬─────────────────┬─────────┬────────────────┬────────────────┐\n│ Show Number ┆ Air Date ┆ Round     ┆ Category        ┆ Value   ┆ Question       ┆ Answer         │\n│ ---         ┆ ---      ┆ ---       ┆ ---             ┆ ---     ┆ ---            ┆ ---            │\n│ i64         ┆ str      ┆ str       ┆ str             ┆ str     ┆ str            ┆ str            │\n╞═════════════╪══════════╪═══════════╪═════════════════╪═════════╪════════════════╪════════════════╡\n│ 5690        ┆ 5/8/09   ┆ Jeopardy! ┆ OLD FOLKS IN    ┆ $200    ┆ goop.com is a  ┆ Gwyneth        │\n│             ┆          ┆           ┆ THEIR 30s       ┆         ┆ lifestyles     ┆ Paltrow        │\n│             ┆          ┆           ┆                 ┆         ┆ websi…         ┆                │\n│ 5690        ┆ 5/8/09   ┆ Jeopardy! ┆ MOVIES & TV     ┆ $200    ┆ On March 19,   ┆ Jay Leno       │\n│             ┆          ┆           ┆                 ┆         ┆ 2009 he said,  ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ \"I'…           ┆                │\n│ 5690        ┆ 5/8/09   ┆ Jeopardy! ┆ A STATE OF      ┆ $200    ┆ Baylor,        ┆ Texas          │\n│             ┆          ┆           ┆ COLLEGE-NESS    ┆         ┆ Stephen F.     ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ Austin, Ric…   ┆                │\n│ 5690        ┆ 5/8/09   ┆ Jeopardy! ┆ ANIMAL          ┆ $200    ┆ Synonym for    ┆ a pride        │\n│             ┆          ┆           ┆ COLLECTIVE      ┆         ┆ dignity that's ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ the…           ┆                │\n│ 5690        ┆ 5/8/09   ┆ Jeopardy! ┆ I'D RATHER BE   ┆ $200    ┆ If you're a    ┆ a bunny hill   │\n│             ┆          ┆           ┆ SKIING          ┆         ┆ beginner, you  ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ migh…          ┆                │\n│ …           ┆ …        ┆ …         ┆ …               ┆ …       ┆ …              ┆ …              │\n│ 5690        ┆ 5/8/09   ┆ Jeopardy! ┆ A STATE OF      ┆ $1,000  ┆ Grambling,     ┆ Louisiana      │\n│             ┆          ┆           ┆ COLLEGE-NESS    ┆         ┆ McNeese State, ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ Sout…          ┆                │\n│ 5690        ┆ 5/8/09   ┆ Jeopardy! ┆ ANIMAL          ┆ $1,000  ┆ A flock of     ┆ crows          │\n│             ┆          ┆           ┆ COLLECTIVE      ┆         ┆ these black    ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ birds i…       ┆                │\n│ 5690        ┆ 5/8/09   ┆ Jeopardy! ┆ I'D RATHER BE   ┆ $1,000  ┆ Bumps or       ┆ moguls         │\n│             ┆          ┆           ┆ SKIING          ┆         ┆ mounds of snow ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ that a…        ┆                │\n│ 5690        ┆ 5/8/09   ┆ Jeopardy! ┆ PARLEZ VOUS?    ┆ $1,000  ┆ \"Huitieme\" is  ┆ eighth         │\n│             ┆          ┆           ┆                 ┆         ┆ French for     ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ this …         ┆                │\n│ 5690        ┆ 5/8/09   ┆ Final     ┆ EUROPEAN        ┆ None    ┆ He filed for   ┆ Henry VIII     │\n│             ┆          ┆ Jeopardy! ┆ HISTORY         ┆         ┆ divorce citing ┆                │\n│             ┆          ┆           ┆                 ┆         ┆ Le…            ┆                │\n└─────────────┴──────────┴───────────┴─────────────────┴─────────┴────────────────┴────────────────┘\n```\n:::\n:::\n\n\n## Selecting columns\n\nTo select columns (variables), you use `select`:\n\n::: {#2f054123 .cell execution_count=5}\n``` {.python .cell-code}\ndf_sub = df.select(\n    pl.col(\"Show Number\"),\n    pl.col(\"Category\")\n    )\n\nprint(df_sub)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (216_930, 2)\n┌─────────────┬─────────────────────────────────┐\n│ Show Number ┆ Category                        │\n│ ---         ┆ ---                             │\n│ i64         ┆ str                             │\n╞═════════════╪═════════════════════════════════╡\n│ 4680        ┆ HISTORY                         │\n│ 4680        ┆ ESPN's TOP 10 ALL-TIME ATHLETE… │\n│ 4680        ┆ EVERYBODY TALKS ABOUT IT...     │\n│ 4680        ┆ THE COMPANY LINE                │\n│ 4680        ┆ EPITAPHS & TRIBUTES             │\n│ …           ┆ …                               │\n│ 4999        ┆ RIDDLE ME THIS                  │\n│ 4999        ┆ \"T\" BIRDS                       │\n│ 4999        ┆ AUTHORS IN THEIR YOUTH          │\n│ 4999        ┆ QUOTATIONS                      │\n│ 4999        ┆ HISTORIC NAMES                  │\n└─────────────┴─────────────────────────────────┘\n```\n:::\n:::\n\n\n## Creating new columns with output of expressions\n\nThe jeopardy dataset is made mostly of String variables. Let's use another one here: the [now archived global confirmed Covid-19 cases from John Hopkins University](https://github.com/CSSEGISandData/COVID-19):\n\n::: {#4b6735bc .cell execution_count=6}\n``` {.python .cell-code}\nurl = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\"\n\ndf = pl.read_csv(url)\n\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (289, 1_147)\n┌────────────────┬────────────────┬────────────┬───────────┬───┬────────┬────────┬────────┬────────┐\n│ Province/State ┆ Country/Region ┆ Lat        ┆ Long      ┆ … ┆ 3/6/23 ┆ 3/7/23 ┆ 3/8/23 ┆ 3/9/23 │\n│ ---            ┆ ---            ┆ ---        ┆ ---       ┆   ┆ ---    ┆ ---    ┆ ---    ┆ ---    │\n│ str            ┆ str            ┆ f64        ┆ f64       ┆   ┆ i64    ┆ i64    ┆ i64    ┆ i64    │\n╞════════════════╪════════════════╪════════════╪═══════════╪═══╪════════╪════════╪════════╪════════╡\n│ null           ┆ Afghanistan    ┆ 33.93911   ┆ 67.709953 ┆ … ┆ 209406 ┆ 209436 ┆ 209451 ┆ 209451 │\n│ null           ┆ Albania        ┆ 41.1533    ┆ 20.1683   ┆ … ┆ 334427 ┆ 334427 ┆ 334443 ┆ 334457 │\n│ null           ┆ Algeria        ┆ 28.0339    ┆ 1.6596    ┆ … ┆ 271477 ┆ 271490 ┆ 271494 ┆ 271496 │\n│ null           ┆ Andorra        ┆ 42.5063    ┆ 1.5218    ┆ … ┆ 47875  ┆ 47875  ┆ 47890  ┆ 47890  │\n│ null           ┆ Angola         ┆ -11.2027   ┆ 17.8739   ┆ … ┆ 105277 ┆ 105277 ┆ 105288 ┆ 105288 │\n│ …              ┆ …              ┆ …          ┆ …         ┆ … ┆ …      ┆ …      ┆ …      ┆ …      │\n│ null           ┆ West Bank and  ┆ 31.9522    ┆ 35.2332   ┆ … ┆ 703228 ┆ 703228 ┆ 703228 ┆ 703228 │\n│                ┆ Gaza           ┆            ┆           ┆   ┆        ┆        ┆        ┆        │\n│ null           ┆ Winter         ┆ 39.9042    ┆ 116.4074  ┆ … ┆ 535    ┆ 535    ┆ 535    ┆ 535    │\n│                ┆ Olympics 2022  ┆            ┆           ┆   ┆        ┆        ┆        ┆        │\n│ null           ┆ Yemen          ┆ 15.552727  ┆ 48.516388 ┆ … ┆ 11945  ┆ 11945  ┆ 11945  ┆ 11945  │\n│ null           ┆ Zambia         ┆ -13.133897 ┆ 27.849332 ┆ … ┆ 343135 ┆ 343135 ┆ 343135 ┆ 343135 │\n│ null           ┆ Zimbabwe       ┆ -19.015438 ┆ 29.154857 ┆ … ┆ 264127 ┆ 264127 ┆ 264276 ┆ 264276 │\n└────────────────┴────────────────┴────────────┴───────────┴───┴────────┴────────┴────────┴────────┘\n```\n:::\n:::\n\n\nTo create a new variable called `daily_avg` with the daily average of new cases, we use `select` again, but this time we add an expression:\n\n::: {#bdd1e7f5 .cell execution_count=7}\n``` {.python .cell-code}\ndf_new = df.select(\n    daily_avg=pl.col(\"3/9/23\") / 1143\n    )\n\nprint(df_new)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (289, 1)\n┌────────────┐\n│ daily_avg  │\n│ ---        │\n│ f64        │\n╞════════════╡\n│ 183.246719 │\n│ 292.613298 │\n│ 237.529309 │\n│ 41.898513  │\n│ 92.115486  │\n│ …          │\n│ 615.247594 │\n│ 0.468066   │\n│ 10.450569  │\n│ 300.205599 │\n│ 231.212598 │\n└────────────┘\n```\n:::\n:::\n\n\n:::{.note}\n\nSince the data is cumulative across dates, we took the last columns (totals cases for each row) and divided by the number of days of this dataset (total number of columns menus the four first columns).\n\n:::\n\nIf you want to keep all columns in the output, you use `with_columns`:\n\n::: {#c711102e .cell execution_count=8}\n``` {.python .cell-code}\ndf_new = df.with_columns(\n    daily_avg=pl.col(\"3/9/23\") / 1143\n    )\n\nprint(df_new)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (289, 1_148)\n┌──────────────┬──────────────┬────────────┬───────────┬───┬────────┬────────┬────────┬────────────┐\n│ Province/Sta ┆ Country/Regi ┆ Lat        ┆ Long      ┆ … ┆ 3/7/23 ┆ 3/8/23 ┆ 3/9/23 ┆ daily_avg  │\n│ te           ┆ on           ┆ ---        ┆ ---       ┆   ┆ ---    ┆ ---    ┆ ---    ┆ ---        │\n│ ---          ┆ ---          ┆ f64        ┆ f64       ┆   ┆ i64    ┆ i64    ┆ i64    ┆ f64        │\n│ str          ┆ str          ┆            ┆           ┆   ┆        ┆        ┆        ┆            │\n╞══════════════╪══════════════╪════════════╪═══════════╪═══╪════════╪════════╪════════╪════════════╡\n│ null         ┆ Afghanistan  ┆ 33.93911   ┆ 67.709953 ┆ … ┆ 209436 ┆ 209451 ┆ 209451 ┆ 183.246719 │\n│ null         ┆ Albania      ┆ 41.1533    ┆ 20.1683   ┆ … ┆ 334427 ┆ 334443 ┆ 334457 ┆ 292.613298 │\n│ null         ┆ Algeria      ┆ 28.0339    ┆ 1.6596    ┆ … ┆ 271490 ┆ 271494 ┆ 271496 ┆ 237.529309 │\n│ null         ┆ Andorra      ┆ 42.5063    ┆ 1.5218    ┆ … ┆ 47875  ┆ 47890  ┆ 47890  ┆ 41.898513  │\n│ null         ┆ Angola       ┆ -11.2027   ┆ 17.8739   ┆ … ┆ 105277 ┆ 105288 ┆ 105288 ┆ 92.115486  │\n│ …            ┆ …            ┆ …          ┆ …         ┆ … ┆ …      ┆ …      ┆ …      ┆ …          │\n│ null         ┆ West Bank    ┆ 31.9522    ┆ 35.2332   ┆ … ┆ 703228 ┆ 703228 ┆ 703228 ┆ 615.247594 │\n│              ┆ and Gaza     ┆            ┆           ┆   ┆        ┆        ┆        ┆            │\n│ null         ┆ Winter       ┆ 39.9042    ┆ 116.4074  ┆ … ┆ 535    ┆ 535    ┆ 535    ┆ 0.468066   │\n│              ┆ Olympics     ┆            ┆           ┆   ┆        ┆        ┆        ┆            │\n│              ┆ 2022         ┆            ┆           ┆   ┆        ┆        ┆        ┆            │\n│ null         ┆ Yemen        ┆ 15.552727  ┆ 48.516388 ┆ … ┆ 11945  ┆ 11945  ┆ 11945  ┆ 10.450569  │\n│ null         ┆ Zambia       ┆ -13.133897 ┆ 27.849332 ┆ … ┆ 343135 ┆ 343135 ┆ 343135 ┆ 300.205599 │\n│ null         ┆ Zimbabwe     ┆ -19.015438 ┆ 29.154857 ┆ … ┆ 264127 ┆ 264276 ┆ 264276 ┆ 231.212598 │\n└──────────────┴──────────────┴────────────┴───────────┴───┴────────┴────────┴────────┴────────────┘\n```\n:::\n:::\n\n\n:::{.note}\n\nNotice that our new variable got added as the last column of the data frame.\n\n:::\n\nIf we want to write in place, we can reassign the output to the initial data frame:\n\n::: {#d2f44173 .cell execution_count=9}\n``` {.python .cell-code}\ndf = df.with_columns(\n    daily_avg=pl.col(\"3/9/23\") / 1143\n    )\n```\n:::\n\n\n## Group by operations\n\nIn this Covid-19 dataset some countries (e.g. Australia) are split between several provinces or states. If we want the total numbers for such countries we have to group the rows by the variable `Country/Region`, then get the sum for each group.\n\nGetting the sums of the latitude and longitude wouldn't make any sense, so first we get rid of those two columns:\n\n::: {#2accb3ab .cell execution_count=10}\n``` {.python .cell-code}\ndf_clean = df.select(\n    pl.col(\"*\").exclude(\"Lat\", \"Long\")\n    )\n\nprint(df_clean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (289, 1_146)\n┌────────────────┬─────────────────┬─────────┬─────────┬───┬────────┬────────┬────────┬────────────┐\n│ Province/State ┆ Country/Region  ┆ 1/22/20 ┆ 1/23/20 ┆ … ┆ 3/7/23 ┆ 3/8/23 ┆ 3/9/23 ┆ daily_avg  │\n│ ---            ┆ ---             ┆ ---     ┆ ---     ┆   ┆ ---    ┆ ---    ┆ ---    ┆ ---        │\n│ str            ┆ str             ┆ i64     ┆ i64     ┆   ┆ i64    ┆ i64    ┆ i64    ┆ f64        │\n╞════════════════╪═════════════════╪═════════╪═════════╪═══╪════════╪════════╪════════╪════════════╡\n│ null           ┆ Afghanistan     ┆ 0       ┆ 0       ┆ … ┆ 209436 ┆ 209451 ┆ 209451 ┆ 183.246719 │\n│ null           ┆ Albania         ┆ 0       ┆ 0       ┆ … ┆ 334427 ┆ 334443 ┆ 334457 ┆ 292.613298 │\n│ null           ┆ Algeria         ┆ 0       ┆ 0       ┆ … ┆ 271490 ┆ 271494 ┆ 271496 ┆ 237.529309 │\n│ null           ┆ Andorra         ┆ 0       ┆ 0       ┆ … ┆ 47875  ┆ 47890  ┆ 47890  ┆ 41.898513  │\n│ null           ┆ Angola          ┆ 0       ┆ 0       ┆ … ┆ 105277 ┆ 105288 ┆ 105288 ┆ 92.115486  │\n│ …              ┆ …               ┆ …       ┆ …       ┆ … ┆ …      ┆ …      ┆ …      ┆ …          │\n│ null           ┆ West Bank and   ┆ 0       ┆ 0       ┆ … ┆ 703228 ┆ 703228 ┆ 703228 ┆ 615.247594 │\n│                ┆ Gaza            ┆         ┆         ┆   ┆        ┆        ┆        ┆            │\n│ null           ┆ Winter Olympics ┆ 0       ┆ 0       ┆ … ┆ 535    ┆ 535    ┆ 535    ┆ 0.468066   │\n│                ┆ 2022            ┆         ┆         ┆   ┆        ┆        ┆        ┆            │\n│ null           ┆ Yemen           ┆ 0       ┆ 0       ┆ … ┆ 11945  ┆ 11945  ┆ 11945  ┆ 10.450569  │\n│ null           ┆ Zambia          ┆ 0       ┆ 0       ┆ … ┆ 343135 ┆ 343135 ┆ 343135 ┆ 300.205599 │\n│ null           ┆ Zimbabwe        ┆ 0       ┆ 0       ┆ … ┆ 264127 ┆ 264276 ┆ 264276 ┆ 231.212598 │\n└────────────────┴─────────────────┴─────────┴─────────┴───┴────────┴────────┴────────┴────────────┘\n```\n:::\n:::\n\n\n:::{.note}\n\nThere are [many ways](https://docs.pola.rs/user-guide/expressions/column-selections/) to select columns from a data frame.\n\n:::\n\nNow we can group by and get our sums:\n\n::: {#453338ec .cell execution_count=11}\n``` {.python .cell-code}\ndf_countries = df_clean.group_by(\n    (pl.col(\"Country/Region\")).alias(\"Country totals\")\n    ).sum()\n\nprint(df_countries)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (201, 1_147)\n┌─────────────┬─────────────┬─────────────┬─────────┬───┬─────────┬─────────┬─────────┬────────────┐\n│ Country     ┆ Province/St ┆ Country/Reg ┆ 1/22/20 ┆ … ┆ 3/7/23  ┆ 3/8/23  ┆ 3/9/23  ┆ daily_avg  │\n│ totals      ┆ ate         ┆ ion         ┆ ---     ┆   ┆ ---     ┆ ---     ┆ ---     ┆ ---        │\n│ ---         ┆ ---         ┆ ---         ┆ i64     ┆   ┆ i64     ┆ i64     ┆ i64     ┆ f64        │\n│ str         ┆ str         ┆ str         ┆         ┆   ┆         ┆         ┆         ┆            │\n╞═════════════╪═════════════╪═════════════╪═════════╪═══╪═════════╪═════════╪═════════╪════════════╡\n│ Honduras    ┆ null        ┆ null        ┆ 0       ┆ … ┆ 472250  ┆ 472250  ┆ 472250  ┆ 413.167104 │\n│ Bulgaria    ┆ null        ┆ null        ┆ 0       ┆ … ┆ 1297358 ┆ 1297451 ┆ 1297523 ┆ 1135.19072 │\n│             ┆             ┆             ┆         ┆   ┆         ┆         ┆         ┆ 6          │\n│ Lithuania   ┆ null        ┆ null        ┆ 0       ┆ … ┆ 1307021 ┆ 1307448 ┆ 1307448 ┆ 1143.87401 │\n│             ┆             ┆             ┆         ┆   ┆         ┆         ┆         ┆ 6          │\n│ Yemen       ┆ null        ┆ null        ┆ 0       ┆ … ┆ 11945   ┆ 11945   ┆ 11945   ┆ 10.450569  │\n│ Eswatini    ┆ null        ┆ null        ┆ 0       ┆ … ┆ 74267   ┆ 74267   ┆ 74267   ┆ 64.975503  │\n│ …           ┆ …           ┆ …           ┆ …       ┆ … ┆ …       ┆ …       ┆ …       ┆ …          │\n│ Mexico      ┆ null        ┆ null        ┆ 0       ┆ … ┆ 7475219 ┆ 7479635 ┆ 7483444 ┆ 6547.19510 │\n│             ┆             ┆             ┆         ┆   ┆         ┆         ┆         ┆ 1          │\n│ Paraguay    ┆ null        ┆ null        ┆ 0       ┆ … ┆ 808401  ┆ 808401  ┆ 808401  ┆ 707.262467 │\n│ Korea,      ┆ null        ┆ null        ┆ 0       ┆ … ┆ 1       ┆ 1       ┆ 1       ┆ 0.000875   │\n│ North       ┆             ┆             ┆         ┆   ┆         ┆         ┆         ┆            │\n│ South       ┆ null        ┆ null        ┆ 0       ┆ … ┆ 4066044 ┆ 4066641 ┆ 4067067 ┆ 3558.23884 │\n│ Africa      ┆             ┆             ┆         ┆   ┆         ┆         ┆         ┆ 5          │\n│ Montenegro  ┆ null        ┆ null        ┆ 0       ┆ … ┆ 288682  ┆ 288752  ┆ 288808  ┆ 252.675416 │\n└─────────────┴─────────────┴─────────────┴─────────┴───┴─────────┴─────────┴─────────┴────────────┘\n```\n:::\n:::\n\n\n:::{.note}\n\nThe `alias` method allows us to give a name to the groups.\n\n:::\n\nNotice that the rows became out of order. Not to worry about order makes the code more efficient and does not affect future subsetting of our data frame. If you want to maintain the order however, you can use the `maintain_order` parameter:\n\n::: {#2c1bb89c .cell execution_count=12}\n``` {.python .cell-code}\ndf_countries = df_clean.group_by(\n    (pl.col(\"Country/Region\")).alias(\"Country\"),\n    maintain_order=True\n    ).sum()\n\nprint(df_countries)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (201, 1_147)\n┌──────────────┬──────────────┬──────────────┬─────────┬───┬────────┬────────┬────────┬────────────┐\n│ Country      ┆ Province/Sta ┆ Country/Regi ┆ 1/22/20 ┆ … ┆ 3/7/23 ┆ 3/8/23 ┆ 3/9/23 ┆ daily_avg  │\n│ ---          ┆ te           ┆ on           ┆ ---     ┆   ┆ ---    ┆ ---    ┆ ---    ┆ ---        │\n│ str          ┆ ---          ┆ ---          ┆ i64     ┆   ┆ i64    ┆ i64    ┆ i64    ┆ f64        │\n│              ┆ str          ┆ str          ┆         ┆   ┆        ┆        ┆        ┆            │\n╞══════════════╪══════════════╪══════════════╪═════════╪═══╪════════╪════════╪════════╪════════════╡\n│ Afghanistan  ┆ null         ┆ null         ┆ 0       ┆ … ┆ 209436 ┆ 209451 ┆ 209451 ┆ 183.246719 │\n│ Albania      ┆ null         ┆ null         ┆ 0       ┆ … ┆ 334427 ┆ 334443 ┆ 334457 ┆ 292.613298 │\n│ Algeria      ┆ null         ┆ null         ┆ 0       ┆ … ┆ 271490 ┆ 271494 ┆ 271496 ┆ 237.529309 │\n│ Andorra      ┆ null         ┆ null         ┆ 0       ┆ … ┆ 47875  ┆ 47890  ┆ 47890  ┆ 41.898513  │\n│ Angola       ┆ null         ┆ null         ┆ 0       ┆ … ┆ 105277 ┆ 105288 ┆ 105288 ┆ 92.115486  │\n│ …            ┆ …            ┆ …            ┆ …       ┆ … ┆ …      ┆ …      ┆ …      ┆ …          │\n│ West Bank    ┆ null         ┆ null         ┆ 0       ┆ … ┆ 703228 ┆ 703228 ┆ 703228 ┆ 615.247594 │\n│ and Gaza     ┆              ┆              ┆         ┆   ┆        ┆        ┆        ┆            │\n│ Winter       ┆ null         ┆ null         ┆ 0       ┆ … ┆ 535    ┆ 535    ┆ 535    ┆ 0.468066   │\n│ Olympics     ┆              ┆              ┆         ┆   ┆        ┆        ┆        ┆            │\n│ 2022         ┆              ┆              ┆         ┆   ┆        ┆        ┆        ┆            │\n│ Yemen        ┆ null         ┆ null         ┆ 0       ┆ … ┆ 11945  ┆ 11945  ┆ 11945  ┆ 10.450569  │\n│ Zambia       ┆ null         ┆ null         ┆ 0       ┆ … ┆ 343135 ┆ 343135 ┆ 343135 ┆ 300.205599 │\n│ Zimbabwe     ┆ null         ┆ null         ┆ 0       ┆ … ┆ 264127 ┆ 264276 ┆ 264276 ┆ 231.212598 │\n└──────────────┴──────────────┴──────────────┴─────────┴───┴────────┴────────┴────────┴────────────┘\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n- The old `Country/Region` column is now irrelevant. Remove it from `df_countries`.\n\n- How could you get the total number of cases for each day for the whole world?\n\n:::\n\n",
    "supporting": [
      "polars_subset_files"
    ],
    "filters": [],
    "includes": {}
  }
}