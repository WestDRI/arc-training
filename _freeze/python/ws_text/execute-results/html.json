{
  "hash": "4747296893f987a622fdea6391e85e61",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Playing with text\naliases:\n  - intro_text.html\nauthor: Marie-Hélène Burle\nresources: data/pratchett.txt\n---\n\n:::{.def}\n\nThere are fancy tools to scrape the web and play with text. In preparation for those, in this section, we will download a text file from the internet and play with it using simple commands.\n\n:::\n\n## Downloading a text file from a URL\n\nFirst, we need to load the [`urllib.request` module](https://docs.python.org/3/library/urllib.request.html#module-urllib.request) from the Python standard library. It contains functions to deal with URLs:\n\n::: {#b8f82e95 .cell execution_count=2}\n``` {.python .cell-code}\nimport urllib.request\n```\n:::\n\n\nThe snippet of text we will play with is in a text file containing the very beginning of the novel [Going Postal](https://en.wikipedia.org/wiki/Going_Postal) by [Terry Pratchett](https://en.wikipedia.org/wiki/Terry_Pratchett) and located at the URL <https://mint.westdri.ca/python/data/pratchett.txt>. We can create a variable that we call `url` (we can call it whatever we want) and that contains the string of the URL:\n\n::: {#8df6261f .cell execution_count=3}\n``` {.python .cell-code}\nurl = \"https://mint.westdri.ca/python/data/pratchett.txt\"\n```\n:::\n\n\n::: {#72fd396b .cell execution_count=4}\n``` {.python .cell-code}\nprint(url)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhttps://mint.westdri.ca/python/data/pratchett.txt\n```\n:::\n:::\n\n\n::: {#58d19da7 .cell execution_count=5}\n``` {.python .cell-code}\ntype(url)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nstr\n```\n:::\n:::\n\n\nTo download a text file from a URL, we use the `urllib.request.urlopen` function:\n\n::: {#f74a7b1c .cell execution_count=6}\n``` {.python .cell-code}\nurllib.request.urlopen(url)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n<http.client.HTTPResponse at 0x7a046b59db70>\n```\n:::\n:::\n\n\nThis return an `HTTPResponse` object. It is not very useful in this form, but we can get the text out of it by applying the `read` method:\n\n::: {#1af5355d .cell execution_count=7}\n``` {.python .cell-code}\nurllib.request.urlopen(url).read()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nb'They say that the prospect of being hanged in the morning concentrates a man\\'s mind wonderfully; unfortunately, what the mind inevitably concentrates on is that, in the morning, it will be in a body that is going to be hanged.\\nThe man going to be hanged had been named Moist von Lipwig by doting if unwise parents, but he was not going to embarrass the name, insofar as that was still possible, by being hung under it. To the world in general, and particularly on that bit of it known as the death warrant, he was Alfred Spangler.\\nAnd he took a more positive approach to the situation and had concentrated his mind on the prospect of not being hanged in the morning, and, most particularly, on the prospect of removing all the crumbling mortar from around a stone in his cell wall with a spoon. So far the work had taken him five weeks and reduced the spoon to something like a nail file. Fortunately, no one ever came to change the bedding here, or else they would have discovered the world\\'s heaviest mattress.\\nIt was a large and heavy stone that was currently the object of his attentions, and, at some point, a huge staple had been hammered into it as an anchor for manacles.\\nMoist sat down facing the wall, gripped the iron ring in both hands, braced his legs against the stones on either side, and heaved.\\nHis shoulders caught fire, and a red mist filled his vision, but the block slid out with a faint and inappropriate tinkling noise. Moist managed to ease it away from the hole and peered inside.\\nAt the far end was another block, and the mortar around it looked suspiciously strong and fresh.\\nJust in front of it was a new spoon. It was shiny.\\nAs he studied it, he heard the clapping behind him. He turned his head, tendons twanging a little riff of agony, and saw several of the wardens watching him through the bars.\\n\"Well done, Mr. Spangler!\" said one of them. \"Ron here owes me five dollars! I told him you were a sticker!! \\'He\\'s a sticker,\\' I said!\"\\n\"You set this up, did you, Mr. Wilkinson?\" said Moist weakly, watching the glint of light on the spoon.\\n\"Oh, not us, sir. Lord Vetinari\\'s orders. He insists that all condemned prisoners should be offered the prospect of freedom.\"\\n\"Freedom? But there\\'s a damn great stone through there!\"\\n\"Yes, there is that, sir, yes, there is that,\" said the warden. \"It\\'s only the prospect, you see. Not actual free freedom as such. Hah, that\\'d be a bit daft, eh?\"\\n\"I suppose so, yes,\" said Moist. He didn\\'t say \"you bastards.\" The wardens had treated him quite civilly these past six weeks, and he made a point of getting on with people. He was very, very good at it. People skills were part of his stock-in-trade; they were nearly the whole of it.\\nBesides, these people had big sticks. So, speaking carefully, he added: \"Some people might consider this cruel, Mr. Wilkinson.\"\\n\"Yes, sir, we asked him about that, sir, but he said no, it wasn\\'t. He said it provided\"--his forehead wrinkled \"--occ-you-pay-shun-all ther-rap-py, healthy exercise, prevented moping, and offered that greatest of all treasures, which is Hope, sir.\"\\n\"Hope,\" muttered Moist glumly.\\n\"Not upset, are you, sir?\"\\n\"Upset? Why should I be upset, Mr. Wilkinson?\"\\n\"Only the last bloke we had in this cell, he managed to get down that drain, sir. Very small man. Very agile.\"\\n'\n```\n:::\n:::\n\n\nWe can save our text in a new variable:\n\n::: {#4a39bab0 .cell execution_count=8}\n``` {.python .cell-code}\nencoded_text = urllib.request.urlopen(url).read()\n```\n:::\n\n\nNow, `encoded_text` is not of a very convenient type:\n\n::: {#b91f7b59 .cell execution_count=9}\n``` {.python .cell-code}\ntype(encoded_text)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nbytes\n```\n:::\n:::\n\n\nBefore we can really start playing with it, we want to convert it to a string by decoding it:\n\n::: {#892650ff .cell execution_count=10}\n``` {.python .cell-code}\ntext = encoded_text.decode(\"utf-8\")\ntype(text)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nstr\n```\n:::\n:::\n\n\nWe know have a string, which is great to work on. Let's print our text:\n\n::: {#2a8143b1 .cell execution_count=11}\n``` {.python .cell-code}\nprint(text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThey say that the prospect of being hanged in the morning concentrates a man's mind wonderfully; unfortunately, what the mind inevitably concentrates on is that, in the morning, it will be in a body that is going to be hanged.\nThe man going to be hanged had been named Moist von Lipwig by doting if unwise parents, but he was not going to embarrass the name, insofar as that was still possible, by being hung under it. To the world in general, and particularly on that bit of it known as the death warrant, he was Alfred Spangler.\nAnd he took a more positive approach to the situation and had concentrated his mind on the prospect of not being hanged in the morning, and, most particularly, on the prospect of removing all the crumbling mortar from around a stone in his cell wall with a spoon. So far the work had taken him five weeks and reduced the spoon to something like a nail file. Fortunately, no one ever came to change the bedding here, or else they would have discovered the world's heaviest mattress.\nIt was a large and heavy stone that was currently the object of his attentions, and, at some point, a huge staple had been hammered into it as an anchor for manacles.\nMoist sat down facing the wall, gripped the iron ring in both hands, braced his legs against the stones on either side, and heaved.\nHis shoulders caught fire, and a red mist filled his vision, but the block slid out with a faint and inappropriate tinkling noise. Moist managed to ease it away from the hole and peered inside.\nAt the far end was another block, and the mortar around it looked suspiciously strong and fresh.\nJust in front of it was a new spoon. It was shiny.\nAs he studied it, he heard the clapping behind him. He turned his head, tendons twanging a little riff of agony, and saw several of the wardens watching him through the bars.\n\"Well done, Mr. Spangler!\" said one of them. \"Ron here owes me five dollars! I told him you were a sticker!! 'He's a sticker,' I said!\"\n\"You set this up, did you, Mr. Wilkinson?\" said Moist weakly, watching the glint of light on the spoon.\n\"Oh, not us, sir. Lord Vetinari's orders. He insists that all condemned prisoners should be offered the prospect of freedom.\"\n\"Freedom? But there's a damn great stone through there!\"\n\"Yes, there is that, sir, yes, there is that,\" said the warden. \"It's only the prospect, you see. Not actual free freedom as such. Hah, that'd be a bit daft, eh?\"\n\"I suppose so, yes,\" said Moist. He didn't say \"you bastards.\" The wardens had treated him quite civilly these past six weeks, and he made a point of getting on with people. He was very, very good at it. People skills were part of his stock-in-trade; they were nearly the whole of it.\nBesides, these people had big sticks. So, speaking carefully, he added: \"Some people might consider this cruel, Mr. Wilkinson.\"\n\"Yes, sir, we asked him about that, sir, but he said no, it wasn't. He said it provided\"--his forehead wrinkled \"--occ-you-pay-shun-all ther-rap-py, healthy exercise, prevented moping, and offered that greatest of all treasures, which is Hope, sir.\"\n\"Hope,\" muttered Moist glumly.\n\"Not upset, are you, sir?\"\n\"Upset? Why should I be upset, Mr. Wilkinson?\"\n\"Only the last bloke we had in this cell, he managed to get down that drain, sir. Very small man. Very agile.\"\n\n```\n:::\n:::\n\n\nAnd now we can start playing with the data 🙂\n\n## Counting things\n\nOne of the things we can do with our text is counting things.\n\n### Counting characters\n\nFor instance, we can count the number of characters thanks to the `len` function:\n\n::: {#85b74665 .cell execution_count=12}\n``` {.python .cell-code}\nlen(text)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n3294\n```\n:::\n:::\n\n\nWe can count the number of occurrences of any sequence of character with the method `count`.\n\nFor instance, the see how many times the letter \"e\" appears in the text, we would run:\n\n::: {#7bf703f7 .cell execution_count=13}\n``` {.python .cell-code}\ntext.count(\"e\")\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n301\n```\n:::\n:::\n\n\nFor the name of the main character \"Moist\", we would do:\n\n::: {#0d832899 .cell execution_count=14}\n``` {.python .cell-code}\ntext.count(\"Moist\")\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n6\n```\n:::\n:::\n\n\n### Counting words\n\nOr we could try to see how many words there are in this text.\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nHow would you go about this?\n\n:::\n\nAnother method to count the number of words is to use the `split` method:\n\n::: {#afa4fb9c .cell execution_count=15}\n``` {.python .cell-code}\nwords = text.split()\nprint(words)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['They', 'say', 'that', 'the', 'prospect', 'of', 'being', 'hanged', 'in', 'the', 'morning', 'concentrates', 'a', \"man's\", 'mind', 'wonderfully;', 'unfortunately,', 'what', 'the', 'mind', 'inevitably', 'concentrates', 'on', 'is', 'that,', 'in', 'the', 'morning,', 'it', 'will', 'be', 'in', 'a', 'body', 'that', 'is', 'going', 'to', 'be', 'hanged.', 'The', 'man', 'going', 'to', 'be', 'hanged', 'had', 'been', 'named', 'Moist', 'von', 'Lipwig', 'by', 'doting', 'if', 'unwise', 'parents,', 'but', 'he', 'was', 'not', 'going', 'to', 'embarrass', 'the', 'name,', 'insofar', 'as', 'that', 'was', 'still', 'possible,', 'by', 'being', 'hung', 'under', 'it.', 'To', 'the', 'world', 'in', 'general,', 'and', 'particularly', 'on', 'that', 'bit', 'of', 'it', 'known', 'as', 'the', 'death', 'warrant,', 'he', 'was', 'Alfred', 'Spangler.', 'And', 'he', 'took', 'a', 'more', 'positive', 'approach', 'to', 'the', 'situation', 'and', 'had', 'concentrated', 'his', 'mind', 'on', 'the', 'prospect', 'of', 'not', 'being', 'hanged', 'in', 'the', 'morning,', 'and,', 'most', 'particularly,', 'on', 'the', 'prospect', 'of', 'removing', 'all', 'the', 'crumbling', 'mortar', 'from', 'around', 'a', 'stone', 'in', 'his', 'cell', 'wall', 'with', 'a', 'spoon.', 'So', 'far', 'the', 'work', 'had', 'taken', 'him', 'five', 'weeks', 'and', 'reduced', 'the', 'spoon', 'to', 'something', 'like', 'a', 'nail', 'file.', 'Fortunately,', 'no', 'one', 'ever', 'came', 'to', 'change', 'the', 'bedding', 'here,', 'or', 'else', 'they', 'would', 'have', 'discovered', 'the', \"world's\", 'heaviest', 'mattress.', 'It', 'was', 'a', 'large', 'and', 'heavy', 'stone', 'that', 'was', 'currently', 'the', 'object', 'of', 'his', 'attentions,', 'and,', 'at', 'some', 'point,', 'a', 'huge', 'staple', 'had', 'been', 'hammered', 'into', 'it', 'as', 'an', 'anchor', 'for', 'manacles.', 'Moist', 'sat', 'down', 'facing', 'the', 'wall,', 'gripped', 'the', 'iron', 'ring', 'in', 'both', 'hands,', 'braced', 'his', 'legs', 'against', 'the', 'stones', 'on', 'either', 'side,', 'and', 'heaved.', 'His', 'shoulders', 'caught', 'fire,', 'and', 'a', 'red', 'mist', 'filled', 'his', 'vision,', 'but', 'the', 'block', 'slid', 'out', 'with', 'a', 'faint', 'and', 'inappropriate', 'tinkling', 'noise.', 'Moist', 'managed', 'to', 'ease', 'it', 'away', 'from', 'the', 'hole', 'and', 'peered', 'inside.', 'At', 'the', 'far', 'end', 'was', 'another', 'block,', 'and', 'the', 'mortar', 'around', 'it', 'looked', 'suspiciously', 'strong', 'and', 'fresh.', 'Just', 'in', 'front', 'of', 'it', 'was', 'a', 'new', 'spoon.', 'It', 'was', 'shiny.', 'As', 'he', 'studied', 'it,', 'he', 'heard', 'the', 'clapping', 'behind', 'him.', 'He', 'turned', 'his', 'head,', 'tendons', 'twanging', 'a', 'little', 'riff', 'of', 'agony,', 'and', 'saw', 'several', 'of', 'the', 'wardens', 'watching', 'him', 'through', 'the', 'bars.', '\"Well', 'done,', 'Mr.', 'Spangler!\"', 'said', 'one', 'of', 'them.', '\"Ron', 'here', 'owes', 'me', 'five', 'dollars!', 'I', 'told', 'him', 'you', 'were', 'a', 'sticker!!', \"'He's\", 'a', \"sticker,'\", 'I', 'said!\"', '\"You', 'set', 'this', 'up,', 'did', 'you,', 'Mr.', 'Wilkinson?\"', 'said', 'Moist', 'weakly,', 'watching', 'the', 'glint', 'of', 'light', 'on', 'the', 'spoon.', '\"Oh,', 'not', 'us,', 'sir.', 'Lord', \"Vetinari's\", 'orders.', 'He', 'insists', 'that', 'all', 'condemned', 'prisoners', 'should', 'be', 'offered', 'the', 'prospect', 'of', 'freedom.\"', '\"Freedom?', 'But', \"there's\", 'a', 'damn', 'great', 'stone', 'through', 'there!\"', '\"Yes,', 'there', 'is', 'that,', 'sir,', 'yes,', 'there', 'is', 'that,\"', 'said', 'the', 'warden.', '\"It\\'s', 'only', 'the', 'prospect,', 'you', 'see.', 'Not', 'actual', 'free', 'freedom', 'as', 'such.', 'Hah,', \"that'd\", 'be', 'a', 'bit', 'daft,', 'eh?\"', '\"I', 'suppose', 'so,', 'yes,\"', 'said', 'Moist.', 'He', \"didn't\", 'say', '\"you', 'bastards.\"', 'The', 'wardens', 'had', 'treated', 'him', 'quite', 'civilly', 'these', 'past', 'six', 'weeks,', 'and', 'he', 'made', 'a', 'point', 'of', 'getting', 'on', 'with', 'people.', 'He', 'was', 'very,', 'very', 'good', 'at', 'it.', 'People', 'skills', 'were', 'part', 'of', 'his', 'stock-in-trade;', 'they', 'were', 'nearly', 'the', 'whole', 'of', 'it.', 'Besides,', 'these', 'people', 'had', 'big', 'sticks.', 'So,', 'speaking', 'carefully,', 'he', 'added:', '\"Some', 'people', 'might', 'consider', 'this', 'cruel,', 'Mr.', 'Wilkinson.\"', '\"Yes,', 'sir,', 'we', 'asked', 'him', 'about', 'that,', 'sir,', 'but', 'he', 'said', 'no,', 'it', \"wasn't.\", 'He', 'said', 'it', 'provided\"--his', 'forehead', 'wrinkled', '\"--occ-you-pay-shun-all', 'ther-rap-py,', 'healthy', 'exercise,', 'prevented', 'moping,', 'and', 'offered', 'that', 'greatest', 'of', 'all', 'treasures,', 'which', 'is', 'Hope,', 'sir.\"', '\"Hope,\"', 'muttered', 'Moist', 'glumly.', '\"Not', 'upset,', 'are', 'you,', 'sir?\"', '\"Upset?', 'Why', 'should', 'I', 'be', 'upset,', 'Mr.', 'Wilkinson?\"', '\"Only', 'the', 'last', 'bloke', 'we', 'had', 'in', 'this', 'cell,', 'he', 'managed', 'to', 'get', 'down', 'that', 'drain,', 'sir.', 'Very', 'small', 'man.', 'Very', 'agile.\"']\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWhat is the type of the variable `words`?\n\n:::\n\nTo get its length, we can use the `len` function:\n\n::: {#405b0974 .cell execution_count=16}\n``` {.python .cell-code}\nlen(words)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n590\n```\n:::\n:::\n\n\nNow, let's try to count how many times the word `the` is in the text.\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWe could use:\n\n::: {#36a061c6 .cell execution_count=17}\n``` {.python .cell-code}\ntext.count(\"the\") + text.count(\"The\")\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n49\n```\n:::\n:::\n\n\nbut it won't answer our question. Why?\n\n:::\n\nInstead, we should use the list of words that we called `words` and count how many of them are equal to `the`. We do this with a loop:\n\n::: {#95d06cdb .cell execution_count=18}\n``` {.python .cell-code}\n# We set our counter (the number of occurrences) to zero:\noccurrences = 0\n\n# And now we can use a loop to test the words one by one and add 1 to our counter each time the equality returns true\nfor word in words:\n    if word == \"the\" or word == \"The\":\n        occurrences += 1\n\nprint(occurrences)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n36\n```\n:::\n:::\n\n\n:::{.info}\n\nAn alternative syntax that looks a lot more elegant is the following:\n\n::: {#442b9efe .cell execution_count=19}\n``` {.python .cell-code}\nsum(word == \"the\" or word == \"The\" for word in words)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n36\n```\n:::\n:::\n\n\nHowever, elegance and short syntax don't necessarily mean fast code.\n\nWe can benchmark Python code very easy when we use Jupyter or IPython by using the magic `%%timeit` at the top of a code cell.\n\nLet's try it:\n\n```{.python}\n%%timeit\n\n# We set our counter (the number of occurrences) to zero:\noccurrences = 0\n\n# And now we can use a loop to test the words one by one and add 1 to our counter each time the equality returns true\nfor word in words:\n    if word == \"the\" or word == \"The\":\n        occurrences += 1\n```\n\n```\n9.52 μs ± 510 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n```\n\n:::{.note}\n\nI removed the `print` function so that we don't end up printing the result a bunch of times: `timeit` does a lot of tests and takes the average. At each run, we would have a printed result!\n\n:::\n\nAnd for the other method\n\n```{.python}\n%%timeit\n\noccurrences = sum(word == \"the\" or word == \"The\" for word in words)\n```\n\n```\n24.2 μs ± 243 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n```\n\n:::{.note}\n\nTo make a fair comparison with the previous expression, I am not printing the result here either, but assigning it to a variable.\n\n:::\n\nAs you can see, the short neat-looking expression takes more than twice the time of the not so nice-looking one. Without benchmarking, it is very hard to predict what code is efficient.\n\n:::\n\n#### Removing punctuation\n\nNow, let's count the number of times the word \"sir\" occurs in the text:\n\n::: {#d41d3ffd .cell execution_count=20}\n``` {.python .cell-code}\noccurrences = 0\n\nfor word in words:\n    if word == \"sir\" or word == \"Sir\":\n        occurrences += 1\n\nprint(occurrences)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n```\n:::\n:::\n\n\nMmm... that is strange because, if we read the text, we can see that the word \"sir\" actually occurs in the text...\n\nLooking carefully at our list `words`, we can see what the problem is: the word \"sir\" appears as `sir.`, `sir,`, `sir.\"`, `sir?\"`.\n\nThis shows that in order to do a cleaner job and get our method to work for any word, we need to remove the punctuation.\n\nStep one, we remove the punctuation from our `text` string:\n\n::: {#d222e9f4 .cell execution_count=21}\n``` {.python .cell-code}\nimport string\n\nclean_text = text.translate(str.maketrans('', '', string.punctuation))\nprint(clean_text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThey say that the prospect of being hanged in the morning concentrates a mans mind wonderfully unfortunately what the mind inevitably concentrates on is that in the morning it will be in a body that is going to be hanged\nThe man going to be hanged had been named Moist von Lipwig by doting if unwise parents but he was not going to embarrass the name insofar as that was still possible by being hung under it To the world in general and particularly on that bit of it known as the death warrant he was Alfred Spangler\nAnd he took a more positive approach to the situation and had concentrated his mind on the prospect of not being hanged in the morning and most particularly on the prospect of removing all the crumbling mortar from around a stone in his cell wall with a spoon So far the work had taken him five weeks and reduced the spoon to something like a nail file Fortunately no one ever came to change the bedding here or else they would have discovered the worlds heaviest mattress\nIt was a large and heavy stone that was currently the object of his attentions and at some point a huge staple had been hammered into it as an anchor for manacles\nMoist sat down facing the wall gripped the iron ring in both hands braced his legs against the stones on either side and heaved\nHis shoulders caught fire and a red mist filled his vision but the block slid out with a faint and inappropriate tinkling noise Moist managed to ease it away from the hole and peered inside\nAt the far end was another block and the mortar around it looked suspiciously strong and fresh\nJust in front of it was a new spoon It was shiny\nAs he studied it he heard the clapping behind him He turned his head tendons twanging a little riff of agony and saw several of the wardens watching him through the bars\nWell done Mr Spangler said one of them Ron here owes me five dollars I told him you were a sticker Hes a sticker I said\nYou set this up did you Mr Wilkinson said Moist weakly watching the glint of light on the spoon\nOh not us sir Lord Vetinaris orders He insists that all condemned prisoners should be offered the prospect of freedom\nFreedom But theres a damn great stone through there\nYes there is that sir yes there is that said the warden Its only the prospect you see Not actual free freedom as such Hah thatd be a bit daft eh\nI suppose so yes said Moist He didnt say you bastards The wardens had treated him quite civilly these past six weeks and he made a point of getting on with people He was very very good at it People skills were part of his stockintrade they were nearly the whole of it\nBesides these people had big sticks So speaking carefully he added Some people might consider this cruel Mr Wilkinson\nYes sir we asked him about that sir but he said no it wasnt He said it providedhis forehead wrinkled occyoupayshunall therrappy healthy exercise prevented moping and offered that greatest of all treasures which is Hope sir\nHope muttered Moist glumly\nNot upset are you sir\nUpset Why should I be upset Mr Wilkinson\nOnly the last bloke we had in this cell he managed to get down that drain sir Very small man Very agile\n\n```\n:::\n:::\n\n\nAnd now we split it into words:\n\n::: {#79dad9e7 .cell execution_count=22}\n``` {.python .cell-code}\nclean_words = clean_text.split()\nprint(clean_words)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['They', 'say', 'that', 'the', 'prospect', 'of', 'being', 'hanged', 'in', 'the', 'morning', 'concentrates', 'a', 'mans', 'mind', 'wonderfully', 'unfortunately', 'what', 'the', 'mind', 'inevitably', 'concentrates', 'on', 'is', 'that', 'in', 'the', 'morning', 'it', 'will', 'be', 'in', 'a', 'body', 'that', 'is', 'going', 'to', 'be', 'hanged', 'The', 'man', 'going', 'to', 'be', 'hanged', 'had', 'been', 'named', 'Moist', 'von', 'Lipwig', 'by', 'doting', 'if', 'unwise', 'parents', 'but', 'he', 'was', 'not', 'going', 'to', 'embarrass', 'the', 'name', 'insofar', 'as', 'that', 'was', 'still', 'possible', 'by', 'being', 'hung', 'under', 'it', 'To', 'the', 'world', 'in', 'general', 'and', 'particularly', 'on', 'that', 'bit', 'of', 'it', 'known', 'as', 'the', 'death', 'warrant', 'he', 'was', 'Alfred', 'Spangler', 'And', 'he', 'took', 'a', 'more', 'positive', 'approach', 'to', 'the', 'situation', 'and', 'had', 'concentrated', 'his', 'mind', 'on', 'the', 'prospect', 'of', 'not', 'being', 'hanged', 'in', 'the', 'morning', 'and', 'most', 'particularly', 'on', 'the', 'prospect', 'of', 'removing', 'all', 'the', 'crumbling', 'mortar', 'from', 'around', 'a', 'stone', 'in', 'his', 'cell', 'wall', 'with', 'a', 'spoon', 'So', 'far', 'the', 'work', 'had', 'taken', 'him', 'five', 'weeks', 'and', 'reduced', 'the', 'spoon', 'to', 'something', 'like', 'a', 'nail', 'file', 'Fortunately', 'no', 'one', 'ever', 'came', 'to', 'change', 'the', 'bedding', 'here', 'or', 'else', 'they', 'would', 'have', 'discovered', 'the', 'worlds', 'heaviest', 'mattress', 'It', 'was', 'a', 'large', 'and', 'heavy', 'stone', 'that', 'was', 'currently', 'the', 'object', 'of', 'his', 'attentions', 'and', 'at', 'some', 'point', 'a', 'huge', 'staple', 'had', 'been', 'hammered', 'into', 'it', 'as', 'an', 'anchor', 'for', 'manacles', 'Moist', 'sat', 'down', 'facing', 'the', 'wall', 'gripped', 'the', 'iron', 'ring', 'in', 'both', 'hands', 'braced', 'his', 'legs', 'against', 'the', 'stones', 'on', 'either', 'side', 'and', 'heaved', 'His', 'shoulders', 'caught', 'fire', 'and', 'a', 'red', 'mist', 'filled', 'his', 'vision', 'but', 'the', 'block', 'slid', 'out', 'with', 'a', 'faint', 'and', 'inappropriate', 'tinkling', 'noise', 'Moist', 'managed', 'to', 'ease', 'it', 'away', 'from', 'the', 'hole', 'and', 'peered', 'inside', 'At', 'the', 'far', 'end', 'was', 'another', 'block', 'and', 'the', 'mortar', 'around', 'it', 'looked', 'suspiciously', 'strong', 'and', 'fresh', 'Just', 'in', 'front', 'of', 'it', 'was', 'a', 'new', 'spoon', 'It', 'was', 'shiny', 'As', 'he', 'studied', 'it', 'he', 'heard', 'the', 'clapping', 'behind', 'him', 'He', 'turned', 'his', 'head', 'tendons', 'twanging', 'a', 'little', 'riff', 'of', 'agony', 'and', 'saw', 'several', 'of', 'the', 'wardens', 'watching', 'him', 'through', 'the', 'bars', 'Well', 'done', 'Mr', 'Spangler', 'said', 'one', 'of', 'them', 'Ron', 'here', 'owes', 'me', 'five', 'dollars', 'I', 'told', 'him', 'you', 'were', 'a', 'sticker', 'Hes', 'a', 'sticker', 'I', 'said', 'You', 'set', 'this', 'up', 'did', 'you', 'Mr', 'Wilkinson', 'said', 'Moist', 'weakly', 'watching', 'the', 'glint', 'of', 'light', 'on', 'the', 'spoon', 'Oh', 'not', 'us', 'sir', 'Lord', 'Vetinaris', 'orders', 'He', 'insists', 'that', 'all', 'condemned', 'prisoners', 'should', 'be', 'offered', 'the', 'prospect', 'of', 'freedom', 'Freedom', 'But', 'theres', 'a', 'damn', 'great', 'stone', 'through', 'there', 'Yes', 'there', 'is', 'that', 'sir', 'yes', 'there', 'is', 'that', 'said', 'the', 'warden', 'Its', 'only', 'the', 'prospect', 'you', 'see', 'Not', 'actual', 'free', 'freedom', 'as', 'such', 'Hah', 'thatd', 'be', 'a', 'bit', 'daft', 'eh', 'I', 'suppose', 'so', 'yes', 'said', 'Moist', 'He', 'didnt', 'say', 'you', 'bastards', 'The', 'wardens', 'had', 'treated', 'him', 'quite', 'civilly', 'these', 'past', 'six', 'weeks', 'and', 'he', 'made', 'a', 'point', 'of', 'getting', 'on', 'with', 'people', 'He', 'was', 'very', 'very', 'good', 'at', 'it', 'People', 'skills', 'were', 'part', 'of', 'his', 'stockintrade', 'they', 'were', 'nearly', 'the', 'whole', 'of', 'it', 'Besides', 'these', 'people', 'had', 'big', 'sticks', 'So', 'speaking', 'carefully', 'he', 'added', 'Some', 'people', 'might', 'consider', 'this', 'cruel', 'Mr', 'Wilkinson', 'Yes', 'sir', 'we', 'asked', 'him', 'about', 'that', 'sir', 'but', 'he', 'said', 'no', 'it', 'wasnt', 'He', 'said', 'it', 'providedhis', 'forehead', 'wrinkled', 'occyoupayshunall', 'therrappy', 'healthy', 'exercise', 'prevented', 'moping', 'and', 'offered', 'that', 'greatest', 'of', 'all', 'treasures', 'which', 'is', 'Hope', 'sir', 'Hope', 'muttered', 'Moist', 'glumly', 'Not', 'upset', 'are', 'you', 'sir', 'Upset', 'Why', 'should', 'I', 'be', 'upset', 'Mr', 'Wilkinson', 'Only', 'the', 'last', 'bloke', 'we', 'had', 'in', 'this', 'cell', 'he', 'managed', 'to', 'get', 'down', 'that', 'drain', 'sir', 'Very', 'small', 'man', 'Very', 'agile']\n```\n:::\n:::\n\n\nThis is a much better list to work from and this one will work for any word. For the word \"sir\" for instance, we would do:\n\n::: {#073d3af6 .cell execution_count=23}\n``` {.python .cell-code}\noccurrences = 0\n\nfor word in clean_words:\n    if word == \"sir\" or word == \"Sir\":\n        occurrences += 1\n\nprint(occurrences)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n7\n```\n:::\n:::\n\n\n#### Removing case\n\nNow, having to look for the word of interest with and without capital letter as we have been doing so far is not the most robust method: what if the text had \"SIR\" in all caps? After all, Death in Pratchett novels speaks in all caps! Of course, we could add this as a third option (`if word == \"sir\" or word == \"Sir\" or word == \"SIR\"`), but that is becoming a little tedious.\n\nA better solution is to turn the whole text into lower case before splitting it into words. That way we don't have to worry about case.\n\nLet's remove all capital letters:\n\n::: {#f473d643 .cell execution_count=24}\n``` {.python .cell-code}\nfinal_text = clean_text.lower()\n```\n:::\n\n\nNow we split it into words:\n\n::: {#a3ea65e1 .cell execution_count=25}\n``` {.python .cell-code}\nfinal_words = final_text.split()\nprint(final_words)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['they', 'say', 'that', 'the', 'prospect', 'of', 'being', 'hanged', 'in', 'the', 'morning', 'concentrates', 'a', 'mans', 'mind', 'wonderfully', 'unfortunately', 'what', 'the', 'mind', 'inevitably', 'concentrates', 'on', 'is', 'that', 'in', 'the', 'morning', 'it', 'will', 'be', 'in', 'a', 'body', 'that', 'is', 'going', 'to', 'be', 'hanged', 'the', 'man', 'going', 'to', 'be', 'hanged', 'had', 'been', 'named', 'moist', 'von', 'lipwig', 'by', 'doting', 'if', 'unwise', 'parents', 'but', 'he', 'was', 'not', 'going', 'to', 'embarrass', 'the', 'name', 'insofar', 'as', 'that', 'was', 'still', 'possible', 'by', 'being', 'hung', 'under', 'it', 'to', 'the', 'world', 'in', 'general', 'and', 'particularly', 'on', 'that', 'bit', 'of', 'it', 'known', 'as', 'the', 'death', 'warrant', 'he', 'was', 'alfred', 'spangler', 'and', 'he', 'took', 'a', 'more', 'positive', 'approach', 'to', 'the', 'situation', 'and', 'had', 'concentrated', 'his', 'mind', 'on', 'the', 'prospect', 'of', 'not', 'being', 'hanged', 'in', 'the', 'morning', 'and', 'most', 'particularly', 'on', 'the', 'prospect', 'of', 'removing', 'all', 'the', 'crumbling', 'mortar', 'from', 'around', 'a', 'stone', 'in', 'his', 'cell', 'wall', 'with', 'a', 'spoon', 'so', 'far', 'the', 'work', 'had', 'taken', 'him', 'five', 'weeks', 'and', 'reduced', 'the', 'spoon', 'to', 'something', 'like', 'a', 'nail', 'file', 'fortunately', 'no', 'one', 'ever', 'came', 'to', 'change', 'the', 'bedding', 'here', 'or', 'else', 'they', 'would', 'have', 'discovered', 'the', 'worlds', 'heaviest', 'mattress', 'it', 'was', 'a', 'large', 'and', 'heavy', 'stone', 'that', 'was', 'currently', 'the', 'object', 'of', 'his', 'attentions', 'and', 'at', 'some', 'point', 'a', 'huge', 'staple', 'had', 'been', 'hammered', 'into', 'it', 'as', 'an', 'anchor', 'for', 'manacles', 'moist', 'sat', 'down', 'facing', 'the', 'wall', 'gripped', 'the', 'iron', 'ring', 'in', 'both', 'hands', 'braced', 'his', 'legs', 'against', 'the', 'stones', 'on', 'either', 'side', 'and', 'heaved', 'his', 'shoulders', 'caught', 'fire', 'and', 'a', 'red', 'mist', 'filled', 'his', 'vision', 'but', 'the', 'block', 'slid', 'out', 'with', 'a', 'faint', 'and', 'inappropriate', 'tinkling', 'noise', 'moist', 'managed', 'to', 'ease', 'it', 'away', 'from', 'the', 'hole', 'and', 'peered', 'inside', 'at', 'the', 'far', 'end', 'was', 'another', 'block', 'and', 'the', 'mortar', 'around', 'it', 'looked', 'suspiciously', 'strong', 'and', 'fresh', 'just', 'in', 'front', 'of', 'it', 'was', 'a', 'new', 'spoon', 'it', 'was', 'shiny', 'as', 'he', 'studied', 'it', 'he', 'heard', 'the', 'clapping', 'behind', 'him', 'he', 'turned', 'his', 'head', 'tendons', 'twanging', 'a', 'little', 'riff', 'of', 'agony', 'and', 'saw', 'several', 'of', 'the', 'wardens', 'watching', 'him', 'through', 'the', 'bars', 'well', 'done', 'mr', 'spangler', 'said', 'one', 'of', 'them', 'ron', 'here', 'owes', 'me', 'five', 'dollars', 'i', 'told', 'him', 'you', 'were', 'a', 'sticker', 'hes', 'a', 'sticker', 'i', 'said', 'you', 'set', 'this', 'up', 'did', 'you', 'mr', 'wilkinson', 'said', 'moist', 'weakly', 'watching', 'the', 'glint', 'of', 'light', 'on', 'the', 'spoon', 'oh', 'not', 'us', 'sir', 'lord', 'vetinaris', 'orders', 'he', 'insists', 'that', 'all', 'condemned', 'prisoners', 'should', 'be', 'offered', 'the', 'prospect', 'of', 'freedom', 'freedom', 'but', 'theres', 'a', 'damn', 'great', 'stone', 'through', 'there', 'yes', 'there', 'is', 'that', 'sir', 'yes', 'there', 'is', 'that', 'said', 'the', 'warden', 'its', 'only', 'the', 'prospect', 'you', 'see', 'not', 'actual', 'free', 'freedom', 'as', 'such', 'hah', 'thatd', 'be', 'a', 'bit', 'daft', 'eh', 'i', 'suppose', 'so', 'yes', 'said', 'moist', 'he', 'didnt', 'say', 'you', 'bastards', 'the', 'wardens', 'had', 'treated', 'him', 'quite', 'civilly', 'these', 'past', 'six', 'weeks', 'and', 'he', 'made', 'a', 'point', 'of', 'getting', 'on', 'with', 'people', 'he', 'was', 'very', 'very', 'good', 'at', 'it', 'people', 'skills', 'were', 'part', 'of', 'his', 'stockintrade', 'they', 'were', 'nearly', 'the', 'whole', 'of', 'it', 'besides', 'these', 'people', 'had', 'big', 'sticks', 'so', 'speaking', 'carefully', 'he', 'added', 'some', 'people', 'might', 'consider', 'this', 'cruel', 'mr', 'wilkinson', 'yes', 'sir', 'we', 'asked', 'him', 'about', 'that', 'sir', 'but', 'he', 'said', 'no', 'it', 'wasnt', 'he', 'said', 'it', 'providedhis', 'forehead', 'wrinkled', 'occyoupayshunall', 'therrappy', 'healthy', 'exercise', 'prevented', 'moping', 'and', 'offered', 'that', 'greatest', 'of', 'all', 'treasures', 'which', 'is', 'hope', 'sir', 'hope', 'muttered', 'moist', 'glumly', 'not', 'upset', 'are', 'you', 'sir', 'upset', 'why', 'should', 'i', 'be', 'upset', 'mr', 'wilkinson', 'only', 'the', 'last', 'bloke', 'we', 'had', 'in', 'this', 'cell', 'he', 'managed', 'to', 'get', 'down', 'that', 'drain', 'sir', 'very', 'small', 'man', 'very', 'agile']\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWhat would the code look like now to count the number of times the word \"sir\" appears?\n\n:::\n\n### Counting unique words\n\nYet something else we can count is the number of unique words in the text. The simplest way to do this is to turn our list of words into a set and see how many elements this set contains:\n\n::: {#2760ffc2 .cell execution_count=26}\n``` {.python .cell-code}\nlen(set(final_words))\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n292\n```\n:::\n:::\n\n\n## Extracting characters from strings\n\n### Indexing\n\nLet's go back to our text. Remember that we have this object `text` which is a list.\n\n::: {#7227910b .cell execution_count=27}\n``` {.python .cell-code}\ntype(text)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\nstr\n```\n:::\n:::\n\n\nYou can extract characters from strings by *indexing*.\n\nIndexing in Python is done with square brackets and starts at 0 (the first element has index 0). This means that we can extract the first character with:\n\n::: {#1e164fa6 .cell execution_count=28}\n``` {.python .cell-code}\nprint(text[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nT\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nHow would you index the 4^th^ element? Try it out. It should return \"y\".\n\n:::\n\nYou can extract the last element with a minus sign (and this time, the indexing starts at 1):\n\n::: {#2f20145b .cell execution_count=29}\n``` {.python .cell-code}\nprint(text[-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\n```\n:::\n:::\n\n\nWe aren't getting any output here because the last character is the special character `\\n` which encodes for a line break. You can see it when you don't use the `print` function (`print` makes things look nicer and transforms those characters into what they represent):\n\n::: {#6e8ea962 .cell execution_count=30}\n``` {.python .cell-code}\ntext[-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n'\\n'\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n**Question 1:** \\\nHow would you get the last letter of the text?\n\n**Question 2:** \\\nHow would you index the 11^th^ element from the end? Give it a try. You should get \"V\".\n\n:::\n\n### Slicing\n\nYou can also extract multiple contiguous elements with a *slice*. A slice is also defined with square brackets, but this time you add a colon in it. Left of the colon is the start of the slice and right of the colon is the end of the slice.\n\nIn Python, the left element of a slice is *included*, but the right element is *excluded*.\n\nFirst, let's omit both indices on either side of the colon:\n\n::: {#0b5d761e .cell execution_count=31}\n``` {.python .cell-code}\nprint(text[:])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThey say that the prospect of being hanged in the morning concentrates a man's mind wonderfully; unfortunately, what the mind inevitably concentrates on is that, in the morning, it will be in a body that is going to be hanged.\nThe man going to be hanged had been named Moist von Lipwig by doting if unwise parents, but he was not going to embarrass the name, insofar as that was still possible, by being hung under it. To the world in general, and particularly on that bit of it known as the death warrant, he was Alfred Spangler.\nAnd he took a more positive approach to the situation and had concentrated his mind on the prospect of not being hanged in the morning, and, most particularly, on the prospect of removing all the crumbling mortar from around a stone in his cell wall with a spoon. So far the work had taken him five weeks and reduced the spoon to something like a nail file. Fortunately, no one ever came to change the bedding here, or else they would have discovered the world's heaviest mattress.\nIt was a large and heavy stone that was currently the object of his attentions, and, at some point, a huge staple had been hammered into it as an anchor for manacles.\nMoist sat down facing the wall, gripped the iron ring in both hands, braced his legs against the stones on either side, and heaved.\nHis shoulders caught fire, and a red mist filled his vision, but the block slid out with a faint and inappropriate tinkling noise. Moist managed to ease it away from the hole and peered inside.\nAt the far end was another block, and the mortar around it looked suspiciously strong and fresh.\nJust in front of it was a new spoon. It was shiny.\nAs he studied it, he heard the clapping behind him. He turned his head, tendons twanging a little riff of agony, and saw several of the wardens watching him through the bars.\n\"Well done, Mr. Spangler!\" said one of them. \"Ron here owes me five dollars! I told him you were a sticker!! 'He's a sticker,' I said!\"\n\"You set this up, did you, Mr. Wilkinson?\" said Moist weakly, watching the glint of light on the spoon.\n\"Oh, not us, sir. Lord Vetinari's orders. He insists that all condemned prisoners should be offered the prospect of freedom.\"\n\"Freedom? But there's a damn great stone through there!\"\n\"Yes, there is that, sir, yes, there is that,\" said the warden. \"It's only the prospect, you see. Not actual free freedom as such. Hah, that'd be a bit daft, eh?\"\n\"I suppose so, yes,\" said Moist. He didn't say \"you bastards.\" The wardens had treated him quite civilly these past six weeks, and he made a point of getting on with people. He was very, very good at it. People skills were part of his stock-in-trade; they were nearly the whole of it.\nBesides, these people had big sticks. So, speaking carefully, he added: \"Some people might consider this cruel, Mr. Wilkinson.\"\n\"Yes, sir, we asked him about that, sir, but he said no, it wasn't. He said it provided\"--his forehead wrinkled \"--occ-you-pay-shun-all ther-rap-py, healthy exercise, prevented moping, and offered that greatest of all treasures, which is Hope, sir.\"\n\"Hope,\" muttered Moist glumly.\n\"Not upset, are you, sir?\"\n\"Upset? Why should I be upset, Mr. Wilkinson?\"\n\"Only the last bloke we had in this cell, he managed to get down that drain, sir. Very small man. Very agile.\"\n\n```\n:::\n:::\n\n\nThis returns the full text. This is because when a slice boundary is omitted, by default it starts at the very beginning of the object you are slicing.\n\nWe can test that we indeed get the full text by comparing it to the non-sliced version of `text`:\n\n::: {#8b5358aa .cell execution_count=32}\n``` {.python .cell-code}\ntext[:] == text\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\nTrue\n```\n:::\n:::\n\n\nNow, let's slice the first 10 elements of `text`:\n\n::: {#e714dd20 .cell execution_count=33}\n``` {.python .cell-code}\nprint(text[:10])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThey say t\n```\n:::\n:::\n\n\n:::{.hnote}\n\nLet's explain this code a bit:\n\nWe want our slice to start at the beginning of the text, so we are omitting that boundary (we could also use `0` left of the colon).\n\nBecause indexing starts at 0, the 10^th^ element is actually not \"t\", but the following \"h\". The reason we get \"t\" rather than \"h\" is because the right boundary of a slice is excluded.\n\n:::\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n**Question 1:** \\\nTry to write some code that will return \"prospect\".\n\n<!-- ```{python} -->\n<!-- text[18:26] -->\n<!-- ``` -->\n\n**Question 2:** \\\nNow, remember how we created the `words` object earlier? Try to use it to get the same result.\n\n<!-- ```{python} -->\n<!-- words[4] -->\n<!-- ``` -->\n\n:::\n\n### Striding\n\nA last way to extract characters out of a string is to use *strides*. A stride is defined with square brackets and 3 values separated by colons. The first value is the left boundary (included), the second value is the right boundary (excluded), and the third value is the step. By default (if omitted), the step is 1.\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n**Question 1:** \\\nWhat do you think that `text[::]` would return?\n\n**Question 2:** \\\nHow would you test it?\n\n**Question 3:** \\\nHow would you get every 3^rd^ character of the whole text?\n\n:::\n\nNow, a fun one: the step can also take a negative value. With `-1`, we get the text backward! This is because `-` indicates that we want to step from the end and `1` means that we want every character:\n\n::: {#ae9dfffe .cell execution_count=34}\n``` {.python .cell-code}\nprint(text[::-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\".eliga yreV .nam llams yreV .ris ,niard taht nwod teg ot deganam eh ,llec siht ni dah ew ekolb tsal eht ylnO\"\n\"?nosnikliW .rM ,tespu eb I dluohs yhW ?tespU\"\n\"?ris ,uoy era ,tespu toN\"\n.ylmulg tsioM derettum \",epoH\"\n\".ris ,epoH si hcihw ,serusaert lla fo tsetaerg taht dereffo dna ,gnipom detneverp ,esicrexe yhtlaeh ,yp-par-reht lla-nuhs-yap-uoy-cco--\" delknirw daeherof sih--\"dedivorp ti dias eH .t'nsaw ti ,on dias eh tub ,ris ,taht tuoba mih deksa ew ,ris ,seY\"\n\".nosnikliW .rM ,leurc siht redisnoc thgim elpoep emoS\" :dedda eh ,ylluferac gnikaeps ,oS .skcits gib dah elpoep eseht ,sediseB\n.ti fo elohw eht ylraen erew yeht ;edart-ni-kcots sih fo trap erew slliks elpoeP .ti ta doog yrev ,yrev saw eH .elpoep htiw no gnitteg fo tniop a edam eh dna ,skeew xis tsap eseht yllivic etiuq mih detaert dah snedraw ehT \".sdratsab uoy\" yas t'ndid eH .tsioM dias \",sey ,os esoppus I\"\n\"?he ,tfad tib a eb d'taht ,haH .hcus sa modeerf eerf lautca toN .ees uoy ,tcepsorp eht ylno s'tI\" .nedraw eht dias \",taht si ereht ,sey ,ris ,taht si ereht ,seY\"\n\"!ereht hguorht enots taerg nmad a s'ereht tuB ?modeerF\"\n\".modeerf fo tcepsorp eht dereffo eb dluohs srenosirp denmednoc lla taht stsisni eH .sredro s'iraniteV droL .ris ,su ton ,hO\"\n.noops eht no thgil fo tnilg eht gnihctaw ,ylkaew tsioM dias \"?nosnikliW .rM ,uoy did ,pu siht tes uoY\"\n\"!dias I ',rekcits a s'eH' !!rekcits a erew uoy mih dlot I !srallod evif em sewo ereh noR\" .meht fo eno dias \"!relgnapS .rM ,enod lleW\"\n.srab eht hguorht mih gnihctaw snedraw eht fo lareves was dna ,ynoga fo ffir elttil a gnignawt snodnet ,daeh sih denrut eH .mih dniheb gnippalc eht draeh eh ,ti deiduts eh sA\n.ynihs saw tI .noops wen a saw ti fo tnorf ni tsuJ\n.hserf dna gnorts ylsuoicipsus dekool ti dnuora ratrom eht dna ,kcolb rehtona saw dne raf eht tA\n.edisni dereep dna eloh eht morf yawa ti esae ot deganam tsioM .esion gnilknit etairporppani dna tniaf a htiw tuo dils kcolb eht tub ,noisiv sih dellif tsim der a dna ,erif thguac sredluohs siH\n.devaeh dna ,edis rehtie no senots eht tsniaga sgel sih decarb ,sdnah htob ni gnir nori eht deppirg ,llaw eht gnicaf nwod tas tsioM\n.selcanam rof rohcna na sa ti otni deremmah neeb dah elpats eguh a ,tniop emos ta ,dna ,snoitnetta sih fo tcejbo eht yltnerruc saw taht enots yvaeh dna egral a saw tI\n.sserttam tseivaeh s'dlrow eht derevocsid evah dluow yeht esle ro ,ereh gniddeb eht egnahc ot emac reve eno on ,yletanutroF .elif lian a ekil gnihtemos ot noops eht decuder dna skeew evif mih nekat dah krow eht raf oS .noops a htiw llaw llec sih ni enots a dnuora morf ratrom gnilbmurc eht lla gnivomer fo tcepsorp eht no ,ylralucitrap tsom ,dna ,gninrom eht ni degnah gnieb ton fo tcepsorp eht no dnim sih detartnecnoc dah dna noitautis eht ot hcaorppa evitisop erom a koot eh dnA\n.relgnapS derflA saw eh ,tnarraw htaed eht sa nwonk ti fo tib taht no ylralucitrap dna ,lareneg ni dlrow eht oT .ti rednu gnuh gnieb yb ,elbissop llits saw taht sa rafosni ,eman eht ssarrabme ot gniog ton saw eh tub ,stnerap esiwnu fi gnitod yb giwpiL nov tsioM deman neeb dah degnah eb ot gniog nam ehT\n.degnah eb ot gniog si taht ydob a ni eb lliw ti ,gninrom eht ni ,taht si no setartnecnoc ylbativeni dnim eht tahw ,yletanutrofnu ;yllufrednow dnim s'nam a setartnecnoc gninrom eht ni degnah gnieb fo tcepsorp eht taht yas yehT\n```\n:::\n:::\n\n\n## String concatenation\n\nStrings are fun because they can be concatenated with the operator `+`:\n\n::: {#3156d28e .cell execution_count=35}\n``` {.python .cell-code}\nprint(\"This is the beginning of Going Postal:\" + \"\\n\\n\" + text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is the beginning of Going Postal:\n\nThey say that the prospect of being hanged in the morning concentrates a man's mind wonderfully; unfortunately, what the mind inevitably concentrates on is that, in the morning, it will be in a body that is going to be hanged.\nThe man going to be hanged had been named Moist von Lipwig by doting if unwise parents, but he was not going to embarrass the name, insofar as that was still possible, by being hung under it. To the world in general, and particularly on that bit of it known as the death warrant, he was Alfred Spangler.\nAnd he took a more positive approach to the situation and had concentrated his mind on the prospect of not being hanged in the morning, and, most particularly, on the prospect of removing all the crumbling mortar from around a stone in his cell wall with a spoon. So far the work had taken him five weeks and reduced the spoon to something like a nail file. Fortunately, no one ever came to change the bedding here, or else they would have discovered the world's heaviest mattress.\nIt was a large and heavy stone that was currently the object of his attentions, and, at some point, a huge staple had been hammered into it as an anchor for manacles.\nMoist sat down facing the wall, gripped the iron ring in both hands, braced his legs against the stones on either side, and heaved.\nHis shoulders caught fire, and a red mist filled his vision, but the block slid out with a faint and inappropriate tinkling noise. Moist managed to ease it away from the hole and peered inside.\nAt the far end was another block, and the mortar around it looked suspiciously strong and fresh.\nJust in front of it was a new spoon. It was shiny.\nAs he studied it, he heard the clapping behind him. He turned his head, tendons twanging a little riff of agony, and saw several of the wardens watching him through the bars.\n\"Well done, Mr. Spangler!\" said one of them. \"Ron here owes me five dollars! I told him you were a sticker!! 'He's a sticker,' I said!\"\n\"You set this up, did you, Mr. Wilkinson?\" said Moist weakly, watching the glint of light on the spoon.\n\"Oh, not us, sir. Lord Vetinari's orders. He insists that all condemned prisoners should be offered the prospect of freedom.\"\n\"Freedom? But there's a damn great stone through there!\"\n\"Yes, there is that, sir, yes, there is that,\" said the warden. \"It's only the prospect, you see. Not actual free freedom as such. Hah, that'd be a bit daft, eh?\"\n\"I suppose so, yes,\" said Moist. He didn't say \"you bastards.\" The wardens had treated him quite civilly these past six weeks, and he made a point of getting on with people. He was very, very good at it. People skills were part of his stock-in-trade; they were nearly the whole of it.\nBesides, these people had big sticks. So, speaking carefully, he added: \"Some people might consider this cruel, Mr. Wilkinson.\"\n\"Yes, sir, we asked him about that, sir, but he said no, it wasn't. He said it provided\"--his forehead wrinkled \"--occ-you-pay-shun-all ther-rap-py, healthy exercise, prevented moping, and offered that greatest of all treasures, which is Hope, sir.\"\n\"Hope,\" muttered Moist glumly.\n\"Not upset, are you, sir?\"\n\"Upset? Why should I be upset, Mr. Wilkinson?\"\n\"Only the last bloke we had in this cell, he managed to get down that drain, sir. Very small man. Very agile.\"\n\n```\n:::\n:::\n\n\n<!-- ```{python} -->\n<!-- def end_of_sentence_marker(char): -->\n<!--     if char == \".\" or char == \"?\" or char == \"!\": -->\n<!--         return True -->\n<!--     else: -->\n<!--         return False -->\n<!-- ``` -->\n\n<!-- ```{python} -->\n<!-- # these tests should return True if your code is correct -->\n<!-- print(end_of_sentence_marker(\"?\") == True) -->\n<!-- print(end_of_sentence_marker(\"a\") == False) -->\n<!-- ``` -->\n\n<!-- ```{python} -->\n<!-- end_of_sentence_marker(\"!\") -->\n<!-- ``` -->\n\n<!-- ```{python} -->\n<!-- def split_sentences(text): -->\n<!--     sentences = [] -->\n<!--     start = 0 -->\n<!--     for end, char in enumerate(text): -->\n<!--         if end_of_sentence_marker(char): -->\n<!--             sentence = text[start:end + 1] -->\n<!--             sentences.append(sentence) -->\n<!--             start = end + 1 -->\n<!--     return sentences -->\n<!-- ``` -->\n\n<!-- ```{python} -->\n<!-- split_sentences(text) -->\n<!-- ``` -->\n\n<!-- ```{python} -->\n<!-- print(split_sentences(text))[0] -->\n<!-- ``` -->\n\nIf you want to go much beyond this (e.g. sentences tokenization, [natural language processing (NLP)](https://en.wikipedia.org/wiki/Natural_language_processing), etc.), you probably want to install a library for this such as [NLTK](https://en.wikipedia.org/wiki/Natural_Language_Toolkit) or [spaCy](https://spacy.io/).\n\n",
    "supporting": [
      "ws_text_files"
    ],
    "filters": [],
    "includes": {}
  }
}