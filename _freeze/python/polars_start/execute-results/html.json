{
  "hash": "537f63b1e50a723cdb381ad9f9b678b4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Getting started\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nHere are a few notes to get you started with Polars.\n\n:::\n\n## Installation\n\n### Personal computer\n\n```{.bash}\npython -m venv ~/env                  # Create virtual env\nsource ~/env/bin/activate             # Activate virtual env\npip install --upgrade pip             # Update pip\npip install polars          \t\t  # Install Polars\n```\n\n### Alliance clusters\n\nPolars wheels are available for Polars (always prefer wheels when possible):\n\n```{.bash}\npython -m venv ~/env                  # Create virtual env\nsource ~/env/bin/activate             # Activate virtual env\npip install --upgrade pip --no-index  # Update pip from wheel\npip install polars --no-index\t\t  # Install Polars from wheel\n```\n\n## Syntax\n\nOverall, the syntax feels very similar to [R's dplyr](https://cran.r-project.org/web/packages/dplyr/index.html) from [the tidyverse](https://www.tidyverse.org/).\n\nIn particular, extracting data is not done by indexing, but with action verbs:\n\n::: {#cfdc7ebd .cell execution_count=1}\n``` {.python .cell-code}\nimport polars as pl\n\ndf = pl.DataFrame(\n    {\n        \"species\": [\"A\", \"B\", \"C\"],\n        \"number\": [87, 13, 4],\n        \"environment\": [\"a\", \"b\", \"c\"]\n    }\n)\n```\n:::\n\n\n::: {#9ea1e111 .cell execution_count=2}\n``` {.python .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>number</th><th>environment</th></tr><tr><td>str</td><td>i64</td><td>str</td></tr></thead><tbody><tr><td>&quot;A&quot;</td><td>87</td><td>&quot;a&quot;</td></tr><tr><td>&quot;B&quot;</td><td>13</td><td>&quot;b&quot;</td></tr><tr><td>&quot;C&quot;</td><td>4</td><td>&quot;c&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#4e956179 .cell execution_count=3}\n``` {.python .cell-code}\ndf.filter(pl.col(\"number\") > 20).select(\"environment\")\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1, 1)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>environment</th></tr><tr><td>str</td></tr></thead><tbody><tr><td>&quot;a&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## Performance tips\n\n### Use lazy execution where possible\n\nWe already saw that you can lazily read files with `pl.scan_csv` instead of using `pl.read_csv`.\n\nAnother option is to use the `lazy` method.\n\n:::{.example}\n\nExample:\n\n:::\n\n```{.python}\ndf = pl.DataFrame({\"foo\": [\"a\", \"b\", \"c\"], \"bar\": [0, 1, 2]}).lazy()\n```\n\n### Data file format\n\nA good file format to store large datasets is [Apache Parquet](https://arrow.apache.org/docs/python/parquet.html). It is a columnar format (data is stored together by column instead of row as is the case for CSV files) and this allows better compression.\n\n## Migrating from Pandas\n\nRead [the migration guide](https://docs.pola.rs/user-guide/migration/pandas/#selecting-data): it will help you write Polars code rather than \"literally translated\" Pandas code that runs, but doesn't make use of Polars' strengths. The differences in style mostly come from the fact that Polars runs in parallel.\n\n",
    "supporting": [
      "polars_start_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}