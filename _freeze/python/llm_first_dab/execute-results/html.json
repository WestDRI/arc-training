{
  "hash": "a5edcd733dd168664c6b4e5df9e76db8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: First dab at playing with an LLM\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nIn this section, we will download a text from a URL and get some info on it.\n\n:::\n\n## Open a chat\n\nOpen an LLM chat interface. If you are familiar with a particular LLM, feel free to use that one. If you have never used an LLM before, you can pick one in [the non-exhaustive list I gave in the previous section](llm_why.html#which-llm-to-use).\n\nIt would be great if you could sit next to someone using a different model so that you could compare the outputs given by both models to similar prompts.\n\nYou will probably have to create an account. Also note that for most companies, the free models are older and less powerful than those in the pay versions or you might be limited to a certain number of queries.\n\n## Open a notebook\n\nOpen a new notebook in JupyterLab.\n\nWhen the LLM gives us some code, we will copy paste it in the notebook to run it.\n\n## LLM as instructor\n\nLLMs are great at teaching programming concepts. For instance, you learnt about loops this morning. Let's ask our LLM to explain Python loops.\n\nHere is the question I asked the LLM:\n\n:::{.llm}\n\nExplain to me how to write Python loops.\n\n:::\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nAsk questions about variables, data types, dictionaries, and other things you learnt this mourning. In particular, ask questions about things you didn't fully understand.\n\n:::\n\nNow, let's learn something that wasn't covered this mourning: writing Python functions.\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n- Ask the LLM what Python functions are.\n\n- Ask how to write them.\n\n- Ask the model to write a Python function that would give you the time.\n\n:::\n\n<!-- ```{python} -->\n<!-- from datetime import datetime -->\n\n<!-- def get_current_time(): -->\n<!--     # Get the current local time -->\n<!--     now = datetime.now() -->\n<!--     # Format the time as HH:MM:SS -->\n<!--     return now.strftime(\"%H:%M:%S\") -->\n\n<!-- # Example usage: -->\n<!-- print(\"The current time is:\", get_current_time()) -->\n<!-- ``` -->\n\n## LLM as coder\n\n### Download a text file from a URL\n\nThe snippet of text we will play with is in a text file I created containing the very beginning of the novel [Going Postal](https://en.wikipedia.org/wiki/Going_Postal) by [Terry Pratchett](https://en.wikipedia.org/wiki/Terry_Pratchett). I made it available at the URL <https://mint.westdri.ca/python/data/pratchett.txt>.\n\nLet's ask our LLM how to do this. Here is the prompt I use (feel free to write your own prompt):\n\n:::{.llm}\n\nHow can I download the text from this url: https://mint.westdri.ca/python/data/pratchett.txt in Python?\n\n:::\n\nOn my end, I got some nice explanations and the following code:\n\n::: {#04bc3fe6 .cell execution_count=2}\n``` {.python .cell-code}\nimport requests\n\nurl = \"https://mint.westdri.ca/python/data/pratchett.txt\"\nresponse = requests.get(url)\ntext = response.text  # This contains the text content as a string\n\nprint(text)  # Prints the downloaded text\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThey say that the prospect of being hanged in the morning concentrates a man's mind wonderfully; unfortunately, what the mind inevitably concentrates on is that, in the morning, it will be in a body that is going to be hanged.\nThe man going to be hanged had been named Moist von Lipwig by doting if unwise parents, but he was not going to embarrass the name, insofar as that was still possible, by being hung under it. To the world in general, and particularly on that bit of it known as the death warrant, he was Alfred Spangler.\nAnd he took a more positive approach to the situation and had concentrated his mind on the prospect of not being hanged in the morning, and, most particularly, on the prospect of removing all the crumbling mortar from around a stone in his cell wall with a spoon. So far the work had taken him five weeks and reduced the spoon to something like a nail file. Fortunately, no one ever came to change the bedding here, or else they would have discovered the world's heaviest mattress.\nIt was a large and heavy stone that was currently the object of his attentions, and, at some point, a huge staple had been hammered into it as an anchor for manacles.\nMoist sat down facing the wall, gripped the iron ring in both hands, braced his legs against the stones on either side, and heaved.\nHis shoulders caught fire, and a red mist filled his vision, but the block slid out with a faint and inappropriate tinkling noise. Moist managed to ease it away from the hole and peered inside.\nAt the far end was another block, and the mortar around it looked suspiciously strong and fresh.\nJust in front of it was a new spoon. It was shiny.\nAs he studied it, he heard the clapping behind him. He turned his head, tendons twanging a little riff of agony, and saw several of the wardens watching him through the bars.\n\"Well done, Mr. Spangler!\" said one of them. \"Ron here owes me five dollars! I told him you were a sticker!! 'He's a sticker,' I said!\"\n\"You set this up, did you, Mr. Wilkinson?\" said Moist weakly, watching the glint of light on the spoon.\n\"Oh, not us, sir. Lord Vetinari's orders. He insists that all condemned prisoners should be offered the prospect of freedom.\"\n\"Freedom? But there's a damn great stone through there!\"\n\"Yes, there is that, sir, yes, there is that,\" said the warden. \"It's only the prospect, you see. Not actual free freedom as such. Hah, that'd be a bit daft, eh?\"\n\"I suppose so, yes,\" said Moist. He didn't say \"you bastards.\" The wardens had treated him quite civilly these past six weeks, and he made a point of getting on with people. He was very, very good at it. People skills were part of his stock-in-trade; they were nearly the whole of it.\nBesides, these people had big sticks. So, speaking carefully, he added: \"Some people might consider this cruel, Mr. Wilkinson.\"\n\"Yes, sir, we asked him about that, sir, but he said no, it wasn't. He said it provided\"--his forehead wrinkled \"--occ-you-pay-shun-all ther-rap-py, healthy exercise, prevented moping, and offered that greatest of all treasures, which is Hope, sir.\"\n\"Hope,\" muttered Moist glumly.\n\"Not upset, are you, sir?\"\n\"Upset? Why should I be upset, Mr. Wilkinson?\"\n\"Only the last bloke we had in this cell, he managed to get down that drain, sir. Very small man. Very agile.\"\n\n```\n:::\n:::\n\n\n:::{.note}\n\nNote that the comments in the code are not mine but from the LLM, which is nice.\n\n:::\n\nIt looks like the code works.\n\n### Count a few things\n\nNow, let's count the number of words in the text.\n\nI asked the follow-up question (here again, you can phrase the question however you want. It is good to experiment):\n\n:::{.llm}\n\nWrite Python code to count the number of words in this text.\n\n:::\n\nHere again, I got some explanations and the following code:\n\n::: {#26e0f2ab .cell execution_count=3}\n``` {.python .cell-code}\n# Split the text into words using whitespace\nwords = text.split()\nword_count = len(words)\n\nprint(f\"Number of words in the text: {word_count}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of words in the text: 590\n```\n:::\n:::\n\n\n:::{.llm}\n\nWrite Python code to find the number of times the word \"the\" occurs in the text.\n\n:::\n\nHere, the LLM warned me that the following answer counts all instances of \"the\" (ignoring case) and that if this was not what I wanted, I just had to say so in a follow-up chat entry. This is what I wanted, so I am keeping the code as is:\n\n::: {#6f528aac .cell execution_count=4}\n``` {.python .cell-code}\nimport re\n\n# Use regular expressions to find all whole-word, case-insensitive matches of \"the\"\nthe_count = len(re.findall(r'\\bthe\\b', text, flags=re.IGNORECASE))\n\nprint(f'The word \"the\" occurs {the_count} times in the text.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe word \"the\" occurs 36 times in the text.\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n- Ask your LLM to explain the regular expression in the code.\n\n- We all know that LLMs hallucinate and make plenty of mistakes. You should never trust the code (or any LLM answer for that matter) uncritically. How could you double-check that this code is correct?\n\n:::\n\n<!-- - try a different model -->\n<!-- - how many words are there in the first sentence? (then count to confirm) -->\n\n### Extracting quotes\n\nNow, let's extract all quotes from the text.\n\nMy prompt:\n\n:::{.llm}\n\nWrite Python code that would extract all the quotes from the text\n\n:::\n\nHere is the code I got in the answer:\n\n::: {#e127326a .cell execution_count=5}\n``` {.python .cell-code}\n# Extract all quotes enclosed in double quotes\nquotes = re.findall(r'\"(.*?)\"', text)\n\n# Example: print the first 10 quotes\nfor quote in quotes[:10]:\n    print(quote)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWell done, Mr. Spangler!\nRon here owes me five dollars! I told him you were a sticker!! 'He's a sticker,' I said!\nYou set this up, did you, Mr. Wilkinson?\nOh, not us, sir. Lord Vetinari's orders. He insists that all condemned prisoners should be offered the prospect of freedom.\nFreedom? But there's a damn great stone through there!\nYes, there is that, sir, yes, there is that,\nIt's only the prospect, you see. Not actual free freedom as such. Hah, that'd be a bit daft, eh?\nI suppose so, yes,\nyou bastards.\nSome people might consider this cruel, Mr. Wilkinson.\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n- This looks good, but what if we want *all* the quotes from the text?\n\n- What does `quotes[:10]` mean?\n\n- What kind of structure is this:\n\n```{.python}\nfor quote in quotes[:10]:\n    print(quote)\n```\n\n- How do such structures work?\n\n:::\n\n## LLM as debugger\n\nHere is a Python code snippet:\n\n::: {#95df6fec .cell execution_count=6}\n``` {.python .cell-code}\nimport string\n\nclean_text = text.translate(str.maketrans(string.punctuation))\nprint(clean_text)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[5]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-bright-green-fg\">      1</span> <span style=\"color:rgb(255,95,135)\">import</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">string</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">3</span> <span class=\"ansi-bright-white-fg\">clean_text</span><span class=\"ansi-bright-white-fg\"> </span><span style=\"color:rgb(255,95,135)\">=</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">text</span><span style=\"color:rgb(255,95,135)\">.</span><span class=\"ansi-bright-white-fg\">translate</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">str</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">maketrans</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">string</span><span style=\"color:rgb(255,95,135)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">punctuation</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span><span class=\"ansi-bright-white-fg\">)</span>\n<span class=\"ansi-bright-green-fg\">      4</span> <span class=\"ansi-bright-white-fg\">print</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg\">clean_text</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: if you give only one argument to maketrans it must be a dict</pre>\n```\n:::\n\n:::\n:::\n\n\nIt doesn't work 🙁\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n- What is wrong with it?\n\n- What would be the proper syntax?\n\n- What does that code do?\n\n:::\n\n<!-- ```{python} -->\n\n<!-- clean_text = text.translate(str.maketrans('', '', string.punctuation)) -->\n<!-- print(clean_text) -->\n<!-- ``` -->\n<!-- ``` -->\n\n",
    "supporting": [
      "llm_first_dab_files"
    ],
    "filters": [],
    "includes": {}
  }
}