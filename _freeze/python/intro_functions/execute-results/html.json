{
  "hash": "d67f96c362483bb75306aea595e6c135",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Writing functions\naliases:\n  - functions.html\nauthor: Marie-H√©l√®ne Burle\n---\n\n:::{.def}\n\nPython comes with a number of built-in functions. Packages can provide additional ones. In many cases however, you will want to create your own functions to perform exactly the computations that you need.\n\nIn this section, we will see how to define new functions.\n\n:::\n\n## Syntax\n\nThe function definition syntax follows:\n\n```{.python}\ndef <name>(<arguments>):\n    <body>\n```\n\nOnce defined, new functions can be used as any other function.\n\nLet's give this a try by creating some greeting functions.\n\n## Function without argument\n\nLet's start with the simple case in which our function does not accept any argument:\n\n::: {#1dd37cd5 .cell execution_count=2}\n``` {.python .cell-code}\ndef hello():\n    print('Hello!')\n```\n:::\n\n\nThen we call it:\n\n::: {#2a6176d5 .cell execution_count=3}\n``` {.python .cell-code}\nhello()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello!\n```\n:::\n:::\n\n\nThis was great, but ...\n\n::: {#f796cb9d .cell execution_count=4}\n``` {.python .cell-code}\nhello('Marie')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[88]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">hello</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">Marie</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: hello() takes 0 positional arguments but 1 was given</pre>\n```\n:::\n\n:::\n:::\n\n\n... it does not accept arguments.\n\n## Function with one argument\n\nLet's step this up with a function which can accept an argument:\n\n::: {#e82b4e51 .cell execution_count=5}\n``` {.python .cell-code}\ndef greetings(name):\n    print('Hello ' + name + '!')\n```\n:::\n\n\nThis time, this works:\n\n::: {#f097f48e .cell execution_count=6}\n``` {.python .cell-code}\ngreetings('Marie')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello Marie!\n```\n:::\n:::\n\n\nHowever, this does not work anymore:\n\n::: {#972418a9 .cell execution_count=7}\n``` {.python .cell-code}\ngreetings()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[91]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">greetings</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: greetings() missing 1 required positional argument: 'name'</pre>\n```\n:::\n\n:::\n:::\n\n\nüôÅ\n\n## F-strings\n\nTo be more fancy, you can use a [formatted string literal](https://docs.python.org/3/reference/lexical_analysis.html#f-strings) or f-string instead of a simple string. F-strings allow to include the expressions that are replaced by arguments to be included inside the string and to format them.\n\nTo use them, you use `f` or `F` just before the string expression (without space) as in `f'This is a formatted string literal'`. Then you include the expressions that will be replaced by arguments inside the string, but in curly braces as in `f'This is a formatted string literal with an {expression}'`.\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {#0e820221 .cell execution_count=8}\n``` {.python .cell-code}\ndef greetings(name):\n    print(f'Hello {name}!')\n\ngreetings('Marie')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello Marie!\n```\n:::\n:::\n\n\n:::{.note}\n\nNote the difference in syntax. Here, we aren't using `+` anymore as we aren't concatenating a series of strings. Instead, we create a single string which includes the expression `name` that will be replaced by the argument.\n\n:::\n\nWith f-strings, you can now add formatting to the output.\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {#a1d942e8 .cell execution_count=9}\n``` {.python .cell-code}\n# Add quotes around the expression\ndef greetings(name):\n    print(f'Hello {name!r}!')\n\ngreetings('Marie')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello 'Marie'!\n```\n:::\n:::\n\n\nYou can explore more tricks that can be done with f-strings in [the official Python tutorials](https://docs.python.org/3/tutorial/inputoutput.html#tut-f-strings).\n\n## Function with a facultative argument\n\nLet's make this even more fancy: a function with a facultative argument. That is, a function which accepts an argument, but also has a default value for when we do not provide any argument:\n\n::: {#5f993f35 .cell execution_count=10}\n``` {.python .cell-code}\ndef howdy(name='everyone'):\n    print(f'Hello {name}!')\n```\n:::\n\n\nWe can call it without argument (making use of the default value):\n\n::: {#7d4b4f1f .cell execution_count=11}\n``` {.python .cell-code}\nhowdy()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello everyone!\n```\n:::\n:::\n\n\nAnd we can call it with an argument:\n\n::: {#b3bb927d .cell execution_count=12}\n``` {.python .cell-code}\nhowdy('Marie')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello Marie!\n```\n:::\n:::\n\n\nThis was better, but ...\n\n::: {#e403a674 .cell execution_count=13}\n``` {.python .cell-code}\nhowdy('Marie', 'Alex')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[97]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">howdy</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">Marie</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">Alex</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: howdy() takes from 0 to 1 positional arguments but 2 were given</pre>\n```\n:::\n\n:::\n:::\n\n\n... this does not work.\n\n## Function with two arguments\n\nWe could create a function which takes two arguments:\n\n::: {#c24274b4 .cell execution_count=14}\n``` {.python .cell-code}\ndef hey(name1, name2):\n    print(f'Hello {name1} and {name2}!')\n```\n:::\n\n\nWhich solves our problem:\n\n::: {#2761664a .cell execution_count=15}\n``` {.python .cell-code}\nhey('Marie', 'Alex')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello Marie and Alex!\n```\n:::\n:::\n\n\nBut it is terribly limiting:\n\n::: {#29670b6e .cell execution_count=16}\n``` {.python .cell-code}\n# This doesn't work\nhey()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[100]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-bright-green-fg\">      1</span> <span style=\"color:rgb(138,138,138)\"># This doesn't work</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">2</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">hey</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: hey() missing 2 required positional arguments: 'name1' and 'name2'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e1db67e1 .cell execution_count=17}\n``` {.python .cell-code}\n# And neither does this\nhey('Marie')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[101]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-bright-green-fg\">      1</span> <span style=\"color:rgb(138,138,138)\"># And neither does this</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">2</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">hey</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">Marie</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: hey() missing 1 required positional argument: 'name2'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#8ba01924 .cell execution_count=18}\n``` {.python .cell-code}\n# Nor to mention this...\nhey('Marie', 'Alex', 'Luc')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[102]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-bright-green-fg\">      1</span> <span style=\"color:rgb(138,138,138)\"># Nor to mention this...</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">2</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">hey</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">Marie</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">Alex</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">Luc</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: hey() takes 2 positional arguments but 3 were given</pre>\n```\n:::\n\n:::\n:::\n\n\n## Function with any number of args\n\nLet's create a function which handles all cases.\n\nWe will have to break it down into the various scenarios, but [we already saw how to do this](intro_control_flow#if-statements) in the previous lesson with `if` statements.\n\nThe scenarios are:\n\n- no name given (we need to set some default somehow),\n- one name given (no grammar syntax needs adding),\n- two names given (we need to add \"and\"),\n- more than two names (we need to add commas after all but the last name and we need to add \"and\" before the last name).\n\nWe saw above [how to create a default value](#function-with-a-facultative-argument). Here, we will use a different approach that will make our life easier. We will use the argument as the list of names. That allows us to get its length (to see which scenario we are in) and to index it (to add the grammar syntax at the right place).\n\nFinally, we need a way to make the function work with any number of arguments. To do this, we use an [arbitrary argument list](https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists) with `*` followed by a name. When the function already accepts some arguments, by convention, people use `*args` to signify that any number of additional arguments can be passed to the function. But you can use any name preceded by the asterisk.\n\nHere, because we will only use the starred argument, let's call it `*names`.\n\n[This](https://stackoverflow.com/q/36901/9210961) and [that](https://stackoverflow.com/q/3394835/9210961) Stack Overflow questions attracted a lot of very useful answers to explain the concepts of `*` and `**`.\n\nHere is our function:\n\n::: {#68cbfae1 .cell execution_count=19}\n``` {.python .cell-code}\ndef hi(*names):\n    # Case 1: No names were provided.\n    if not names:\n        print(\"Hello everyone!\")\n        return\n\n    # Case 2: Only one name was provided.\n    if len(names) == 1:\n        # names is a tuple, so we access the first element with names[0]\n        print(f\"Hello {names[0]}!\")\n        return\n\n    # Case 3: Two names were provided.\n    if len(names) == 2:\n        print(f\"Hello {names[0]} and {names[1]}!\")\n        return\n\n    # Case 4: Three or more names were provided (the general case).\n    # We take all names except the last one for the main list.\n    all_but_last = names[:-1]\n    last_person = names[-1]\n\n    # We join the main list with commas.\n    greeting_list = \", \".join(all_but_last)\n\n    # Then we construct the final sentence.\n    print(f\"Hello {greeting_list}, and {last_person}!\")\n```\n:::\n\n\nLet's test it:\n\n::: {#cf0e7ced .cell execution_count=20}\n``` {.python .cell-code}\nhi()\nhi('Marie')\nhi('Marie', 'Alex')\nhi('Marie', 'Alex', 'Luc')\nhi('Marie', 'Alex', 'Luc', 'Grace')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello everyone!\nHello Marie!\nHello Marie and Alex!\nHello Marie, Alex, and Luc!\nHello Marie, Alex, Luc, and Grace!\n```\n:::\n:::\n\n\nEverything works! üôÇ\n\nNote the presence of the keyword `return` in this function. When the `return` statement is encountered during a function execution, the function terminates immediately and any code after that statement is not executed. This is why we could write this function with a series of `if` statements.\n\nInstead, we could have written our function using `if elif else` statements [as we saw in the previous lesson](intro_control_flow#if-elif-else).\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWrite a version of this function that does not use `return` to exit the function, but uses `if elif else` statements instead.\n\n:::\n\n<!-- ```{.python} -->\n<!-- def hi(*names): -->\n<!--     # Case 1: No names were provided. -->\n<!--     if not names: -->\n<!--         print(\"Hello everyone!\") -->\n\n<!--     # Case 2: Only one name was provided. -->\n<!--     elif len(names) == 1: -->\n<!--         # names is a tuple, so we access the first element with names[0] -->\n<!--         print(f\"Hello {names[0]}!\") -->\n\n<!--     # Case 3: Two names were provided. -->\n<!--     elif len(names) == 2: -->\n<!--         print(f\"Hello {names[0]} and {names[1]}!\") -->\n\n<!--     # Case 4: Three or more names were provided (the general case). -->\n<!--     # We take all names except the last one for the main list. -->\n<!--     else: -->\n<!--         all_but_last = names[:-1] -->\n<!--         last_person = names[-1] -->\n<!--         # We join the main list with commas. -->\n<!--         greeting_list = \", \".join(all_but_last) -->\n<!--         # Then we construct the final sentence. -->\n<!--         print(f\"Hello {greeting_list}, and {last_person}!\") -->\n<!-- ``` -->\n\n## Documenting functions\n\nIt is a good habit to document what your functions do. As with comments, those \"documentation strings\" or \"docstrings\" will help future you or other users of your code.\n\n[PEP 257](https://peps.python.org/pep-0257/#multi-line-docstrings)‚Äîdocstring conventions‚Äîsuggests to use single-line docstrings surrounded by triple quotes.\n\nRemember the function definition syntax we saw at the start of this chapter? To be more exhaustive, we should have written it this way:\n\n```{.python}\ndef <name>(<arguments>):\n    \"\"\"<docstrings>\"\"\"\n    <body>\n```\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {#864f3009 .cell execution_count=21}\n``` {.python .cell-code}\ndef hi(*names):\n    \"\"\"Greets a variable number of people with proper grammar.\"\"\"\n    # Case 1: No names were provided.\n    if not names:\n        print(\"Hello everyone!\")\n        return\n\n    # Case 2: Only one name was provided.\n    if len(names) == 1:\n        # names is a tuple, so we access the first element with names[0]\n        print(f\"Hello {names[0]}!\")\n        return\n\n    # Case 3: Two names were provided.\n    if len(names) == 2:\n        print(f\"Hello {names[0]} and {names[1]}!\")\n        return\n\n    # Case 4: Three or more names were provided (the general case).\n    # We take all names except the last one for the main list.\n    all_but_last = names[:-1]\n    last_person = names[-1]\n\n    # We join the main list with commas.\n    greeting_list = \", \".join(all_but_last)\n\n    # Then we construct the final sentence.\n    print(f\"Hello {greeting_list}, and {last_person}!\")\n```\n:::\n\n\n[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length)‚Äîthe style guide for Python code‚Äîsuggests a maximum of 72 characters per line for docstrings.\n\nIf your docstring is longer, you should create a multi-line one. In that case, [PEP 257](https://peps.python.org/pep-0257/#multi-line-docstrings) suggests to have a summary line at the top (right after the opening set of triple quotes), then leave a blank line, then have your long docstrings (which can occupy multiple lines), and finally have the closing set of triple quotes on a line of its own:\n\n```{.python}\ndef <name>(<arguments>):\n    \"\"\"<summary docstrings line>\"\"\"\n\n    <more detailed description>\n    \"\"\"\n    <body>\n```\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {#06787737 .cell execution_count=22}\n``` {.python .cell-code}\ndef hi(*names):\n    \"\"\"\n    Greets a variable number of people with proper grammar.\n\n    This function uses *args to accept any number of string arguments.\n    \"\"\"\n    # Case 1: No names were provided.\n    if not names:\n        print(\"Hello everyone!\")\n        return\n\n    # Case 2: Only one name was provided.\n    if len(names) == 1:\n        # names is a tuple, so we access the first element with names[0]\n        print(f\"Hello {names[0]}!\")\n        return\n\n    # Case 3: Two names were provided.\n    if len(names) == 2:\n        print(f\"Hello {names[0]} and {names[1]}!\")\n        return\n\n    # Case 4: Three or more names were provided (the general case).\n    # We take all names except the last one for the main list.\n    all_but_last = names[:-1]\n    last_person = names[-1]\n\n    # We join the main list with commas.\n    greeting_list = \", \".join(all_but_last)\n\n    # Then we construct the final sentence.\n    print(f\"Hello {greeting_list}, and {last_person}!\")\n```\n:::\n\n\nYou can now access the documentation of your function as you would any Python function:\n\n::: {#2f6bbdb5 .cell execution_count=23}\n``` {.python .cell-code}\nhelp(hi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on function hi in module __main__:\n\nhi(*names)\n    Greets a variable number of people with proper grammar.\n\n    This function uses *args to accept any number of string arguments.\n\n```\n:::\n:::\n\n\nOr:\n\n::: {#ac1fbd20 .cell execution_count=24}\n``` {.python .cell-code}\nprint(hi.__doc__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nGreets a variable number of people with proper grammar.\n\nThis function uses *args to accept any number of string arguments.\n\n```\n:::\n:::\n\n\n## Returning values\n\nSo far, all the functions we looked at printed something. Often, you will want your functions to calculate some result. This result needs to be \"returned\". This is also done with the keyword `return` that we saw above, this time followed by the value(s) to be returned.\n\nLet's create a dummy function:\n\n::: {#db70b43f .cell execution_count=25}\n``` {.python .cell-code}\ndef add_one(value):\n    value + 1\n```\n:::\n\n\nand test it:\n\n::: {#82a1b916 .cell execution_count=26}\n``` {.python .cell-code}\nadd_one(4)\n```\n:::\n\n\nWe don't get any result. ü§î\n\nThat's because our function is not returning anything. To fix it, we need to return the result:\n\n::: {#dec17f3d .cell execution_count=27}\n``` {.python .cell-code}\ndef add_one(value):\n    return value + 1\n```\n:::\n\n\nNow it works:\n\n::: {#cf8386f3 .cell execution_count=28}\n``` {.python .cell-code}\nadd_one(4)\n```\n\n::: {.cell-output .cell-output-display execution_count=112}\n```\n5\n```\n:::\n:::\n\n\n## Printing vs returning\n\nSo what's the difference between printing and returning?\n\nPrinting is called a *side-effect*: it modifies the state of the terminal by displaying some text on it, but it doesn't return any value to the program (in fact it returns `None`):\n\n::: {#79b97ae0 .cell execution_count=29}\n``` {.python .cell-code}\ndef test_print():\n    print('Printing function')\n\na = test_print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPrinting function\n```\n:::\n:::\n\n\n::: {#654d1346 .cell execution_count=30}\n``` {.python .cell-code}\ntype(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=114}\n```\nNoneType\n```\n:::\n:::\n\n\n::: {#a77244e0 .cell execution_count=31}\n``` {.python .cell-code}\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNone\n```\n:::\n:::\n\n\nOn the contrary, returning a value makes it available to the program:\n\n::: {#4c5997f4 .cell execution_count=32}\n``` {.python .cell-code}\ndef test_return():\n    return 3\n\na = test_return()\n```\n:::\n\n\n::: {#2fb194f3 .cell execution_count=33}\n``` {.python .cell-code}\ntype(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=117}\n```\nint\n```\n:::\n:::\n\n\n::: {#ca46b744 .cell execution_count=34}\n``` {.python .cell-code}\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWrite a function that calculates an area. It should:\n\n- be documented,\n- accept 2 arguments: `length` and `width`,\n- print an error message if `length` and/or `width` is negative.\n\n:::\n\n<!-- ```{python} -->\n<!-- def calculate_area(length, width): -->\n<!--     \"\"\"Calculates the area of a rectangle. -->\n\n<!--     Args: -->\n<!--         length: The length of the rectangle. -->\n<!--         width: The width of the rectangle. -->\n\n<!--     Returns: -->\n<!--         The calculated area of the rectangle. -->\n<!--     \"\"\" -->\n<!--     if length < 0 or width < 0: -->\n<!--         print('Neither length nor width can be negative.') -->\n<!--     else: -->\n<!--         area = length * width -->\n<!--         return area -->\n<!-- ``` -->\n\n",
    "supporting": [
      "intro_functions_files"
    ],
    "filters": [],
    "includes": {}
  }
}