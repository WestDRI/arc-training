{
  "hash": "18e6f1fc5ed0f2195958b4418189438d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Writing functions\naliases:\n  - functions.html\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nPython comes with a number of built-in functions. Packages can provide additional ones. In many cases however, you will want to create your own functions to perform exactly the computations that you need.\n\nIn this section, we will see how to define new functions.\n\n:::\n\n## Syntax\n\nThe function definition syntax follows:\n\n```default\ndef <name>(<arguments>):\n    <body>\n```\n\nOnce defined, new functions can be used as any other function.\n\nLet's give this a try by creating some greeting functions.\n\n## Function without argument\n\nLet's start with the simple case in which our function does not accept any argument:\n\n::: {#0f654ccb .cell execution_count=1}\n``` {.python .cell-code}\ndef hello():\n    print('Hello')\n```\n:::\n\n\nThen we call it:\n\n::: {#d06fda38 .cell execution_count=2}\n``` {.python .cell-code}\nhello()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello\n```\n:::\n:::\n\n\nThis was great, but ...\n\n::: {#afc17313 .cell execution_count=3}\n``` {.python .cell-code}\nhello('Marie')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[3]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">hello</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">Marie</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: hello() takes 0 positional arguments but 1 was given</pre>\n```\n:::\n\n:::\n:::\n\n\n... it does not accept arguments.\n\n## Function with one argument\n\nLet's step this up with a function which can accept an argument:\n\n::: {#358c662c .cell execution_count=4}\n``` {.python .cell-code}\ndef greetings(name):\n    print('Hello ' + name)\n```\n:::\n\n\nThis time, this works:\n\n::: {#384784e6 .cell execution_count=5}\n``` {.python .cell-code}\ngreetings('Marie')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello Marie\n```\n:::\n:::\n\n\nHowever, this does not work anymore:\n\n::: {#53f7eee4 .cell execution_count=6}\n``` {.python .cell-code}\ngreetings()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[6]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">greetings</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: greetings() missing 1 required positional argument: 'name'</pre>\n```\n:::\n\n:::\n:::\n\n\n:(\n\n## Function with a facultative argument\n\nLet's make this even more fancy: a function with a facultative argument. That is, a function which accepts an argument, but also has a default value for when we do not provide any argument:\n\n::: {#a122e4a8 .cell execution_count=7}\n``` {.python .cell-code}\ndef howdy(name='you'):\n    print('Hello ' + name)\n```\n:::\n\n\nWe can call it without argument (making use of the default value):\n\n::: {#7dad5bb9 .cell execution_count=8}\n``` {.python .cell-code}\nhowdy()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello you\n```\n:::\n:::\n\n\nAnd we can call it with an argument:\n\n::: {#904af079 .cell execution_count=9}\n``` {.python .cell-code}\nhowdy('Marie')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello Marie\n```\n:::\n:::\n\n\nThis was better, but ...\n\n::: {#34160ffe .cell execution_count=10}\n``` {.python .cell-code}\nhowdy('Marie', 'Paul')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[10]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">howdy</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">Marie</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">Paul</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: howdy() takes from 0 to 1 positional arguments but 2 were given</pre>\n```\n:::\n\n:::\n:::\n\n\n... this does not work.\n\n## Function with two arguments\n\nWe could create a function which takes two arguments:\n\n::: {#94651bd7 .cell execution_count=11}\n``` {.python .cell-code}\ndef hey(name1, name2):\n    print('Hello ' + name1 + ', ' + name2)\n```\n:::\n\n\nWhich solves our problem:\n\n::: {#147fc2f5 .cell execution_count=12}\n``` {.python .cell-code}\nhey('Marie', 'Paul')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello Marie, Paul\n```\n:::\n:::\n\n\nBut it is terribly limiting:\n\n::: {#695aa076 .cell execution_count=13}\n``` {.python .cell-code}\n# This doesn't work\nhey()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[13]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-bright-green-fg\">      1</span> <span style=\"color:rgb(138,138,138)\"># This doesn't work</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">2</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">hey</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: hey() missing 2 required positional arguments: 'name1' and 'name2'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#448b355a .cell execution_count=14}\n``` {.python .cell-code}\n# And neither does this\nhey('Marie')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[14]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-bright-green-fg\">      1</span> <span style=\"color:rgb(138,138,138)\"># And neither does this</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">2</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">hey</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">Marie</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: hey() missing 1 required positional argument: 'name2'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#246e421f .cell execution_count=15}\n``` {.python .cell-code}\n# Nor to mention this...\nhey('Marie', 'Paul', 'Alex')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[15]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-bright-green-fg\">      1</span> <span style=\"color:rgb(138,138,138)\"># Nor to mention this...</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">2</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">hey</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">Marie</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">Paul</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">,</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\"> </span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">Alex</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">TypeError</span>: hey() takes 2 positional arguments but 3 were given</pre>\n```\n:::\n\n:::\n:::\n\n\n## Function with any number of args\n\nLet's create a truly great function which handles all our cases:\n\n::: {#67439a3f .cell execution_count=16}\n``` {.python .cell-code}\ndef hi(name='you', *args):\n    result = ''\n    for i in args:\n        result += (', ' + i)\n    print('Hello ' + name + result)\n```\n:::\n\n\nAnd let's test it:\n\n::: {#e704ff52 .cell execution_count=17}\n``` {.python .cell-code}\nhi()\nhi('Marie')\nhi('Marie', 'Paul')\nhi('Marie', 'Paul', 'Alex')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello you\nHello Marie\nHello Marie, Paul\nHello Marie, Paul, Alex\n```\n:::\n:::\n\n\nEverything works!\n\n<!-- ## Returning values -->\n\n## Documenting functions\n\nIt is a good habit to document what your functions do. As with comments, those \"documentation strings\" or \"docstrings\" will help future you or other users of your code.\n\n[PEP 257](https://peps.python.org/pep-0257/#multi-line-docstrings)—docstring conventions—suggests to use single-line docstrings surrounded by triple quotes.\n\nRemember the function definition syntax we saw at the start of this chapter? To be more exhaustive, we should have written it this way:\n\n```default\ndef <name>(<arguments>):\n    \"\"\"<docstrings>\"\"\"\n    <body>\n```\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {#3a8bc213 .cell execution_count=18}\n``` {.python .cell-code}\ndef hi(name='you', *args):\n    \"\"\"Print a greeting\"\"\"\n    result = ''\n    for i in args:\n        result += (', ' + i)\n    print('Hello ' + name + result)\n```\n:::\n\n\n[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length)—the style guide for Python code—suggests a maximum of 72 characters per line for docstrings.\n\nIf your docstring is longer, you should create a multi-line one. In that case, [PEP 257](https://peps.python.org/pep-0257/#multi-line-docstrings) suggests to have a summary line at the top (right after the opening set of triple quotes), then leave a blank line, then have your long docstrings (which can occupy multiple lines), and finally have the closing set of triple quotes on a line of its own:\n\n```default\ndef <name>(<arguments>):\n    \"\"\"<summary docstrings line>\"\"\"\n\n    <more detailed description>\n    \"\"\"\n    <body>\n```\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {#cc2213c9 .cell execution_count=19}\n``` {.python .cell-code}\ndef hi(name='you', *args):\n    \"\"\"Print a greeting\n\n    Accepts any number of arguments\n    \"\"\"\n    result = ''\n    for i in args:\n        result += (', ' + i)\n    print('Hello ' + name + result)\n```\n:::\n\n\n:::{.note}\n\nYou can (and should) document modules, classes, and methods in the same way.\n\n:::\n\nYou can now access the documentation of your function as you would any Python function:\n\n::: {#5d951850 .cell execution_count=20}\n``` {.python .cell-code}\nhelp(hi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on function hi in module __main__:\n\nhi(name='you', *args)\n    Print a greeting\n\n    Accepts any number of arguments\n\n```\n:::\n:::\n\n\nOr:\n\n::: {#26e79bb5 .cell execution_count=21}\n``` {.python .cell-code}\nprint(hi.__doc__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPrint a greeting\n\nAccepts any number of arguments\n\n```\n:::\n:::\n\n\n",
    "supporting": [
      "intro_functions_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}