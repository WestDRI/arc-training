{
  "hash": "29844189e7aafb3fc028b064cd9f03b5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Intro programming for the humanities <br>\nfrontpic: /img/logo_dhsi.png\nfrontpicwidth: 80%\nnoshadow: noshadow\nauthor: <br>Marie-Hélène Burle\ndate: 2025-06-2\ndate-format: long\nexecute:\n  freeze: auto\n  cache: true\n  error: true\n  echo: true\nformat:\n  revealjs:\n    embed-resources: true\n    theme: [default, ../revealjsdhsi.scss]\n    logo: /img/favicon_dhsi.png\n    highlight-style: ayu\n    code-line-numbers: false\n    template-partials:\n      - ../title-slide.html\n    pointer:\n      color: \"#b5111b\"\n      pointerSize: 32\n    link-external-newwindow: true\n    footer: <a href=\"wb_hss_prog.qmd\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"rgb(134,110,26)\" class=\"bi bi-arrow-90deg-up\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z\"/></svg>&nbsp;Back to webinar page</a>\n    auto-stretch: false\nrevealjs-plugins:\n  - pointer\n---\n\n## Computer programming {.center}\n\nProgramming (or coding) consists of writing a set of instructions (a program) for computers so that they perform a task\n\nThere are many programming languages—each with its own syntax—but the core concepts apply to all languages. For this course, we will use Python\n\n**Programs accept inputs (data) and produce outputs (transformed data)**\n\n# How to choose a language?\n\n## Important considerations {.center}\n\n- [Free and open source software (FOSS)](https://en.wikipedia.org/wiki/Free_and_open-source_software) vs proprietary\n- [Compiled](https://en.wikipedia.org/wiki/Compiled_language) vs [interpreted](https://en.wikipedia.org/wiki/Interpreter_(computing)) language (speed vs convenience)\n- Language adapted to particular usage\n- Language used in your field (colleagues, collaborators, literature)\n\n## Downsides of proprietary software {.center}\n\n- Researchers who do not have access to the tool cannot reproduce your methods\n- Once you leave academia, you may not have access to the tool anymore\n- Your university may stop paying for a license\n- You may get locked-in\n- Proprietary tools are black boxes\n- Long-term access is uncertain\n- Proprietary tools fall behind popular open-source tools\n- Proprietary tools often fail to address specialized edge cases needed in research\n\n## The argument for FOSS {.center}\n\n- Equal access to everyone, including poorer countries or organizations (it's free!)\n- Open science\n- Transparency\n- The whole community can contribute to and have a say about development\n- You an build specific capabilities for your edge cases\n- Guarantied long term access\n- No risk of getting locked-in\n\n## Compiled languages {.center}\n\nYou write code, compile it into machine code, then use this to process your data\n\n![](img/compiled_language.png){fig-alt=\"noshadow\" width=\"80%\"}\n\nCompiled languages are fast. The two step process however makes prototyping less practical and these languages are hard to learn and debug\n\n:::{.example}\n\nExamples of compiled languages include C, C++, Fortran, Go, Haskell\n\n:::\n\n## Interpreted languages {.center}\n\nInterpreted languages are executed directly\n\n![](img/interpreted_language.png){fig-alt=\"noshadow\" width=\"80%\"}\n\nYou get direct feed-back, making it easier to prototype. Interpreted languages are easy to learn and debug, but they are much slower\n\n:::{.example}\n\nExamples of interpreted languages include R, Python, Perl, and JavaScript\n\n:::\n\n## Python {.center}\n\nPython is free and open-source, interpreted, and general-purpose\n\nIt was created by Dutch programmer [Guido van Rossum](https://en.wikipedia.org/wiki/Guido_van_Rossum) in the 80s, with a launch in 1989\n\nThe [PYPL PopularitY of Programming Language index](https://pypl.github.io/PYPL.html) is based on the number of tutorial searches in Google. Python has been going up steadily, reaching the first position in 2018. It is also ahead in other indices and is the language used by most of the deep learning community\n\nThis doesn't mean that Python is better than other languages, but it means that there are a lot of resources and a large collection of external packages\n\n# Tools you need for programming\n\n## Text editor to write scripts {.center}\n\nA text editor is **not** the same as a word processor such as Microsoft Office Word. Word documents are **not** plain text documents: they contain a lot of hidden formatting and are actually a collection of files. This is not what you want to write scripts\n\nExamples of good text editors (free and open source):\n\n- [Emacs](https://www.gnu.org/software/emacs/)\n- [Visual Studio Code](https://code.visualstudio.com/)\n- [Vim](https://www.vim.org/)\n\n## Optional: an IDE {.center}\n\n[Integrated development environments (IDEs)](https://en.wikipedia.org/wiki/Integrated_development_environment) are software that make running a language more friendly by adding functionality and convenience tools, usually within a [graphical user interface (GUI)](https://en.wikipedia.org/wiki/Graphical_user_interface)\n\nA popular IDE for Python is [JupyterLab](https://jupyter.org/)\n\n## Debugging and profiling tools {.center}\n\nSome languages come with debugging tools that make it easier to find problems in the code\n\nProfilers allow you to spot bottlenecks in the execution of your code\n\nBenchmarking tools allow you to compare several versions of code to find which is faster\n\n## Hardware {.center}\n\nPython is great in many respects, but it is not a fast language\n\nMany libraries for Python are written in faster compiled languages (e.g. [C](https://en.wikipedia.org/wiki/C_(programming_language)), [C++](https://en.wikipedia.org/wiki/C%2B%2B), [Fortran](https://en.wikipedia.org/wiki/Fortran))\n\nTo speed things up more, some code or sections of code can be run in parallel (instead of serially). To do this though, you need more hardware\n\nYou can run code using multiple [CPUs (central processing unit)](https://en.wikipedia.org/wiki/Central_processing_unit). Some code can be accelerated using [GPUs (graphical processing unit)](https://en.wikipedia.org/wiki/Graphics_processing_unit)\n\nFor very large scale projects such as very large simulations, deep learning, or big data projects, you can use [supercomputers](https://en.wikipedia.org/wiki/Supercomputer)\n\n# How to run Python\n\n## Python shell {.center}\n\nThe simplest way to use Python is to type commands directly in the Python shell. This sends commands directly to the interpreter\n\nThe Python shell has a prompt that looks like this:\n\n```\n>>>\n```\n\n## IPython {.center}\n\n[IPython](https://ipython.org/) is an improved shell with better performance and more functionality (e.g. colour-coding, magic commands)\n\nThe prompt looks like:\n\n```\nIn [x]:\n```\n\n:::{.notenoit}\n\n`x` is the command number (e.g. for your first command, it will show `In [1]:`\n\n:::\n\n## Jupyter {.center}\n\nThe IPython shell was integrated into a fancy interface, the Jupyter notebook. This later lead to a fully fledged [IDE (integrated development environment)](https://en.wikipedia.org/wiki/Integrated_development_environment) called [JupyterLab](https://jupyter.org/) which contains notebooks, a command line, a file explorer, and other functionality\n\n:::{.note}\n\nEven though JupyterLab runs in your browser, it does not use the internet: it is all run locally on your machine (browsers are software that are great at displaying HTML files, so we use them to access the web, but they can also display files from your computer)\n\n:::\n\n## Other IDEs {.center}\n\nJupyter has probably become the most popular IDE, but it is possible to run Python in other IDE such as [Emacs](/emacs/wb_ide.qmd)\n\n## Python script {.center}\n\nYou can write your Python code in a text file with a `.py` extension and run the script in your terminal with:\n\n```{.bash}\npython script.py\n```\n\nThis will execute the code non-interactively\n\n# Programming concepts\n\n## Packages {.center}\n\nMany languages can have their functionality expanded by the installation of packages developed by the open source community. The potential is unlimited\n\nMany languages come with their own package manager\n\nIn Python, popular package managers include [pip](https://pip.pypa.io/en/stable/), [Conda](https://docs.conda.io/projects/conda/en/stable/), and the newer much faster [uv](https://docs.astral.sh/uv/)\n\n## Syntax {.center}\n\nEach language uses its own syntax\n\n:::{.example}\n\nExample:\n\nIn Python, the tab (equal to four spaces by default) has meaning, while in R, it doesn't (it only makes it easier for people to read code)\n\n:::\n\n## Data types {.center}\n\nEach language contains various data types such as integers, floating-point numbers (decimals), strings (series of characters), Booleans (true/false), etc.\n\n:::{.example}\n\nPython examples:\n\n:::\n\n::: {#0931d954 .cell execution_count=1}\n``` {.python .cell-code}\ntype(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nint\n```\n:::\n:::\n\n\n::: {#8b96f4e7 .cell execution_count=2}\n``` {.python .cell-code}\ntype(5.0)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nfloat\n```\n:::\n:::\n\n\n::: {#9ccba0ab .cell execution_count=3}\n``` {.python .cell-code}\ntype(\"This is a string\")\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nstr\n```\n:::\n:::\n\n\n::: {#995f17a2 .cell execution_count=4}\n``` {.python .cell-code}\ntype(True)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nbool\n```\n:::\n:::\n\n\n## Variables {.center}\n\nValues can be assigned to names to create variables\n\n:::{.example}\n\nPython example\n\n:::\n\n::: {#e5e96c85 .cell execution_count=5}\n``` {.python .cell-code}\na = 3\n```\n:::\n\n\n`a` is now a variable containing the value `3`:\n\n::: {#505abd11 .cell execution_count=6}\n``` {.python .cell-code}\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n```\n:::\n:::\n\n\n::: {#ee7559a9 .cell execution_count=7}\n``` {.python .cell-code}\na * 2\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n6\n```\n:::\n:::\n\n\n## Data structures {.center}\n\nA data structure is a collection of values\n\n:::{.example}\n\nPython examples:\n\n:::\n\n::: {#63bb7524 .cell execution_count=8}\n``` {.python .cell-code}\ntype([0, 5, \"something\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nlist\n```\n:::\n:::\n\n\n::: {#a9d4b4bd .cell execution_count=9}\n``` {.python .cell-code}\ntype((3, 5, \"something\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\ntuple\n```\n:::\n:::\n\n\n::: {#dc5ceab6 .cell execution_count=10}\n``` {.python .cell-code}\ntype({0, 2, 6})\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nset\n```\n:::\n:::\n\n\nEach type of structure has its own characteristics (necessarily homogeneous or not, mutable or not, ordered or not, etc.). This gives several data storage options, each best in different situations\n\n## Functions {.center}\n\nFunctions are snippets of code that accomplish a specific task\n\nBuilt-in functions come with the language and are readily available. Other functions become available once a particular module or package is loaded. Finally, the user can definite their own functions\n\nSome functions take arguments\n\n:::{.example}\n\nPython examples:\n\n:::\n\n::: {#be9ac585 .cell execution_count=11}\n``` {.python .cell-code}\nmax([3, 5, 2])\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n5\n```\n:::\n:::\n\n\n::: {#0e3242ad .cell execution_count=12}\n``` {.python .cell-code}\ndef hello():\n    print(\"Hello everyone!\")\n\nhello()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello everyone!\n```\n:::\n:::\n\n\n## Control flow {.center}\n\nCommands are normally run sequentially, from top to bottom, but it is possible to alter the flow of execution by creating repeats (loops) or conditional executions\n\n:::{.example}\n\nPython examples:\n\n:::\n\n::: {#00473038 .cell execution_count=13}\n``` {.python .cell-code}\nfor i in range(3):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n```\n:::\n:::\n\n\n::: {#dd364c96 .cell execution_count=14}\n``` {.python .cell-code}\nx = -3\n\nif x > 0:\n    print(x + 2)\nelse:\n    print(x * 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-9\n```\n:::\n:::\n\n\n# Getting help\n\n## Internal documentation {.center}\n\nMost languages come with their internal documentation\n\n:::{.example}\n\nExample with Python:\n\n:::\n\n```{.python}\nhelp(sum)\n```\n\n```\nHelp on built-in function sum in module builtins:\n\nsum(iterable, /, start=0)\n    Return the sum of a 'start' value (default: 0) plus an iterable of numbers\n\n    When the iterable is empty, return the start value.\n    This function is intended specifically for use with numeric values and may\n    reject non-numeric types.\n```\n\n## The internet {.center}\n\nGoogle is often your best bet, but you need to know the vocabulary in order to ask questions\n\n[Stack Overflow](https://stackoverflow.com/) is a fantastic community question & answer website\n\n## Large language models (LLMs) {.center}\n\nOver the past few years, [LLMs](https://en.wikipedia.org/wiki/Large_language_model) have become increasingly performant at coding\n\nPeople use them in different ways:\n\n- Ask questions (explain code, documentation)\n- Auto-completion\n- First code draft\n- Debugging\n- Vibe coding\n\nIn this course, I will show you how they can help you write code\n\n",
    "supporting": [
      "wb_hss_prog_slides_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}