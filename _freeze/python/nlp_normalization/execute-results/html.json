{
  "hash": "9deaeacb93f57c05fad77ef03d6d340b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Text normalization\nauthor: Marie-Hélène Burle\n---\n\n\n\n\n:::{.def}\n\nTextBlob allows to transform text—something very useful in preparation for text analysis.\n\n:::\n\n:::{.callout-note collapse=\"true\"}\n\n## Necessary code from previous sessions\n\nHere is the necessary code from previous sessions, stripped to the minimum:\n\n::: {#3941aff0 .cell execution_count=2}\n``` {.python .cell-code}\n# Load packages\nimport requests\nimport pymupdf\nfrom textblob import TextBlob\n\n# Download the data\nurl = \"https://funnyengwish.wordpress.com/wp-content/uploads/2017/05/pratchett_terry_wyrd_sisters_-_royallib_ru.pdf\"\nresponse = requests.get(url)\n\n# Extract data from pdf\ndata = response.content\ndoc = pymupdf.Document(stream=data)\n\n# Create text from first pdf page\npage1 = doc[0].get_text()\n\n# Turn text into TextBlob\ntext = TextBlob(page1)\n```\n:::\n\n\n:::\n\n## Case\n\nThere are methods to change the case of `TextBlob` objects.\n\nFor example, capitalization (let's only print the first 1000 characters)\n\n::: {#75b483cf .cell execution_count=3}\n``` {.python .cell-code}\nprint(text.title()[:1000])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n \nTerry Pratchett \n \nWyrd Sisters \n \n(Starring Three Witches, Also Kings, Daggers, Crowns, Storms, Dwarfs, Cats, Ghosts, Spectres, \nApes, Bandits, Demons, Forests, Heirs, Jesters, Tortures, Trolls, Turntables, General Rejoicing And \nDrivers Alarums.)  \n \nThe Wind Howled. Lightning Stabbed At The Earth Erratically, Like An Inefficient Assassin. \nThunder Rolled Back And Forth Across The Dark, Rain-Lashed Hills. \nThe Night Was As Black As The Inside Of A Cat. It Was The Kind Of Night, You Could Believe, On \nWhich Gods Moved Men As Though They Were Pawns On The Chessboard Of Fate. In The Middle Of This \nElemental Storm A Fire Gleamed Among The Dripping Furze Bushes Like The Madness In A Weasel'S Eye. \nIt Illuminated Three Hunched Figures. As The Cauldron Bubbled An Eldritch Voice Shrieked: 'When \nShall We Three Meet Again?' \nThere Was A Pause. \nFinally Another Voice Said, In Far More Ordinary Tones: 'Well, I Can Do Next Tuesday.' \n \nThrough The Fathomless Deeps Of Space Swims The Star Turt\n```\n:::\n:::\n\n\nOr transformation to upper case:\n\n::: {#6d4c7f96 .cell execution_count=4}\n``` {.python .cell-code}\nprint(text.upper()[:1000])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n \nTERRY PRATCHETT \n \nWYRD SISTERS \n \n(STARRING THREE WITCHES, ALSO KINGS, DAGGERS, CROWNS, STORMS, DWARFS, CATS, GHOSTS, SPECTRES, \nAPES, BANDITS, DEMONS, FORESTS, HEIRS, JESTERS, TORTURES, TROLLS, TURNTABLES, GENERAL REJOICING AND \nDRIVERS ALARUMS.)  \n \nTHE WIND HOWLED. LIGHTNING STABBED AT THE EARTH ERRATICALLY, LIKE AN INEFFICIENT ASSASSIN. \nTHUNDER ROLLED BACK AND FORTH ACROSS THE DARK, RAIN-LASHED HILLS. \nTHE NIGHT WAS AS BLACK AS THE INSIDE OF A CAT. IT WAS THE KIND OF NIGHT, YOU COULD BELIEVE, ON \nWHICH GODS MOVED MEN AS THOUGH THEY WERE PAWNS ON THE CHESSBOARD OF FATE. IN THE MIDDLE OF THIS \nELEMENTAL STORM A FIRE GLEAMED AMONG THE DRIPPING FURZE BUSHES LIKE THE MADNESS IN A WEASEL'S EYE. \nIT ILLUMINATED THREE HUNCHED FIGURES. AS THE CAULDRON BUBBLED AN ELDRITCH VOICE SHRIEKED: 'WHEN \nSHALL WE THREE MEET AGAIN?' \nTHERE WAS A PAUSE. \nFINALLY ANOTHER VOICE SAID, IN FAR MORE ORDINARY TONES: 'WELL, I CAN DO NEXT TUESDAY.' \n \nTHROUGH THE FATHOMLESS DEEPS OF SPACE SWIMS THE STAR TURT\n```\n:::\n:::\n\n\n## Number\n\nThe number (singular/plural) of particular words can also be changed:\n\n::: {#671f14df .cell execution_count=5}\n``` {.python .cell-code}\nprint(text.words[6])\nprint(text.words[6].singularize())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWitches\nWitch\n```\n:::\n:::\n\n\n::: {#efc80747 .cell execution_count=6}\n``` {.python .cell-code}\nprint(text.words[42])\nprint(text.words[42].pluralize())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nassassin\nassassins\n```\n:::\n:::\n\n\n## Lemmatization\n\n[Lemmatization](https://en.wikipedia.org/wiki/Lemmatization) reduces all words to their [lemma](https://en.wikipedia.org/wiki/Lemma_(morphology)) (dictionary or canonical form) so that [inflected words](https://en.wikipedia.org/wiki/Inflection) such as \"dog\" and \"dogs\" aren't counted in separate categories in analyses.\n\n### Nouns\n\nThe `lemmatize` method uses as its default argument `\"n\"` (for noun):\n\n::: {#7571415e .cell execution_count=7}\n``` {.python .cell-code}\nprint(TextBlob(\"heirs\").words[0].lemmatize())\nprint(TextBlob(\"daggers\").words[0].lemmatize())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nheir\ndagger\n```\n:::\n:::\n\n\n:::{.note}\n\nBe careful: you can't always trust that TextBlob will work properly. It is a library very easy to use, but it has its limitations.\n\nFor instance, I am not sure why this one doesn't work:\n\n::: {#417db032 .cell execution_count=8}\n``` {.python .cell-code}\nprint(TextBlob(\"men\").words[0].lemmatize())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmen\n```\n:::\n:::\n\n\nWhile this totally works:\n\n::: {#eecb3a72 .cell execution_count=9}\n``` {.python .cell-code}\nprint(TextBlob(\"policemen\").words[0].lemmatize())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npoliceman\n```\n:::\n:::\n\n\nUsing the more complex and more powerful [NLTK Python library](https://www.nltk.org/), you can implement the solution suggested [here](https://stackoverflow.com/a/22358166/9210961).\n\n:::\n\n### Verbs\n\nTo lemmatize verbs, you need to pass `\"v\"` (for verbs) to the `lemmatize` method:\n\n::: {#b0b57d83 .cell execution_count=10}\n``` {.python .cell-code}\nprint(TextBlob(\"seen\").words[0].lemmatize(\"v\"))\nprint(TextBlob(\"seeing\").words[0].lemmatize(\"v\"))\nprint(TextBlob(\"sees\").words[0].lemmatize(\"v\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsee\nsee\nsee\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWhy is this one not working?\n\n::: {#87706ff2 .cell execution_count=11}\n``` {.python .cell-code}\nprint(TextBlob(\"saw\").words[0].lemmatize(\"v\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsaw\n```\n:::\n:::\n\n\n:::\n\nExamples from the text:\n\n::: {#7019ed63 .cell execution_count=12}\n``` {.python .cell-code}\nprint(TextBlob(\"starring\").words[0].lemmatize(\"v\"))\nprint(TextBlob(\"stabbed\").words[0].lemmatize(\"v\"))\nprint(TextBlob(\"howled\").words[0].lemmatize(\"v\"))\nprint(TextBlob(\"rejoicing\").words[0].lemmatize(\"v\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstar\nstab\nhowl\nrejoice\n```\n:::\n:::\n\n\n### Adjectives\n\nTo lemmatize adjectives, you need to pass `\"a\"` (for adjectives) to the `lemmatize` method:\n\n::: {#5b3c6528 .cell execution_count=13}\n``` {.python .cell-code}\nprint(TextBlob(\"youngest\").words[0].lemmatize(\"a\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nyoung\n```\n:::\n:::\n\n\n## Correction\n\nThe `correct` method attempts to correct spelling mistakes:\n\n::: {#4f70b37b .cell execution_count=14}\n``` {.python .cell-code}\nprint(TextBlob(\"Somethingg with speling mystakes\").correct())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSomething with spelling mistakes\n```\n:::\n:::\n\n\n:::{.note}\n\nThere are however limitations since the method is based on a lexicon and isn't aware of the relationship between words (and thus cannot correct grammatical errors):\n\n::: {#f445e791 .cell execution_count=15}\n``` {.python .cell-code}\nprint(TextBlob(\"Some thingg with speling mystake\").correct())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSome things with spelling mistake\n```\n:::\n:::\n\n\nAn example even more obvious:\n\n::: {#f3324286 .cell execution_count=16}\n``` {.python .cell-code}\nprint(TextBlob(\"He drink\").correct())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHe drink\n```\n:::\n:::\n\n\n:::\n\n",
    "supporting": [
      "nlp_normalization_files"
    ],
    "filters": [],
    "includes": {}
  }
}