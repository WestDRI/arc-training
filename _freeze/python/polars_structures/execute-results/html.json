{
  "hash": "ca5c2645ccc23b7d78aac903269f1a5f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Data structures\nauthor: Marie-Hélène Burle\n---\n\n\n:::{.def}\n\nPolars provides two fundamental data structures: series and data frames.\n\n:::\n\n## Series\n\nIn Polars, **series are one-dimensional and homogeneous** (all elements have the same data type).\n\n:::{.note}\n\nIn other frameworks or languages (e.g. pandas, R), such data structure would be called a *vector*.\n\n:::\n\n::: {#29195456 .cell execution_count=2}\n``` {.python .cell-code}\nimport polars as pl\n\ns1 = pl.Series(range(5))\nprint(s1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (5,)\nSeries: '' [i64]\n[\n\t0\n\t1\n\t2\n\t3\n\t4\n]\n```\n:::\n:::\n\n\n### Data types\n\nPolars infers data types from the data. Defaults are Int64 and Float64. For other options, you can create typed series by specifying the type:\n\n::: {#370bdb91 .cell execution_count=3}\n``` {.python .cell-code}\ns2 = pl.Series(range(5), dtype=pl.Int32)\nprint(s2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (5,)\nSeries: '' [i32]\n[\n\t0\n\t1\n\t2\n\t3\n\t4\n]\n```\n:::\n:::\n\n\n### Named series\n\nSeries can be named:\n\n::: {#f0e3c2ad .cell execution_count=4}\n``` {.python .cell-code}\ns3 = pl.Series(\"Name\", [\"Bob\", \"Luc\", \"Lucy\"])\nprint(s3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (3,)\nSeries: 'Name' [str]\n[\n\t\"Bob\"\n\t\"Luc\"\n\t\"Lucy\"\n]\n```\n:::\n:::\n\n\n## Data frames\n\nData frames are **two-dimensional and composed of named series of equal lengths**. This means that data frames are heterogeneous, but that columns contain homogeneous data.\n\nThey can be created from:\n\n- lists of series:\n\n::: {#d196a002 .cell execution_count=5}\n``` {.python .cell-code}\ndf1 = pl.DataFrame([s3, pl.Series(\"Colour\", [\"Red\", \"Green\", \"Blue\"])])\nprint(df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (3, 2)\n┌──────┬────────┐\n│ Name ┆ Colour │\n│ ---  ┆ ---    │\n│ str  ┆ str    │\n╞══════╪════════╡\n│ Bob  ┆ Red    │\n│ Luc  ┆ Green  │\n│ Lucy ┆ Blue   │\n└──────┴────────┘\n```\n:::\n:::\n\n\n- dictionaries:\n\n::: {#651e2e17 .cell execution_count=6}\n``` {.python .cell-code}\nfrom datetime import date\n\ndf2 = pl.DataFrame(\n    {\n        \"Date\": [\n            date(2024, 10, 1),\n            date(2024, 10, 2),\n            date(2024, 10, 3),\n            date(2024, 10, 6)\n        ],\n        \"Rain\": [2.1, 0.5, 0.0, 1.8],\n        \"Cloud cover\": [1, 1, 0, 2]\n        }\n    )\nprint(df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (4, 3)\n┌────────────┬──────┬─────────────┐\n│ Date       ┆ Rain ┆ Cloud cover │\n│ ---        ┆ ---  ┆ ---         │\n│ date       ┆ f64  ┆ i64         │\n╞════════════╪══════╪═════════════╡\n│ 2024-10-01 ┆ 2.1  ┆ 1           │\n│ 2024-10-02 ┆ 0.5  ┆ 1           │\n│ 2024-10-03 ┆ 0.0  ┆ 0           │\n│ 2024-10-06 ┆ 1.8  ┆ 2           │\n└────────────┴──────┴─────────────┘\n```\n:::\n:::\n\n\n- NumPy ndarrays:\n\n::: {#6a816623 .cell execution_count=7}\n``` {.python .cell-code}\nimport numpy as np\n\ndf3 = pl.DataFrame(np.array([(1, 2), (3, 4)]))\nprint(df3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (2, 2)\n┌──────────┬──────────┐\n│ column_0 ┆ column_1 │\n│ ---      ┆ ---      │\n│ i64      ┆ i64      │\n╞══════════╪══════════╡\n│ 1        ┆ 2        │\n│ 3        ┆ 4        │\n└──────────┴──────────┘\n```\n:::\n:::\n\n\nBecause NumPy ndarrays are stored in memory by rows, the values in the first dimension of the array fill in the first row. If you want to fill in the data frame by column, you use the `orient` parameter:\n\n::: {#8a7dbd2d .cell execution_count=8}\n``` {.python .cell-code}\ndf4 = pl.DataFrame(np.array([(1, 2), (3, 4)]), orient=\"col\")\nprint(df4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (2, 2)\n┌──────────┬──────────┐\n│ column_0 ┆ column_1 │\n│ ---      ┆ ---      │\n│ i64      ┆ i64      │\n╞══════════╪══════════╡\n│ 1        ┆ 3        │\n│ 2        ┆ 4        │\n└──────────┴──────────┘\n```\n:::\n:::\n\n\nTo specify column names, you can use the schema parameter:\n\n::: {#c7d19ca6 .cell execution_count=9}\n``` {.python .cell-code}\ndf5 = pl.DataFrame(np.array([(1, 2), (3, 4)]), schema=[\"Var1\", \"Var2\"])\nprint(df5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (2, 2)\n┌──────┬──────┐\n│ Var1 ┆ Var2 │\n│ ---  ┆ ---  │\n│ i64  ┆ i64  │\n╞══════╪══════╡\n│ 1    ┆ 2    │\n│ 3    ┆ 4    │\n└──────┴──────┘\n```\n:::\n:::\n\n\n## Data types\n\nTo specify data types different from the default, you also use the schema parameter:\n\n::: {#87d8ef27 .cell execution_count=10}\n``` {.python .cell-code}\ndf6 = pl.DataFrame(\n    {\n        \"Rain\": [2.1, 0.5, 0.0, 1.8],\n        \"Cloud cover\": [1, 1, 0, 2],\n    },\n    schema={\"Rain\": pl.Float32, \"Cloud cover\": pl.Int32}\n)\nprint(df6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (4, 2)\n┌──────┬─────────────┐\n│ Rain ┆ Cloud cover │\n│ ---  ┆ ---         │\n│ f32  ┆ i32         │\n╞══════╪═════════════╡\n│ 2.1  ┆ 1           │\n│ 0.5  ┆ 1           │\n│ 0.0  ┆ 0           │\n│ 1.8  ┆ 2           │\n└──────┴─────────────┘\n```\n:::\n:::\n\n\n",
    "supporting": [
      "polars_structures_files"
    ],
    "filters": [],
    "includes": {}
  }
}