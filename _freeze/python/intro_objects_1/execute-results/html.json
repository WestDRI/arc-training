{
  "hash": "554bb3a8bdcca3a06c52da183d1e16a0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Python objects\nauthor: Marie-Hélène Burle\n---\n\n## Quotes\n\nPairs of single and double quotes are used to create strings.\n\n:::{.note}\n\n[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length) does not recommend one style over the other. It does suggest however that once you have chosen a style, you stick to it to make scripts consistent.\n\n:::\n\n::: {#59539dd6 .cell execution_count=1}\n``` {.python .cell-code}\n\"This is a string.\"\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n'This is a string.'\n```\n:::\n:::\n\n\n::: {#5b17e1d2 .cell execution_count=2}\n``` {.python .cell-code}\ntype(\"This is a string.\")\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nstr\n```\n:::\n:::\n\n\n::: {#1c500f74 .cell execution_count=3}\n``` {.python .cell-code}\n'This is also a string.'\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'This is also a string.'\n```\n:::\n:::\n\n\n::: {#705f0b78 .cell execution_count=4}\n``` {.python .cell-code}\ntype('This is also a string.')\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nstr\n```\n:::\n:::\n\n\nApostrophes and textual quotes interfere with Python quotes. In these cases, use the opposite style to avoid any problem:\n\n::: {#892b7f11 .cell execution_count=5}\n``` {.python .cell-code}\n# This doesn't work\n'This string isn't easy'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[5]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">'This string isn't easy'</span>\n<span class=\"ansi-bright-white-fg\">                           ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> unterminated string literal (detected at line 2)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d941c459 .cell execution_count=6}\n``` {.python .cell-code}\n# This is good\n\"This string isn't easy\"\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n\"This string isn't easy\"\n```\n:::\n:::\n\n\n::: {#5cdc5bc5 .cell execution_count=7}\n``` {.python .cell-code}\n# This doesn't work\n\"He said: \"this is a problem.\"\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[7]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">\"He said: \"this is a problem.\"\"</span>\n<span class=\"ansi-bright-white-fg\">               ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> invalid syntax\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#87454bcf .cell execution_count=8}\n``` {.python .cell-code}\n# This is good\n'He said: \"this is a problem.\"'\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'He said: \"this is a problem.\"'\n```\n:::\n:::\n\n\nSometimes, neither option works and you have to escape some of the quotes with `\\`:\n\n::: {#0cbd1593 .cell execution_count=9}\n``` {.python .cell-code}\n# This doesn't work\n\"He said: \"this string isn't easy\"\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[9]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">\"He said: \"this string isn't easy\"\"</span>\n<span class=\"ansi-bright-white-fg\">                              ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> unterminated string literal (detected at line 2)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2478aed1 .cell execution_count=10}\n``` {.python .cell-code}\n# This doesn't work either\n'He said: \"this string isn't easy\"'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[10]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">'He said: \"this string isn't easy\"'</span>\n<span class=\"ansi-bright-white-fg\">                                     ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> unterminated string literal (detected at line 2)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ef107a1f .cell execution_count=11}\n``` {.python .cell-code}\n# You can use double quotes and escape double quotes in the string\n\"He said: \\\"this string isn't easy\\\"\"\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n'He said: \"this string isn\\'t easy\"'\n```\n:::\n:::\n\n\n::: {#e340432f .cell execution_count=12}\n``` {.python .cell-code}\n# Or you can use single quotes and escape single quotes in the string\n'He said: \"this string isn\\'t easy\"'\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n'He said: \"this string isn\\'t easy\"'\n```\n:::\n:::\n\n\n## Basic operations\n\n::: {#4d3c06bc .cell execution_count=13}\n``` {.python .cell-code}\n3 + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n5\n```\n:::\n:::\n\n\n::: {#5731c31e .cell execution_count=14}\n``` {.python .cell-code}\n3.0 - 2.0\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n1.0\n```\n:::\n:::\n\n\n::: {#edd7d733 .cell execution_count=15}\n``` {.python .cell-code}\n10 / 2\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n5.0\n```\n:::\n:::\n\n\n:::{.note}\n\nNotice how the result can be of a different type.\n\n:::\n\nVariables can be used in operations:\n\n::: {#b09711e8 .cell execution_count=16}\n``` {.python .cell-code}\na = 3\na + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n5\n```\n:::\n:::\n\n\n`a = a + 10` can be replaced by the more elegant:\n\n::: {#64959437 .cell execution_count=17}\n``` {.python .cell-code}\na += 10\na\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n13\n```\n:::\n:::\n\n\n",
    "supporting": [
      "intro_objects_1_files"
    ],
    "filters": [],
    "includes": {}
  }
}