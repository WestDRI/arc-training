{
  "hash": "ef9622a6e599c567118e4d82bd1576b5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Playing with text\nauthor: Marie-Hélène Burle\nresources: data/pratchett.txt\n---\n\n:::{.def}\n\nThere are fancy tools to scrape the web and play with text. In preparation for those, in this section, we will download a text file from the internet and play with it using very simple tools.\n\n:::\n\nFirst, we need to load the [`urllib.request` module](https://docs.python.org/3/library/urllib.request.html#module-urllib.request) from the Python standard library. It contains functions to deal with URLs:\n\n::: {#09db0594 .cell execution_count=2}\n``` {.python .cell-code}\nimport urllib.request\n```\n:::\n\n\nThe snippet of text we will play with is in a text file containing the very beginning of the novel [Going Postal](https://en.wikipedia.org/wiki/Going_Postal) by [Terry Pratchett](https://en.wikipedia.org/wiki/Terry_Pratchett) and located at the URL <https://mint.westdri.ca/python/data/pratchett.txt>. We can create a variable that we call `url` (we can call it whatever we want) and that contains the string of the URL:\n\n::: {#69e3495d .cell execution_count=3}\n``` {.python .cell-code}\nurl = \"https://mint.westdri.ca/python/data/pratchett.txt\"\n```\n:::\n\n\n::: {#11a38381 .cell execution_count=4}\n``` {.python .cell-code}\nprint(url)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhttps://mint.westdri.ca/python/data/pratchett.txt\n```\n:::\n:::\n\n\n::: {#a56ada6a .cell execution_count=5}\n``` {.python .cell-code}\ntype(url)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nstr\n```\n:::\n:::\n\n\nTo download a text file from a URL, we use the `urllib.request.urlopen` function:\n\n::: {#514373a1 .cell execution_count=6}\n``` {.python .cell-code}\nurllib.request.urlopen(url)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n<http.client.HTTPResponse at 0x7354e3c9d720>\n```\n:::\n:::\n\n\nThis return an `HTTPResponse` object. It is not very useful in this form, but we can get the text out of it by applying the `read` method:\n\n::: {#5ec2b6fb .cell execution_count=7}\n``` {.python .cell-code}\nurllib.request.urlopen(url).read()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\nb'They say that the prospect of being hanged in the morning concentrates a man\\'s mind wonderfully; unfortunately, what the mind inevitably concentrates on is that, in the morning, it will be in a body that is going to be hanged.\\nThe man going to be hanged had been named Moist von Lipwig by doting if unwise parents, but he was not going to embarrass the name, insofar as that was still possible, by being hung under it. To the world in general, and particularly on that bit of it known as the death warrant, he was Alfred Spangler.\\nAnd he took a more positive approach to the situation and had concentrated his mind on the prospect of not being hanged in the morning, and, most particularly, on the prospect of removing all the crumbling mortar from around a stone in his cell wall with a spoon. So far the work had taken him five weeks and reduced the spoon to something like a nail file. Fortunately, no one ever came to change the bedding here, or else they would have discovered the world\\'s heaviest mattress.\\nIt was a large and heavy stone that was currently the object of his attentions, and, at some point, a huge staple had been hammered into it as an anchor for manacles.\\nMoist sat down facing the wall, gripped the iron ring in both hands, braced his legs against the stones on either side, and heaved.\\nHis shoulders caught fire, and a red mist filled his vision, but the block slid out with a faint and inappropriate tinkling noise. Moist managed to ease it away from the hole and peered inside.\\nAt the far end was another block, and the mortar around it looked suspiciously strong and fresh.\\nJust in front of it was a new spoon. It was shiny.\\nAs he studied it, he heard the clapping behind him. He turned his head, tendons twanging a little riff of agony, and saw several of the wardens watching him through the bars.\\n\"Well done, Mr. Spangler!\" said one of them. \"Ron here owes me five dollars! I told him you were a sticker!! \\'He\\'s a sticker,\\' I said!\"\\n\"You set this up, did you, Mr. Wilkinson?\" said Moist weakly, watching the glint of light on the spoon.\\n\"Oh, not us, sir. Lord Vetinari\\'s orders. He insists that all condemned prisoners should be offered the prospect of freedom.\"\\n\"Freedom? But there\\'s a damn great stone through there!\"\\n\"Yes, there is that, sir, yes, there is that,\" said the warden. \"It\\'s only the prospect, you see. Not actual free freedom as such. Hah, that\\'d be a bit daft, eh?\"\\n\"I suppose so, yes,\" said Moist. He didn\\'t say \"you bastards.\" The wardens had treated him quite civilly these past six weeks, and he made a point of getting on with people. He was very, very good at it. People skills were part of his stock-in-trade; they were nearly the whole of it.\\nBesides, these people had big sticks. So, speaking carefully, he added: \"Some people might consider this cruel, Mr. Wilkinson.\"\\n\"Yes, sir, we asked him about that, sir, but he said no, it wasn\\'t. He said it provided\"--his forehead wrinkled \"--occ-you-pay-shun-all ther-rap-py, healthy exercise, prevented moping, and offered that greatest of all treasures, which is Hope, sir.\"\\n\"Hope,\" muttered Moist glumly.\\n\"Not upset, are you, sir?\"\\n\"Upset? Why should I be upset, Mr. Wilkinson?\"\\n\"Only the last bloke we had in this cell, he managed to get down that drain, sir. Very small man. Very agile.\"\\n'\n```\n:::\n:::\n\n\nWe can save our text in a new variable:\n\n::: {#c1ab4080 .cell execution_count=8}\n``` {.python .cell-code}\nencoded_text = urllib.request.urlopen(url).read()\n```\n:::\n\n\nNow, `encoded_text` is not of a very convenient type:\n\n::: {#a43636de .cell execution_count=9}\n``` {.python .cell-code}\ntype(encoded_text)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\nbytes\n```\n:::\n:::\n\n\nBefore we can really start playing with it, we want to convert it to a string by decoding it:\n\n::: {#d357ea5a .cell execution_count=10}\n``` {.python .cell-code}\ntext = encoded_text.decode(\"utf-8\")\nprint(text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThey say that the prospect of being hanged in the morning concentrates a man's mind wonderfully; unfortunately, what the mind inevitably concentrates on is that, in the morning, it will be in a body that is going to be hanged.\nThe man going to be hanged had been named Moist von Lipwig by doting if unwise parents, but he was not going to embarrass the name, insofar as that was still possible, by being hung under it. To the world in general, and particularly on that bit of it known as the death warrant, he was Alfred Spangler.\nAnd he took a more positive approach to the situation and had concentrated his mind on the prospect of not being hanged in the morning, and, most particularly, on the prospect of removing all the crumbling mortar from around a stone in his cell wall with a spoon. So far the work had taken him five weeks and reduced the spoon to something like a nail file. Fortunately, no one ever came to change the bedding here, or else they would have discovered the world's heaviest mattress.\nIt was a large and heavy stone that was currently the object of his attentions, and, at some point, a huge staple had been hammered into it as an anchor for manacles.\nMoist sat down facing the wall, gripped the iron ring in both hands, braced his legs against the stones on either side, and heaved.\nHis shoulders caught fire, and a red mist filled his vision, but the block slid out with a faint and inappropriate tinkling noise. Moist managed to ease it away from the hole and peered inside.\nAt the far end was another block, and the mortar around it looked suspiciously strong and fresh.\nJust in front of it was a new spoon. It was shiny.\nAs he studied it, he heard the clapping behind him. He turned his head, tendons twanging a little riff of agony, and saw several of the wardens watching him through the bars.\n\"Well done, Mr. Spangler!\" said one of them. \"Ron here owes me five dollars! I told him you were a sticker!! 'He's a sticker,' I said!\"\n\"You set this up, did you, Mr. Wilkinson?\" said Moist weakly, watching the glint of light on the spoon.\n\"Oh, not us, sir. Lord Vetinari's orders. He insists that all condemned prisoners should be offered the prospect of freedom.\"\n\"Freedom? But there's a damn great stone through there!\"\n\"Yes, there is that, sir, yes, there is that,\" said the warden. \"It's only the prospect, you see. Not actual free freedom as such. Hah, that'd be a bit daft, eh?\"\n\"I suppose so, yes,\" said Moist. He didn't say \"you bastards.\" The wardens had treated him quite civilly these past six weeks, and he made a point of getting on with people. He was very, very good at it. People skills were part of his stock-in-trade; they were nearly the whole of it.\nBesides, these people had big sticks. So, speaking carefully, he added: \"Some people might consider this cruel, Mr. Wilkinson.\"\n\"Yes, sir, we asked him about that, sir, but he said no, it wasn't. He said it provided\"--his forehead wrinkled \"--occ-you-pay-shun-all ther-rap-py, healthy exercise, prevented moping, and offered that greatest of all treasures, which is Hope, sir.\"\n\"Hope,\" muttered Moist glumly.\n\"Not upset, are you, sir?\"\n\"Upset? Why should I be upset, Mr. Wilkinson?\"\n\"Only the last bloke we had in this cell, he managed to get down that drain, sir. Very small man. Very agile.\"\n\n```\n:::\n:::\n\n\nThe output looks the same, but `text` is a string:\n\n::: {#5f2feb6d .cell execution_count=11}\n``` {.python .cell-code}\ntype(text)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nstr\n```\n:::\n:::\n\n\nAnd now we can start playing with the data 🙂\n\nFor instance, we can count the number of occurrences of the name of the main character (\"Moist\"—I know ... what a crazy name):\n\n::: {#2566fb38 .cell execution_count=12}\n``` {.python .cell-code}\ntext.count(\"Moist\")\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n6\n```\n:::\n:::\n\n\nOr we could try to see how many words there are in this text.\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nHow would you go about this?\n\n:::\n\nAnother method to count the number of words is to use the `split` method:\n\n::: {#ff40274f .cell execution_count=13}\n``` {.python .cell-code}\nwords = text.split()\nprint(words)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['They', 'say', 'that', 'the', 'prospect', 'of', 'being', 'hanged', 'in', 'the', 'morning', 'concentrates', 'a', \"man's\", 'mind', 'wonderfully;', 'unfortunately,', 'what', 'the', 'mind', 'inevitably', 'concentrates', 'on', 'is', 'that,', 'in', 'the', 'morning,', 'it', 'will', 'be', 'in', 'a', 'body', 'that', 'is', 'going', 'to', 'be', 'hanged.', 'The', 'man', 'going', 'to', 'be', 'hanged', 'had', 'been', 'named', 'Moist', 'von', 'Lipwig', 'by', 'doting', 'if', 'unwise', 'parents,', 'but', 'he', 'was', 'not', 'going', 'to', 'embarrass', 'the', 'name,', 'insofar', 'as', 'that', 'was', 'still', 'possible,', 'by', 'being', 'hung', 'under', 'it.', 'To', 'the', 'world', 'in', 'general,', 'and', 'particularly', 'on', 'that', 'bit', 'of', 'it', 'known', 'as', 'the', 'death', 'warrant,', 'he', 'was', 'Alfred', 'Spangler.', 'And', 'he', 'took', 'a', 'more', 'positive', 'approach', 'to', 'the', 'situation', 'and', 'had', 'concentrated', 'his', 'mind', 'on', 'the', 'prospect', 'of', 'not', 'being', 'hanged', 'in', 'the', 'morning,', 'and,', 'most', 'particularly,', 'on', 'the', 'prospect', 'of', 'removing', 'all', 'the', 'crumbling', 'mortar', 'from', 'around', 'a', 'stone', 'in', 'his', 'cell', 'wall', 'with', 'a', 'spoon.', 'So', 'far', 'the', 'work', 'had', 'taken', 'him', 'five', 'weeks', 'and', 'reduced', 'the', 'spoon', 'to', 'something', 'like', 'a', 'nail', 'file.', 'Fortunately,', 'no', 'one', 'ever', 'came', 'to', 'change', 'the', 'bedding', 'here,', 'or', 'else', 'they', 'would', 'have', 'discovered', 'the', \"world's\", 'heaviest', 'mattress.', 'It', 'was', 'a', 'large', 'and', 'heavy', 'stone', 'that', 'was', 'currently', 'the', 'object', 'of', 'his', 'attentions,', 'and,', 'at', 'some', 'point,', 'a', 'huge', 'staple', 'had', 'been', 'hammered', 'into', 'it', 'as', 'an', 'anchor', 'for', 'manacles.', 'Moist', 'sat', 'down', 'facing', 'the', 'wall,', 'gripped', 'the', 'iron', 'ring', 'in', 'both', 'hands,', 'braced', 'his', 'legs', 'against', 'the', 'stones', 'on', 'either', 'side,', 'and', 'heaved.', 'His', 'shoulders', 'caught', 'fire,', 'and', 'a', 'red', 'mist', 'filled', 'his', 'vision,', 'but', 'the', 'block', 'slid', 'out', 'with', 'a', 'faint', 'and', 'inappropriate', 'tinkling', 'noise.', 'Moist', 'managed', 'to', 'ease', 'it', 'away', 'from', 'the', 'hole', 'and', 'peered', 'inside.', 'At', 'the', 'far', 'end', 'was', 'another', 'block,', 'and', 'the', 'mortar', 'around', 'it', 'looked', 'suspiciously', 'strong', 'and', 'fresh.', 'Just', 'in', 'front', 'of', 'it', 'was', 'a', 'new', 'spoon.', 'It', 'was', 'shiny.', 'As', 'he', 'studied', 'it,', 'he', 'heard', 'the', 'clapping', 'behind', 'him.', 'He', 'turned', 'his', 'head,', 'tendons', 'twanging', 'a', 'little', 'riff', 'of', 'agony,', 'and', 'saw', 'several', 'of', 'the', 'wardens', 'watching', 'him', 'through', 'the', 'bars.', '\"Well', 'done,', 'Mr.', 'Spangler!\"', 'said', 'one', 'of', 'them.', '\"Ron', 'here', 'owes', 'me', 'five', 'dollars!', 'I', 'told', 'him', 'you', 'were', 'a', 'sticker!!', \"'He's\", 'a', \"sticker,'\", 'I', 'said!\"', '\"You', 'set', 'this', 'up,', 'did', 'you,', 'Mr.', 'Wilkinson?\"', 'said', 'Moist', 'weakly,', 'watching', 'the', 'glint', 'of', 'light', 'on', 'the', 'spoon.', '\"Oh,', 'not', 'us,', 'sir.', 'Lord', \"Vetinari's\", 'orders.', 'He', 'insists', 'that', 'all', 'condemned', 'prisoners', 'should', 'be', 'offered', 'the', 'prospect', 'of', 'freedom.\"', '\"Freedom?', 'But', \"there's\", 'a', 'damn', 'great', 'stone', 'through', 'there!\"', '\"Yes,', 'there', 'is', 'that,', 'sir,', 'yes,', 'there', 'is', 'that,\"', 'said', 'the', 'warden.', '\"It\\'s', 'only', 'the', 'prospect,', 'you', 'see.', 'Not', 'actual', 'free', 'freedom', 'as', 'such.', 'Hah,', \"that'd\", 'be', 'a', 'bit', 'daft,', 'eh?\"', '\"I', 'suppose', 'so,', 'yes,\"', 'said', 'Moist.', 'He', \"didn't\", 'say', '\"you', 'bastards.\"', 'The', 'wardens', 'had', 'treated', 'him', 'quite', 'civilly', 'these', 'past', 'six', 'weeks,', 'and', 'he', 'made', 'a', 'point', 'of', 'getting', 'on', 'with', 'people.', 'He', 'was', 'very,', 'very', 'good', 'at', 'it.', 'People', 'skills', 'were', 'part', 'of', 'his', 'stock-in-trade;', 'they', 'were', 'nearly', 'the', 'whole', 'of', 'it.', 'Besides,', 'these', 'people', 'had', 'big', 'sticks.', 'So,', 'speaking', 'carefully,', 'he', 'added:', '\"Some', 'people', 'might', 'consider', 'this', 'cruel,', 'Mr.', 'Wilkinson.\"', '\"Yes,', 'sir,', 'we', 'asked', 'him', 'about', 'that,', 'sir,', 'but', 'he', 'said', 'no,', 'it', \"wasn't.\", 'He', 'said', 'it', 'provided\"--his', 'forehead', 'wrinkled', '\"--occ-you-pay-shun-all', 'ther-rap-py,', 'healthy', 'exercise,', 'prevented', 'moping,', 'and', 'offered', 'that', 'greatest', 'of', 'all', 'treasures,', 'which', 'is', 'Hope,', 'sir.\"', '\"Hope,\"', 'muttered', 'Moist', 'glumly.', '\"Not', 'upset,', 'are', 'you,', 'sir?\"', '\"Upset?', 'Why', 'should', 'I', 'be', 'upset,', 'Mr.', 'Wilkinson?\"', '\"Only', 'the', 'last', 'bloke', 'we', 'had', 'in', 'this', 'cell,', 'he', 'managed', 'to', 'get', 'down', 'that', 'drain,', 'sir.', 'Very', 'small', 'man.', 'Very', 'agile.\"']\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWhat is the type of the variable `words`?\n\n:::\n\nTo get its length, we can use the `len` function:\n\n::: {#0017276c .cell execution_count=14}\n``` {.python .cell-code}\nlen(words)\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n590\n```\n:::\n:::\n\n\nNow, let's try to count how many times the word `the` is in the text.\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWe could use:\n\n::: {#7f34dfee .cell execution_count=15}\n``` {.python .cell-code}\ntext.count(\"the\")\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n46\n```\n:::\n:::\n\n\nbut it won't answer our question. Why?\n\n:::\n\nInstead, we should use the list of words that we called `words` and count how many of them are equal to `the`. We do this with a loop:\n\n::: {#4ce1115f .cell execution_count=16}\n``` {.python .cell-code}\n# We set our counter (the number of occurrences) to zero:\noccurrences = 0\n\n# And now we can use a loop to test the words one by one and add 1 to our counter each time the equality returns true\nfor word in words:\n    if word == \"the\":\n        occurrences += 1\n\nprint(occurrences)        \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n34\n```\n:::\n:::\n\n\nAn alternative syntax that looks a lot more elegant is the following:\n\n::: {#d4e943a8 .cell execution_count=17}\n``` {.python .cell-code}\nsum(word == \"the\" for word in words)\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n34\n```\n:::\n:::\n\n\nHowever, elegance and short syntax don't mean fast code.\n\nWe can benchmark Python code very easy when we use Jupyter or IPython by using the magic `%%timeit` at the top of a code cell.\n\nLet's try it:\n\n::: {#98e38535 .cell execution_count=18}\n``` {.python .cell-code}\n%%timeit\n\n# We set our counter (the number of occurrences) to zero:\noccurrences = 0\n\n# And now we can use a loop to test the words one by one and add 1 to our counter each time the equality returns true\nfor word in words:\n    if word == \"the\":\n        occurrences += 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10.8 μs ± 118 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n```\n:::\n:::\n\n\n:::{.note}\n\nI removed the `print` function so that we don't end up printing the result a bunch of times: `timeit` does a lot of tests and takes the average. At each run, we would have a printed result!\n\n:::\n\nAnd for the other method\n\n::: {#7a5c9531 .cell execution_count=19}\n``` {.python .cell-code}\n%%timeit\n\noccurrences = sum(word == \"the\" for word in words)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n24.1 μs ± 301 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n```\n:::\n:::\n\n\n:::{.note}\n\nTo make a fair comparison with the previous expression, I am not printing the result here either, but assigning it to a variable.\n\n:::\n\nAs you can see, the short neat-looking expression takes more than twice the time of the not so nice-looking one. Without benchmarking, it is very hard to predict what code is efficient.\n\n",
    "supporting": [
      "intro_text_files"
    ],
    "filters": [],
    "includes": {}
  }
}