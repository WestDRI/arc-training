{
  "hash": "910fe2d15dc97275f03b1dc7416c70c2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Python objects\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nThis session explores the creation, naming, deletion, and types of Python objects.\n\n:::\n\n## Creating and deleting objects\n\n### Assignment\n\nThe assignment statement (`=`) binds a name (a reference) and a value to create an [object](https://en.wikipedia.org/wiki/Object_(computer_science)) ([variable](https://en.wikipedia.org/wiki/Variable_(computer_science)), [data structure](https://en.wikipedia.org/wiki/Data_structure), [function](https://en.wikipedia.org/wiki/Function_(computer_programming)), or [method](https://en.wikipedia.org/wiki/Method_(computer_programming))).\n\n:::{.example}\n\nFor instance, we can bind the name `a` and the value `1` to create the variable `a`:\n\n:::\n\n::: {#1aae31e3 .cell execution_count=2}\n``` {.python .cell-code}\na = 1\n```\n:::\n\n\nYou can define multiple objects at once, assigning them the same value:\n\n::: {#a122df3b .cell execution_count=3}\n``` {.python .cell-code}\na = b = 10\nprint(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10 10\n```\n:::\n:::\n\n\n... or different values:\n\n::: {#70f77aed .cell execution_count=4}\n``` {.python .cell-code}\na, b = 1, 2\nprint(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n::: {#75141e30 .cell execution_count=5}\n``` {.python .cell-code}\na = 1\nb = a\na = 2\n```\n:::\n\n\nWhat do you think the value of `b` is now?\n\n:::\n\n### Choosing names\n\nWhile I am using `a` and `b` a lot in this workshop (since the code has no other purpose than to demo the language itself), in your scripts you should use meaningful names (e.g. `survival`, `age`, `year`, `species`, `temperature`). It will make reading the code this much easier.\n\nMake sure not to use the names of [built-in functions](https://docs.python.org/3/library/functions.html) or [built-in constants](https://docs.python.org/3/library/constants.html).\n\n### Deleting objects\n\nDeletion of the names can be done with the `del` statement:\n\n::: {#933be73a .cell execution_count=6}\n``` {.python .cell-code}\nvar = 3\nvar\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n3\n```\n:::\n:::\n\n\n::: {#734b555b .cell execution_count=7}\n``` {.python .cell-code}\ndel var\nvar\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[6]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-bright-green-fg\">      1</span> <span style=\"color:rgb(95,215,255)\">del</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">var</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">2</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">var</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'var' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe Python garbage collector automatically removes values with no names bound to them from memory.\n\n## Types\n\nPython comes with multiple [built-in types](https://docs.python.org/3/library/stdtypes.html).\n\n:::{.example}\n\nExamples (non exhaustive):\n\n:::\n\n::: {#8492bc3d .cell execution_count=8}\n``` {.python .cell-code}\ntype(1), type(1.0), type('1'), type(3+2j), type(True), type(sum)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n(int, float, str, complex, bool, builtin_function_or_method)\n```\n:::\n:::\n\n\n:::{.note}\n\n`int` = integer \\\n`float` = floating point number \\\n`complex` = complex number \\\n`str` = string \\\n`bool` = Boolean\n\n:::\n\nPython is [dynamically-typed](https://en.wikipedia.org/wiki/Type_system#DYNAMIC): names do not have types, but they are bound to typed values and they can be bound over time to values of different types.\n\n::: {#c96371f0 .cell execution_count=9}\n``` {.python .cell-code}\nvar = 2.3\ntype1 = type(var)\nvar = \"A string.\"\ntype2 = type(var)\n\ntype1, type2\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n(float, str)\n```\n:::\n:::\n\n\nYou can also convert the type of some values:\n\n::: {#cd6c846f .cell execution_count=10}\n``` {.python .cell-code}\n'4', type('4'), int('4'), type(int('4'))\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n('4', str, 4, int)\n```\n:::\n:::\n\n\n::: {#65b71c56 .cell execution_count=11}\n``` {.python .cell-code}\nfloat(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n3.0\n```\n:::\n:::\n\n\n::: {#b985e41c .cell execution_count=12}\n``` {.python .cell-code}\nstr(3.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n'3.4'\n```\n:::\n:::\n\n\n::: {#979faae1 .cell execution_count=13}\n``` {.python .cell-code}\nbool(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#313c5a0a .cell execution_count=14}\n``` {.python .cell-code}\nbool(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#1f9b4cbf .cell execution_count=15}\n``` {.python .cell-code}\nint(True)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n1\n```\n:::\n:::\n\n\n::: {#7dda3700 .cell execution_count=16}\n``` {.python .cell-code}\nfloat(False)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n0.0\n```\n:::\n:::\n\n\nOf course, not all conversions are possible:\n\n::: {#67ad1e25 .cell execution_count=17}\n``` {.python .cell-code}\nint('red')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">ValueError</span>                                Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[16]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">int</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">red</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">ValueError</span>: invalid literal for int() with base 10: 'red'</pre>\n```\n:::\n\n:::\n:::\n\n\nYou might be surprised by some of the conversions:\n\n::: {#136d1dde .cell execution_count=18}\n``` {.python .cell-code}\nint(3.9)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n3\n```\n:::\n:::\n\n\n::: {#0f18d64b .cell execution_count=19}\n``` {.python .cell-code}\nbool(3.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nTrue\n```\n:::\n:::\n\n\n## Quotes\n\nPairs of single and double quotes are used to create strings.\n\n:::{.note}\n\n[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length) does not recommend one style over the other. It does suggest however that once you have chosen a style, you stick to it to make scripts consistent.\n\n:::\n\n::: {#fb802ae0 .cell execution_count=20}\n``` {.python .cell-code}\n\"This is a string.\"\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n'This is a string.'\n```\n:::\n:::\n\n\n::: {#9e54f134 .cell execution_count=21}\n``` {.python .cell-code}\ntype(\"This is a string.\")\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nstr\n```\n:::\n:::\n\n\n::: {#c177a282 .cell execution_count=22}\n``` {.python .cell-code}\n'This is also a string.'\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n'This is also a string.'\n```\n:::\n:::\n\n\n::: {#742186d2 .cell execution_count=23}\n``` {.python .cell-code}\ntype('This is also a string.')\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nstr\n```\n:::\n:::\n\n\nApostrophes and textual quotes interfere with Python quotes. In these cases, use the opposite style to avoid any problem:\n\n::: {#2dfb304e .cell execution_count=24}\n``` {.python .cell-code}\n# This doesn't work\n'This string isn't easy'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[23]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">'This string isn't easy'</span>\n<span class=\"ansi-bright-white-fg\">                           ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> unterminated string literal (detected at line 2)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#4e75fa5e .cell execution_count=25}\n``` {.python .cell-code}\n# This is good\n\"This string isn't easy\"\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n\"This string isn't easy\"\n```\n:::\n:::\n\n\n::: {#763a0e77 .cell execution_count=26}\n``` {.python .cell-code}\n# This doesn't work\n\"He said: \"this is a problem.\"\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[25]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">\"He said: \"this is a problem.\"\"</span>\n<span class=\"ansi-bright-white-fg\">               ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> invalid syntax\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e92892ff .cell execution_count=27}\n``` {.python .cell-code}\n# This is good\n'He said: \"this is a problem.\"'\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n'He said: \"this is a problem.\"'\n```\n:::\n:::\n\n\nSometimes, neither option works and you have to escape some of the quotes with `\\`:\n\n::: {#c18398be .cell execution_count=28}\n``` {.python .cell-code}\n# This doesn't work\n\"He said: \"this string isn't easy\"\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[27]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">\"He said: \"this string isn't easy\"\"</span>\n<span class=\"ansi-bright-white-fg\">                              ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> unterminated string literal (detected at line 2)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#944281ea .cell execution_count=29}\n``` {.python .cell-code}\n# This doesn't work either\n'He said: \"this string isn't easy\"'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[28]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-yellow-fg\">    </span><span class=\"ansi-yellow-fg\">'He said: \"this string isn't easy\"'</span>\n<span class=\"ansi-bright-white-fg\">                                     ^</span>\n<span class=\"ansi-bright-red-fg\">SyntaxError</span><span class=\"ansi-bright-red-fg\">:</span> unterminated string literal (detected at line 2)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#5cb8d0b7 .cell execution_count=30}\n``` {.python .cell-code}\n# You can use double quotes and escape double quotes in the string\n\"He said: \\\"this string isn't easy\\\"\"\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n'He said: \"this string isn\\'t easy\"'\n```\n:::\n:::\n\n\n::: {#46ca9a2e .cell execution_count=31}\n``` {.python .cell-code}\n# Or you can use single quotes and escape single quotes in the string\n'He said: \"this string isn\\'t easy\"'\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n'He said: \"this string isn\\'t easy\"'\n```\n:::\n:::\n\n\n",
    "supporting": [
      "intro_objects_files"
    ],
    "filters": [],
    "includes": {}
  }
}