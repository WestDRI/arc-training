{
  "hash": "fdaa40a2d4530d24e9ca99fba050ee92",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Python objects\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nIn Python, everything is an object. So let's talk about Python objects.\n\n:::\n\n## Fundamental definitions\n\n### Object\n\nEvery piece of data in Python, whether it's a number, a string, a list, or a class instance is an object. Objects reside in memory and have a unique identity (address in memory), which can be checked using the `id` function. Objects have a type (e.g., `int`, `str`, `list`) which determines their behaviour and the operations that can be performed on them. Objects are the actual \"things\" that your program manipulates.\n\n### Value\n\nA value is what an object stores. For example, an integer object might have the value `42`, or a string object might have the value `\"hello\"`. Two different objects can have the same value (e.g. two distinct integer objects both storing `5`). The concept of \"value\" is often used when discussing the data itself, independent of its specific memory location or object identity.\n\n### Variable\n\nIn Python, a variable is a name that refers to an object. It acts as a label or reference to the specific memory location where an object is stored. When you assign a value to a variable, you are making that variable (name) point to an object holding that particular value.\n\n## Creating and deleting objects\n\n### Assignment\n\nThe assignment statement (`=`) assigns a variable (or name, or label, or reference) to an object in memory. This object holds a value.\n\n:::{.example}\n\nFor instance, we can assign the variable `a` to some object in memory that holds the value `1`:\n\n:::\n\n::: {#cf018032 .cell execution_count=2}\n``` {.python .cell-code}\na = 1\n```\n:::\n\n\nYou can define multiple variables at once, assigning them the same object:\n\n::: {#64bfe9e2 .cell execution_count=3}\n``` {.python .cell-code}\na = b = 10\nprint(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10 10\n```\n:::\n:::\n\n\n... or different objects:\n\n::: {#3934c5c7 .cell execution_count=4}\n``` {.python .cell-code}\na, b = 1, 2\nprint(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n```{.python}\na = 1\nb = a\na = 2\n```\n\nWhat do you think the value of `b` is now?\n\n:::\n\n:::{.callout-note collapse=\"true\"}\n\n## Explanation\n\nThe variable `a` gets assigned to an object holding the value `1`. Then the variable `b` gets assigned to that same object in memory (you can double-check this with `id(a) == id(b)`). Finally, we reassign the variable `a` to a new object in memory holding the value `2`. Meanwhile, the variable `b` still points to the first object with a value of `1` (so now `id(a) == id(b)` is not true anymore).\n\n:::\n\n### Choosing variables\n\nWhile I am using `a` and `b` a lot in this workshop (since the code has no other purpose than to demo the language itself), in your scripts you should use meaningful names (e.g. `survival`, `age`, `year`, `species`, `temperature`). It will make reading the code this much easier.\n\nMake sure not to use the names of [built-in functions](https://docs.python.org/3/library/functions.html) or [built-in constants](https://docs.python.org/3/library/constants.html).\n\n### Deleting objects\n\nYou can delete variables with the `del` statement:\n\n::: {#eeb30364 .cell execution_count=5}\n``` {.python .cell-code}\na = 3\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n```\n:::\n:::\n\n\n::: {#c8246621 .cell execution_count=6}\n``` {.python .cell-code}\ndel a\nprint(a)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[5]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-bright-green-fg\">      1</span> <span style=\"color:rgb(95,215,255)\">del</span><span class=\"ansi-bright-white-fg\"> </span><span class=\"ansi-bright-white-fg\">a</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">2</span> <span class=\"ansi-bright-white-fg\">print</span><span class=\"ansi-bright-white-fg\">(</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">a</span><span class=\"ansi-bright-white-fg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">NameError</span>: name 'a' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThen the garbage collector automatically deletes from memory objects with no variables assigned to them.\n\n## Types\n\nPython comes with multiple [built-in types](https://docs.python.org/3/library/stdtypes.html).\n\n:::{.example}\n\nExamples (non exhaustive):\n\n:::\n\n::: {#9187932a .cell execution_count=7}\n``` {.python .cell-code}\ntype(1), type(1.0), type('1'), type(3+2j), type(True), type(sum)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n(int, float, str, complex, bool, builtin_function_or_method)\n```\n:::\n:::\n\n\n:::{.note}\n\n`int` = integer \\\n`float` = floating point number \\\n`complex` = complex number \\\n`str` = string \\\n`bool` = Boolean\n\n:::\n\nPython is [dynamically-typed](https://en.wikipedia.org/wiki/Type_system#DYNAMIC), meaning you do not need to explicitly declare the type of a variable. It is inferred at runtime based on the value of the object the variable is assigned to.\n\nVariables can be reassigned to objects holding different data types:\n\n::: {#b3b5e68b .cell execution_count=8}\n``` {.python .cell-code}\na = 2.3\ntype(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nfloat\n```\n:::\n:::\n\n\n::: {#74603179 .cell execution_count=9}\n``` {.python .cell-code}\na = \"A string.\"\ntype(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nstr\n```\n:::\n:::\n\n\n### Type conversion\n\nYou can convert the type of some values. Here are some examples:\n\n::: {#9e340b72 .cell execution_count=10}\n``` {.python .cell-code}\ntype('4'), type(int('4'))\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n(str, int)\n```\n:::\n:::\n\n\n::: {#a521f05d .cell execution_count=11}\n``` {.python .cell-code}\ntype(3), type(str(3))\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n(int, str)\n```\n:::\n:::\n\n\n::: {#f5ed7f11 .cell execution_count=12}\n``` {.python .cell-code}\ntype(3), type(float(3))\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n(int, float)\n```\n:::\n:::\n\n\n::: {#a341697c .cell execution_count=13}\n``` {.python .cell-code}\ntype(3.4), type(str(3.4))\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n(float, str)\n```\n:::\n:::\n\n\n::: {#6b19c5ce .cell execution_count=14}\n``` {.python .cell-code}\ntype(0), type(bool(0))\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n(int, bool)\n```\n:::\n:::\n\n\n::: {#5715bb8a .cell execution_count=15}\n``` {.python .cell-code}\ntype(True), type(int(True))\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n(bool, int)\n```\n:::\n:::\n\n\nOf course, not all conversions are possible:\n\n::: {#bda058ba .cell execution_count=16}\n``` {.python .cell-code}\nint('red')\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bright-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-bright-red-fg\">ValueError</span>                                Traceback (most recent call last)\n<span class=\"ansi-bright-cyan-fg\">Cell</span><span class=\"ansi-bright-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[15]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-bright-green-fg\">----&gt; </span><span class=\"ansi-bright-green-fg\">1</span> <span class=\"ansi-bright-white-fg ansi-yellow-bg\">int</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">(</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">red</span><span style=\"color:rgb(215,215,135)\" class=\"ansi-yellow-bg\">'</span><span class=\"ansi-bright-white-fg ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-bright-red-fg\">ValueError</span>: invalid literal for int() with base 10: 'red'</pre>\n```\n:::\n\n:::\n:::\n\n\nYou might be surprised by some of the conversions:\n\n::: {#54fc969e .cell execution_count=17}\n``` {.python .cell-code}\nint(3.9)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n3\n```\n:::\n:::\n\n\n::: {#009d36c4 .cell execution_count=18}\n``` {.python .cell-code}\nbool(3.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nTrue\n```\n:::\n:::\n\n\n:::{.note}\n\nThat's because the Boolean of zero is `False` and the Boolean of any non-zero number is `True`.\n\n:::\n\n",
    "supporting": [
      "intro_objects_files"
    ],
    "filters": [],
    "includes": {}
  }
}