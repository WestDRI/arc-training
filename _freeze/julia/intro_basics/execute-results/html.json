{
  "hash": "64062c886a354dde193bc55e5040daee",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: Basics of the Julia language\naliases:\n  - basics.html\nauthor: Marie-H√©l√®ne Burle\n---\n\n## Comments\n\nComments do not get evaluated by Julia and are for humans only.\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\n# Comments in Julia are identified by hastags\n```\n:::\n\n\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\n#=\nComments can also spread over multiple lines\nif you enclose them with this syntax\n=#\n```\n:::\n\n\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\nx = 2          # Comments can be added at the end of lines\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2\n```\n:::\n:::\n\n\n\n## Basic operations\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\n# By default, Julia returns the output\n2 + 3\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n5\n```\n:::\n:::\n\n\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\n# Trailing semi-colons suppress the output\n3 + 7;\n```\n:::\n\n\n\n::: {#12 .cell execution_count=1}\n``` {.julia .cell-code}\n# Alternative syntax that can be used with operators\n+(2, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n7\n```\n:::\n:::\n\n\n\n::: {#14 .cell execution_count=1}\n``` {.julia .cell-code}\n# Updating operators\na = 3\na += 8    # this is the same as a = a + 8\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n11\n```\n:::\n:::\n\n\n\n::: {#16 .cell execution_count=1}\n``` {.julia .cell-code}\n# Operator precedence follows standard rules\n3 + 2 ^ 3 * 10\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n83\n```\n:::\n:::\n\n\n\n### More exotic operators\n\n::: {#18 .cell execution_count=1}\n``` {.julia .cell-code}\n# Usual division\n6 / 2\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3.0\n```\n:::\n:::\n\n\n\n::: {#20 .cell execution_count=1}\n``` {.julia .cell-code}\n# Inverse division\n2 \\ 6\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3.0\n```\n:::\n:::\n\n\n\n::: {#22 .cell execution_count=1}\n``` {.julia .cell-code}\n# Integer division (division truncated to an integer)\n7 √∑ 2\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3\n```\n:::\n:::\n\n\n\n::: {#24 .cell execution_count=1}\n``` {.julia .cell-code}\n# Remainder\n7 % 2        # equivalent to rem(7, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n1\n```\n:::\n:::\n\n\n\n::: {#26 .cell execution_count=1}\n``` {.julia .cell-code}\n# Fraction\n4//8\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n1//2\n```\n:::\n:::\n\n\n\n::: {#28 .cell execution_count=1}\n``` {.julia .cell-code}\n# Julia supports fraction operations\n1//2 + 3//4\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n5//4\n```\n:::\n:::\n\n\n\n## Variables\n\n![from [xkcd.com](https://xkcd.com/)](https://imgs.xkcd.com/comics/x.png){fig-alt=\"noshadow\"}\n\nA variable is a name bound to a value:\n\n::: {#30 .cell execution_count=1}\n``` {.julia .cell-code}\na = 3;\n```\n:::\n\n\n\nIt can be called:\n\n::: {#32 .cell execution_count=1}\n``` {.julia .cell-code}\na\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3\n```\n:::\n:::\n\n\n\nOr used in expressions:\n\n::: {#34 .cell execution_count=1}\n``` {.julia .cell-code}\na + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n5\n```\n:::\n:::\n\n\n\n### Assignment\n\nYou can re-assign new values to variables:\n\n::: {#36 .cell execution_count=1}\n``` {.julia .cell-code}\na = 3;\na = -8.2;\na\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n-8.2\n```\n:::\n:::\n\n\n\nEven values of a different type:\n\n::: {#38 .cell execution_count=1}\n``` {.julia .cell-code}\na = \"a is now a string\"\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n\"a is now a string\"\n```\n:::\n:::\n\n\n\nYou can define multiple variables at once:\n\n::: {#40 .cell execution_count=1}\n``` {.julia .cell-code}\na, b, c = 1, 2, 3\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2\n```\n:::\n:::\n\n\n\n### Variable names\n\nThese names are extremely flexible and [can use Unicode character:](https://docs.julialang.org/en/v1/manual/unicode-input/)\n\n```{.julia}\n\\omega\t\t # press TAB\n\\sum         # press TAB\n\\sqrt\t     # press TAB\n\\in          # press TAB\n\\:phone:     # press TAB\n```\n\n::: {#42 .cell execution_count=1}\n``` {.julia .cell-code}\nŒ¥ = 8.5;\nüêå = 3;\nŒ¥ + üêå\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n11.5\n```\n:::\n:::\n\n\n\nAdmittedly, using emojis doesn't seem very useful, but using Greek letters to write equations really makes Julia a great mathematical language:\n\n::: {#44 .cell execution_count=1}\n``` {.julia .cell-code}\nœÉ = 3\nŒ¥ = œÄ\nœï = 8\n\n(5œÉ + 3Œ¥) / œï\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3.0530972450961724\n```\n:::\n:::\n\n\n\n:::{.note}\n\nNote how the multiplication operator can be omitted when this does not lead to confusion.<br>\nAlso note how the mathematical constant œÄ is available in Julia without having to load any module.\n\n:::\n\nIf you want to know how to type a symbol, ask Julia: type `?` and paste it in the REPL.\n\n[The only hard rules for variable names are:]{.underline}\n\n- They must begin with a letter or an underscore,\n- They cannot take the names of [built-in keywords](https://docs.julialang.org/en/v1/base/base/#Keywords) such as `if`, `do`, `try`, `else`,\n- They cannot take the names of built-in constants (e.g. `œÄ`) and keywords in use in a session.\n\n:::{.example}\n\nWe thus get an error here:\n\n:::\n\n::: {#46 .cell execution_count=1}\n``` {.julia .cell-code}\nfalse = 3\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>syntax: invalid assignment location \"false\" around /home/marie/parvus/prog/mint/julia/intro_basics.qmd:182\nStacktrace:\n [1] top-level scope\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-bright-black-fg\">~/parvus/prog/mint/julia/</span><span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">intro_basics.qmd:182</span></pre>\n```\n:::\n\n:::\n:::\n\n\n\nIn addition, the [Julia Style Guide](https://docs.julialang.org/en/v1/manual/style-guide/#Style-Guide-1) recommends to follow these conventions:\n\n- Use lower case,\n- Word separation can be indicated by underscores, but better not to use them if the names can be read easily enough without them.\n\n### The ans variable\n\nThe keyword `ans` is a variable which, in the REPL, takes the value of the last computation:\n\n```{.julia}\na = 3 ^ 2;\nans + 1\n```\n\n```\n10\n```\n\n### Printing\n\nTo print the value of a variable in an interactive session, you only need to call it:\n\n::: {#48 .cell execution_count=1}\n``` {.julia .cell-code}\na = 3;\na\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3\n```\n:::\n:::\n\n\n\nIn non interactive sessions, you have to use the `println` function:\n\n::: {#50 .cell execution_count=1}\n``` {.julia .cell-code}\nprintln(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n```\n:::\n:::\n\n\n\n## Quotes\n\nNote the difference between single and double quotes:\n\n::: {#52 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof(\"a\")\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nString\n```\n:::\n:::\n\n\n\n::: {#54 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof('a')\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nChar\n```\n:::\n:::\n\n\n\n::: {#56 .cell execution_count=1}\n``` {.julia .cell-code}\n\"This is a string\"\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n\"This is a string\"\n```\n:::\n:::\n\n\n\n::: {#58 .cell execution_count=1}\n``` {.julia .cell-code}\n'This is not a sring'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>ParseError:\n<span class=\"ansi-bright-black-fg\"># Error @ </span>]8;;file:///home/marie/parvus/prog/mint/julia/intro_basics.qmd#235:2\\<span class=\"ansi-bright-black-fg\">/home/marie/parvus/prog/mint/julia/intro_basics.qmd:235:2</span>]8;;\\\n'<span style=\"background-color:rgb(120,70,70)\">This is not a sring</span>'\n<span class=\"ansi-bright-black-fg\">#‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÄ‚îÄ </span><span class=\"ansi-bright-red-fg\">character literal contains multiple characters</span>\nStacktrace:\n [1] top-level scope\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-bright-black-fg\">~/parvus/prog/mint/julia/</span><span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">intro_basics.qmd:235</span></pre>\n```\n:::\n\n:::\n:::\n\n\n\n:::{.note}\n\nWe got an error here since `'` is used for the character type and can thus only contain a single character.\n\n:::\n\n::: {#60 .cell execution_count=1}\n``` {.julia .cell-code}\n'a'\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)\n```\n:::\n:::\n\n\n\n",
    "supporting": [
      "intro_basics_files"
    ],
    "filters": [],
    "includes": {}
  }
}