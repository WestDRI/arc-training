{
  "hash": "601524d22f7841915afb6a52e2f7a635",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Introduction to Julia\naliases:\n  - intro.html\nauthor: Marie-Hélène Burle\n---\n\n\n\n\n:::{.def}\n\n> Why would I want to learn a new language? I already know R/python.\n\nR and python are interpreted languages: the code is executed directly, without prior-compilation. This is extremely convenient: it is what allows you to run code in an interactive shell. The price to pay is low performance: R and python are simply not good at handling large amounts of data. To overcome this limitation, users often turn to C or C++ for the most computation-intensive parts of their analyses. These are compiled—and extremely efficient—languages, but the need to use multiple languages and the non-interactive nature of compiled languages make this approach tedious.\n\nJulia uses just-in-time (JIT) compilation: the code is compiled at run time. This combines the interactive advantage of interpreted languages with the efficiency of compiled ones. Basically, it feels like running R or python, while it is almost as fast as C. This makes Julia particularly well suited for big data analyses, machine learning, or heavy modelling.\n\nIn addition, multiple dispatch (generic functions with multiple methods depending on the types of all the arguments) is at the very core of Julia. This is extremly convenient, cutting on conditionals and repetitions, and allowing for easy extensibility without having to rewrite code.\n\nFinally, Julia shines by its extremely clean and concise syntax. This last feature makes it easy to learn and really enjoyable to use.\n\nIn this workshop, which does not require any prior experience in Julia (experience in another language—e.g. R or python—would be best), we will go over the basics of Julia's syntax and package system; then we will push the performance aspect further by looking at how Julia can make use of clusters for large scale parallel computing.\n\n:::\n\n## Introducing Julia\n\n### Brief history\n\nStarted in 2009 by Jeff Bezanson, [Stefan Karpinski](https://en.wikipedia.org/wiki/Stefan_Karpinski), [Viral B. Shah](https://en.wikipedia.org/wiki/Viral_B._Shah), and [Alan Edelman](https://en.wikipedia.org/wiki/Alan_Edelman), the general-purpose programming language Julia was launched in 2012 as free and open source software. Version 1.0 was released in 2018.\n\n[Rust](https://www.rust-lang.org/) developer Graydon Hoare wrote an interesting [post](https://graydon2.dreamwidth.org/189377.html) which places Julia in a historical context of programming languages.\n\n### Why another language?\n\n#### JIT\n\nComputer languages mostly fall into two categories: *compiled languages* and *interpreted languages*.\n\n##### Compiled languages\n\nCompiled languages require two steps:\n\n- in a first step the code you write in a human-readable format (the source code, usually in plain text) gets compiled into machine code\n\n- it is then this machine code that is used to process your data\n\nSo you write a script, compile it, then use it.\n\n![](img/compiled_language.png){fig-alt=\"noshadow\" width=\"85%\"}\n\nBecause machine code is a lot easier to process by computers, compiled languages are fast. The two step process however makes prototyping new code less practical, these languages are hard to learn, and debugging compilation errors can be challenging.\n\n:::{.example}\n\nExamples of compiled languages include C, C++, Fortran, Go, and Haskell.\n\n:::\n\n##### Interpreted languages\n\nInterpreted languages are executed directly which has many advantages such as dynamic typing and direct feed-back from the code and they are easy to learn, but this comes at the cost of efficiency. The source code can facultatively be bytecompiled into non human-readable, more compact, lower level bytecode which is read by the interpreter more efficiently.\n\n![](img/interpreted_language.png){fig-alt=\"noshadow\" width=\"85%\"}\n\n:::{.example}\n\nExamples of interpreted languages include R, Python, Perl, and JavaScript.\n\n:::\n\n##### A common workflow\n\nSo, with this, what do researchers do?\n\nA common workflow, with the constraints of either type of languages, consists of:\n\n1. exploring the data and developing code using a sample of the data or reasonably light computations in an interpreted language,\n2. translating the code into a compiled language,\n3. finally throwing the full data and all the heavy duty computation at that optimized code.\n\nThis works and it works well.\n\nBut, as you can imagine, this roundabout approach is tedious, not to mention the fact that it involves mastering 2 languages.\n\n##### JIT compiled languages\n\nJulia uses [just-in-time compilation](https://en.wikipedia.org/wiki/Just-in-time_compilation) or JIT based on [LLVM](https://en.wikipedia.org/wiki/LLVM): the source code is compiled at run time. This combines the flexibility of interpretation with the speed of compilation, bringing speed to an interactive language. It also allows for dynamic recompilation, continuous weighing of gains and costs of the compilation of parts of the code, and other on the fly optimizations.\n\nOf course, there are costs here too. They come in the form of overhead time to compile code the first time it is run and increased memory usage.\n\n#### Multiple dispatch\n\nIn languages with [multiple dispatch](https://en.wikipedia.org/wiki/Multiple_dispatch), functions apply different methods at run time based on the type of the operands. This brings great type stability and improves speed.\n\nJulia is extremely flexible: type declaration is not required. Out of convenience, you can forego the feature if you want. Specifying types however will greatly optimize your code.\n\n[Here](http://ucidatascienceinitiative.github.io/IntroToJulia/Html/WhyJulia#Core-Idea:-Multiple-Dispatch-+-Type-Stability-=%3E-Speed-+-Readability) is a good post on type stability, multiple dispatch, and Julia efficiency.\n\n## How to run Julia?\n\nThere are several ways to run Julia interactively:\n\n- directly in the REPL (read–eval–print loop: the interactive Julia shell),\n- in interactive notebooks (e.g. [Jupyter](https://jupyter.org/), [Pluto](https://github.com/fonsp/Pluto.jl)),\n- in an editor able to run Julia interactively (e.g. [Emacs](https://github.com/JuliaEditorSupport/julia-emacs), [VS Code](https://www.julia-vscode.org/), [Vim](https://github.com/JuliaEditorSupport/julia-vim)).\n\nLet's have a look at these interfaces.\n\n### The Julia REPL\n\nYou can launch the REPL from a terminal directly by typing the `julia` command.\n\n#### REPL keybindings\n\nIn the REPL, you can use standard command line keybindings (Emacs kbd):\n\n```\nC-c\t\tcancel\nC-d\t\tquit\nC-l\t\tclear console\n\nC-u\t\tkill from the start of line\nC-k\t\tkill until the end of line\n\nC-a\t\tgo to start of line\nC-e\t\tgo to end of line\n\nC-f\t\tmove forward one character\nC-b\t\tmove backward one character\n\nM-f\t\tmove forward one word\nM-b\t\tmove backward one word\n\nC-d\t\tdelete forward one character\nC-h\t\tdelete backward one character\n\nM-d\t\tdelete forward one word\nM-Backspace\tdelete backward one word\n\nC-p\t\tprevious command\nC-n\t\tnext command\n\nC-r\t\tbackward search\nC-s\t\tforward search\n```\n\n#### REPL modes\n\nThe Julia REPL is unique in that it has four distinct modes:\n\n<span style=\"font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 0.8rem; padding: 0.2rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #339933\"><b>julia></b></span> &emsp;&emsp;&nbsp; The main mode in which you will be running your code.\n\n<span style=\"font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 0.8rem; padding: 0.2rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #dab314\"><b>help?></b></span> &emsp;&emsp;&nbsp; A mode to easily access documentation.\n\n<span style=\"font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 0.8rem; padding: 0.2rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #b30000\"><b>shell></b></span> &emsp;&emsp;&nbsp; A mode in which you can run bash commands from within Julia.\n\n<span style=\"font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 0.8rem; padding: 0.2rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #2e5cb8\"><b>(env) pkg></b></span> &nbsp; A mode to easily perform actions on packages with Julia package manager.\n\n(<span style=\"font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 0.8rem; padding: 0.2rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #2e5cb8\"><b>env</b></span> is the name of your current project environment.\n\nProject environments are similar to Python's virtual environments and allow you, for instance, to have different package versions for different projects. By default, it is the current Julia version. So what you will see is <span style=\"font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 0.8rem; padding: 0.2rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #2e5cb8\"><b>(v1.3) pkg></b></span>).\n\nEnter the various modes by typing `?`, `;`, and `]`. Go back to the regular mode with the `Backspace` key.\n\n### Text editors\n\n#### VS Code\n\n[Julia for Visual Studio Code](https://www.julia-vscode.org/) has become the main Julia IDE.\n\n#### Emacs\n\n- through the [julia-emacs](https://github.com/JuliaEditorSupport/julia-emacs) and [julia-repl](https://github.com/tpapp/julia-repl) packages\n- through the [ESS](https://github.com/emacs-ess/ESS) package\n- through the [Emacs IPython Notebook](http://millejoh.github.io/emacs-ipython-notebook/) package if you want to access Jupyter notebooks in Emacs\n\n#### Vim\n\nThrough the [julia-vim](https://github.com/JuliaEditorSupport/julia-vim) package.\n\n### Interactive notebooks\n\n#### Jupyter\n\n[Project Jupyter](https://jupyter.org/) allows to create interactive programming documents through its web-based JupyterLab environment and its Jupyter Notebook.\n\n#### Pluto\n\nThe Julia package [Juno](https://github.com/fonsp/Pluto.jl) is a reactive notebook for Julia.\n\n### Quarto\n\n[Quarto](https://quarto.org/) builds interactive documents with code and runs Julia through Jupyter.\n\n## Startup options\n\nYou can configure Julia by creating the file `~/.julia/config/startup.jl`.\n\n## Help and documentation\n\nAs we already saw, you can type `?` to enter the help mode:\n\n```{.julia}\n?sum\n```\n\n```\nsearch: sum sum! summary cumsum cumsum! isnumeric VersionNumber issubnormal \nget_zero_subnormals set_zero_subnormals\n\n  sum(f, itr; [init])\n\n  Sum the results of calling function f on each element of itr.\n\n  The return type is Int for signed integers of less than system word size, \n  and UInt for unsigned integers of less than system word size. For all other \n  arguments a common return type is found to which all arguments are promoted.\n\n  The value returned for empty itr can be specified by init. It must be the \n  additive identity (i.e. zero) as it is unspecified whether init is used for \n  non-empty collections.\n```\n\n:::{.note}\n\nI truncated this output as the documentation also contains many examples.\n\n:::\n\nTo print the list of functions containing a certain word in their description, you can use `apropos()`.\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {#63b2afef .cell execution_count=1}\n``` {.julia .cell-code}\napropos(\"truncate\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBase.IOContext\nBase.IOBuffer\nBase.open\nBase.truncate\nBase.open_flags\nCore.String\nBase.dump\nBase.Broadcast.newindex\nArgTools\nNetworkOptions\nLinearAlgebra.eigen\nTar\nDates.format\nBase.trunc\nDates.Date\nIJulia.watch_stream\nIJulia.set_max_stdio\nAbstractTrees.print_tree\nAbstractTrees.TreeCharSet\nOffsetArrays\nPDMats\nStatsFuns\nDistributions\nDistributions.truncated\nDistributions.Distributions\nDistributions.Truncated\nDistributions.TruncatedNormal\nLazyModules\nSimpleRandom\nMods\nMultisets\nPolynomials.truncate!\nBase.truncate\nSimplePolynomials\nLinearAlgebraX\nPermutations\nDelaunayTriangulation.grow_polygon_outside_of_box\nDelaunayTriangulation.clip_unbounded_polygon_to_bounding_box\nStableHashTraits\nMakie\nMakie.to_vertices\n```\n:::\n:::\n\n\n## Version information\n\nJulia version only:\n\n::: {#a0cfd5a8 .cell execution_count=2}\n``` {.julia .cell-code}\nversioninfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nJulia Version 1.10.3\nCommit 0b4590a5507 (2024-04-30 10:59 UTC)\nBuild Info:\n  Official https://julialang.org/ release\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n  CPU: 16 × Intel(R) Core(TM) i7-10875H CPU @ 2.30GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-15.0.7 (ORCJIT, skylake)\nThreads: 1 default, 0 interactive, 1 GC (on 16 virtual cores)\n```\n:::\n:::\n\n\nMore information, including commit, OS, CPU, and compiler:\n\n::: {#97c215fa .cell execution_count=3}\n``` {.julia .cell-code}\nVERSION\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nv\"1.10.3\"\n```\n:::\n:::\n\n\n## Let's try a few commands\n\n```{.julia}\nx = 10\nx\nx = 2;\nx\ny = x;\ny\nans\nans + 3\n\na, b, c = 1, 2, 3\nb\n\n3 + 2\n+(3, 2)\n\na = 3\n2a\na += 7\na\n\n2\\8\n\na = [1 2; 3 4]\nb = a\na[1, 1] = 0\nb\n\n[1, 2, 3, 4]\n[1 2; 3 4]\n[1 2 3 4]\n[1 2 3 4]'\ncollect(1:4)\ncollect(1:1:4)\n1:4\na = 1:4\ncollect(a)\n\n[1, 2, 3] .* [1, 2, 3]\n\n4//8\n8//1\n1//2 + 3//4\n\na = true\nb = false\na + b\n```\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWhat does `;` at the end of a command do? \\\nWhat is surprising about `2a`? \\\nWhat does `+=` do? \\\nWhat does `.*`do?\n\n:::\n\n```{.julia}\na = [3, 1, 2]\n\nsort(a)\nprintln(a)\n\nsort!(a)\nprintln(a)\n```\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWhat does `!` at the end of a function name do?\n\n:::\n\n",
    "supporting": [
      "intro_intro_files"
    ],
    "filters": [],
    "includes": {}
  }
}