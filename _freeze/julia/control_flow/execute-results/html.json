{
  "hash": "4c5bb1b5b26c5307b88347f927bfefce",
  "result": {
    "markdown": "---\ntitle: Control flow\nauthor: Marie-Hélène Burle\n---\n\n## Conditional statements\n\nConditional statements allow to run instructions based on predicates.\n\nDifferent set of instructions will be executed depending on whether the predicates return `true` or `false`.\n\n:::{.example}\n\nHere are a few examples of predicates:\n\n:::\n\n```{.julia}\noccursin(\"that\", \"this and that\")\n4 < 3\na == b\na != b\n2 in 1:3\n3 <= 4 && 4 > 5\n3 <= 4 || 4 > 5\n```\n\nNote that Julia possesses an inexact equality comparator which is useful to compare floating-point numbers despite computer rounding.\n\nThe function `isapprox` or the equivalent binary operator `≈` can be used:\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n0.1 + 0.2 == 0.3\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nfalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n0.1 + 0.2 ≈ 0.3\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\ntrue\n```\n:::\n:::\n\n\nThe negatives are the function `!isapprox` and `≉`.\n\n### If statements\n\n```{.julia}\nif <predicate>\n    <some action>\nend\n```\n\n- If the predicate evaluates to `true`, the body of the if statement gets evaluated,\n- If the predicate evaluates to `false`, nothing happens.\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nfunction testsign1(x)\n    if x >= 0\n        println(\"x is positive\")\n    end\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\ntestsign1 (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\ntestsign1(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is positive\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\ntestsign1(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is positive\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\ntestsign1(-2)\n```\n:::\n\n\n### If else statements\n\n```{.julia}\nif <predicate>\n    <some action>\nelse\n    <some other action>\nend\n```\n\n- If the predicate evaluates to `true`, `<some action>` is done,\n- If the predicate evaluates to `false`, `<some other action>` is done.\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nfunction testsign2(x)\n    if x >= 0\n        println(\"x is positive\")\n    else\n        println(\"x is negative\")\n    end\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\ntestsign2 (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\ntestsign2(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is positive\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\ntestsign2(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is positive\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\ntestsign2(-2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is negative\n```\n:::\n:::\n\n\nIf else statements can be written in a compact format using the ternary operator:\n\n```{.julia}\n<predicate> ? <some action> : <some other action>\n```\n\nIn other words:\n\n```{.julia}\n<predicate> ? <action if predicate returns true> : <action if predicate returns false>\n```\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nfunction testsign2(x)\n    x >= 0 ? println(\"x is positive\") : println(\"x is negative\")\nend\n\ntestsign2(-2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is negative\n```\n:::\n:::\n\n\n### If elseif else statements\n\n```{.julia}\nif <predicate1>\n    <do if predicate1 true>\nelseif <predicate2>\n    <do if predicate1 false and predicate2 true>\nelse\n    <do if predicate1 and predicate2 false>\nend\n```\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nfunction testsign3(x)\n    if x > 0\n        println(\"x is positive\")\n    elseif x == 0\n        println(\"x is zero\")\n    else\n        println(\"x is negative\")\n    end\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\ntestsign3 (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\ntestsign3(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is positive\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\ntestsign3(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is zero\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\ntestsign3(-2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is negative\n```\n:::\n:::\n\n\n## Loops\n\n### For loops\n\nFor loops run a set of instructions for each element of an iterator:\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nfor name = [\"Paul\", \"Lucie\", \"Sophie\"]\n    println(\"Hello $name\")\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello Paul\nHello Lucie\nHello Sophie\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nfor i = 1:3, j = 3:5\n    println(i + j)\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n5\n6\n5\n6\n7\n6\n7\n8\n```\n:::\n:::\n\n\n### While loops\n\nWhile loops run as long as the condition remains true:\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\ni = 0\n\nwhile i <= 10\n    println(i)\n    i += 1\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n```\n:::\n:::\n\n\n",
    "supporting": [
      "control_flow_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}