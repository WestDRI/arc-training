{
  "hash": "c261e8a2aac82c31d6d04125943daf67",
  "result": {
    "markdown": "---\ntitle: Non interactive execution\nauthor: Marie-Hélène Burle\n---\n\n## Sourcing a file\n\nJulia scripts have a `.jl` extension.\n\nThe `include` function sources a Julia script (in a REPL session or in another script):\n\n```{.julia}\ninclude(\"file.jl\")\n```\n\nThe code contained in `file.jl` is thus run non interactively.\n\n## Running code from the command line\n\nYou can run scripts by passing them to the `julia` command on the command line:\n\n```{.bash}\n$ julia script.jl\n```\n\n:::{.note}\n\nThis code is run in a terminal, not in Julia, as is indicated by the $ prompt.\n\n:::\n\nYou can also evaluate single expressions in Julia from the command line by using the flag `-e`:\n\n```{.bash}\n$ julia -e 'println(2 + 3)'\n```\n\n```\n5\n```\n\n### Passing arguments\n\n#### To the julia command itself\n\nIf you want to pass arguments to the `julia` command itself, you need to add them before the script or the Julia expression.\n\n:::{.example}\n\nExample:\n\n:::\n\n```{.bash}\n$ julia -O script.jl\n```\n\n#### To the script/Julia expression\n\nTo pass arguments to the script (or Julia expression if you use `-e`), you add them after the script or expression:\n\n```{.bash}\n$ julia script.jl arg1 arg2 arg3\n```\n\n`arg1`, `arg2`, `arg3` will be passed in the global constant `ARGS` and interpreted as arguments to the script.\n\n:::{.example}\n\nExample passing arguments to an expression:\n\n:::\n\n```{.bash}\n$ julia -e 'for x in ARGS; println(x); end' 2 3\n```\n\n```\n2\n3\n```\n\n#### To both\n\nTo pass arguments both to the `julia` command and to the script/expression, you need to add the `--` delimiter before the script/expression:\n\n```{.bash}\n$ julia [switches] -- [programfile] [args...]\n```\n\n:::{.example}\n\nExample:\n\n:::\n\n```{.bash}\n$ julia -O -- script.jl arg1 arg2\n```\n\n",
    "supporting": [
      "non_interactive_files"
    ],
    "filters": [],
    "includes": {}
  }
}