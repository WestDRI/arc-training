{
  "hash": "a44e5d4e68d2f9979c4d148c498546e6",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: Types\naliases:\n  - types.html\nauthor: Marie-Hélène Burle\n---\n\n## Types systems\n\n### Two main type systems in programming languages\n\n#### Static type-checking\n\nType safety (catching errors of inadequate type) performed at compilation time.\n\n:::{.example}\n\nExamples: C, C++, Java, Fortran, Haskell.\n\n:::\n\n#### Dynamic type-checking\n\nType safety performed at runtime.\n\n:::{.example}\n\nExamples: Python, JavaScript, PHP, Ruby, Lisp.\n\n:::\n\n### Julia type system\n\nJulia type system is *dynamic* (types are unknown until runtime), but types *can* be declared, optionally bringing the advantages of static type systems.\n\nThis gives users the freedom to choose between an easy and convenient language, or a clearer, faster, and more robust one (or a combination of the two).\n\n## Julia types: a hierarchical tree\n\nAt the bottom: &emsp;**concrete types**. \\\nAbove: &emsp;&emsp;&emsp;&emsp;**abstract types** (concepts for collections of concrete types). \\\nAt the top: &emsp;&emsp;&ensp;&nbsp;the **`Any` type**, encompassing all types.\n\n![from <a href=\"https://www.oreilly.com/library/view/learning-julia-abstract/9781491999585/ch01.html\">O'Reilly</a>](img/type.png){fig-alt=\"noshadow\" width=\"80%\"}\n\nOne common type missing in this diagram is the boolean type.\n\nIt is a subtype of the integer type, as can be tested with the subtype operator `<:`\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nBool <: Integer\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\nIt can also be made obvious by the following:\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\nfalse == 0\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\ntrue == 1\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\na = true;\nb = false;\n3a + 2b\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3\n```\n:::\n:::\n\n\n\n## Optional type declaration\n\nDone with `::`\n\n```{.julia}\n<value>::<type>\n```\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\n2::Int\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2\n```\n:::\n:::\n\n\n\n## Illustration of type safety\n\nThis works:\n\n::: {#12 .cell execution_count=1}\n``` {.julia .cell-code}\n2::Int\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2\n```\n:::\n:::\n\n\n\nThis doesn't work:\n\n::: {#14 .cell execution_count=1}\n``` {.julia .cell-code}\n2.0::Int\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>TypeError: in typeassert, expected Int64, got a value of type Float64\nStacktrace:\n [1] top-level scope\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-bright-black-fg\">~/parvus/prog/mint/julia/</span><span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">intro_types.qmd:99</span></pre>\n```\n:::\n\n:::\n:::\n\n\n\nType declaration is not yet supported on global variables; this is used in local contexts such as inside a function.\n\n:::{.example}\n\nExample:\n\n:::\n\n::: {#16 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction floatsum(a, b)\n    (a + b)::Float64\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nfloatsum (generic function with 1 method)\n```\n:::\n:::\n\n\n\nThis works:\n\n::: {#18 .cell execution_count=1}\n``` {.julia .cell-code}\nfloatsum(2.3, 1.0)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3.3\n```\n:::\n:::\n\n\n\nThis doesn't work:\n\n::: {#20 .cell execution_count=1}\n``` {.julia .cell-code}\nfloatsum(2, 4)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>TypeError: in typeassert, expected Float64, got a value of type Int64\nStacktrace:\n [1] <span class=\"ansi-bold\">floatsum</span><span class=\"ansi-bold\">(</span><span class=\"ansi-bright-black-fg\">a</span>::Int64, <span class=\"ansi-bright-black-fg\">b</span>::Int64<span class=\"ansi-bold\">)</span>\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-magenta-fg\">Main.Notebook</span> <span class=\"ansi-bright-black-fg\">~/parvus/prog/mint/julia/</span><span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">intro_types.qmd:112</span>\n [2] top-level scope\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-bright-black-fg\">~/parvus/prog/mint/julia/</span><span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">intro_types.qmd:125</span></pre>\n```\n:::\n\n:::\n:::\n\n\n\n## Information and conversion\n\nThe `typeof` function gives the type of an object:\n\n::: {#22 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nInt64\n```\n:::\n:::\n\n\n\n::: {#24 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof(2.0)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nFloat64\n```\n:::\n:::\n\n\n\n::: {#26 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof(\"Hello, World!\")\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nString\n```\n:::\n:::\n\n\n\n::: {#28 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof(true)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nBool\n```\n:::\n:::\n\n\n\n::: {#30 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof((2, 4, 1.0, \"test\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nTuple{Int64, Int64, Float64, String}\n```\n:::\n:::\n\n\n\nConversion between types is possible in some cases:\n\n::: {#32 .cell execution_count=1}\n``` {.julia .cell-code}\nInt(2.0)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2\n```\n:::\n:::\n\n\n\n::: {#34 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof(Int(2.0))\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nInt64\n```\n:::\n:::\n\n\n\n::: {#36 .cell execution_count=1}\n``` {.julia .cell-code}\nChar(2.0)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n'\\x02': ASCII/Unicode U+0002 (category Cc: Other, control)\n```\n:::\n:::\n\n\n\n::: {#38 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof(Char(2.0))\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nChar\n```\n:::\n:::\n\n\n\n## Stylistic convention\n\nThe names of types start with a capital letter and camel case is used in multiple-word names.\n\n",
    "supporting": [
      "intro_types_files"
    ],
    "filters": [],
    "includes": {}
  }
}