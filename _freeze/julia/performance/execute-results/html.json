{
  "hash": "03fd71f79c14b1dbed6ebe54e7674fac",
  "result": {
    "markdown": "---\ntitle: Performance\nauthor: Marie-Hélène Burle\n---\n\nThe one thing you need to remember: [avoid global variables]{.emph}.\n\nThis means: avoid variables defined in the global environment.\n\n## Definitions\n\n*Scope of variables*: &emsp;&nbsp;Environment within which a variables exist\n\n*Global scope*: &emsp;&emsp;&emsp;&ensp;Global environment of a module\n\n*Local scope*: &ensp;&emsp;&emsp;&emsp;&ensp;Environment within a function, a loop, a struct, a macro, etc.\n\n## Why avoid global variables?\n\nThe Julia compiler is not good at optimizing code using global variables.\n\nPart of the reason is that their type can change.\n\n### Example\n\nWe will use the `@time` macro to time a loop:\n\n- In the global environment:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\ntotal = 0\nn = 1e6\n\n@time for i in 1:n\n    global total += i\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  0.358501 seconds (4.00 M allocations: 76.491 MiB, 14.23% gc time, 36.04% compilation time)\n```\n:::\n:::\n\n\n:::{.note}\n\nNote the garbage collection (gc) time: 14% of total time.\n\nGarbage collection time is a sign of poor code.\n\n:::\n\n- In a local environment (a function):\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nfunction local_loop(total, n)\n    total = total\n    @time for i in 1:n\n        global total += i\n    end\nend\n\nlocal_loop(0, 1e6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  0.048250 seconds (2.00 M allocations: 30.518 MiB)\n```\n:::\n:::\n\n\n:::{.note}\n\nWe get a 7.5 speedup.\n\nThe memory allocation also decreased by more than half.\n\n:::\n\nFor more accurate performance measurements, you should use the `@btime` macro from the [BenchmarkTools package](https://github.com/JuliaCI/BenchmarkTools.jl) which excludes compilation time from the timing, averages metrics over multiple runs, and is highly customizable.\n\n",
    "supporting": [
      "performance_files"
    ],
    "filters": [],
    "includes": {}
  }
}