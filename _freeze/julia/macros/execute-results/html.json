{
  "hash": "c67abd4a94405ae92767883b09969e84",
  "result": {
    "markdown": "---\ntitle: Macros\nauthor: Marie-Hélène Burle\n---\n\n:::{.def}\n\nJulia code is itself data and can be manipulated by the language while it is running.\n\n:::\n\n## Metaprogramming\n\n- Large influence from [Lisp](https://en.wikipedia.org/wiki/Lisp_(programming_language)).\n- Since Julia is entirely written in Julia, it is particularly well suited for metaprogramming.\n\n## Parsing and evaluating\n\nLet's start with something simple:\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n2 + 3\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n5\n```\n:::\n:::\n\n\nHow is this run internally?\n\nThe string `\"2 + 3\"` gets parsed into an expression:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nMeta.parse(\"2 + 3\")\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n:(2 + 3)\n```\n:::\n:::\n\n\nThen that expression gets evaluated:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\neval(Meta.parse(\"2 + 3\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n5\n```\n:::\n:::\n\n\n## Macros\n\nThey resemble functions and just like functions, they accept as input a tuple of arguments.\n\n**BUT** macros return an expression which is compiled directly rather than requiring a runtime `eval` call.\n\nSo they execute *before* the rest of the code is run.\n\nMacro's names are preceded by `@` (e.g. `@time`).\n\nJulia comes with many macros and you can create your own with:\n\n```{.julia}\nmacro <name>()\n    <body>\nend\n```\n\n## Stylistic conventions\n\nAs with functions, Julia suggests to use lower case, without underscores, as macro names.\n\n",
    "supporting": [
      "macros_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}