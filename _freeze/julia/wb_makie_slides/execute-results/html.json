{
  "hash": "cd60147952a5eb0b0f6ebce564074aa6",
  "result": {
    "markdown": "---\ntitle: Makie\nsubtitle: A data visualization ecosystem for Julia\naliases:\n  - makie_slides.html\nfrontpic: \"img/beautifulmakie.png\"\nauthor: Marie-HÃ©lÃ¨ne Burle\ndate: 2022-10-26\ndate-format: long\nformat:\n  revealjs:\n    embed-resources: true\n    theme: [default, ../revealjs.scss]\n    logo: /img/sfudrac_logo.png\n    highlight-style: monokai\n    code-line-numbers: false\n    template-partials:\n      - ../title-slide.html\n    pointer:\n      color: \"#b5111b\"\n      pointerSize: 32\n    link-external-newwindow: true\n    footer: <a href=\"wb_makie.html\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"rgb(153, 153, 153)\" class=\"bi bi-arrow-90deg-up\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z\"/></svg>&nbsp;Back to webinar page</a>\nrevealjs-plugins:\n  - pointer\n---\n\n# Introduction\n\n## Plotting in Julia\n\n. . .\n\nMany options:\n\n- [Plots.jl](https://github.com/JuliaPlots/Plots.jl): high-level API for working with different back-ends (GR, Pyplot, Plotly...)\n- [PyPlot.jl](https://github.com/JuliaPy/PyPlot.jl): Julia interface to Matplotlib's `matplotlib.pyplot`\n- [PlotlyJS.jl](https://github.com/JuliaPlots/PlotlyJS.jl): Julia interface to plotly.js\n- [PlotlyLight.jl](https://github.com/JuliaComputing/PlotlyLight.jl): the fastest plotting option in Julia by far, but limited features\n- [Gadfly.jl](https://github.com/GiovineItalia/Gadfly.jl): following the grammar of graphics popularized by Hadley Wickham in R\n- [VegaLite.jl](https://github.com/queryverse/VegaLite.jl): grammar of interactive graphics\n- [PGFPlotsX.jl](https://github.com/KristofferC/PGFPlotsX.jl): Julia interface to the PGFPlots LaTeX package\n- [UnicodePlots.jl](https://github.com/JuliaPlots/UnicodePlots.jl): plots in the terminal ðŸ™‚\n\n. . .\n\n- **[Makie.jl](https://github.com/MakieOrg/Makie.jl): powerful plotting ecosystem: animation, 3D, GPU optimization**\n\n## Makie ecosystem\n\n. . .\n\n- Main package:\n\n\t+ `Makie`: plots functionalities. Backend needed to render plots into images or vector graphics\n\n. . .\n\n- Backends:\n\n\t+ `CairoMakie`: vector graphics or high-quality 2D plots. Creates, but does not display plots (you need an IDE that does or you can use [ElectronDisplay.jl](https://github.com/queryverse/ElectronDisplay.jl))\n\n\t+ `GLMakie`: based on [OpenGL](https://en.wikipedia.org/wiki/OpenGL); 3D rendering and interactivity in [GLFW](https://www.glfw.org/) window (no vector graphics)\n\n\t+ `WGLMakie`: web version of `GLMakie` (plots rendered in a browser instead of a window)\n\n## Extensions\n\n- [GeoMakie.jl](https://github.com/MakieOrg/GeoMakie.jl) add geographical plotting utilities to Makie\n- [AlgebraOfGraphics.jl](https://github.com/MakieOrg/AlgebraOfGraphics.jl/) turns plotting into a simple algebra of building blocks\n- [GraphMakie.jl](https://github.com/MakieOrg/GraphMakie.jl) to create network graphs\n\n## Cheatsheet 2D\n\n![](img/makiecheatsheet2D.png){width=85%}\n\n:::{.caption}\n\nFrom: [Storopoli, Huijzer and Alonso (2021). Julia Data Science. https://juliadatascience.io. ISBN: 97984898](https://juliadatascience.io/datavisMakie_attributes)\n\n:::\n\n## Cheatsheet 3D\n\n![](img/makiecheatsheet3D.png)\n\n:::{.caption}\n\nFrom: [Storopoli, Huijzer and Alonso (2021). Julia Data Science. https://juliadatascience.io. ISBN: 97984898](https://juliadatascience.io/datavisMakie_attributes)\n\n:::\n\n## Resources\n\n- [Official documentation](https://docs.makie.org/stable/)\n- [Julia Data Science book, chapter 5](https://juliadatascience.io/DataVisualizationMakie)\n- Many examples in the project [Beautiful Makie](https://github.com/MakieOrg/BeautifulMakie)\n\n## Troubleshooting\n\nInstalling GLMakie can be challenging. [This page](https://github.com/MakieOrg/Makie.jl/tree/master/GLMakie#troubleshooting-opengl) may lead you towards solutions\n\nCairoMakie and WGLMakie should install without issues\n\n# Fundamental functioning\n\n## Figure\n\nLoad the package (here, we are using CairoMakie):\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing CairoMakie                        # no need to import Makie itself\n```\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"48%\"}\nCreate a `Figure` (container object):\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nfig = Figure()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n![](wb_makie_slides_files/figure-revealjs/cell-3-output-1.svg){}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"4%\"}\n\n:::\n\n::: {.column width=\"48%\"}\n<br>\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\ntypeof(fig)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nFigure\n```\n:::\n:::\n\n\n:::\n\n::::\n\n---\n\nYou can customize a `Figure`:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nfig2 = Figure(backgroundcolor=:grey22, resolution=(300, 300))\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](wb_makie_slides_files/figure-revealjs/cell-5-output-1.svg){}\n:::\n:::\n\n\nMakie uses the [Colors.jl](https://github.com/JuliaGraphics/Colors.jl) package as a dependency \\\nYou can find a list of all named colours [here](https://juliagraphics.github.io/Colors.jl/stable/namedcolors/)\n\n---\n\nTo use CSS specification (e.g. hex), you need to install Colors explicitly and use [its color parsing capabilities](http://juliagraphics.github.io/Colors.jl/stable/constructionandconversion/#Color-Parsing):\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nusing Colors\nfig3 = Figure(backgroundcolor=colorant\"#adc2eb\")\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](wb_makie_slides_files/figure-revealjs/cell-6-output-1.svg){}\n:::\n:::\n\n\n## Axis\n\n:::: {.columns}\n\n::: {.column width=\"48%\"}\n\nThen, you can create an `Axis`:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nax = Axis(Figure()[1, 1])\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nAxis with 0 plots:\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"4%\"}\n\n:::\n\n::: {.column width=\"48%\"}\n\n<br>\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\ntypeof(ax)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nAxis\n```\n:::\n:::\n\n\n:::\n\n::::\n\n---\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nAxis(fig3[1, 1])  # fig3[1, 1] sets the subplot layout: fig[row, col]\nfig3\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](wb_makie_slides_files/figure-revealjs/cell-9-output-1.svg){}\n:::\n:::\n\n\n---\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nAxis(fig[2, 3])  # This is what happens if we change the layout\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](wb_makie_slides_files/figure-revealjs/cell-10-output-1.svg){}\n:::\n:::\n\n\n---\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nAxis(fig3[2, 3])  # We can add another axis on fig3\nfig3\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n![](wb_makie_slides_files/figure-revealjs/cell-11-output-1.svg){}\n:::\n:::\n\n\n---\n\nAxis are customizable:\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nfig4 = Figure()\nAxis(fig4[1, 1],\n     xlabel=\"x label\",\n     ylabel=\"y label\",\n     title=\"Title of the plot\")\nfig4\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n![](wb_makie_slides_files/figure-revealjs/cell-12-output-1.svg){}\n:::\n:::\n\n\n## Plot\n\nFinally, we can add a plot:\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code code-line-numbers=\"1-4|5|6\"}\nfig = Figure()\nax = Axis(fig[1, 1])\nx = LinRange(-10, 10, 20)\ny = x\nscatter!(ax, x, y)  # Functions with ! transform their arguments\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n![](wb_makie_slides_files/figure-revealjs/cell-13-output-1.svg){}\n:::\n:::\n\n\n---\n\nOf course, there are many plotting functions, e.g. `scatterlines!`:\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis(fig[1, 1])\nx = LinRange(-10, 10, 20)\ny = x\nscatterlines!(ax, x, y)  # Functions with ! transform their arguments\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n![](wb_makie_slides_files/figure-revealjs/cell-14-output-1.svg){}\n:::\n:::\n\n\n---\n\nWe can also use `lines!`:\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis(fig[1, 1])\nx = LinRange(-10, 10, 20)\ny = sin.(x)  # The . means that the function is broadcast to each element of x\nlines!(ax, x, y)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n![](wb_makie_slides_files/figure-revealjs/cell-15-output-1.svg){}\n:::\n:::\n\n\n---\n\nLet's add points to get a smoother line:\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis(fig[1, 1])\nx = LinRange(-10, 10, 1000)\ny = sin.(x)  # The . means that the function is broadcast to each element of x\nlines!(ax, x, y)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n![](wb_makie_slides_files/figure-revealjs/cell-16-output-1.svg){}\n:::\n:::\n\n\n---\n\nNow, you don't have to create the `Figure`, `Axis`, and plot one at a time\\\nYou can create them at the same time with, for instance `lines`:\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nx = LinRange(-10, 10, 1000)\ny = sin.(x)\nlines(x, y)  # Note the use of lines instead of lines!\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n![](wb_makie_slides_files/figure-revealjs/cell-17-output-1.svg){}\n:::\n:::\n\n\n---\n\nOr even more simply:\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\nx = LinRange(-10, 10, 1000)\nlines(x, sin)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n![](wb_makie_slides_files/figure-revealjs/cell-18-output-1.svg){}\n:::\n:::\n\n\n---\n\nThis is a lot simpler, but it is important to understand the concepts of the `Figure` and `Axis` objects as you will need it to customize them:\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\nx = LinRange(-10, 10, 1000)\ny = cos.(x)\nlines(x, y;\n      figure=(; backgroundcolor=:green),\n      axis=(; title=\"Cosinus function\", xlabel=\"x label\", ylabel=\"y label\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n![](wb_makie_slides_files/figure-revealjs/cell-19-output-1.svg){}\n:::\n:::\n\n\n---\n\nWhen you create the `Figure`, `Axis`, and plot at the same time, you create a `FigureAxisPlot` object:\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\nx = LinRange(-10, 10, 1000)\ny = cos.(x)\nobj = lines(x, y;\n            figure=(; backgroundcolor=:green),\n            axis=(; title=\"Cosinus function\",\n                  xlabel=\"x label\",\n                  ylabel=\"y label\"));\ntypeof(obj)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nMakie.FigureAxisPlot\n```\n:::\n:::\n\n\n:::{.note}\n\nNote the `;` in the `figure` and `axis` value. This is because these are one-element NamedTuples\n\n:::\n\n---\n\nThe mutating functions (with `!`) can be used to add plots to an existing figure, but first, you need to decompose the `FigureAxisPlot` object:\n\n::: {.cell execution_count=21}\n``` {.julia .cell-code}\nfig, ax, plot = lines(x, sin)\nlines!(ax, x, cos)  # Remember that we are transforming the Axis object\nfig                 # Now we can plot the transformed Figure\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n![](wb_makie_slides_files/figure-revealjs/cell-21-output-1.svg){}\n:::\n:::\n\n\n---\n\nOr we can add several plots on different `Axis` in the same `Figure`:\n\n::: {.cell execution_count=22}\n``` {.julia .cell-code}\nfig, ax1, plot = lines(x, sin)\nax2 = Axis(fig[1, 2])\nlines!(ax2, x, cos)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n![](wb_makie_slides_files/figure-revealjs/cell-22-output-1.svg){}\n:::\n:::\n\n\n# Examples\n\n## 2D\n\n::: {.cell output-location='slide' execution_count=23}\n``` {.julia .cell-code}\nusing CairoMakie\nusing StatsBase, LinearAlgebra\nusing Interpolations, OnlineStats\nusing Distributions\nCairoMakie.activate!(type = \"png\")\n\nfunction eq_hist(matrix; nbins = 256 * 256)\n    h_eq = fit(Histogram, vec(matrix), nbins = nbins)\n    h_eq = normalize(h_eq, mode = :density)\n    cdf = cumsum(h_eq.weights)\n    cdf = cdf / cdf[end]\n    edg = h_eq.edges[1]\n    interp_linear = LinearInterpolation(edg, [cdf..., cdf[end]])\n    out = reshape(interp_linear(vec(matrix)), size(matrix))\n    return out\nend\n\nfunction getcounts!(h, fn; n = 100)\n    for _ in 1:n\n        vals = eigvals(fn())\n        x0 = real.(vals)\n        y0 = imag.(vals)\n        fit!(h, zip(x0,y0))\n    end\nend\n\nm(;a=10rand()-5, b=10rand()-5) = [0 0 0 a; -1 -1 1 0; b 0 0 0; -1 -1 -1 -1]\n\nh = HeatMap(range(-3.5,3.5,length=1200), range(-3.5,3.5, length=1200))\ngetcounts!(h, m; n=2_000_000)\n\nwith_theme(theme_black()) do\n    fig = Figure(figure_padding=0,resolution=(600,600))\n    ax = Axis(fig[1,1]; aspect = DataAspect())\n    heatmap!(ax,-3.5..3.5, -3.5..3.5, eq_hist(h.counts); colormap = :bone_1)\n    hidedecorations!(ax)\n    hidespines!(ax)\n    fig\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n![](wb_makie_slides_files/figure-revealjs/cell-23-output-1.png){}\n:::\n:::\n\n\n## 3D\n\n```{.julia}\nusing GLMakie, Random\nGLMakie.activate!()\n\nRandom.seed!(13)\nx = -6:0.5:6\ny = -6:0.5:6\nz = 6exp.( -(x.^2 .+ y' .^ 2)./4)\n\nbox = Rect3(Point3f(-0.5), Vec3f(1))\nn = 100\ng(x) = x^(1/10)\nalphas = [g(x) for x in range(0,1,length=n)]\ncmap_alpha = resample_cmap(:linear_worb_100_25_c53_n256, n, alpha = alphas)\n\nwith_theme(theme_dark()) do\n    fig, ax, = meshscatter(x, y, z;\n                           marker=box,\n                           markersize = 0.5,\n                           color = vec(z),\n                           colormap = cmap_alpha,\n                           colorrange = (0,6),\n                           axis = (;\n                                   type = Axis3,\n                                   aspect = :data,\n                                   azimuth = 7.3,\n                                   elevation = 0.189,\n            perspectiveness = 0.5),\n        figure = (;\n            resolution =(1200,800)))\n    meshscatter!(ax, x .+ 7, y, z./2;\n        markersize = 0.25,\n        color = vec(z./2),\n        colormap = cmap_alpha,\n        colorrange = (0, 6),\n        ambient = Vec3f(0.85, 0.85, 0.85),\n        backlight = 1.5f0)\n    xlims!(-5.5,10)\n    ylims!(-5.5,5.5)\n    hidedecorations!(ax; grid = false)\n    hidespines!(ax)\n    fig\nend\n```\n\n## 3D\n\n![](img/makie_plot.png)\n\n# <span style=\"font-size: 50px;\">For more examples, have a look at [Beautiful Makie](https://github.com/MakieOrg/BeautifulMakie)</span>\n\n## Compiling sysimages\n\nWhile Makie is extremely powerful, its compilation time and its time to first plot are extremely long\n\nFor this reason, it might save you a lot of time to create a sysimage (a file containing information from a Julia session such as loaded packages, global variables, compiled code, etc.) with [PackageCompiler.jl](https://github.com/JuliaLang/PackageCompiler.jl)\n\n:::{.note}\n\nThe upcoming Julia 1.9 will do this automatically\n\n:::\n\n# Using the Alliance clusters\n\n## CairoMakie\n\nCairoMakie will run without problem on the Alliance clusters\n\nIt is not designed for interactivity, so saving to file is what makes the most sense\n\n:::{.example}\n\nExample:\n\n:::\n\n```{.julia}\nsave(\"graph.png\", fig)\n```\n<br>\n[Remember however that CairoMakie is 2D only (for now)]{.note}\n\n## GLMakie\n\nGLMakie relies on [GLFW](https://www.glfw.org/) to create windows with OpenGL\n\nGLFW doesn't support creating contexts without an associated window\n\nThe dependency [GLFW.jl](https://github.com/JuliaGL/GLFW.jl) will thus not install in the clustersâ€”even with X11 forwardingâ€”unless you use [VDI nodes](https://docs.alliancecan.ca/wiki/VNC#VDI_Nodes), [VNC](https://docs.alliancecan.ca/wiki/VNC), or [Virtual GL](https://virtualgl.org/)\n\n## WGLMakie\n\nYou can setup a server with [JSServe.jl](https://github.com/SimonDanisch/JSServe.jl) as per [the documentation](http://juliaplots.org/WGLMakie.jl/stable/)\n\nHowever, this method is intended for the creation of interactive widgets, e.g. for a website\n\nWhile this is really cool, it isn't optimized for performance\n\nThere might also be a way to create an SSH tunnel to your local browser, although there is no documentation on this\n\nBest probably is to save to file\n\n## Conclusion: Makie on production clusters\n\n- 2D plots: use CairoMakie and save to file\n- 3D plots: use WGLMakie and save to file\n\n# Questions?\n\n",
    "supporting": [
      "wb_makie_slides_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}