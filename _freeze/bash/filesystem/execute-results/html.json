{
  "hash": "f021f0793b6dcb83f9de12bb1049301b",
  "result": {
    "markdown": "---\ntitle: The Unix filesystem\nauthor: Marie-Hélène Burle\n---\n\n::: {.cell hash='filesystem_cache/html/unnamed-chunk-1_33626d1a98a449044cd709ec98ce8cff'}\n\n:::\n\n\n:::{.def}\n\nBash allows to give instructions to a Unix operating system. The first thing we need to know is how storage is organized on such as system.\n\n:::\n\n## Structure\n\nThe Unix filesystem is a rooted tree of directories. The root is denoted by `/`.\n\nSeveral directories exist under the root. Here are a few:\n\n- `/bin` &emsp;&emsp;&emsp;&ensp;This is where binaries are stored.\n- `/boot` &emsp;&emsp;&emsp;There, you can find the files necessary for booting the system.\n- `/home` &emsp;&emsp;&emsp;This directory contains all the users home directories.\n\nThese directories in turn can contain other directories. `/home` for instance contains the directories:\n\n- `/home/user001`\n- `/home/user002`\n- `/home/user003`\n- ...\n\nThe home directory of each user contain in turns many files and directories.\n\n## Navigation\n\n### Working directory\n\nThe current working directory can be obtained with:\n\n```{.bash}\npwd\t\t  # print working directory\n```\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nWhat is your current working directory?\n\n:::\n\n### Changing directory\n\nTo navigate to another directory, you use `cd` (change directory) followed by the path of the directory.\n\n:::{.example}\n\nExample:\n\n:::\n\n```{.bash}\ncd /home\n```\n\nBecause `/home` was the parent directory (one level above in the rooted tree) of our working directory, we could have also navigated there with `cd ..` — the two dots represent one level up (a single dot represents the working directory).\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n- What do you think will happens if you run `cd ..` from `/home`?\n- What do you think will happens if you run `cd .` from `/home`?\n\n:::\n\nFrom any location, you can always go back to your home directory (e.g. `/home/user009`) by running `cd` without argument. Alternatively, you can use `cd ~`. This is because `~` gets expanded by the shell into the path of your home. Finally, you can use `cd $HOME`. `$HOME` is an environment variable representing the path of your home.\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nTry using `cd -` (that's the minus sign) a few times. What does this command do?\n\n:::\n\n### Absolute and relative paths\n\n\n\n## Creating files and directories\n\nFiles can be created with a text editor:\n\n```{.bash}\nnano newfile.txt\n```\n\n:::{.note}\n\nThe file actually gets created when you save it from within the text editor.\n\n:::\n\nor with the command `touch`:\n\n```{.bash}\ntouch newfile.txt\n```\n\n:::{.note}\n\nThis creates an empty file.\n\n:::\n\n`touch` can create multiple files at once:\n\n```{.bash}\ntouch file1 file2 file3\n```\n\nNew directories can be created with `mkdir`. This command can also accept multiple arguments to create multiple directories at once:\n\n```{.bash}\nmkdir dir1 dir2\n```\n\n## Deleting\n\nFiles can be deleted with `rm`.\n\n[Be very careful that `rm` is irreversible. Deleted files do not go to the trash: they are gone.]{.emph}\n\n## Copying, moving, and renaming\n\n<!-- ## Permissions -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}