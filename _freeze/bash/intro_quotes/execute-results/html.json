{
  "hash": "894b4069a8ee51688a755f84c4410811",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Quotes\naliases:\n  - quotes.html\nauthor: Marie-Hélène Burle\n---\n\n::: {.cell}\n\n:::\n\n\n:::{.def}\n\n\n\n:::\n\nLet's experiment with quotes:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nvariable=This string is the value of the variable\necho $variable\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nbash: line 1: string: command not found\n```\n\n\n:::\n:::\n\n\nOops...\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nvariable=\"This string is the value of the variable\"\necho $variable\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThis string is the value of the variable\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nvariable='This string is the value of the variable'\necho $variable\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThis string is the value of the variable\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nvariable='This string's the value of the variable'\necho $variable\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nbash: -c: line 1: unexpected EOF while looking for matching `''\n```\n\n\n:::\n:::\n\n\nOops...\n\nOne solution to this is to use double quotes:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nvariable=\"This string's the value of the variable\"\necho $variable\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThis string's the value of the variable\n```\n\n\n:::\n:::\n\n\nAlternatively, single quotes can be escaped:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nvariable='This string'\"'\"'s the value of the variable'\necho $variable\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThis string's the value of the variable\n```\n\n\n:::\n:::\n\n\n:::{.note}\n\nAdmittedly, this last one is a little crazy. It is the way to escape single quotes in single-quoted strings.\n\nThe first `'` ends the first string, both `\"` create a double-quoted string with `'` (escaped) in it, then the last `'` starts the second string.\n\nEscaping double quotes is a lot easier and simply requires `\\\"`.\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}