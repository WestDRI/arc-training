{
  "hash": "af8584996d4587d81835cac4c964089e",
  "result": {
    "markdown": "---\ntitle: Pipes & redirections\nauthor: Marie-Hélène Burle\n---\n\n\n:::{.def}\n\nBy default, commands that produce an output print to the terminal. This output can however be redirected to be printed elsewhere (e.g. to files) or to be passed as the argument of another command.\n\nThis section will cover the most basic cases.\n\n:::\n\n\n::: {.cell hash='redirections_cache/html/unnamed-chunk-1_d98a4bf867bd11b1fb3ded954fa9726a'}\n\n:::\n\n\n:::{.callout-accordion collapse=\"true\"}\n\n## ***Data for this section***\n\nFor this section, we will play with files created by [The Carpentries](https://carpentries.org/).\n\nYou can download them into a zip file called `bash.zip` with:\n\n```{.bash}\nwget http://bit.ly/bashfile -O bash.zip\n```\n\nYou can then unzip that file with:\n\n```{.bash}\nunzip bash.zip\n```\n\nFinally, you can delete the zip file:\n\n```{.bash}\nrm bash.zip\n```\n\nYou should now have a `data-shell` directory with a `molecules` subdirectory.\n\n`cd` into it:\n\n```{.bash}\ncd data-shell/molecules\n```\n\n:::\n\n## Redirections\n\nBy default, commands that produce an output print it to [standard output](https://en.wikipedia.org/wiki/Standard_streams#Standard_output_(stdout))—that is, the terminal. This output can however be redirected with the `>` sign. For instance, it can be redirected to a file:\n\n\n::: {.cell hash='redirections_cache/html/unnamed-chunk-2_03e18b7a1962d36c33c2a44e4f43d465'}\n\n```{.bash .cell-code}\nwc -l *.pdb > lengths.txt\n```\n:::\n\n\nIf you ran the `ls` command again, you would see that there is now a new file called `lengths.txt`. Let's print its content to the terminal:\n\n\n::: {.cell hash='redirections_cache/html/unnamed-chunk-3_aaa65fc692ec42f865c6ce9553773d6c'}\n\n```{.bash .cell-code}\ncat lengths.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n  20 cubane.pdb\n  12 ethane.pdb\n   9 methane.pdb\n  30 octane.pdb\n  21 pentane.pdb\n  15 propane.pdb\n 107 total\n```\n:::\n:::\n\n\nAs you can see, it contains the output of the command `wc -l *.pdb`.\n\nOf course, we can print the content of the file with modification. For instance, we can sort it:\n\n\n::: {.cell hash='redirections_cache/html/unnamed-chunk-4_04e176b8102541045011bb96e99d5fa5'}\n\n```{.bash .cell-code}\nsort -n lengths.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n   9 methane.pdb\n  12 ethane.pdb\n  15 propane.pdb\n  20 cubane.pdb\n  21 pentane.pdb\n  30 octane.pdb\n 107 total\n```\n:::\n:::\n\n\nAnd we can redirect this new output to a new file:\n\n\n::: {.cell hash='redirections_cache/html/unnamed-chunk-5_995b68a2cbfd0f96c4907d000399e847'}\n\n```{.bash .cell-code}\nsort -n lengths.txt > sorted.txt\n```\n:::\n\n\nInstead of printing an entire file to the terminal, you can print only part of it.\n\nLet's print the first line of the new file `sorted.txt`:\n\n\n::: {.cell hash='redirections_cache/html/unnamed-chunk-6_7c66670ecfcef5c087a7e8a81f67c4a6'}\n\n```{.bash .cell-code}\nhead -1 sorted.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n   9 methane.pdb\n```\n:::\n:::\n\n\n## Pipes\n\nAnother form of redirection is the pipe. Instead of redirecting the output to a different stream for printing, the output is passed as an argument to another command. This is very convenient because it allows to chain multiple commands without having to create files or variables to save the intermediate results.\n\nFor instance, we could run the three commands we ran previously at once, without the creation of two files to get there:\n\n\n::: {.cell hash='redirections_cache/html/unnamed-chunk-7_684a08fb11ff61bfc1423628145ef1c2'}\n\n```{.bash .cell-code}\nwc -l *.pdb | sort -n | head -1\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n   9 methane.pdb\n```\n:::\n:::\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nIn a directory we want to find the 3 files that have the least number of lines. Which command would work for this?\n\n1. `wc -l * > sort -n > head -3`\n2. `wc -l * | sort -n | head 1-3`\n3. `wc -l * | head -3 | sort -n`\n4. `wc -l * | sort -n | head -3`\n\n:::\n\n*[Here](https://youtu.be/lueQ-KxLFYI) is a video of a previous version of this workshop.*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}