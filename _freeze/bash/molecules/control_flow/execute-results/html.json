{
  "hash": "b8a4c2fa3ed44dc8d614d935494f25b4",
  "result": {
    "markdown": "---\ntitle: Control flow\nauthor:\n  - Marie-Hélène Burle\n  - Alex Razoumov\n---\n\n::: {.cell hash='control_flow_cache/html/unnamed-chunk-1_c088aba60b49fe8da768e5561cdc7b08'}\n\n:::\n\n\n:::{.callout-accordion collapse=\"true\"}\n\n## ***Data for this section***\n\nFor this section, we will play with files created by [The Carpentries](https://carpentries.org/).\n\nYou can download them into a zip file called `bash.zip` with:\n\n```{.bash}\nwget http://bit.ly/bashfile -O bash.zip\n```\n\nYou can then unzip that file with:\n\n```{.bash}\nunzip bash.zip\n```\n\nFinally, you can delete the zip file:\n\n```{.bash}\nrm bash.zip\n```\n\nYou should now have a `data-shell` directory with a `molecules` subdirectory.\n\n`cd` into it:\n\n```{.bash}\ncd data-shell/molecules\n```\n\n:::\n\n## For loops\n\n### Syntax\n\nThe syntax of a for loop in Bash is:\n\n```default\nfor <variable> in <collection>\ndo\n    <commands with $variable>\ndone\n```\n\n### Example\n\nLet's look at the content of `data-shell/molecules`:\n\n```{.bash}\nls\n```\n\n```\ncubane.pdb\nethane.pdb\nmethane.pdb\noctane.pdb\npentane.pdb\npropane.pdb\n```\n\nLet's say that we want to rename all the files by prepending \"gas_\" to their current names.\n\nWildcards don't work here:\n\n\n::: {.cell hash='control_flow_cache/html/unnamed-chunk-2_179a0cceda350217f8f375f6806cf718'}\n\n```{.bash .cell-code}\nmv *.pdb gas_*.pdb\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nmv: target 'gas_*.pdb': No such file or directory\n```\n:::\n:::\n\n\nThe solution is to use a for loop:\n\n```{.bash}\nfor file in *.pdb\ndo\n\tmv $file gas_$f\ndone\n```\n\n### Collections\n\nFor loops run a set of commands for each item of a collection. How do you create those collections?\n\nCollections can be a list of items (e.g. `file1 file2 file3`).\n\n#### Brace expansion\n\nCollections can also be created by brace expansion.\n\n:::{.example}\n\nExamples:\n\n:::\n\n\n::: {.cell hash='control_flow_cache/html/unnamed-chunk-3_65e2b24f5b0a2ef0140cd41124311ab3'}\n\n```{.bash .cell-code}\necho {1..10}\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 3 4 5 6 7 8 9 10\n```\n:::\n:::\n\n::: {.cell hash='control_flow_cache/html/unnamed-chunk-4_693b99648dcce2b1778089bb1f54d434'}\n\n```{.bash .cell-code}\necho {c..m}\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nc d e f g h i j k l m\n```\n:::\n:::\n\n::: {.cell hash='control_flow_cache/html/unnamed-chunk-5_f3e2c816b30b3a849fff4a9afc7dcc80'}\n\n```{.bash .cell-code}\necho {a..e}{1..3}\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\na1 a2 a3 b1 b2 b3 c1 c2 c3 d1 d2 d3 e1 e2 e3\n```\n:::\n:::\n\n::: {.cell hash='control_flow_cache/html/unnamed-chunk-6_dc7ee7708ad909aa18f1b6518aae57dc'}\n\n```{.bash .cell-code}\necho {a..c}{a..c}\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\naa ab ac ba bb bc ca cb cc\n```\n:::\n:::\n\n::: {.cell hash='control_flow_cache/html/unnamed-chunk-7_ce7087b2cecbed58e075c198c108a0d5'}\n\n```{.bash .cell-code}\necho {1,2,5}\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 5\n```\n:::\n:::\n\n::: {.cell hash='control_flow_cache/html/unnamed-chunk-8_3150e7721eb201ab4700c15577816afe'}\n\n```{.bash .cell-code}\nls -l {ethane,methane,pentane}.pdb\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n-rw-rw-r-- 1 marie marie  622 Sep 16  2021 ethane.pdb\n-rw-rw-r-- 1 marie marie  422 Sep 16  2021 methane.pdb\n-rw-rw-r-- 1 marie marie 1226 Sep 16  2021 pentane.pdb\n```\n:::\n:::\n\n\n#### Sequences\n\nCollections can also be sequences:\n\n\n::: {.cell hash='control_flow_cache/html/unnamed-chunk-9_711a6c20e941b02f71f979b98e1f94c1'}\n\n```{.bash .cell-code}\nseq 1 2 10\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n3\n5\n7\n9\n```\n:::\n:::\n\n\n:::{.note}\n\nHere, `1` is the start of the sequence, `10` is the end, and `2` is the step.\n\n:::\n\nSuch a sequence could be used in a loop this way:\n\n\n::: {.cell hash='control_flow_cache/html/unnamed-chunk-10_54d42685fae34e4635e47bfb3ed5d6cd'}\n\n```{.bash .cell-code}\nfor i in $(seq 1 2 10)\ndo\n\techo file$i.txt\ndone\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nfile1.txt\nfile3.txt\nfile5.txt\nfile7.txt\nfile9.txt\n```\n:::\n:::\n\n<!-- for ((i=1; i<=5; i++)) do echo $i; done   # can use C-style loops -->\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nIn a directory the command `ls` returns:\n\n```{.bash}\nfructose.dat  glucose.dat  sucrose.dat  maltose.txt\n```\n\nWhat would be the output of the following loop?\n\n```{.bash}\nfor datafile in *.dat\ndo\n  cat $datafile >> sugar.dat\ndone\n```\n\n1. All of the text from `fructose.dat`, `glucose.dat` and `sucrose.dat` would be concatenated and saved to a file called `sugar.dat`.\n\n2. The text from `sucrose.dat` will be saved to a file called `sugar.dat`.\n\n3. All of the text from `fructose.dat`, `glucose.dat`, `sucrose.dat`, and `maltose.txt` would be concatenated and saved to a file called `sugar.dat`.\n\n4. All of the text from `fructose.dat`, `glucose.dat` and `sucrose.dat` will be printed to the screen and saved into a file called `sugar.dat`.\n\n:::\n\n<!-- Using `diff` to compare files and directories. -->\n\n<!-- Discuss brace expansion. Try nested braces. Paste an example that works. -->\n<!-- What will this command do: -->\n\n<!-- ```{.bash} -->\n<!-- touch 2022-May-{0{1..9},{10..30}}.md -->\n<!-- ``` -->\n\n<!-- Write a loop that concatenates all .pdb files in `data-shell/molecules` subdirectory into one file called `allmolecules.txt`, prepending each fragment with the name of the corresponding .pdb file, and separating different files with an empty line. Run the loop, make sure it works, bring it up with the &nbsp;**↑**&nbsp; key and paste into the chat. -->\n\n<!-- What will the loop `for i in hello 1 2 * bye; do echo $i; done` print? Try answering without running the loop. -->\n\n<!-- Create a loop that writes into 10 files `chapter01.md`, `chapter02.md`, ..., `chapter10.md`. Each file should contain -->\n<!-- chapter-specific lines, e.g. `chapter05.md` will contain exactly these lines: -->\n\n<!-- ```{.bash} -->\n<!-- ## Chapter 05 -->\n<!-- This is the beginning of Chapter 05. -->\n<!-- Content will go here. -->\n<!-- This is the end of Chapter 05. -->\n<!-- ``` -->\n\n<!-- Why `mv *.txt *.bak` does not work? Write a loop to rename all .txt files to .bak files. There are several solutions for changing a file extension inside a loop you know by now. -->\n\n<!-- Using knowledge from the previous question, write a loop to replace spaces to underscores in all file names in the current directory. -->\n\n<!-- ```{.bash} -->\n<!-- touch hello \"first phrase\" \"second phrase\" \"good morning, everyone\" -->\n<!-- ls -l -->\n<!-- ls *\\ * -->\n<!-- ``` -->\n\n## While loops\n\n### Syntax\n\nThe syntax of a while loop in Bash is:\n\n```default\nwhile <predicate>\ndo\n    <commands>\ndone\n```\n\nThe set of commands in the body of the while loop are executed as long as the predicate returns true.\n\nBe careful that while loop can lead to infinite loops. Such loops need to be manually interrupted (by pressing `<Ctrl+C>`).\n\n:::{.example}\n\nExample of infinite loop:\n\n:::\n\n```{.bash}\nwhile true\ndo\n    echo \"Press <Ctrl+C> to stop\"\n\tsleep 1\ndone\n```\n\n{{< /question >}}\n\n\n\n*[Here](https://youtu.be/cCunoOIksAE) is a video of a previous version of this workshop.*\n\n## Conditionals\n\n### Syntax\n\n```default\nif [ <predicate 1> ]\nthen\n\t<commands>\nelif [ <predicate 2> ]\nthen\n\t<other commands>\nelse\n\t<default commands>\nfi\n```\n\n### Example\n\nLet's create a file called `check.sh` with the following if statement:\n\n```{.bash}\nfor f in $@\ndo\n    if [ -e $f ]      # Make sure to have spaces around each bracket\n    then\n        echo $f exists\n    else\n        echo $f does not exist\n    fi\ndone\n```\n\nNow, let's make it executable:\n\n```{.bash}\nchmod u+x check.sh\n```\n\nAnd let's run this:\n\n```{.bash}\n./check.sh file1 file2 check.sh file3\n```\n\n### Predicate examples\n\nHere are a few predicates:\n\n`[ $var == 'text' ]` checks whether `var` is equal to `'text'`.\n\n`[ $var == number ]` checks whether `var` is equal to `number`.\n\n`[ -e file ]` checks whether `file` exists.\n\n`[ -d name ]` checks whether `name` is a directory.\n\n`[ -f name ]` checks whether `name` is a file.\n\n<!-- Write a script that complains when it does not receive arguments. -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}