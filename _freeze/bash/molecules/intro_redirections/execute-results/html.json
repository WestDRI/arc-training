{
  "hash": "1d4ca4bcb6ce8a22f4cff2b5972e7f90",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Redirections & pipes\naliases:\n  - redirections.html\nauthor: Marie-Hélène Burle<br>*Adapted from [a Software Carpentry workshop](https://swcarpentry.github.io/shell-novice/index.html)*\n---\n\n\n\n:::{.def}\n\nBy default, commands that produce an output print it to the terminal. This output can however be redirected to be printed elsewhere (e.g. to a file) or to be passed as the argument of another command.\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n:::{.callout-note collapse=\"true\"}\n\n## Data for this section (same data as previous section)\n\nFor this section, we will play with files created by [The Carpentries](https://carpentries.org/).\n\nYou can download them into a zip file called `bash.zip` with:\n\n```{.bash}\nwget https://bit.ly/bashfile -O bash.zip\n```\n\nYou can then unzip that file with:\n\n```{.bash}\nunzip bash.zip\n```\n\nYou should now have a `data-shell` directory with a `molecules` subdirectory.\n\n`cd` into it:\n\n```{.bash}\ncd data-shell/molecules\n```\n\n:::\n\n## Redirections\n\nBy default, commands that produce an output print it to [standard output](https://en.wikipedia.org/wiki/Standard_streams#Standard_output_(stdout))—that is, the terminal. This is what we have been doing so far.\n\nThe output can however be redirected with the `>` sign. For instance, it can be redirected to a file, which is very handy if you want to save the result.\n\n:::{.example}\n\nExample:\n\n:::\n\nLet's print the number of lines in each .pdb file in the `molecules` directory:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc -l *.pdb\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  20 gas_cubane.pdb\n  12 gas_ethane.pdb\n   9 gas_methane.pdb\n  30 gas_octane.pdb\n  21 gas_pentane.pdb\n  15 gas_propane.pdb\n 107 total\n```\n\n\n:::\n:::\n\n\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\n- What does the `wc` command do?\n- What does the `-l` flag for this command do?\n- How did you find out?\n\n:::\n\nTo save this result into a file called `lengths.txt`, we run:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc -l *.pdb > lengths.txt\n```\n:::\n\n\n\n:::{.info}\n\nNote that `>` always creates a new file. If a file called `lengths.txt` already exists, it will be overwritten. Be careful not to lose data this way!\n\nIf you don't want to lose the content of the old file, you can append the output to the existing file with `>>` (`>>` will create a file `lengths.txt` if it doesn't exist yet, but if it exists, it will append the new content below the old one).\n\n:::\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nHow can you make sure that you did create a file called `lengths.txt`?\n\n:::\n\nLet's print its content to the terminal:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat lengths.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  20 gas_cubane.pdb\n  12 gas_ethane.pdb\n   9 gas_methane.pdb\n  30 gas_octane.pdb\n  21 gas_pentane.pdb\n  15 gas_propane.pdb\n 107 total\n```\n\n\n:::\n:::\n\n\n\nAs you can see, it contains the output of the command `wc -l *.pdb`.\n\nOf course, we can print the content of the file with modification. For instance, we can sort it:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsort -n lengths.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   9 gas_methane.pdb\n  12 gas_ethane.pdb\n  15 gas_propane.pdb\n  20 gas_cubane.pdb\n  21 gas_pentane.pdb\n  30 gas_octane.pdb\n 107 total\n```\n\n\n:::\n:::\n\n\n\nAnd we can redirect this new output to a new file:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsort -n lengths.txt > sorted.txt\n```\n:::\n\n\n\nInstead of printing an entire file to the terminal, you can print only part of it.\n\nLet's print the first line of the new file `sorted.txt`:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhead -1 sorted.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   9 gas_methane.pdb\n```\n\n\n:::\n:::\n\n\n\n## Pipes\n\nAnother form of redirection is the Bash *pipe*. Instead of redirecting the output to a different stream for printing, the output is passed as an argument to another command. This is very convenient because it allows to chain multiple commands without having to create files or variables to save intermediate results.\n\nFor instance, we could run the three commands we ran previously at once, without the creation of the two intermediate files:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc -l *.pdb | sort -n | head -1\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   9 gas_methane.pdb\n```\n\n\n:::\n:::\n\n\n\nIn each case, the output of the command on the left-hand side (LHS) is passed as the input of the command on the right-hand side (RHS).\n\n:::{.exo}\n\n:::{.yourturn}\n\nYour turn:\n\n:::\n\nIn a directory we want to find the 3 files that have the least number of lines. Which command would work for this?\n\n1. `wc -l * > sort -n > head -3`\n2. `wc -l * | sort -n | head 1-3`\n3. `wc -l * | sort -n | head -3`\n4. `wc -l * | head -3 | sort -n`\n\n:::\n\n*[Here](https://youtu.be/lueQ-KxLFYI) is a video of a previous version of this workshop.*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}