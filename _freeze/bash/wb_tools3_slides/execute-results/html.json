{
  "hash": "b436cc6137667d26f4a172daa1bedb90",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Modern shell utilities\nsubtitle: New tools for a fun command line experience\nfrontpic: img/cowsay_toomuchfun.png\nfrontpicwidth: 45%\nnoshadow: noshadow\nauthor: Marie-Hélène Burle\ndate: 2025-01-28\ndate-format: long\nexecute:\n  error: true\n  echo: true\nformat:\n  revealjs:\n    <!-- embed-resources: true -->\n    theme: [default, ../revealjsrainbow.scss]\n    logo: /img/favicon_sfudrac.png\n    highlight-style: ayu\n    code-line-numbers: false\n    template-partials:\n      - ../title-slide.html\n    pointer:\n      color: \"#b5111b\"\n      pointerSize: 32\n    link-external-newwindow: true\n    footer: <a href=\"wb_tools3.html\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"rgb(224, 172, 8)\" class=\"bi bi-arrow-90deg-up\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z\"/></svg>&nbsp;Back to webinar page</a>\n    auto-stretch: false\nrevealjs-plugins:\n  - pointer\n---\n\n\n\n# `ls` in colours: `eza`\n\n## What is `eza`? {.center}\n\n[eza](https://github.com/eza-community/eza) is a replacement for `ls`\n\n- adds colours\n- better default options\n\n## Installation {.center}\n\n### On your machine\n\nInstructions [here](https://github.com/eza-community/eza/blob/main/INSTALL.md)\n\n### On the Alliance clusters\n\n`eza` is not installed on the Alliance clusters, so you have to install it locally under your own user. This is easy to do because it is written in Rust and can be installed with the Rust package manager\n\nLoad a Rust module and install `eza`:\n\n```{.bash}\nmodule load rust/1.76.0\ncargo install eza\n```\n\n:::{.note}\n\nYou only need to do this once. After `eza` has been installed, it will be accessible on subsequent sessions\n\n:::\n\n## Usage {.center}\n\n```{.bash}\neza\n```\n\nYou now have different colours for directories, symlinks, and different types of files and better defaults (compare `ls -al` with `exa -al`)\n\n`eza` by default shows the output in a human readable format and without the group\n\nThe flags are similar to those of `ls` with the additional `-T`, equivalent to running the [tree utility](https://en.wikipedia.org/wiki/Tree_(command)):\n\n```{.bash}\neza -T\n```\n\n## Alias {.center}\n\nYou can alias it to `ls` by adding to your `.bashrc` or `.zshrc` file:\n\n```{.bash}\nalias ls=eza\n```\n\nIf you ever want to use the true `ls` utility, you can do so with `\\ls`\n\n## Alternative {.center}\n\nIf you want a simpler and more lightweight way to add colours to your `ls` outputs, you can look at [LS_COLORS](https://github.com/trapd00r/LS_COLORS) (I did this for years until I found `eza`)\n\nTo install it locally in the Alliance clusters, you download and uncompress a script, and copy it to a proper location:\n\n```{.bash}\nmkdir ./LS_COLORS &&\n\tcurl -L https://api.github.com/repos/trapd00r/LS_COLORS/tarball/master |\n\t\ttar xzf - --directory=./LS_COLORS --strip=1 &&\n    mkdir -p ~/.local/share &&\n    cp ~/LS_COLORS/lscolors.sh ~/.local/share &&\n    rm -r ~/LS_COLORS\n```\n\nThen you add to your `.bashrc`/`.zshrc` file the sourcing of the script and an alias to `ls`:\n\n```{.bash}\nsource ~/.local/share/lscolors.sh\nalias ls='ls --color'\n```\n\n# A `cat` with wings: `bat`\n\n## What is `bat`? {.center}\n\n[bat](https://github.com/sharkdp/bat) is a replacement for `cat`\n\n- adds syntax highlighting for most programming languages\n- adds line numbers\n- adds pager-like search\n- adds pager-like navigation\n\n## Installation {.center}\n\n### On your machine\n\nInstructions [here](https://github.com/sharkdp/bat#installation)\n\n### On the Alliance clusters\n\n`bat` is already installed on the Alliance clusters\n\n## Usage {.center}\n\n```{.bash}\nbat .bash_profile\n```\n\n```{.bash}\n────────┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n       │ File: .bash_profile\n────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1   │ # .bash_profile\n   2   │\n   3   │ # Get the aliases and functions\n   4   │ if [ -f ~/.bashrc ]; then\n   5   │     . ~/.bashrc\n   6   │ fi\n   7   │\n   8   │ # User specific environment and startup programs\n────────┴────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```\n\n# RIP `grep`: ripgrep\n\n## What is ripgrep? {.center}\n\n[ripgrep](https://github.com/BurntSushi/ripgrep) provides the `rg` utility—is a replacement for `grep`\n\n- written in Rust, automatic parallelism ➔ with vastly improved performance\n- by default excludes patterns from `.gitignore` or other `.ignore` files\n- by default excludes binaries as well as hidden files and directories\n- by default doesn't follow symlinks\n\n## Installation {.center}\n\n### On your machine\n\nInstructions [here](https://github.com/BurntSushi/ripgrep#installation)\n\n### On the Alliance clusters\n\n`rg` is already installed on the Alliance clusters\n\n## Usage {.center}\n\nSearch lines in a file containing a pattern\n\n```{.bash}\nrg .bash .bash_profile\n```\n\nxxx https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md\n\n# Faster `find`: `fd`\n\n## What is `fd`? {.center}\n\n[fd](https://github.com/sharkdp/fd) is a replacement for `find`\n\n- written in Rust, automatic parallelism ➔ with vastly improved performance\n- more friendly syntax\n- by default excludes binaries as well as hidden files and directories\n- by default excludes patterns from `.gitignore` or other `.ignore` files\n\n## Installation {.center}\n\n### On your machine\n\nInstructions [here](https://github.com/sharkdp/fd#installation)\n\n### On the Alliance clusters\n\n`fg` is already installed on the Alliance clusters\n\n## Usage {.center}\n\nSearch file names in current directory recursively for a pattern:\n\n```{.bash}\nfd te\n```\n\nSearch file names in another directory recursively for a pattern:\n\n```{.bash}\nfd te projects/\n```\n\nSearch for files with a particular file extension:\n\n```{.bash}\nfd -e md\n```\n\nxxx https://github.com/sharkdp/fd#how-to-use\n\n# Smart `cd`: `zoxide`\n\n## What is `zoxide`? {.center}\n\n[zoxide](https://github.com/ajeetdsouza/zoxide) allows to easily jump to any directory\n\n## Installation {.center}\n\n### On your machine\n\nInstructions [here](https://github.com/ajeetdsouza/zoxide#installation)\n\n:::{.note}\n\nfzf [(see below)](#fuzzy-finder-fzf) adds cool functionality to it, so you might want to install it as well\n\n:::\n\n---\n\n### On the Alliance clusters\n\n`zoxide` is not installed on the Alliance clusters, but local installation is easy\n\n1. Install the binary in `~/.local/bin` with:\n\n```{.bash}\ncurl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh\n```\n\n2. Add `~/.local/bin` to your `PATH` by adding to your `.bashrc`:\n\n```{.bash}\nexport PATH=$PATH:~/.local/bin\n```\n\n3. Add to your `.bashrc` file (for Zsh, replace `bash` with `zsh` in `.zshrc`):\n\n```{.bash}\neval \"$(zoxide init bash)\"\n```\n\n:::{.note}\n\nUse this instead to use the command of your choice (e.g. `j`) instead of the default `z`:\n\n```{.bash}\neval \"$(zoxide init --cmd j bash)\"\n```\n\n:::\n\n## Usage {.center}\n\n## Alternative {.center}\n\nA tool that served me well until someone pointed the faster and better zoxide to me is [autojump](https://github.com/wting/autojump)\n\n### Installation\n\nInstructions [here](https://github.com/wting/autojump#installation) for your machine\n\n`autojump` is installed on the Alliance clusters, but you need add to your `.bashrc` or `.zshrc`:\n\n```{.bash}\n[[ -s $EPREFIX/etc/profile.d/autojump.sh ]] && source $EPREFIX/etc/profile.d/autojump.sh\n```\n\n### Usage\n\nSimilar to `zoxide` but you first need to visit directories so that they get entered in a database\n\n`j` is a wrapper for `autojump`, `jc` jumps to subdirectories of current directory\n\n# Fuzzy finding with `fzf`\n\n## What is `fzf`? {.center}\n\nxxx\n to find any particular element easily through incremental completion.\n[fzf](https://github.com/junegunn/fzf) is a fuzzy finder that can be paired with any number of commands.\n\n## Installation {.center}\n\n### On your machine\n\nInstructions [here](https://github.com/junegunn/fzf#installation)\n\n### On the Alliance clusters\n\n`fzf` is already installed on the Alliance clusters\n\n## Usage {.center}\n\nYou can pipe the output of any command that returns a list of elements into `fzf`\n\nLook for a file/directory:\n\n```{.bash}\nls | fzf\n```\n\n<br>\n[Many flags](https://github.com/junegunn/fzf#usage) to select order of entries, type of completion, preview, case-sensitivity, and more\n\nLook for a running process:\n\n```{.bash}\nps -ef | fzf --cycle -i -e +s --tac --reverse\n```\n\n---\n\n<br><br>\nOf course, you can create aliases and functions using `fzf`\n\nYou can put the previous command into an alias:\n\n```{.bash}\nalias proc='ps -ef | fzf --cycle -i -e +s --tac --reverse'\n```\n\nOr write a function to kill a running process:\n\n```{.bash}\nproc_kill () {\n    local pid\n    pid=$(ps -ef |\n\t\t\t  sed 1d |\n\t\t\t  fzf --cycle --reverse -i -e -m --bind \"ctrl-o:toggle-all\" \\\n\t\t\t\t  --header \"Tab: toggle, C-o: toggle-all\" |\n\t\t\t  awk '{print $2}')\n    echo $pid | xargs kill -${1:-15}\n}\n```\n\n---\n\n<br>\nSearch your command history:\n\n```{.bash}\nhis () {\n    fc -ln 1 |\n\t\tgrep -Ev '^q$|^x$|^vs$|^ek .*$|^zoom$|^c$|^cca$|^rs ...$|^hobu$|^cd$' |\n\t\tfzf --cycle -i -e +s --tac --reverse |\n\t\tsed 's/ *[0-9]* *//'\n}\n```\n\n<br>\nSearch your command history and run the selection:\n\n```{.bash}\nhis_run () {\n    $(fc -ln 1 |\n\t\t  grep -Ev '^q$|^x$|^vs$|^ek .*$|^zoom$|^c$|^cca$|^rs ...$|^hobu$|^cd$' |\n\t\t  fzf --cycle -i -e +s --tac --reverse |\n\t\t  sed 's/ *[0-9]* *//')\n}\n```\n\n---\n\n<br><br><br><br>\nAn example with preview to open the selection with emacsclient:\n\n```{.bash}\nie () {\n    emacsclient -c $(find $1 |\n\t\t\t\t\t\t fzf --cycle -i -e --reverse \\\n\t\t\t\t\t\t\t --preview=\"source-highlight --failsafe -f esc256 -i {}\")\n}\n```\n\n# Z shell plugins\n\n## \n\n- [syntax highlighting](https://github.com/zsh-users/zsh-syntax-highlighting)\n- [autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)\n- [history substring search](https://github.com/zsh-users/zsh-history-substring-search)\n\n## Installation {.center}\n\n```{.bash}\n# create a directory to store the scripts\nmkdir ~/.zsh_plugins\n\n# autosuggestions\ngit clone https://github.com/zsh-users/zsh-autosuggestions.git ~/.zsh_plugins/zsh-autosuggestions\n\n# history substring search\ngit clone https://github.com/zsh-users/zsh-history-substring-search.git ~/.zsh_plugins/zsh-history-substring-search\n```\n\n```{.bash}\nsource $EPREFIX/usr/share/zsh/site-functions/zsh-syntax-highlighting.zsh\nsource ~/.zsh_plugins/zsh-history-substring-search/zsh-history-substring-search.zsh\nsource ~/.zsh_plugins/zsh-autosuggestions/zsh-autosuggestions.zsh\n```\n\n## Usage {.center}\n\nYou now have syntax highlighting in your shell inputs\n\nTo use the history substring search, start typing some command then press `Alt + p` or `Alt + n` to cycle through all entries in your history that start with what you already typed\n\nFinally, the autosuggestion will suggestion commands based on your history and/or classic suggestions. You can accept the whole command with `Ctl + e` or accept a single word with `Alt + f`\n\n---\n\n![](img/cowsay_theend.png)\n\n---\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncowsay -d too much fun\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n ______________\n< too much fun >\n --------------\n        \\   ^__^\n         \\  (xx)\\_______\n            (__)\\       )\\/\\\n             U  ||----w |\n                ||     ||\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}