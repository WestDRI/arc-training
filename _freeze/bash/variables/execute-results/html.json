{
  "hash": "205ebee7092969b5cea7bf6eb41313a2",
  "result": {
    "markdown": "---\ntitle: Variables\nauthor: Marie-Hélène Burle\n---\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-1_feb8ec41c8719365a623a19d8b2252d8'}\n\n:::\n\n\n:::{.def}\n\n\n\n:::\n\n## Declaring variables\n\nYou can declare a variable (i.e. a name that holds a value) with the `=` sign.\n\n[Make sure not to put spaces around the equal sign.]{.emph}\n\n```{.bash}\nvariable=Test\n```\n\n## Expanding a variable's value\n\nTo expand a variable (to access its value), you need to prepend its name with `$`:\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-2_593bbc9acc6fab5dad4a50a36e110aca'}\n\n```{.bash .cell-code}\nvariable=Test\necho variable\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nvariable\n```\n:::\n:::\n\n\nMmmm... not really want we want!\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-3_e6a143465e66bf1d9d632b4fcfb7bc23'}\n\n```{.bash .cell-code}\nvariable=Test\necho $variable\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nTest\n```\n:::\n:::\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-4_638a009258a9c30a8dc230f1829b0d34'}\n\n```{.bash .cell-code}\nvariable=Test; echo \"$variable\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nTest\n```\n:::\n:::\n\n\n[Single quotes don't expand variables.]{.emph}\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-5_85f1647d34518b48fa17f89e82dbac2e'}\n\n```{.bash .cell-code}\nvariable=Test; echo '$variable'\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n$variable\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}