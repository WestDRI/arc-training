{
  "hash": "5f4bd7cb1632df6786b60cb73137b59d",
  "result": {
    "markdown": "---\ntitle: Variables\nauthor: Marie-Hélène Burle\n---\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-1_feb8ec41c8719365a623a19d8b2252d8'}\n\n:::\n\n\n:::{.def}\n\nVariables are a convenient way to assign a value to a name.\n\n:::\n\n## Declaring variables\n\nYou declare a variable (i.e. a name that holds a value) with the `=` sign:\n\n```{.bash}\nvar=value\n```\n\n:::{.note}\n\nMake sure not to put spaces around the equal sign.\n\n:::\n\n:::{.example}\n\nExample:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-2_3b98df32a395de97854b9d0f8fd9bbaf'}\n\n```{.bash .cell-code}\nvar=5\n```\n:::\n\n\nYou can delete a variable with:\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-3_5bf125080c7b399dffde6468dcef7702'}\n\n```{.bash .cell-code}\nunset var\n```\n:::\n\n\n## Expanding variables\n\nTo expand a variable (to access its value), you need to prepend its name with `$`.\n\n:::{.example}\n\nThis is not what we want:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-4_2c4fe7229742004e29aea0ce81c7346f'}\n\n```{.bash .cell-code}\nvar=value\necho var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nvar\n```\n:::\n:::\n\n\n:::{.example}\n\nThis however works:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-5_f7b10baed021ecd5889c334e0dbc3565'}\n\n```{.bash .cell-code}\nvar=value\necho $var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nvalue\n```\n:::\n:::\n\n\n## Quotes\n\n### When declaring\n\nQuotes are necessary for values containing special characters such as spaces.\n\n:::{.example}\n\nThis doesn't work:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-6_8648d6dd18257269765e53a4b083605f'}\n\n```{.bash .cell-code}\nvar=string with spaces\necho $var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nbash: line 1: with: command not found\n```\n:::\n:::\n\n\n:::{.example}\n\nThis works:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-7_86103d8d05ea2113626fc99058afc9ef'}\n\n```{.bash .cell-code}\nvar=\"string with spaces\"\necho $var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nstring with spaces\n```\n:::\n:::\n\n\n:::{.example}\n\nThis also works:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-8_29c13460c2ba07fd849076eb52664c2f'}\n\n```{.bash .cell-code}\nvar='string with spaces'\necho $var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nstring with spaces\n```\n:::\n:::\n\n\nWhen declaring variables, single and double quotes are equivalent. Which one should you use then? Use the one that is most convenient.\n\n:::{.example}\n\nNot good:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-9_b7308dc25f611b0f3b512084b5651196'}\n\n```{.bash .cell-code}\nvar='that's a string with spaces'\necho $var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nbash: -c: line 1: unexpected EOF while looking for matching `''\nbash: -c: line 3: syntax error: unexpected end of file\n```\n:::\n:::\n\n\n:::{.example}\n\nGood:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-10_9e7527222cf147f8dcf81280f75f7684'}\n\n```{.bash .cell-code}\nvar=\"that's a string with spaces\"\necho $var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nthat's a string with spaces\n```\n:::\n:::\n\n\n:::{.note}\n\nAlternatively, single quotes can be escaped, but it is a little crazy: the first `'` ends the first string, both `\"` create a double-quoted string with `'` (escaped) in it, then the last `'` starts the second string.\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-11_cb542440f7a2145de859178b65c4f694'}\n\n```{.bash .cell-code}\nvar='that'\"'\"'s a string with spaces'\necho $var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nthat's a string with spaces\n```\n:::\n:::\n\n\n:::\n\n:::{.example}\n\nConversely, this is not good:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-12_f93bf3be7639311a5674af5a6bf4243a'}\n\n```{.bash .cell-code}\nvar=\"he said: \"string with spaces\"\"\necho $var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nbash: line 1: with: command not found\n```\n:::\n:::\n\n\n:::{.example}\n\nWhile this works:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-13_146b897c52189586f75edc560f098e53'}\n\n```{.bash .cell-code}\nvar='he said: \"string with spaces\"'\necho $var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nhe said: \"string with spaces\"\n```\n:::\n:::\n\n\n:::{.note}\n\nDouble quotes as well can be escaped (simply by prepending them with `\\`):\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-14_279ff8e336a7e3f18942db054c25d15b'}\n\n```{.bash .cell-code}\nvar=\"he said: \\\"string with spaces\\\"\"\necho $var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nhe said: \"string with spaces\"\n```\n:::\n:::\n\n\n:::\n\n### When expanding\n\nWhile not necessary in many situations, it is safer to expand variables in double quotes, in case the expansion leads to problematic special characters. In the example above, this was not problematic and using `$var` or `\"$var\"` are the same.\n\nIn the following example however, it is problematic:\n\n```{.bash}\nvar=\"string with spaces\"\ntouch $var\n```\n\nThis creates 3 files called `string`, `with`, and `spaces`. Probably not what you want.\n\nThe following creates a single file called `string with spaces`:\n\n```{.bash}\nvar=\"string with spaces\"\ntouch \"$var\"\n```\n\n:::{.note}\n\nTo be safe, it is thus a good habit to quote expanded variables.\n\n:::\n\nIt is important to note however that [single quotes don't expand variables]{.emph} (only double quotes do).\n\nThe following would thus create a file called `$var`:\n\n```{.bash}\nvar=\"string with spaces\"\ntouch '$var'\n```\n\n## Exporting variables\n\nUsing `export` ensures that all inherited processes of this shell also have access to this variable:\n\n```{.bash}\nexport var=3\n```\n\n## String manipulation\n\n### Getting a subset\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-15_f0842f97c5e953559ef9bc567aedb1b6'}\n\n```{.bash .cell-code}\nvar=\"hello\"\necho ${var:2}      # Print from character 2\necho ${var:2:1}    # Print 1 character from character 2\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nllo\nl\n```\n:::\n:::\n\n\n### Search and replace\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-16_6a36c7e757a1dba75cc566adfb8ab544'}\n\n```{.bash .cell-code}\nvar=\"hello\"\necho ${var/l/L}    # Replace the first match of l by L\necho ${var//l/L}   # Replace all matches of l by L\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nheLlo\nheLLo\n```\n:::\n:::\n\n\n### String concatenation\n\nIf you want to concatenate the expanded variable with another string, you need to use curly braces or quotes.\n\n:::{.example}\n\nThis does not return anything because there is no variable called `varshine`:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-17_d83a71c8ae5f07904efab592bc71857f'}\n\n```{.bash .cell-code}\nvar=sun\necho $varshine\n```\n:::\n\n\n:::{.example}\n\nThese two syntaxes do work:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-18_5d2db8d2ee8e1f8bce486186f4c593bd'}\n\n```{.bash .cell-code}\nvar=sun\necho ${var}shine\necho \"$var\"shine\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nsunshine\nsunshine\n```\n:::\n:::\n\n\n## Environment variables\n\n[Environment variables](https://en.wikipedia.org/wiki/Environment_variable) help control the behaviour of processes on a machine. You can think of them as customizations of your system.\n\nMany are set automatically.\n\n:::{.example}\n\nExample:\n\n:::\n\n```{.bash}\necho $HOME\n```\n\n```\n/home/user009\n```\n\nThere are many other environment variables (e.g. `PATH`, `PWD`, `PS1`). To see the list, you can run `printenv` or `env`.\n\nIf you want to add new environment variables, you can add them to your `~/.bashrc` file which is sourced each time you start a new shell.\n\n*[Here](https://youtu.be/nNf4Xb56yEs) is a video of a previous version of this workshop.*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}