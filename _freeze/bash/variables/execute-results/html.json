{
  "hash": "b730a31d9f5909c10d02f66dc3d899ef",
  "result": {
    "markdown": "---\ntitle: Variables\nauthor: Marie-Hélène Burle\n---\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-1_feb8ec41c8719365a623a19d8b2252d8'}\n\n:::\n\n\n:::{.def}\n\n\n\n:::\n\n## Declaring variables\n\nYou declare a variable (i.e. a name that holds a value) with the `=` sign:\n\n```{.bash}\nvar=value\n```\n\n:::{.note}\n\nMake sure not to put spaces around the equal sign.\n\n:::\n\n:::{.example}\n\nExample:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-2_3b98df32a395de97854b9d0f8fd9bbaf'}\n\n```{.bash .cell-code}\nvar=5\n```\n:::\n\n\n## Expanding variables\n\nTo expand a variable (to access its value), you need to prepend its name with `$`.\n\n:::{.example}\n\nThis is not what we want:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-3_6871ec107a97f6e3afb9220000449352'}\n\n```{.bash .cell-code}\nvar=value\necho var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nvar\n```\n:::\n:::\n\n\n:::{.example}\n\nThis however works:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-4_2e8963105de0ff7c917b69933bbd5131'}\n\n```{.bash .cell-code}\nvar=value\necho $var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nvalue\n```\n:::\n:::\n\n\n### Quotes\n\nQuotes are necessary for values containing special characters such as spaces.\n\n:::{.example}\n\nThis doesn't work:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-5_a69d342202a82302393b0ee59e8a49b9'}\n\n```{.bash .cell-code}\nvar=value with spaces\necho $var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nbash: line 1: with: command not found\n```\n:::\n:::\n\n\n:::{.example}\n\nThis works:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-6_9fd62a7be6a7453b6a4273c09ec0c685'}\n\n```{.bash .cell-code}\nvar=\"value with spaces\"\necho $var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nvalue with spaces\n```\n:::\n:::\n\n\n:::{.example}\n\nThis also works:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-7_663f4e358ea42de2fe6e8f2cc2b02bff'}\n\n```{.bash .cell-code}\nvar='value with spaces'\necho $var\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nvalue with spaces\n```\n:::\n:::\n\n\nWhile not necessary in many situations, it is safer to expand variables in double quotes, in case the expansion leads to problematic special characters. In the example above, this was not problematic and using `$var` or `\"$var\"` are the same.\n\nIn the following example however, it is problematic:\n\n```{.bash}\nvar=\"value with spaces\"\ntouch $var\n```\n\nThis creates 3 files called `value`, `with`, and `spaces`. Probably not what you want.\n\nThe following creates a single file called `value with spaces`:\n\n```{.bash}\nvar=\"value with spaces\"\ntouch \"$var\"\n```\n\n:::{.note}\n\nTo be safe, it is thus a good habit to quote expanded variables.\n\n:::\n\nIt is important to note however that [single quotes don't expand variables]{.emph} (only double quotes do).\n\nThe following would thus create a file called `$var`:\n\n```{.bash}\nvar=\"value with spaces\"\ntouch '$var'\n```\n\n## Exporting variables\n\nUsing `export` ensures that all inherited processes of this shell also have access to this variable:\n\n```{.bash}\nexport var=3\n```\n\n<!-- Try defining the variable *newvar* without/with 'export' and then running the script: -->\n\n<!-- ```{.bash} -->\n<!-- nano process.sh -->\n<!-- \t#!/bin/bash -->\n<!--     echo $newvar -->\n<!-- ``` -->\n\n<!-- You can assign a command's output to a variable to use in another command (this is called *command -->\n<!-- substitution*) -- we'll see this later when we play with 'find' command. -->\n\n<!-- ```{bash} -->\n<!-- var=\"sun\" -->\n<!-- echo $varshine -->\n<!-- echo ${var}shine -->\n<!-- echo \"$var\"shine -->\n<!-- ``` -->\n\n<!-- ```{bash} -->\n<!-- myvar=\"hello\" -->\n<!-- echo $myvar -->\n<!-- echo ${myvar:offset} -->\n<!-- echo ${myvar:offset:length} -->\n<!-- echo ${myvar:2:3}    # 3 characters starting from character 2 -->\n<!-- echo ${myvar/l/L}    # replace the first match of a pattern -->\n<!-- echo ${myvar//l/L}   # replace all matches of a pattern -->\n<!-- ``` -->\n\n## Variable manipulation\n\nWhen recalling the value of a variable, you can make changes to it.\n\n:::{.example}\n\nExample:\n\n:::\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-8_02fbe36c854347680c8b58795fe086d5'}\n\n```{.bash .cell-code}\nmyvar=\"hello\"\necho $myvar\necho ${myvar:2:3}    # Print 3 characters starting from character 2\necho ${myvar/l/L}    # Replace the first match of a pattern\necho ${myvar//l/L}   # Replace all matches of a pattern\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nhello\nllo\nheLlo\nheLLo\n```\n:::\n:::\n\n\nYou delete a variable with:\n\n\n::: {.cell hash='variables_cache/html/unnamed-chunk-9_370752a1d69e284d1728feddb4371581'}\n\n```{.bash .cell-code}\nunset var\n```\n:::\n\n\n## Environment variables\n\n[Environment variables](https://en.wikipedia.org/wiki/Environment_variable) help control the behaviour of processes on a machine. You can think of them as customizations of your system.\n\nMany are set automatically.\n\n:::{.example}\n\nExample:\n\n:::\n\n```{.bash}\necho $HOME\n```\n\n```\n/home/user20\n```\n\nThere are many other environment variables (e.g. `PATH`, `PWD`, `PS1`). To see the list, you can run `printenv` or `env`.\n\nIf you want to add new environment variables, you can add them to your `~/.bashrc` file which is sourced each time you start a new shell.\n\n<!-- Play with variables and their values. Change the prompt, e.g. `PS1=\"\\u@\\h \\w> \"`. -->\n\n*[Here](https://youtu.be/nNf4Xb56yEs) is a video of a previous version of this workshop.*\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}