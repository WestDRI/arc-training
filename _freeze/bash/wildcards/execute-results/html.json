{
  "hash": "fb975d46e236373cb7b965cdcb1b9c28",
  "result": {
    "markdown": "---\ntitle: Wildcards & brace expansion\nauthor: Marie-Hélène Burle\n---\n\n::: {.cell hash='wildcards_cache/html/unnamed-chunk-1_a7e80295225003f041ffe6acc57fccb6'}\n\n:::\n\n\n:::{.def}\n\n\n\n:::\n\n:::{.callout-accordion collapse=\"true\"}\n\n## ***Data for this section***\n\nFor this section, we will play with files created by [The Carpentries](https://carpentries.org/).\n\nYou can download them into a zip file called `bash.zip` with:\n\n```{.bash}\nwget http://bit.ly/bashfile -O bash.zip\n```\n\nYou can then unzip that file with:\n\n```{.bash}\nunzip bash.zip\n```\n\nFinally, you can delete the zip file:\n\n```{.bash}\nrm bash.zip\n```\n\nYou should now have a `data-shell` directory with a `molecules` subdirectory.\n\n`cd` into it:\n\n```{.bash}\ncd data-shell/molecules\n```\n\n:::\n\n## Wildcards\n\nLet's explore the data:\n\n```{.bash}\nls\n```\n\n```\ncubane.pdb\nethane.pdb\nmethane.pdb\noctane.pdb\npentane.pdb\npropane.pdb\n```\n\n\n::: {.cell hash='wildcards_cache/html/unnamed-chunk-2_b0980d7f182cc11ebc5f0b0d9cd04daa'}\n\n```{.bash .cell-code}\nls p*        # This wildcard gets expanded to any file starting with p\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nls: cannot access 'p*': No such file or directory\n```\n:::\n:::\n\n::: {.cell hash='wildcards_cache/html/unnamed-chunk-3_53cbd5352bad70213deac959e75673d8'}\n\n```{.bash .cell-code}\nls *.pdb     # This wildcard gets expanded to any .pdb file\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nls: cannot access '*.pdb': No such file or directory\n```\n:::\n:::\n\n::: {.cell hash='wildcards_cache/html/unnamed-chunk-4_c8eacf0af798588728637ed9a5ed2056'}\n\n```{.bash .cell-code}\nwc -l *.pdb  # Prints the number of lines in each .pdb file\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nwc: '*.pdb': No such file or directory\n```\n:::\n:::\n\n\nWildcards are really powerful to apply a command to all the elements having a common pattern.\n\nFor instance, we can delete all the files we created earlier (`file1.sh`, `file2.sh`, etc.) with a single command:\n\n```{.bash}\nrm file*.sh\n```\n\n[Be very careful that `rm` is irreversible. Deleted files do not go to the trash: they are gone.]{.emph}\n\n## Brace expansion\n\n\n::: {.cell hash='wildcards_cache/html/unnamed-chunk-5_002c8ae281d6b2e3a736dc155c93b0da'}\n\n```{.bash .cell-code}\necho {1..5}\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 3 4 5\n```\n:::\n:::\n\n::: {.cell hash='wildcards_cache/html/unnamed-chunk-6_c73c81b256b7ff8673acf5d7027ba62c'}\n\n```{.bash .cell-code}\necho {01..10}\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n01 02 03 04 05 06 07 08 09 10\n```\n:::\n:::\n\n::: {.cell hash='wildcards_cache/html/unnamed-chunk-7_78ae4f3a29e822f1a1f07ac06e2cbf25'}\n\n```{.bash .cell-code}\necho {1..5}.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n1.txt 2.txt 3.txt 4.txt 5.txt\n```\n:::\n:::\n\n::: {.cell hash='wildcards_cache/html/unnamed-chunk-8_d30c48c9ef55febbb56ed4cd2b457625'}\n\n```{.bash .cell-code}\necho {r..v}\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nr s t u v\n```\n:::\n:::\n\n::: {.cell hash='wildcards_cache/html/unnamed-chunk-9_6adf46664c8e6d9ad822e1716e4f8f6c'}\n\n```{.bash .cell-code}\necho {file1,file2}.sh\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nfile1.sh file2.sh\n```\n:::\n:::\n\n\n[Make sure not to add a space after the comma.]{.emph}\n\n```{.bash}\ntouch {file1,file2}.sh\n```\n\n```{.bash}\ntouch file{3..6}.sh\n```\n\n\n::: {.cell hash='wildcards_cache/html/unnamed-chunk-10_c554a46da94f3f2f5fe2e883b0406e66'}\n\n```{.bash .cell-code}\necho {list,of,strings}\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nlist of strings\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}