{
  "hash": "8cc5ebb208ba2dbc9152e9e96c110741",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: String manipulation\nauthor:\n  - Marie-Hélène Burle\n  - Alex Razoumov\n---\n\n:::{.def}\n\nThis section shows how to subset, search, replace, or concatenate strings simply using the Bash variable extraction syntax.\n\n:::\n\n\n::: {.cell}\n\n:::\n\n\n## Getting a subset\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nvar=\"hello\"\necho ${var:2}      # Print from character 2\necho ${var:2:1}    # Print 1 character from character 2\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nllo\nl\n```\n\n\n:::\n:::\n\n\n:::{.note}\n\nBash indexes from 0.\n\n:::\n\n## Search and replace\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nvar=\"hello\"\necho ${var/l/L}    # Replace the first match of l by L\necho ${var//l/L}   # Replace all matches of l by L\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nheLlo\nheLLo\n```\n\n\n:::\n:::\n\n\n## String concatenation\n\nIf you want to concatenate the expanded variable with another string, you need to use curly braces or quotes.\n\n:::{.example}\n\nThis does not return anything because there is no variable called `varshine`:\n\n:::\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nvar=sun\necho $varshine\n```\n:::\n\n\n:::{.example}\n\nThese two syntaxes do work:\n\n:::\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nvar=sun\necho ${var}shine\necho \"$var\"shine\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsunshine\nsunshine\n```\n\n\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}