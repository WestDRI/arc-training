{
  "hash": "c877c61ac867f56bdd25a4163c1e2ef1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Searching a version-controlled project\naliases:\n  - search.html\nauthor: Marie-Hélène Burle\n---\n\n\n:::{.def}\n\nWhat is the point of creating all these commits if you are unable to make use of them because you can't find the information you need in them?\n\nIn this workshop, we will learn how to search:\n\n- your files (at any of their versions) and\n- your commit logs.\n\nBy the end of the workshop, you should be able to retrieve anything you need from your versioned project.\n\n:::\n\n:::{.box}\n\n*Prerequisites:*\n\nThis special Git topic is suitable for people who already use Git.\n\nYou don't need to be an expert, but we expect that you are able to run basic Git commands in the command line.\n\n:::\n\n<!-- https://git-scm.com/book/en/v2/Git-Tools-Searching -->\n\n\n::: {.cell}\n\n:::\n\n\n## Installation\n\n**MacOS & Linux users**:\n\nInstall Git from [the official website](https://git-scm.com/downloads).\n\n**Windows users**:\n\nInstall [Git for Windows](https://gitforwindows.org/). This will also install \"Git Bash\", a Bash emulator.\n\n## Using Git\n\nWe will use Git from the command line throughout this workshop.\n\nMacOS users: &emsp;&emsp;&ensp;open \"Terminal\".\\\nWindows users: &emsp;&ensp;open \"Git Bash\".\\\nLinux users: &emsp;&emsp;&emsp;open the terminal emulator of your choice.\n\n## Practice repo\n\n### Get a repo\n\nYou are welcome to use a repository of yours to follow this workshop. Alternatively, you can clone a practice repo I have on GitHub:\n\n1. Navigate to an appropriate location:\n\n```{.bash}\ncd /path/to/appropriate/location\n```\n\n2. Clone the repo:\n\n```{.bash}\n# If you have set SSH for your GitHub account\ngit clone git@github.com:prosoitos/practice_repo.git\n```\n\n```{.bash}\n# If you haven't set SSH\ngit clone https://github.com/prosoitos/practice_repo.git\n```\n\n3. Enter the repo:\n\n```{.bash}\ncd practice_repo\n```\n\n## Searching files\n\nThe first thing that can happen is that you are looking for a certain pattern somewhere in your project (for instance a certain function or a certain word).\n\n### git grep\n\nThe main command to look through versioned files is `git grep`.\n\nYou might be familiar with the command-line utility [grep](https://en.wikipedia.org/wiki/Grep) which allows to search for lines matching a certain pattern in files. `git grep` does a similar job with these differences:\n\n- it is much faster since all files under version control are already indexed by Git,\n- you can easily search any commit without having to check it out,\n- it has features lacking in `grep` such as, for instance, [pattern arithmetic or tree search using globs](https://stackoverflow.com/a/17558295/9210961).\n\n### Let's try it\n\nBy default, `git grep` searches recursively through the tracked files in the working directory (that is, the current version of the tracked files).\n\nFirst, let's look for the word `test` in the current version of the tracked files in the test repo:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nintro_aliases.qmd:Now, let's build an alias for a more complex command: `git grep \"test\" $(git rev-list --all)`. This example\nintro_aliases.qmd:from the *\"Searching a Git project\"* section below will search for the string \"test\" in all previous\nintro_aliases.qmd:commits. There are two problems with this command: (1) it takes an argument (the string \"test\"), and (2) it\nintro_aliases.qmd:git search test\nintro_aliases.qmd:should search the entire current Git project history for \"test\".\nintro_branches.qmd:git branch test\nintro_branches.qmd:git switch test\nintro_branches.qmd:* test\nintro_branches.qmd:The `*` shows the branch you are currently on (i.e. the branch to which `HEAD` points to). In our example, the project has two branches and we are on the branch `test`.\nintro_branches.qmd:git diff main test\nintro_branches.qmd:When you are happy with the changes you made on your test branch, you can merge it into `main`.\nintro_branches.qmd:If you have only created new commits on the branch `test`, the merge is called a \"fast-forward merge\" because `main` and `test` have not diverged: it is simply a question of having `main` catch up to `test`.\nintro_branches.qmd:git merge test\nintro_branches.qmd:Then, usually, you delete the branch `test` as it has served its purpose:\nintro_branches.qmd:git branch -d test\nintro_branches.qmd:Alternatively, you can switch back to `test` and do the next bit of experimental work on it. This allows to keep `main` free of mishaps and bad developments.\nintro_branches.qmd:Let's go back to our situation before we created the branch `test`:\nintro_branches.qmd:This time, you create a branch called `test2`:\nintro_branches.qmd:To merge your branch `test2` into `main`, a new commit is now required. Git will create this new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge:\nintro_branches.qmd:git merge test2\nintro_branches.qmd:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\nintro_branches.qmd:>>>>>>> test2\nintro_intro_old.qmd:The pointer `HEAD`, which normally points to the branch `main` which itself points to latest commit, can be moved around. By moving `HEAD` to any commit, you can revisit the state of your project at that particular version.\nintro_intro_old.qmd:Instead of working on your branch `main`, you create a test branch and work on it (so `HEAD` is on the branch `test` and both move along as you create commits):\nintro_intro_old.qmd:When you are happy with the changes you made on your test branch, you decide to merge `main` onto it.\nintro_intro_old.qmd:Then you do the fast-forward merge from `main` onto `test` (so `main` catches up to `test`):\nintro_intro_old.qmd:Then, usually, you delete the branch `test` as it has served its purpose (with `git branch -d test`). Alternatively, you can switch back to it and do the next bit of experimental work in it.\nintro_intro_old.qmd:This allows to keep `main` free of possible mishaps and bad developments (if you aren't happy with the work you did on your test branch, you can simply delete it and Git will clean the commits that are on it but not on `main` during the next garbage collection.\nintro_intro_old.qmd:You create a test branch and switch to it:\nintro_intro_old.qmd:To merge your main branch and your test branch, a new commit is now required (note that the command is the same as in the case of a fast-forward merge: `git merge`. Git will create the new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge. We will talk later about resolving conflicts).\nintro_intro_old.qmd:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\nintro_remotes.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\nintro_revisiting_old_commits_alternate.qmd:The pointer `HEAD`, which normally points to the branch `main` which itself points to latest commit, can be moved around. By moving `HEAD` to any commit, you can revisit the state of your project at that particular version.\nintro_undo.qmd:Here is a common scenario: you make a commit, then realize that you forgot to include some changes in that commit; or you aren't happy with the commit message; or both. You can edit your latest commit with the `--amend` flag:\nws_collab.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n```\n\n\n:::\n:::\n\n\nLet's add blank lines between the results of each file for better readability:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep --break test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nintro_aliases.qmd:Now, let's build an alias for a more complex command: `git grep \"test\" $(git rev-list --all)`. This example\nintro_aliases.qmd:from the *\"Searching a Git project\"* section below will search for the string \"test\" in all previous\nintro_aliases.qmd:commits. There are two problems with this command: (1) it takes an argument (the string \"test\"), and (2) it\nintro_aliases.qmd:git search test\nintro_aliases.qmd:should search the entire current Git project history for \"test\".\n\nintro_branches.qmd:git branch test\nintro_branches.qmd:git switch test\nintro_branches.qmd:* test\nintro_branches.qmd:The `*` shows the branch you are currently on (i.e. the branch to which `HEAD` points to). In our example, the project has two branches and we are on the branch `test`.\nintro_branches.qmd:git diff main test\nintro_branches.qmd:When you are happy with the changes you made on your test branch, you can merge it into `main`.\nintro_branches.qmd:If you have only created new commits on the branch `test`, the merge is called a \"fast-forward merge\" because `main` and `test` have not diverged: it is simply a question of having `main` catch up to `test`.\nintro_branches.qmd:git merge test\nintro_branches.qmd:Then, usually, you delete the branch `test` as it has served its purpose:\nintro_branches.qmd:git branch -d test\nintro_branches.qmd:Alternatively, you can switch back to `test` and do the next bit of experimental work on it. This allows to keep `main` free of mishaps and bad developments.\nintro_branches.qmd:Let's go back to our situation before we created the branch `test`:\nintro_branches.qmd:This time, you create a branch called `test2`:\nintro_branches.qmd:To merge your branch `test2` into `main`, a new commit is now required. Git will create this new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge:\nintro_branches.qmd:git merge test2\nintro_branches.qmd:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\nintro_branches.qmd:>>>>>>> test2\n\nintro_intro_old.qmd:The pointer `HEAD`, which normally points to the branch `main` which itself points to latest commit, can be moved around. By moving `HEAD` to any commit, you can revisit the state of your project at that particular version.\nintro_intro_old.qmd:Instead of working on your branch `main`, you create a test branch and work on it (so `HEAD` is on the branch `test` and both move along as you create commits):\nintro_intro_old.qmd:When you are happy with the changes you made on your test branch, you decide to merge `main` onto it.\nintro_intro_old.qmd:Then you do the fast-forward merge from `main` onto `test` (so `main` catches up to `test`):\nintro_intro_old.qmd:Then, usually, you delete the branch `test` as it has served its purpose (with `git branch -d test`). Alternatively, you can switch back to it and do the next bit of experimental work in it.\nintro_intro_old.qmd:This allows to keep `main` free of possible mishaps and bad developments (if you aren't happy with the work you did on your test branch, you can simply delete it and Git will clean the commits that are on it but not on `main` during the next garbage collection.\nintro_intro_old.qmd:You create a test branch and switch to it:\nintro_intro_old.qmd:To merge your main branch and your test branch, a new commit is now required (note that the command is the same as in the case of a fast-forward merge: `git merge`. Git will create the new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge. We will talk later about resolving conflicts).\nintro_intro_old.qmd:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\n\nintro_remotes.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n\nintro_revisiting_old_commits_alternate.qmd:The pointer `HEAD`, which normally points to the branch `main` which itself points to latest commit, can be moved around. By moving `HEAD` to any commit, you can revisit the state of your project at that particular version.\n\nintro_undo.qmd:Here is a common scenario: you make a commit, then realize that you forgot to include some changes in that commit; or you aren't happy with the commit message; or both. You can edit your latest commit with the `--amend` flag:\n\nws_collab.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n```\n\n\n:::\n:::\n\n\nLet's also put the file names on separate lines:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep --break --heading test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nintro_aliases.qmd\nNow, let's build an alias for a more complex command: `git grep \"test\" $(git rev-list --all)`. This example\nfrom the *\"Searching a Git project\"* section below will search for the string \"test\" in all previous\ncommits. There are two problems with this command: (1) it takes an argument (the string \"test\"), and (2) it\ngit search test\nshould search the entire current Git project history for \"test\".\n\nintro_branches.qmd\ngit branch test\ngit switch test\n* test\nThe `*` shows the branch you are currently on (i.e. the branch to which `HEAD` points to). In our example, the project has two branches and we are on the branch `test`.\ngit diff main test\nWhen you are happy with the changes you made on your test branch, you can merge it into `main`.\nIf you have only created new commits on the branch `test`, the merge is called a \"fast-forward merge\" because `main` and `test` have not diverged: it is simply a question of having `main` catch up to `test`.\ngit merge test\nThen, usually, you delete the branch `test` as it has served its purpose:\ngit branch -d test\nAlternatively, you can switch back to `test` and do the next bit of experimental work on it. This allows to keep `main` free of mishaps and bad developments.\nLet's go back to our situation before we created the branch `test`:\nThis time, you create a branch called `test2`:\nTo merge your branch `test2` into `main`, a new commit is now required. Git will create this new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge:\ngit merge test2\nAfter which, you can delete the (now useless) test branch (with `git branch -d test2`):\n>>>>>>> test2\n\nintro_intro_old.qmd\nThe pointer `HEAD`, which normally points to the branch `main` which itself points to latest commit, can be moved around. By moving `HEAD` to any commit, you can revisit the state of your project at that particular version.\nInstead of working on your branch `main`, you create a test branch and work on it (so `HEAD` is on the branch `test` and both move along as you create commits):\nWhen you are happy with the changes you made on your test branch, you decide to merge `main` onto it.\nThen you do the fast-forward merge from `main` onto `test` (so `main` catches up to `test`):\nThen, usually, you delete the branch `test` as it has served its purpose (with `git branch -d test`). Alternatively, you can switch back to it and do the next bit of experimental work in it.\nThis allows to keep `main` free of possible mishaps and bad developments (if you aren't happy with the work you did on your test branch, you can simply delete it and Git will clean the commits that are on it but not on `main` during the next garbage collection.\nYou create a test branch and switch to it:\nTo merge your main branch and your test branch, a new commit is now required (note that the command is the same as in the case of a fast-forward merge: `git merge`. Git will create the new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge. We will talk later about resolving conflicts).\nAfter which, you can delete the (now useless) test branch (with `git branch -d test2`):\n\nintro_remotes.qmd\nClick on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n\nintro_revisiting_old_commits_alternate.qmd\nThe pointer `HEAD`, which normally points to the branch `main` which itself points to latest commit, can be moved around. By moving `HEAD` to any commit, you can revisit the state of your project at that particular version.\n\nintro_undo.qmd\nHere is a common scenario: you make a commit, then realize that you forgot to include some changes in that commit; or you aren't happy with the commit message; or both. You can edit your latest commit with the `--amend` flag:\n\nws_collab.qmd\nClick on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n```\n\n\n:::\n:::\n\n\nWe can display the line numbers for the results with the `-n` flag:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep --break --heading -n test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nintro_aliases.qmd\n48:Now, let's build an alias for a more complex command: `git grep \"test\" $(git rev-list --all)`. This example\n49:from the *\"Searching a Git project\"* section below will search for the string \"test\" in all previous\n50:commits. There are two problems with this command: (1) it takes an argument (the string \"test\"), and (2) it\n68:git search test\n71:should search the entire current Git project history for \"test\".\n\nintro_branches.qmd\n54:git branch test\n72:git switch test\n99:* test\n102:The `*` shows the branch you are currently on (i.e. the branch to which `HEAD` points to). In our example, the project has two branches and we are on the branch `test`.\n109:git diff main test\n116:When you are happy with the changes you made on your test branch, you can merge it into `main`.\n120:If you have only created new commits on the branch `test`, the merge is called a \"fast-forward merge\" because `main` and `test` have not diverged: it is simply a question of having `main` catch up to `test`.\n135:git merge test\n140:Then, usually, you delete the branch `test` as it has served its purpose:\n143:git branch -d test\n148:Alternatively, you can switch back to `test` and do the next bit of experimental work on it. This allows to keep `main` free of mishaps and bad developments.\n154:Let's go back to our situation before we created the branch `test`:\n158:This time, you create a branch called `test2`:\n182:To merge your branch `test2` into `main`, a new commit is now required. Git will create this new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge:\n185:git merge test2\n190:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\n215:>>>>>>> test2\n\nintro_intro_old.qmd\n904:The pointer `HEAD`, which normally points to the branch `main` which itself points to latest commit, can be moved around. By moving `HEAD` to any commit, you can revisit the state of your project at that particular version.\n1219:Instead of working on your branch `main`, you create a test branch and work on it (so `HEAD` is on the branch `test` and both move along as you create commits):\n1227:When you are happy with the changes you made on your test branch, you decide to merge `main` onto it.\n1233:Then you do the fast-forward merge from `main` onto `test` (so `main` catches up to `test`):\n1237:Then, usually, you delete the branch `test` as it has served its purpose (with `git branch -d test`). Alternatively, you can switch back to it and do the next bit of experimental work in it.\n1238:This allows to keep `main` free of possible mishaps and bad developments (if you aren't happy with the work you did on your test branch, you can simply delete it and Git will clean the commits that are on it but not on `main` during the next garbage collection.\n1250:You create a test branch and switch to it:\n1270:To merge your main branch and your test branch, a new commit is now required (note that the command is the same as in the case of a fast-forward merge: `git merge`. Git will create the new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge. We will talk later about resolving conflicts).\n1274:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\n\nintro_remotes.qmd\n45:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n\nintro_revisiting_old_commits_alternate.qmd\n3:The pointer `HEAD`, which normally points to the branch `main` which itself points to latest commit, can be moved around. By moving `HEAD` to any commit, you can revisit the state of your project at that particular version.\n\nintro_undo.qmd\n16:Here is a common scenario: you make a commit, then realize that you forgot to include some changes in that commit; or you aren't happy with the commit message; or both. You can edit your latest commit with the `--amend` flag:\n\nws_collab.qmd\n52:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n```\n\n\n:::\n:::\n\n\nNotice how the results for the file `src/test_manuel.py` involve functions. It would be very convenient to have the names of the functions in which `test` appears.\n\nWe can do this with the `-p` flag:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep --break --heading -p test src/test_manuel.py\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfatal: ambiguous argument 'src/test_manuel.py': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]'\n```\n\n\n:::\n:::\n\n\n:::{.note}\n\nWe added the argument `src/test_manuel.py` to limit the search to that file.\n\n:::\n\nWe can now see that the word `test` appears in the functions `test` and `main`.\n\nNow, instead of printing all the matching lines, let's print the number of matches per file:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nintro_aliases.qmd:5\nintro_branches.qmd:17\nintro_intro_old.qmd:9\nintro_remotes.qmd:1\nintro_revisiting_old_commits_alternate.qmd:1\nintro_undo.qmd:1\nws_collab.qmd:1\n```\n\n\n:::\n:::\n\n\n### More complex patterns\n\n`git grep` in fact searches for regular expressions. `test` is a regular expression matching `test`, but we can look for more complex patterns.\n\nLet's look for `image`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep image\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nintro_ignore.qmd:- Non-text files (e.g. images, office documents)\n```\n\n\n:::\n:::\n\n\n:::{.note}\n\nNo output means that the search is not returning any result.\n\n:::\n\nLet's make this search case insensitive:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -i image\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nintro_ignore.qmd:- Non-text files (e.g. images, office documents)\n```\n\n\n:::\n:::\n\n\nWe are now getting some results as `Image` was present in three lines of the file `src/new_file.py`.\n\nLet's now search for `data`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep data\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nintro_changes.qmd:Remember that HEAD is a pointer pointing at a branch, that a branch is itself a pointer pointing at a commit, and finally that a commit is a Git object pointing at compressed blobs containing data about your project at a certain commit. When the HEAD pointer moves around, whatever commit it points to populates the [HEAD]{.emph} tree with the corresponding data.\nintro_first_steps.qmd:Alternatively, you can download the file with this button: {{< downloadthis project.zip dname=\"project\" label=\"Download the data\" >}}\nintro_first_steps.qmd:data/\nintro_first_steps.qmd:data\nintro_first_steps.qmd:data\nintro_first_steps.qmd:./data:\nintro_first_steps.qmd:dataset.csv\nintro_first_steps.qmd:├── data\nintro_first_steps.qmd:│   └── dataset.csv\nintro_first_steps.qmd:cat data/dataset.csv\nintro_first_steps.qmd:This is our very exciting data set.\nintro_first_steps.qmd:df = pd.read_csv('../data/dataset.csv')\nintro_first_steps.qmd:data\nintro_first_steps.qmd:        data/\nintro_first_steps.qmd:        data/\nintro_first_steps.qmd:Remember that each commit contains the following metadata:\nintro_first_steps.qmd:        data/\nintro_ignore.qmd:- Your initial data\nintro_ignore.qmd:Notice how `data/` is not listed in the untracked files anymore.\nintro_ignore.qmd:git commit -m \"Add .gitignore file with data and results\"\nintro_ignore.qmd:[main a1df8e5] Add .gitignore file with data and results\nintro_intro_old.qmd:mkdir chapter3/src chapter3/ms chapter3/data chapter3/results\nintro_intro_old.qmd:df <- data.frame(\nintro_intro_old.qmd:data\nintro_intro_old.qmd:Each commit is identified by a unique *hash* and contains these metadata:\nintro_intro_old.qmd:@@ -7,3 +7,5 @@ df <- data.frame(\nintro_intro_old.qmd:@@ -7,3 +7,5 @@ df <- data.frame(\nintro_intro_old.qmd:Not everything should be under version control. For instance, you don't want to put under version control non-text files or your initial data. You also shouldn't put under version control documents that can be easily recreated such as graphs and script outputs.\nintro_intro_old.qmd:echo \"/data/\nintro_intro_old.qmd:This creates a `.gitignore` file with two entries (`/data/` and `/results/`) and from now on, any file in either of these directories will be ignored by Git.\nintro_intro_old.qmd:git commit -m \"Add .gitignore file with data and results\"\nintro_intro_old.qmd:[main a1df8e5] Add .gitignore file with data and results\nintro_intro_old.qmd:    Add .gitignore file with data and results\nintro_intro_old.qmd:a1df8e5 (HEAD -> main) Add .gitignore file with data and results\nintro_intro_old.qmd:|     Add .gitignore file with data and results\nintro_intro_old.qmd:* a1df8e5 88 seconds ago  (HEAD -> main)Add .gitignore file with data and results xxx@xxx\nintro_intro_old.qmd:In addition to displaying the commit metadata, this also displays the difference with the previous commit.\nintro_intro_old.qmd:    Add .gitignore file with data and results\nintro_intro_old.qmd:+/data/\nintro_intro_old.qmd:@@ -7,3 +7,5 @@ df <- data.frame(\nintro_intro_old.qmd:    Add .gitignore file with data and results\nintro_intro_slides.qmd:The data is stored as blobs, doesn't create unnecessary copies (unchanged files are referenced from old blobs), and uses excellent compression\nintro_intro_slides.qmd:Each commit has a unique *hash* and contains the following metadata:\nintro_logs.qmd:    Add .gitignore file with data and results\nintro_logs.qmd:c4ab5e7 Add .gitignore file with data and results\nintro_logs.qmd:|     Add .gitignore file with data and results\nintro_logs.qmd:* c4ab5e7 34 minutes ago Add .gitignore file with data and results xxx@xxx\nintro_logs.qmd:+df = pd.read_csv('../data/dataset.csv')\nintro_logs.qmd:    Add .gitignore file with data and results\nintro_logs.qmd:+/data/\nintro_logs.qmd:In addition to displaying the commit metadata, `git show` also displays the diff of that commit with its parent commit.\nintro_remotes.qmd:## Getting data from a remote\nintro_remotes.qmd:If you collaborate on a project, you have to get the data added by your teammates to keep your local project up to date.\nintro_remotes.qmd:To download new data from a remote, you have 2 options:\nintro_remotes.qmd:*Fetching* downloads the data from a remote that you don't already have in your local version of the project:\nintro_remotes.qmd:Uploading data to the remote is called *pushing*:\nintro_undo.qmd:As you just experienced, this command leads to data loss. \\\nBinary file project.zip matches\nwb_dvc.qmd:title: Version control for data science and machine learning with DVC\n```\n\n\n:::\n:::\n\n\nWe are getting results for the word `data`, but also for the pattern `data` in longer expressions such as `train_data` or `dataset`. If we only want results for the word `data`, we can use the `-w` flag:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -w data\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nintro_changes.qmd:Remember that HEAD is a pointer pointing at a branch, that a branch is itself a pointer pointing at a commit, and finally that a commit is a Git object pointing at compressed blobs containing data about your project at a certain commit. When the HEAD pointer moves around, whatever commit it points to populates the [HEAD]{.emph} tree with the corresponding data.\nintro_first_steps.qmd:Alternatively, you can download the file with this button: {{< downloadthis project.zip dname=\"project\" label=\"Download the data\" >}}\nintro_first_steps.qmd:data/\nintro_first_steps.qmd:data\nintro_first_steps.qmd:data\nintro_first_steps.qmd:./data:\nintro_first_steps.qmd:├── data\nintro_first_steps.qmd:cat data/dataset.csv\nintro_first_steps.qmd:This is our very exciting data set.\nintro_first_steps.qmd:df = pd.read_csv('../data/dataset.csv')\nintro_first_steps.qmd:data\nintro_first_steps.qmd:        data/\nintro_first_steps.qmd:        data/\nintro_first_steps.qmd:        data/\nintro_ignore.qmd:- Your initial data\nintro_ignore.qmd:Notice how `data/` is not listed in the untracked files anymore.\nintro_ignore.qmd:git commit -m \"Add .gitignore file with data and results\"\nintro_ignore.qmd:[main a1df8e5] Add .gitignore file with data and results\nintro_intro_old.qmd:mkdir chapter3/src chapter3/ms chapter3/data chapter3/results\nintro_intro_old.qmd:df <- data.frame(\nintro_intro_old.qmd:data\nintro_intro_old.qmd:@@ -7,3 +7,5 @@ df <- data.frame(\nintro_intro_old.qmd:@@ -7,3 +7,5 @@ df <- data.frame(\nintro_intro_old.qmd:Not everything should be under version control. For instance, you don't want to put under version control non-text files or your initial data. You also shouldn't put under version control documents that can be easily recreated such as graphs and script outputs.\nintro_intro_old.qmd:echo \"/data/\nintro_intro_old.qmd:This creates a `.gitignore` file with two entries (`/data/` and `/results/`) and from now on, any file in either of these directories will be ignored by Git.\nintro_intro_old.qmd:git commit -m \"Add .gitignore file with data and results\"\nintro_intro_old.qmd:[main a1df8e5] Add .gitignore file with data and results\nintro_intro_old.qmd:    Add .gitignore file with data and results\nintro_intro_old.qmd:a1df8e5 (HEAD -> main) Add .gitignore file with data and results\nintro_intro_old.qmd:|     Add .gitignore file with data and results\nintro_intro_old.qmd:* a1df8e5 88 seconds ago  (HEAD -> main)Add .gitignore file with data and results xxx@xxx\nintro_intro_old.qmd:    Add .gitignore file with data and results\nintro_intro_old.qmd:+/data/\nintro_intro_old.qmd:@@ -7,3 +7,5 @@ df <- data.frame(\nintro_intro_old.qmd:    Add .gitignore file with data and results\nintro_intro_slides.qmd:The data is stored as blobs, doesn't create unnecessary copies (unchanged files are referenced from old blobs), and uses excellent compression\nintro_logs.qmd:    Add .gitignore file with data and results\nintro_logs.qmd:c4ab5e7 Add .gitignore file with data and results\nintro_logs.qmd:|     Add .gitignore file with data and results\nintro_logs.qmd:* c4ab5e7 34 minutes ago Add .gitignore file with data and results xxx@xxx\nintro_logs.qmd:+df = pd.read_csv('../data/dataset.csv')\nintro_logs.qmd:    Add .gitignore file with data and results\nintro_logs.qmd:+/data/\nintro_remotes.qmd:## Getting data from a remote\nintro_remotes.qmd:If you collaborate on a project, you have to get the data added by your teammates to keep your local project up to date.\nintro_remotes.qmd:To download new data from a remote, you have 2 options:\nintro_remotes.qmd:*Fetching* downloads the data from a remote that you don't already have in your local version of the project:\nintro_remotes.qmd:Uploading data to the remote is called *pushing*:\nintro_undo.qmd:As you just experienced, this command leads to data loss. \\\nBinary file project.zip matches\nwb_dvc.qmd:title: Version control for data science and machine learning with DVC\n```\n\n\n:::\n:::\n\n\nNow, let's use a more complex regular expression. We want the counts for the pattern `\".*_.*\"` (i.e. any name with a snail case such as `train_loader`):\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c \".*_.*\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nimg/01.png:16\nimg/02.png:32\nimg/03.png:31\nimg/04.png:26\nimg/05.png:31\nimg/06.png:32\nimg/07.png:30\nimg/08.png:34\nimg/09.png:35\nimg/10.png:41\nimg/11.png:47\nimg/12.png:40\nimg/13.png:39\nimg/14.png:32\nimg/15.png:38\nimg/16.png:43\nimg/17.png:34\nimg/18.png:35\nimg/19.png:30\nimg/20.png:33\nimg/21.png:40\nimg/22.png:41\nimg/23.png:47\nimg/24.png:64\nimg/25.png:66\nimg/26.png:50\nimg/27.png:60\nimg/28.png:57\nimg/29.png:33\nimg/30.png:39\nimg/31.png:14\nimg/32.png:16\nimg/33.png:18\nimg/34.png:16\nimg/35.png:20\nimg/36.png:18\nimg/37.png:18\nimg/51.png:55\nimg/52.png:46\nimg/53.png:55\nimg/collab.jpg:178\nimg/git_graph.png:121\nimg/gitout.png:42\nimg/logo_git.png:4\nimg/vc.jpg:259\nindex.qmd:4\nintro_first_steps.qmd:4\nintro_install.qmd:1\nintro_intro.qmd:1\nintro_intro_old.qmd:8\nintro_intro_slides.qmd:5\nintro_logs.qmd:1\nintro_tags.qmd:5\nintro_time_travel.qmd:1\ntop_intro.qmd:2\ntop_ws.qmd:3\nwb_dvc.qmd:1\n```\n\n\n:::\n:::\n\n\nLet's print the first 3 results per file:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -m 3 \".*_.*\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nBinary file img/01.png matches\nBinary file img/02.png matches\nBinary file img/03.png matches\nBinary file img/04.png matches\nBinary file img/05.png matches\nBinary file img/06.png matches\nBinary file img/07.png matches\nBinary file img/08.png matches\nBinary file img/09.png matches\nBinary file img/10.png matches\nBinary file img/11.png matches\nBinary file img/12.png matches\nBinary file img/13.png matches\nBinary file img/14.png matches\nBinary file img/15.png matches\nBinary file img/16.png matches\nBinary file img/17.png matches\nBinary file img/18.png matches\nBinary file img/19.png matches\nBinary file img/20.png matches\nBinary file img/21.png matches\nBinary file img/22.png matches\nBinary file img/23.png matches\nBinary file img/24.png matches\nBinary file img/25.png matches\nBinary file img/26.png matches\nBinary file img/27.png matches\nBinary file img/28.png matches\nBinary file img/29.png matches\nBinary file img/30.png matches\nBinary file img/31.png matches\nBinary file img/32.png matches\nBinary file img/33.png matches\nBinary file img/34.png matches\nBinary file img/35.png matches\nBinary file img/36.png matches\nBinary file img/37.png matches\nBinary file img/51.png matches\nBinary file img/52.png matches\nBinary file img/53.png matches\nBinary file img/collab.jpg matches\nBinary file img/git_graph.png matches\nBinary file img/gitout.png matches\nBinary file img/logo_git.png matches\nBinary file img/vc.jpg matches\nindex.qmd:  Version control & collaboration with &nbsp;[![](img/logo_git.png){width=\"1.3em\" fig-alt=\"noshadow\"}](https://git-scm.com/)\nindex.qmd:[Getting started with &nbsp;![](img/logo_git.png){width=\"1.2em\" fig-alt=\"noshadow\"}](top_intro.qmd){.card-title2 .stretched-link}\nindex.qmd:[Workshops](top_ws.qmd){.card-title2 .stretched-link}\nintro_first_steps.qmd:  - first_steps.html\nintro_first_steps.qmd:wget --no-check-certificate 'https://docs.google.com/uc?export=download&id=1SJV5mRGexf91lNyFwdS_JmuAXX0xS4pE' -O project.zip\nintro_first_steps.qmd:df = pd.read_csv('../data/dataset.csv')\nintro_install.qmd:git config user.email \"your_other@email\"\nintro_intro.qmd:[Slides](intro_intro_slides.html){.btn .btn-outline-primary} [(Click and wait: the presentation might take a few instants to load)]{.inlinenote}\nintro_intro_old.qmd:  - intro_old.html\nintro_intro_old.qmd:<script type=\"text/javascript\" src=\"https://ssl.gstatic.com/trends_nrtr/3045_RC01/embed_loader.js\"></script> <script type=\"text/javascript\"> trends.embed.renderExploreWidget(\"TIMESERIES\", {\"comparisonItem\":[{\"keyword\":\"/m/05vqwg\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"},{\"keyword\":\"/m/08441_\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"},{\"keyword\":\"/m/012ct9\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"},{\"keyword\":\"/m/09d6g\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"}],\"category\":0,\"property\":\"\"}, {\"exploreQuery\":\"date=all&q=%2Fm%2F05vqwg,%2Fm%2F08441_,%2Fm%2F012ct9,%2Fm%2F09d6g\",\"guestPath\":\"https://trends.google.com:443/trends/embed/\"}); </script>\nintro_intro_old.qmd:git config user.email \"your_other@email\"\nintro_intro_slides.qmd:  - intro_slides.html\nintro_intro_slides.qmd:frontpic: \"img/git_graph.png\"\nintro_intro_slides.qmd:    logo: /img/logo_sfudrac.png\nintro_logs.qmd:+df = pd.read_csv('../data/dataset.csv')\nintro_tags.qmd:git tag J_Climate_2009\nintro_tags.qmd:git show J_Climate_2009\nintro_tags.qmd:git checkout J_Climate_2009\nintro_time_travel.qmd:  - time_travel.html\ntop_intro.qmd:description: An introductory course to version control with &nbsp;[![](img/logo_git.png){width=\"1.3em\" fig-alt=\"noshadow\"}](https://git-scm.com/)\ntop_intro.qmd:[[Start course ➤](intro_intro.qmd)]{.topinline}\ntop_ws.qmd:[Searching a Git project](practice_repo/ws_search.qmd){.card-title-ws .stretched-link}\ntop_ws.qmd:[Collaborating through Git](ws_collab.qmd){.card-title-ws .stretched-link}\ntop_ws.qmd:[Contributing to projects](ws_contrib.qmd){.card-title-ws .stretched-link}\nwb_dvc.qmd:[As DVC is a popular tool in machine learning, **please find this webinar [in the AI section](/ai/wb_dvc.html){.stretched-link}**.]{.btn-redirect}\n```\n\n\n:::\n:::\n\n\nAs you can see, our results also include `__init__` which is not what we were looking for. So let's exclude `__`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -m 3 -e \".*_.*\" --and --not -e \"__\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nBinary file img/01.png matches\nBinary file img/02.png matches\nBinary file img/03.png matches\nBinary file img/04.png matches\nBinary file img/05.png matches\nBinary file img/06.png matches\nBinary file img/07.png matches\nBinary file img/08.png matches\nBinary file img/09.png matches\nBinary file img/10.png matches\nBinary file img/11.png matches\nBinary file img/12.png matches\nBinary file img/13.png matches\nBinary file img/14.png matches\nBinary file img/15.png matches\nBinary file img/16.png matches\nBinary file img/17.png matches\nBinary file img/18.png matches\nBinary file img/19.png matches\nBinary file img/20.png matches\nBinary file img/21.png matches\nBinary file img/22.png matches\nBinary file img/23.png matches\nBinary file img/24.png matches\nBinary file img/25.png matches\nBinary file img/26.png matches\nBinary file img/27.png matches\nBinary file img/28.png matches\nBinary file img/29.png matches\nBinary file img/30.png matches\nBinary file img/31.png matches\nBinary file img/32.png matches\nBinary file img/33.png matches\nBinary file img/34.png matches\nBinary file img/35.png matches\nBinary file img/36.png matches\nBinary file img/37.png matches\nBinary file img/51.png matches\nBinary file img/52.png matches\nBinary file img/53.png matches\nBinary file img/collab.jpg matches\nBinary file img/git_graph.png matches\nBinary file img/gitout.png matches\nBinary file img/logo_git.png matches\nBinary file img/vc.jpg matches\nindex.qmd:  Version control & collaboration with &nbsp;[![](img/logo_git.png){width=\"1.3em\" fig-alt=\"noshadow\"}](https://git-scm.com/)\nindex.qmd:[Getting started with &nbsp;![](img/logo_git.png){width=\"1.2em\" fig-alt=\"noshadow\"}](top_intro.qmd){.card-title2 .stretched-link}\nindex.qmd:[Workshops](top_ws.qmd){.card-title2 .stretched-link}\nintro_first_steps.qmd:  - first_steps.html\nintro_first_steps.qmd:wget --no-check-certificate 'https://docs.google.com/uc?export=download&id=1SJV5mRGexf91lNyFwdS_JmuAXX0xS4pE' -O project.zip\nintro_first_steps.qmd:df = pd.read_csv('../data/dataset.csv')\nintro_install.qmd:git config user.email \"your_other@email\"\nintro_intro.qmd:[Slides](intro_intro_slides.html){.btn .btn-outline-primary} [(Click and wait: the presentation might take a few instants to load)]{.inlinenote}\nintro_intro_old.qmd:  - intro_old.html\nintro_intro_old.qmd:<script type=\"text/javascript\" src=\"https://ssl.gstatic.com/trends_nrtr/3045_RC01/embed_loader.js\"></script> <script type=\"text/javascript\"> trends.embed.renderExploreWidget(\"TIMESERIES\", {\"comparisonItem\":[{\"keyword\":\"/m/05vqwg\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"},{\"keyword\":\"/m/08441_\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"},{\"keyword\":\"/m/012ct9\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"},{\"keyword\":\"/m/09d6g\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"}],\"category\":0,\"property\":\"\"}, {\"exploreQuery\":\"date=all&q=%2Fm%2F05vqwg,%2Fm%2F08441_,%2Fm%2F012ct9,%2Fm%2F09d6g\",\"guestPath\":\"https://trends.google.com:443/trends/embed/\"}); </script>\nintro_intro_old.qmd:git config user.email \"your_other@email\"\nintro_intro_slides.qmd:  - intro_slides.html\nintro_intro_slides.qmd:frontpic: \"img/git_graph.png\"\nintro_intro_slides.qmd:    logo: /img/logo_sfudrac.png\nintro_logs.qmd:+df = pd.read_csv('../data/dataset.csv')\nintro_tags.qmd:git tag J_Climate_2009\nintro_tags.qmd:git show J_Climate_2009\nintro_tags.qmd:git checkout J_Climate_2009\nintro_time_travel.qmd:  - time_travel.html\ntop_intro.qmd:description: An introductory course to version control with &nbsp;[![](img/logo_git.png){width=\"1.3em\" fig-alt=\"noshadow\"}](https://git-scm.com/)\ntop_intro.qmd:[[Start course ➤](intro_intro.qmd)]{.topinline}\ntop_ws.qmd:[Searching a Git project](practice_repo/ws_search.qmd){.card-title-ws .stretched-link}\ntop_ws.qmd:[Collaborating through Git](ws_collab.qmd){.card-title-ws .stretched-link}\ntop_ws.qmd:[Contributing to projects](ws_contrib.qmd){.card-title-ws .stretched-link}\nwb_dvc.qmd:[As DVC is a popular tool in machine learning, **please find this webinar [in the AI section](/ai/wb_dvc.html){.stretched-link}**.]{.btn-redirect}\n```\n\n\n:::\n:::\n\n\n:::{.note}\n\nFor simple searches, you don't have to use the `-e` flag before the pattern you are searching for. Here however, our command has gotten complex enough that we have to use it before each pattern.\n\n:::\n\nLet's make sure this worked as expected:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c \".*_.*\"\necho \"---\"\ngit grep -c \"__\"\necho \"---\"\ngit grep -ce \".*_.*\" --and --not -e \"__\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nimg/01.png:16\nimg/02.png:32\nimg/03.png:31\nimg/04.png:26\nimg/05.png:31\nimg/06.png:32\nimg/07.png:30\nimg/08.png:34\nimg/09.png:35\nimg/10.png:41\nimg/11.png:47\nimg/12.png:40\nimg/13.png:39\nimg/14.png:32\nimg/15.png:38\nimg/16.png:43\nimg/17.png:34\nimg/18.png:35\nimg/19.png:30\nimg/20.png:33\nimg/21.png:40\nimg/22.png:41\nimg/23.png:47\nimg/24.png:64\nimg/25.png:66\nimg/26.png:50\nimg/27.png:60\nimg/28.png:57\nimg/29.png:33\nimg/30.png:39\nimg/31.png:14\nimg/32.png:16\nimg/33.png:18\nimg/34.png:16\nimg/35.png:20\nimg/36.png:18\nimg/37.png:18\nimg/51.png:55\nimg/52.png:46\nimg/53.png:55\nimg/collab.jpg:178\nimg/git_graph.png:121\nimg/gitout.png:42\nimg/logo_git.png:4\nimg/vc.jpg:259\nindex.qmd:4\nintro_first_steps.qmd:4\nintro_install.qmd:1\nintro_intro.qmd:1\nintro_intro_old.qmd:8\nintro_intro_slides.qmd:5\nintro_logs.qmd:1\nintro_tags.qmd:5\nintro_time_travel.qmd:1\ntop_intro.qmd:2\ntop_ws.qmd:3\nwb_dvc.qmd:1\n---\nimg/01.png:1\nimg/02.png:2\nimg/03.png:2\nimg/04.png:1\nimg/05.png:3\nimg/06.png:3\nimg/07.png:1\nimg/08.png:1\nimg/09.png:1\nimg/10.png:1\nimg/11.png:1\nimg/12.png:1\nimg/13.png:2\nimg/14.png:2\nimg/15.png:3\nimg/16.png:1\nimg/17.png:1\nimg/18.png:2\nimg/19.png:1\nimg/20.png:1\nimg/21.png:1\nimg/22.png:2\nimg/23.png:4\nimg/24.png:2\nimg/25.png:1\nimg/26.png:1\nimg/27.png:2\nimg/28.png:3\nimg/29.png:2\nimg/30.png:1\nimg/31.png:1\nimg/51.png:1\nimg/52.png:2\nimg/53.png:1\nimg/collab.jpg:1\nimg/git_graph.png:2\nimg/gitout.png:1\n---\nimg/01.png:15\nimg/02.png:30\nimg/03.png:29\nimg/04.png:25\nimg/05.png:28\nimg/06.png:29\nimg/07.png:29\nimg/08.png:33\nimg/09.png:34\nimg/10.png:40\nimg/11.png:46\nimg/12.png:39\nimg/13.png:37\nimg/14.png:30\nimg/15.png:35\nimg/16.png:42\nimg/17.png:33\nimg/18.png:33\nimg/19.png:29\nimg/20.png:32\nimg/21.png:39\nimg/22.png:39\nimg/23.png:43\nimg/24.png:62\nimg/25.png:65\nimg/26.png:49\nimg/27.png:58\nimg/28.png:54\nimg/29.png:31\nimg/30.png:38\nimg/31.png:13\nimg/32.png:16\nimg/33.png:18\nimg/34.png:16\nimg/35.png:20\nimg/36.png:18\nimg/37.png:18\nimg/51.png:54\nimg/52.png:44\nimg/53.png:54\nimg/collab.jpg:177\nimg/git_graph.png:119\nimg/gitout.png:41\nimg/logo_git.png:4\nimg/vc.jpg:259\nindex.qmd:4\nintro_first_steps.qmd:4\nintro_install.qmd:1\nintro_intro.qmd:1\nintro_intro_old.qmd:8\nintro_intro_slides.qmd:5\nintro_logs.qmd:1\nintro_tags.qmd:5\nintro_time_travel.qmd:1\ntop_intro.qmd:2\ntop_ws.qmd:3\nwb_dvc.qmd:1\n```\n\n\n:::\n:::\n\n\nThere were 2 lines matching `__` in `src/test_manuel.py` and we have indeed excluded them from our search.\n\nExtended regular expressions are also covered with the flag `-E`.\n\n### Searching other trees\n\nSo far, we have searched the current version of tracked files, but we can just as easily search files at any commit.\n\nLet's search for `test` in the tracked files 20 commits ago:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep test HEAD~20\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nHEAD~20:intro_aliases.qmd:Now, let's build an alias for a more complex command: `git grep \"test\" $(git rev-list --all)`. This example\nHEAD~20:intro_aliases.qmd:from the *\"Searching a Git project\"* section below will search for the string \"test\" in all previous\nHEAD~20:intro_aliases.qmd:commits. There are two problems with this command: (1) it takes an argument (the string \"test\"), and (2) it\nHEAD~20:intro_aliases.qmd:git search test\nHEAD~20:intro_aliases.qmd:should search the entire current Git project history for \"test\".\nHEAD~20:intro_branches.qmd:git branch test\nHEAD~20:intro_branches.qmd:git switch test\nHEAD~20:intro_branches.qmd:* test\nHEAD~20:intro_branches.qmd:The `*` shows the branch you are currently on (i.e. the branch to which `HEAD` points to). In our example, the project has two branches and we are on the branch `test`.\nHEAD~20:intro_branches.qmd:git diff main test\nHEAD~20:intro_branches.qmd:When you are happy with the changes you made on your test branch, you can merge it into `main`.\nHEAD~20:intro_branches.qmd:If you have only created new commits on the branch `test`, the merge is called a \"fast-forward merge\" because `main` and `test` have not diverged: it is simply a question of having `main` catch up to `test`.\nHEAD~20:intro_branches.qmd:git merge test\nHEAD~20:intro_branches.qmd:Then, usually, you delete the branch `test` as it has served its purpose:\nHEAD~20:intro_branches.qmd:git branch -d test\nHEAD~20:intro_branches.qmd:Alternatively, you can switch back to `test` and do the next bit of experimental work on it. This allows to keep `main` free of mishaps and bad developments.\nHEAD~20:intro_branches.qmd:Let's go back to our situation before we created the branch `test`:\nHEAD~20:intro_branches.qmd:This time, you create a branch called `test2`:\nHEAD~20:intro_branches.qmd:To merge your branch `test2` into `main`, a new commit is now required. Git will create this new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge:\nHEAD~20:intro_branches.qmd:git merge test2\nHEAD~20:intro_branches.qmd:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\nHEAD~20:intro_branches.qmd:>>>>>>> test2\nHEAD~20:intro_intro_old.qmd:The pointer `HEAD`, which normally points to the branch `main` which itself points to latest commit, can be moved around. By moving `HEAD` to any commit, you can revisit the state of your project at that particular version.\nHEAD~20:intro_intro_old.qmd:Instead of working on your branch `main`, you create a test branch and work on it (so `HEAD` is on the branch `test` and both move along as you create commits):\nHEAD~20:intro_intro_old.qmd:When you are happy with the changes you made on your test branch, you decide to merge `main` onto it.\nHEAD~20:intro_intro_old.qmd:Then you do the fast-forward merge from `main` onto `test` (so `main` catches up to `test`):\nHEAD~20:intro_intro_old.qmd:Then, usually, you delete the branch `test` as it has served its purpose (with `git branch -d test`). Alternatively, you can switch back to it and do the next bit of experimental work in it.\nHEAD~20:intro_intro_old.qmd:This allows to keep `main` free of possible mishaps and bad developments (if you aren't happy with the work you did on your test branch, you can simply delete it and Git will clean the commits that are on it but not on `main` during the next garbage collection.\nHEAD~20:intro_intro_old.qmd:You create a test branch and switch to it:\nHEAD~20:intro_intro_old.qmd:To merge your main branch and your test branch, a new commit is now required (note that the command is the same as in the case of a fast-forward merge: `git merge`. Git will create the new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge. We will talk later about resolving conflicts).\nHEAD~20:intro_intro_old.qmd:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\nHEAD~20:intro_remotes.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\nHEAD~20:intro_revisiting_old_commits_alternate.qmd:The pointer `HEAD`, which normally points to the branch `main` which itself points to latest commit, can be moved around. By moving `HEAD` to any commit, you can revisit the state of your project at that particular version.\nHEAD~20:intro_undo.qmd:Here is a common scenario: you make a commit, then realize that you forgot to include some changes in that commit; or you aren't happy with the commit message; or both. You can edit your latest commit with the `--amend` flag:\nHEAD~20:ws_collab.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n```\n\n\n:::\n:::\n\n\n:::{.note}\n\nAs you can see, the file `src/test_manuel.py` is not in the results. Either it didn't exist or it didn't have the word `test` at that commit.\n\n:::\n\nIf you want to search tracked files AND untracked files, you need to use the `--untracked` flag.\n\nLet's create a new (thus untracked) file with some content including the word `test`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho \"This is a test\" > newfile\n```\n:::\n\n\nNow compare the following:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nintro_aliases.qmd:5\nintro_branches.qmd:17\nintro_intro_old.qmd:9\nintro_remotes.qmd:1\nintro_revisiting_old_commits_alternate.qmd:1\nintro_undo.qmd:1\nws_collab.qmd:1\n```\n\n\n:::\n:::\n\n\nwith:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c --untracked test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nintro_aliases.qmd:5\nintro_branches.qmd:17\nintro_intro_old.qmd:9\nintro_remotes.qmd:1\nintro_revisiting_old_commits_alternate.qmd:1\nintro_undo.qmd:1\nnewfile:1\nws_collab.qmd:1\nws_search.rmarkdown:41\n```\n\n\n:::\n:::\n\n\n:::{.note}\n\nThis last result also returned our untracked file `newfile`.\n\n:::\n\nIf you want to search untracked and ignored files (meaning all your files), use the flags `--untracked --no-exclude-standard`.\n\nLet's see what the `.gitignore` file contains:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat .gitignore\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncat: .gitignore: No such file or directory\n```\n\n\n:::\n:::\n\n\nThe directory `data` is in `.gitignore`. This means that it is not under version control and it thus doesn't exist in our repo (since we cloned our repo, we only have the version-controlled files). Let's create it:\n\n```{.bash}\nmkdir data\n```\n\nNow, let's create a file in it that contains `test`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho \"And another test\" > data/file\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nbash: line 1: data/file: No such file or directory\n```\n\n\n:::\n:::\n\n\nWe can rerun our previous two searches to verify that files excluded from version control are not searched:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nintro_aliases.qmd:5\nintro_branches.qmd:17\nintro_intro_old.qmd:9\nintro_remotes.qmd:1\nintro_revisiting_old_commits_alternate.qmd:1\nintro_undo.qmd:1\nws_collab.qmd:1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c --untracked test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nintro_aliases.qmd:5\nintro_branches.qmd:17\nintro_intro_old.qmd:9\nintro_remotes.qmd:1\nintro_revisiting_old_commits_alternate.qmd:1\nintro_undo.qmd:1\nnewfile:1\nws_collab.qmd:1\nws_search.rmarkdown:41\n```\n\n\n:::\n:::\n\n\nAnd now, let's try:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c --untracked --no-exclude-standard test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nintro_aliases.qmd:5\nintro_branches.qmd:17\nintro_intro_old.qmd:9\nintro_remotes.qmd:1\nintro_revisiting_old_commits_alternate.qmd:1\nintro_undo.qmd:1\nnewfile:1\nws_collab.qmd:1\nws_search.rmarkdown:41\n```\n\n\n:::\n:::\n\n\n:::{.note}\n\n`data/file`, despite being excluded from version control, is also searched.\n\n:::\n\n### Searching all commits\n\nWe saw that `git grep <pattern> <commit>` can search a pattern in any commit. Now, what if we all to search *all* commits for a pattern?\n\nFor this, we pass the expression `$(git rev-list --all)` in lieu of `<commit>`.\n\n`git rev-list --all` creates a list of all the commits in a way that can be used as an argument to other functions. The `$()` allows to run the expression inside it and pass the result as and argument.\n\nTo search for `test` in all the commits, we thus run:\n\n```{.bash}\ngit grep \"test\" $(git rev-list --all)\n```\n\nI am not running this command has it has a huge output. Instead, I will limit the search to the last two commits:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep \"test\" $(git rev-list --all -2)\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_aliases.qmd:Now, let's build an alias for a more complex command: `git grep \"test\" $(git rev-list --all)`. This example\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_aliases.qmd:from the *\"Searching a Git project\"* section below will search for the string \"test\" in all previous\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_aliases.qmd:commits. There are two problems with this command: (1) it takes an argument (the string \"test\"), and (2) it\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_aliases.qmd:git search test\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_aliases.qmd:should search the entire current Git project history for \"test\".\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:git branch test\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:git switch test\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:* test\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:The `*` shows the branch you are currently on (i.e. the branch to which `HEAD` points to). In our example, the project has two branches and we are on the branch `test`.\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:git diff main test\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:When you are happy with the changes you made on your test branch, you can merge it into `main`.\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:If you have only created new commits on the branch `test`, the merge is called a \"fast-forward merge\" because `main` and `test` have not diverged: it is simply a question of having `main` catch up to `test`.\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:git merge test\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:Then, usually, you delete the branch `test` as it has served its purpose:\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:git branch -d test\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:Alternatively, you can switch back to `test` and do the next bit of experimental work on it. This allows to keep `main` free of mishaps and bad developments.\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:Let's go back to our situation before we created the branch `test`:\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:This time, you create a branch called `test2`:\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:To merge your branch `test2` into `main`, a new commit is now required. Git will create this new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge:\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:git merge test2\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_branches.qmd:>>>>>>> test2\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_intro_old.qmd:The pointer `HEAD`, which normally points to the branch `main` which itself points to latest commit, can be moved around. By moving `HEAD` to any commit, you can revisit the state of your project at that particular version.\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_intro_old.qmd:Instead of working on your branch `main`, you create a test branch and work on it (so `HEAD` is on the branch `test` and both move along as you create commits):\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_intro_old.qmd:When you are happy with the changes you made on your test branch, you decide to merge `main` onto it.\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_intro_old.qmd:Then you do the fast-forward merge from `main` onto `test` (so `main` catches up to `test`):\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_intro_old.qmd:Then, usually, you delete the branch `test` as it has served its purpose (with `git branch -d test`). Alternatively, you can switch back to it and do the next bit of experimental work in it.\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_intro_old.qmd:This allows to keep `main` free of possible mishaps and bad developments (if you aren't happy with the work you did on your test branch, you can simply delete it and Git will clean the commits that are on it but not on `main` during the next garbage collection.\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_intro_old.qmd:You create a test branch and switch to it:\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_intro_old.qmd:To merge your main branch and your test branch, a new commit is now required (note that the command is the same as in the case of a fast-forward merge: `git merge`. Git will create the new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge. We will talk later about resolving conflicts).\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_intro_old.qmd:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_remotes.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_revisiting_old_commits_alternate.qmd:The pointer `HEAD`, which normally points to the branch `main` which itself points to latest commit, can be moved around. By moving `HEAD` to any commit, you can revisit the state of your project at that particular version.\naa82b44fe38395fecc7da6c7d90df7456c508ab4:intro_undo.qmd:Here is a common scenario: you make a commit, then realize that you forgot to include some changes in that commit; or you aren't happy with the commit message; or both. You can edit your latest commit with the `--amend` flag:\naa82b44fe38395fecc7da6c7d90df7456c508ab4:ws_collab.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_aliases.qmd:Now, let's build an alias for a more complex command: `git grep \"test\" $(git rev-list --all)`. This example\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_aliases.qmd:from the *\"Searching a Git project\"* section below will search for the string \"test\" in all previous\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_aliases.qmd:commits. There are two problems with this command: (1) it takes an argument (the string \"test\"), and (2) it\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_aliases.qmd:git search test\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_aliases.qmd:should search the entire current Git project history for \"test\".\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:git branch test\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:git switch test\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:* test\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:The `*` shows the branch you are currently on (i.e. the branch to which `HEAD` points to). In our example, the project has two branches and we are on the branch `test`.\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:git diff main test\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:When you are happy with the changes you made on your test branch, you can merge it into `main`.\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:If you have only created new commits on the branch `test`, the merge is called a \"fast-forward merge\" because `main` and `test` have not diverged: it is simply a question of having `main` catch up to `test`.\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:git merge test\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:Then, usually, you delete the branch `test` as it has served its purpose:\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:git branch -d test\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:Alternatively, you can switch back to `test` and do the next bit of experimental work on it. This allows to keep `main` free of mishaps and bad developments.\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:Let's go back to our situation before we created the branch `test`:\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:This time, you create a branch called `test2`:\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:To merge your branch `test2` into `main`, a new commit is now required. Git will create this new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge:\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:git merge test2\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_branches.qmd:>>>>>>> test2\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_intro_old.qmd:The pointer `HEAD`, which normally points to the branch `main` which itself points to latest commit, can be moved around. By moving `HEAD` to any commit, you can revisit the state of your project at that particular version.\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_intro_old.qmd:Instead of working on your branch `main`, you create a test branch and work on it (so `HEAD` is on the branch `test` and both move along as you create commits):\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_intro_old.qmd:When you are happy with the changes you made on your test branch, you decide to merge `main` onto it.\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_intro_old.qmd:Then you do the fast-forward merge from `main` onto `test` (so `main` catches up to `test`):\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_intro_old.qmd:Then, usually, you delete the branch `test` as it has served its purpose (with `git branch -d test`). Alternatively, you can switch back to it and do the next bit of experimental work in it.\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_intro_old.qmd:This allows to keep `main` free of possible mishaps and bad developments (if you aren't happy with the work you did on your test branch, you can simply delete it and Git will clean the commits that are on it but not on `main` during the next garbage collection.\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_intro_old.qmd:You create a test branch and switch to it:\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_intro_old.qmd:To merge your main branch and your test branch, a new commit is now required (note that the command is the same as in the case of a fast-forward merge: `git merge`. Git will create the new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge. We will talk later about resolving conflicts).\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_intro_old.qmd:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_remotes.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_revisiting_old_commits_alternate.qmd:The pointer `HEAD`, which normally points to the branch `main` which itself points to latest commit, can be moved around. By moving `HEAD` to any commit, you can revisit the state of your project at that particular version.\n8d90d4834e36b9cd28c8e05719d8928174dc4563:intro_undo.qmd:Here is a common scenario: you make a commit, then realize that you forgot to include some changes in that commit; or you aren't happy with the commit message; or both. You can edit your latest commit with the `--amend` flag:\n8d90d4834e36b9cd28c8e05719d8928174dc4563:ws_collab.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n```\n\n\n:::\n:::\n\n\n:::{.info}\n\nIn combination with the fuzzy finder tool [fzf](https://github.com/junegunn/fzf), this can make finding a particular commit extremely easy.\n\nFor instance, the code below allows you to dynamically search in the result through incremental completion:\n\n```{.bash}\ngit grep \"test\" $(git rev-list --all) | fzf --cycle -i -e\n```\n\nOr even better, you can automatically copy the short form of the hash of the selected commit to clipboard so that you can use it with `git show`, `git checkout`, etc.:\n\n```{.bash}\ngit grep \"test\" $(git rev-list --all) |\n\tfzf --cycle -i -e |\n\tcut -c 1-7 |\n\txclip -r -selection clipboard\n```\n\n:::{.note}\n\nHere, I am using [xclip](https://github.com/astrand/xclip) to copy to the clipboard as I am on Linux. Depending on your OS you might need to use a different tool.\n\n:::\n\nOf course, you can create a function in your `.bashrc` file with such code so that you wouldn't have to type it each time:\n\n```{.bash}\ngrep_all_commits () {\n\tgit grep \"$1\" $(git rev-list --all) |\n\t\tfzf --cycle -i -e |\n\t\tcut -c 1-7 |\n\t\txclip -r -selection clipboard\n}\n```\n\nAlternatively, you can pass the result directly into whatever git command you want to use that commit for.\n\nHere is an example with `git show`:\n\n```{.bash}\ngit grep \"test\" $(git rev-list --all) |\n\tfzf --cycle -i -e |\n\tcut -c 1-7 |\n\tgit show\n```\n\nAnd if you wanted to get really fancy, you could go with:\n\n```{.bash}\ngit grep \"test\" $(git rev-list --all) |\n\tfzf --cycle -i -e --no-multi \\\n\t\t--ansi --preview=\"$_viewGitLogLine\" \\\n\t\t--header \"enter: view, C-c: copy hash\" \\\n\t\t--bind \"enter:execute:$_viewGitLogLine | less -R\" \\\n\t\t--bind \"ctrl-c:execute:$_gitLogLineToHash |\n\t\txclip -r -selection clipboard\"\n```\n\nWrapped in a function:\n\n```{.bash}\ngrep_all_commits_preview () {\n\tgit grep \"$1\" $(git rev-list --all) |\n\t\tfzf --cycle -i -e --no-multi \\\n\t\t\t--ansi --preview=\"$_viewGitLogLine\" \\\n\t\t\t--header \"enter: view, C-c: copy hash\" \\\n\t\t\t--bind \"enter:execute:$_viewGitLogLine |\n              less -R\" \\\n\t\t\t--bind \"ctrl-c:execute:$_gitLogLineToHash |\n\t\txclip -r -selection clipboard\"\n}\n```\n\nThis last function allows you to search through all the results in an incremental fashion while displaying a preview of the selected diff (the changes made at that particular commit). If you want to see more of the diff than the preview displays, press `<enter>` (then `q` to quit the pager), if you want to copy the hash of a commit, press `C-c` (Control + c).\n\nWith this function, you can now instantly get a preview of the changes made to any line containing an expression for any file, at any commit, and copy the hash of the selected commit. This is really powerful.\n\n:::\n\n### Aliases\n\nIf you don't want to type a series of flags all the time, you can configure [aliases for Git](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases). For instance, Alex Razoumov uses the alias `git search` for `git grep --break --heading -n -i`.\n\nLet's add to it the `-p` flag. Here is how you would set this alias:\n\n```{.bash}\ngit config --global alias.search 'grep --break --heading -n -i -p'\n```\n\n:::{.note}\n\nThis setting gets added to your main Git configuration file (on Linux, by default, at `~/.gitconfig`).\n\n:::\n\nFrom there on, you can use your alias with:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit search test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\ngit: 'search' is not a git command. See 'git --help'.\n```\n\n\n:::\n:::\n\n\n## Searching logs\n\nThe second thing that can happen is that you are looking for some pattern in your version control logs.\n\n### git log\n\n`git log` allows to get information on commit logs.\n\nBy default, it outputs all the commits of the current branch.\n\nLet's show the logs of the last 3 commits:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit log -3\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncommit aa82b44fe38395fecc7da6c7d90df7456c508ab4\nAuthor: Marie-Helene Burle <marie.burle@westdri.ca>\nDate:   Thu Jan 25 09:58:39 2024 -0800\n\n    update site\n\ncommit 8d90d4834e36b9cd28c8e05719d8928174dc4563\nAuthor: Marie-Helene Burle <marie.burle@westdri.ca>\nDate:   Thu Jan 25 09:58:36 2024 -0800\n\n    add video copilot\n\ncommit 74d72a16cc0ccb080ff759099c935c8d3708459b\nAuthor: Marie-Helene Burle <marie.burle@westdri.ca>\nDate:   Tue Jan 23 12:35:59 2024 -0800\n\n    update site\n```\n\n\n:::\n:::\n\n\nThe output can be customized thanks to a plethora of options.\n\nFor instance, here are the logs of the last 15 commits, in a graph, with one line per commit:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit log --graph --oneline -n 15\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n* aa82b44f update site\n* 8d90d483 add video copilot\n* 74d72a16 update site\n* e87f3d56 fix typo\n* 092391c8 update site\n* 30875d7a minor edit\n* 7b1d418e update site\n* d23fd2f2 add intro to slides and embed resources\n* 3700bd22 update site\n* e01c063a add link to slides in copilot webinar\n* 2da8d6e1 many edits copilot slides\n* f0f67119 update site\n* a388a59b edits abstract\n* c813fca7 update site\n* 22cf6e89 remove example code suggestion as I will do it in live coding\n```\n\n\n:::\n:::\n\n\nBut `git log` has also flags that allow to search for patterns.\n\n### Searching commit messages\n\nOne of the reasons it is so important to write informative commit messages is that they are key to finding commits later on.\n\nTo look for a pattern in all your commit messages, use `git log --grep=<pattern>`.\n\nLet's look for `test` in the commit messages and limit the output to 3 commits:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit log --grep=test -3\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncommit 87f11c6715a5da31888dc6b92645156e6738d207\nAuthor: Marie-Helene Burle <marie.burle@westdri.ca>\nDate:   Mon Dec 18 14:06:51 2023 -0800\n\n    test blockquote media for phones\n\ncommit bdd5b5157632f944408fe1ff4d1675c40ddb69b3\nAuthor: Marie-Helene Burle <marie.burle@westdri.ca>\nDate:   Sun Dec 17 11:13:33 2023 -0800\n\n    last test to access footer size\n\ncommit ed30d9366ebf0d32fa0b6df0101a2f2bd6bd25ca\nAuthor: Marie-Helene Burle <marie.burle@westdri.ca>\nDate:   Sun Dec 17 10:47:07 2023 -0800\n\n    new test\n```\n\n\n:::\n:::\n\n\nFor a more compact output:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit log --grep=\"test\" -3 --oneline\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n87f11c67 test blockquote media for phones\nbdd5b515 last test to access footer size\ned30d936 new test\n```\n\n\n:::\n:::\n\n\n:::{.info}\n\nHere too you can use this in combination to [fzf](https://github.com/junegunn/fzf) with for instance:\n\n```{.bash}\ngit log --grep=\"test\" | fzf --cycle -i -e\n```\n\nOr:\n\n```{.bash}\ngit log --grep=\"test\" --oneline |\n\tfzf --cycle -i -e --no-multi \\\n        --ansi --preview=\"$_viewGitLogLine\" \\\n        --header \"enter: view, C-c: copy hash\" \\\n        --bind \"enter:execute:$_viewGitLogLine | less -R\" \\\n\t\t--bind \"ctrl-c:execute:$_gitLogLineToHash |\n        xclip -r -selection clipboard\"\n```\n\n:::\n\n### Changes made to a pattern\n\nRemember that `test` was present in the file `src/test_manuel.py`. If we want to see when the pattern was first created and then each time it was modified, we use the `-L` flag in this fashion:\n\n```{.bash}\ngit log -L :<pattern>:file\n```\n\nIn our case:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit log -L :test:src/test_manuel.py\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfatal: There is no path git/src/test_manuel.py in the commit\n```\n\n\n:::\n:::\n\n\nThis is very useful if you want to see, for instance, changes made to a function in a script.\n\n### Changes in number of occurrences of a pattern\n\nNow, if we want to list all commits that created a change in the number of occurrences of `test` in our project, we run:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit log -S test --oneline\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n7b1d418e update site\nc813fca7 update site\n4c2cca59 update site\n4ec83107 update\n289d7eee update\n2e9865d5 update\ndb5eebf7 update\nc59f0926 update\n84016b9c update\n62af7b93 update\n88bcbaba update\n428ee1db update\n97cf5731 update\n27bb78e3 add qmd files from molecules\n8e70f8b6 update site\ne395a204 update\nc0a93fbd add prefix (intro_, ws_, wb_) to bash, git, and tools sections\n63ba55fc update\ndbded239 update\n1ca5c158 update\n79ebb58b minor fixes dvc slides\nac8afe70 update\n525ca03c dvc slides before another big change\nd287f33c update\na6dc00eb update\na4e14d34 update\n91d6403f update\na38386a2 update\n413a323d update\ne126a321 update after render\nfee353f5 update\ne934a832 update site\n7e6fe93b update site after render\n10277778 update\ne2640dc6 update\n69ab00ba update site\n0cd6525f update site\n484054e8 update site\n7d4a19bb finish draft stateless\nf4bae193 update site\nc2aadc75 minor edits\ne9f983a8 update site\n8aa9f4e5 finish quick draft of parallel section\n719274ed update site\nb648de49 combine datasets loading from 3 options in one section\nba698653 update site\n169845ab version with: loading datasets with Hugging Face\n5376cca0 update site\n7aaf321f add state draft\n4d98a5b0 update site after full render\n4fbc9736 update site\nfbad50d0 update site\n7c19d98d update site\n92dad162 update site\n4a5ef1ea update site\nf763bc1a update site\n3b955ea5 update site\n27e1a097 update site\n3158ff17 update site\n7c132d5e update site\n141204ed add flax abstract\n52152ef3 update JAX abstract after removing dl part with flax\n8f250d57 update site\n255b3205 update freeze\nb61b6df9 update site\n99a77db3 finish jit draft\n57d56299 update site\nd7e0bcb9 finish jx numpy section\nd344ad8a update site\n858e5422 JAX: big revamp course structure\n62c400b2 update site\n1b2e846f jx principles: add async dispatch\n8c8116e0 update site\n09080851 update site\n8f32ea61 update site\ncd78f159 udpate site\n4a003c52 update site\n4b3bec75 update site\ne8e73865 update site\nc545c684 update site\n0b628db2 finish hpc data partition chapter\n1a5c59f7 save a version of hpc_partition before modifying it\n08552b77 update site\nc7fccd5b update site\nd85a0541 edit running htop on local machine\nb5fa9d35 update site\nacb1a4ff rename and heavily modify the foreach chapter\n4536fc63 add pics\n7c318e74 f4 and f5: do testing on the cluster and remove quarto comment\n2aa72b9b update site\n22192dbf add example releasing memory\n08d8f896 add jx profiling page\na841844f improve hpc optimization\nbde35ec8 improve intro indexing\nf1780432 jx why: replace gtrend embedded by img (keeps breaking), improve graph color, add abstract, add a bit of content\n78c3b7b9 add colors to jax intro diagrams\nfb5662b6 add a number of jx early drafts\nc54f6ed7 add new jx sections and update site using a virtual env for Python\ndbcfca2a add prefix for various sections in julia and r, prevent old and bk files from being executed/rendered, prevent webscraping files from being created\n43b79abd update site\n64ddfd7d small edits to hpc r before course\n9204ff32 add jax top intro\n09f64aee add info on profiling\n0cce7374 move jax below PyTorch as it is a more advanced course\nf33135e1 update gcc and r module versions\n96c23b77 update site\n279f6937 update site after full render\n084d5221 embed resources\nae9b67be update site\n4e9c611e more improvements and little tweaks frameworks slides. Add more info\nd58ae469 update site\n445bb296 improvements frameworks slides\n21882057 update site\nfd17244c update formatting framework slides\n185e051a update site\nbead0b06 many tweaks of formatting\nc68c4611 first very rough draft of frameworks slides\n09f1fe51 replace mermaid diagram in file system exercise with a graphviz one\nc6d4a350 filesystem: add exercise with a diagram\n2798c6a1 minor fix\n7a08552d update skl workflow\nac76eea3 update site\n8a504230 add sklearn workflow\nea800fde add an sklearn serie\nc7ac7301 update site\nccf1a85c added content to aliases.qmd\nf17c8c95 added aliases.qmd\ndc7aae4e update site\n74a4e08b finish logs\n0ffe3e1a add logs draft\n23827256 add project.zip\nc8afe95a add downloadthis extension\nfe3f956d add abstract to documentation section\nbb145734 edits intro slides\n40571641 embed resources intro slides\nffa2c749 total revamp of git intro with simply link to slides\n28032012 update ml course\n043c6cf4 minor edits r course\n4888db47 edit sections on how to run r\ne16c9467 update site\n44ceba8e update site\n0ece9c2e update site\n51b8534e replace old webscraping (Python) workshop to new version from DHSI\nfecc161b add webscraping old to gitignore\n4bb8faf0 little improvements web scraping R\nb784f17d update site\n91fa0247 update site\n3bbe8ac5 add (bad) intro blurb to Python course\n3a3361af update site\nf589a660 rename the ext section into talks\n73dfeda0 improvements collections section\n6617a5bc update site\n622631fc fix and improve pandas section\n3eaacd19 update site\nf8c47d0a add index for new big section (talks)\ne29ae75f update site\n9e6a1b8a edit scripts\n0f60d0db finish redirections\n583f27c1 add filesystem section\na7c08558 gis slides: fix typo\nfec32a19 makie: add content in html below video\n954eb10d makie slides: minor improvements\n90adee86 more info in workflow section\n2250d59a minor edits workflow\n39f737d4 add workflow section\n2cd8c6f3 update navbar by moving data, model, and training in a single section\n5f33a182 make backup of autograd in autograd_old and start to make new version of autograd (not complete)\nfc853e13 some edits to training, but still not complete\n01f0f732 finish tensor section\n24b059f9 finalize parallel loops\ne5401892 again many changes to parallel loops before changing yet again\n1428b5fa many changes to parallel loops before making yet many new alternative changes\n6abe68e0 move copy on modify from basics to indexing and make it better\nfd1d1408 update site\n0649af93 move concepts to reading and create a new intro section with slides\nba7938d1 update site\n2525e9e8 finish function section\nb71c7614 finish control flow section\n7f226584 finalize plotting section\n302627a3 add plotting section\na477bd4d add publishing page with links to quarto workshop and webinar\na30a0759 add data structures section\nc5a92ed6 add blurb basics\n68489a39 basics: change title + move a lot of content into section specific pages\n58e586ec packages: add blurb\n848f4362 update navbar\nb7284048 minor edits bash intro\n075dd527 update site\na519d857 create wildcards section\n42f51d4a rename file from search to find\n7df872bf add videos: 4 workshops for HSS series + staff to staff webinar + regular webinar\nb2e565c7 update site\n590bb505 quarto: add installation links\neca80cdb make slides less wordy based on the s2s webinar given on quarto\n43d1ea7f update site\nf424bba7 add slides for quarto staff to staff webinar\n1f33a777 update site\n99c7e56f add new minor optimization\ndd71a56a turn the parallel loop lesson from the webinar version to the workshop version using batch jobs\n07871c1f add 2nd optimization by louis\n55e7c61a update site\nabb1ced7 update site\nf758b8c1 update site\n61f3b8ec add function suggested by workshop participant\n649f8258 update site\nbafb7696 remove profiler from performance section\n176e5ba4 finish optimization section\n3d42df1c add section on memory\n1ba9cc4a important commit: remove \"avoid type conversions\" in R hpc optimizations section as this doesn't change the timing consistently\nb64856dd first draft optimizations\na563fa97 re-render site\n95086e88 update site\n473d722b many edits r resource page\ne0ab5c78 tweak all heading levels\n934f9a86 update site\n37cef298 remove front page for workshops and webinars + add logo image for front page for intro and hpc courses + re-shuffle a few sections + move most ml topics into a course + minor edits (abstract, etc.)\nfc82cf5d update site\n3bcf2df8 rename first git section of git course to match structure of other topics\n628525d5 fix how to download bash data\n952d027c create front pages for Bash and cards on main topic page\nc6ea3e02 add buttons to r main page\nf3e70692 several improvements to web scraping\nc5258d5f split parallel r section into 3 section and add improvements and edits\n046b607d minor fixes hss slides\ncda4fc9d add missing image and very minor edits ml hss slides\nb9f8b5f5 embed resources intro hss ml slides\n898cdd93 update site\n4c07296e add intro ml for hss slides\n38a825da many formatting edits all reveal.js presentations\n8688a717 replace workshop by webinar in all webinars\n20224c1e update site\n50fcdc72 finish script section (shortened. Need to add more content)\n5ef06d8d finish function section\nbf2653fa move control flow, script, and search to molecules folder\nbad3da30 transfer: add globus and abstract\ne7412c33 finish redirections and move it to the molecules repo to run code\n23bed49d add html_children\n9ff42fbe add html section\n9c2f06ef add delay at each iteration to reduce risk of being blocked\n246c64d1 web scraping: minor edits and improvements\n0d08979d add explanations and comments web scraping\n4599ed35 disable cache for webscraping as it conflicts with rvest\n2703353f minor edit nav titles\n5cd69306 change rstudio server time to 1.5h and remove jh option image as it is not the right one\n8159f9b2 minor edits: add some explanations, improve code a bit\nb78b4b6d add first decent draft webscraping with more or less all code and some explanations\n1c251034 add alliance wiki page for r in intro hss resources\ncf851391 first draft bash redirections and pipes\n03b9e332 first draft bash script\n20a392b6 add a little content to intro r\n5c3cfb03 add 2 new sections (not covered by alex)\nfb69b01d add draft content to intro hss r\n6c6d0cf3 add bash empty chapters for online course\nb900e688 intro hpc slides by re-embeding resources\n66bca7e2 fix typo git search\nd72b1706 finish hpc r slides\n1f14f6be open link to hpc slides\n95f20745 finish control flow chapter\n12d248d8 add many little things in list and make a correction for strings\nc9d2e1dd update site\na65bd054 remove out of the package section everything that can live elsewhere\n173d128f move content jh instructions to a new chapter on running Python\nb259e525 remove alex acknowledgement\nb4b87e69 minor edit git front page\nbb2c6fe2 add acknowledgement of alex content\ndd132ab7 supress redundancy between basic and functions\n6f2f0ae4 finish list section (Python)\ndb33cd1f finish basic chapter (Python)\n7ac57447 first draft collections\n04db2fcc edit basics\nfd677ff1 add first draft Python intro hpc copied from Julia. Still needs lots of work\n7464d141 add first draft Python functions (not far from ready)\n1ccb1569 add first draft web scraping in Python\n663e401f yml: uncomment Python tab and add first two Python workshops\n4450be7c add alias\n479f1aa6 many small edits search + add fzf example for searching the logs\n2556ab4e update site\nc53e0f51 add a big info block with more fancy searches using fzf\n1752db62 first final version of search workshop\nfab10006 minor updates hpc r slides\n534a0da6 first draft hpc in r slides\n2f647bd8 remove unnecessary jupyter: python3 in 2 ml revealjs\n919d2061 git lessons: adjust img new names + fixes, corrections, improvements\n7a3d5b13 rename all git diagram img in some sensible order\n16ca4f6a finish branches and add it to the nav\n2725f415 improve front page image\n115aa01f edits many julia files: remove unnecessary jupyter: julia-1.8, small additions, small fixes, small improvements\n9db0e744 add preliminary draft of branches (git) and commented out nav entry\n4ca06a6a add distributed (julia)\na181d66f add symlink for search.qmd which is in the nested git repo\nbdb30cb3 edit control flow\nda7332f8 add remotes\n774a9d45 rename git main workshop\n8f8eb031 add tags and its img\nc1d8385f add multithreading\na31c5aad edits, additions, fixes\n2ba97085 remove from basics elements moved to other files\n8472020c remove from intro hpc everything that is intro julia (move it in various other sections)\na8f09800 turn arrays to collections and add content\n0cc0c59a add julia functions\n1d65319d add julia control flow\n5ec2bccf add julia basics\n22494671 add julia types\n4b09f00e add julia performance\n55813908 add non interactive julia\nf9dd47ca add julia arrays\nea059d51 edit paths and remove shadow img three trees\n38e370fe add undo\n29eb1ac1 add tools\n81fa8648 add stashing\n73ee1b14 add ignore\nd8970df8 add three trees of git\n8148a866 move all top levels to h2 instead of h1 following chat with quarto developpers\n4637b686 julia intro: change header levels + reformat all code blocks\nc072c6c9 add packages\n1601205a add r resources\n3e81b34a add contrib workshop\n5cc2efa0 move section about collaboration through git to new workshop\n96108ed4 uncomment grid section with wider body width\ncddb972c add ml hpc.qmd\n6fa885a4 add quarto link to about\n08e488af make all page start with h1 instead of h2 + add author where missing + move intro to def block\nf09e60bf update site\n9f97ec82 add 5 new ml workshops\n50a465a0 add note about revealjs presentations slow to load in all links\n2a6a3faf improvement to mnist: small additions + run code\ne2056339 add choosing frameworks\n2e281131 add concept workshop in ml\n68183ee7 add autograd to workshops\n8e6c61c4 add mnist to workshops\ne8b21668 add intro scripting workshop\n6e5faa1f add julia intro hpc workshop\n2ab3deb6 add julia covid plotting\n7e19653b add torchtensor slides\n515a4ddb fix R logo (not good on light bg) and add logos for all other sections\n6a781ea0 rename ml intro hss\n06496189 finish formatting upscaling slides\n44bc8530 reduce high res pics upscaling because GitHub's limit is reach with revealjs with self embedded option\n7989e1a5 add gis mapping slides\n0454b612 add upscaling slides\nd9e4e106 turn link to slides into buttons\n82356532 add _site to vc to solve publish issue on GitHub\neb7f3b17 delete publish.yml for GitHub actions\n82781458 update freeze\nf7f08ca0 update freeze\n74174941 update freeze\nccc30a73 update freeze\n9ef79da4 update freeze\nf23a4123 remove in code lengthy comment and add note instead\nb75bf0d5 add custom title-slide.html with partial template for revealjs title slide\n16ebe722 re-add makie slides *after* having rebuilt the site with freeze true\n348b7acb remove makie slides\nf131770c makie webinar: re-add slides\n36539180 remove makie slides for now for gh actions to build\necda9e1d update freeze with julia makie slides\nff2ec56b add makie slides\n6d406585 front page: switch buttons to cards and readjust content accordingly\nfc203393 update freeze\n4ceac573 add outputs of quarto demos so as not to have to run them all the time (annoying with latex). works with blocking rendering of that dir in yml\n0bbc3117 update freeze with computations from r the basics\n71c4ab68 add r the basics from autumn school 22 to r workshops\nb2e73700 add all quarto example files\n358bfb88 add quarto webinar\n818cb8c7 first commit with _freeze (for the quarto examples)\n8b21abf0 add all ml webinars\nfeafdc57 front page: finalize title and add aside about main site\n13dad000 big changes to about page\n3dd050c0 add publish.yml file for GitHub actions\nb6fc959e add 2022_git_sfu.qmd\n```\n\n\n:::\n:::\n\n\nThis can be useful to identify the commit you need.\n\n## TL;DR\n\nHere are the search functions you are the most likely to use:\n\n- Search for a pattern in the current version of your tracked files: \n\n```{.bash}\ngit grep <pattern>\n```\n\n- Search for a pattern in your files at a certain commit:\n\n```{.bash}\ngit grep <pattern> <commit>\n```\n\n- Search for a pattern in your files in all the commits:\n\n```{.bash}\ngit grep <pattern> $(git rev-list --all)\n```\n\n- Search for a pattern in your commit messages:\n\n```{.bash}\ngit log --grep=<pattern>\n```\n\nNow you should be able to find pretty much anything in your projects and their histories.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}