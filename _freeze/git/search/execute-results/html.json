{
  "hash": "398aa70476007e2511228896df4eb97d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Searching a version-controlled project\nauthor: Marie-Hélène Burle\n---\n\n\n:::{.def}\n\nWhat is the point of creating all these commits if you are unable to make use of them because you can't find the information you need in them?\n\nIn this workshop, we will learn how to search:\n\n- your files (at any of their versions) and\n- your commit logs.\n\nBy the end of the workshop, you should be able to retrieve anything you need from your versioned project.\n\n:::\n\n:::{.box}\n\n*Prerequisites:*\n\nThis special Git topic is suitable for people who already use Git.\n\nYou don't need to be an expert, but we expect that you are able to run basic Git commands in the command line.\n\n:::\n\n<!-- https://git-scm.com/book/en/v2/Git-Tools-Searching -->\n\n\n::: {.cell}\n\n:::\n\n\n## Installation\n\n**MacOS & Linux users**:\n\nInstall Git from [the official website](https://git-scm.com/downloads).\n\n**Windows users**:\n\nInstall [Git for Windows](https://gitforwindows.org/). This will also install \"Git Bash\", a Bash emulator.\n\n## Using Git\n\nWe will use Git from the command line throughout this workshop.\n\nMacOS users: &emsp;&emsp;&ensp;open \"Terminal\".\\\nWindows users: &emsp;&ensp;open \"Git Bash\".\\\nLinux users: &emsp;&emsp;&emsp;open the terminal emulator of your choice.\n\n## Practice repo\n\n### Get a repo\n\nYou are welcome to use a repository of yours to follow this workshop. Alternatively, you can clone a practice repo I have on GitHub:\n\n1. Navigate to an appropriate location:\n\n```{.bash}\ncd /path/to/appropriate/location\n```\n\n2. Clone the repo:\n\n```{.bash}\n# If you have set SSH for your GitHub account\ngit clone git@github.com:prosoitos/practice_repo.git\n```\n\n```{.bash}\n# If you haven't set SSH\ngit clone https://github.com/prosoitos/practice_repo.git\n```\n\n3. Enter the repo:\n\n```{.bash}\ncd practice_repo\n```\n\n## Searching files\n\nThe first thing that can happen is that you are looking for a certain pattern somewhere in your project (for instance a certain function or a certain word).\n\n### git grep\n\nThe main command to look through versioned files is `git grep`.\n\nYou might be familiar with the command-line utility [grep](https://en.wikipedia.org/wiki/Grep) which allows to search for lines matching a certain pattern in files. `git grep` does a similar job with these differences:\n\n- it is much faster since all files under version control are already indexed by Git,\n- you can easily search any commit without having to check it out,\n- it has features lacking in `grep` such as, for instance, [pattern arithmetic or tree search using globs](https://stackoverflow.com/a/17558295/9210961).\n\n### Let's try it\n\nBy default, `git grep` searches recursively through the tracked files in the working directory (that is, the current version of the tracked files).\n\nFirst, let's look for the word `test` in the current version of the tracked files in the test repo:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\naliases.qmd:Now, let's build an alias for a more complex command: `git grep \"test\" $(git rev-list --all)`. This example\naliases.qmd:from the *\"Searching a Git project\"* section below will search for the string \"test\" in all previous\naliases.qmd:commits. There are two problems with this command: (1) it takes an argument (the string \"test\"), and (2) it\naliases.qmd:git search test\naliases.qmd:should search the entire current Git project history for \"test\".\nbranches.qmd:git branch test\nbranches.qmd:git switch test\nbranches.qmd:* test\nbranches.qmd:The `*` shows the branch you are currently on (i.e. the branch to which `HEAD` points to). In our example, the project has two branches and we are on the branch `test`.\nbranches.qmd:git diff main test\nbranches.qmd:When you are happy with the changes you made on your test branch, you can merge it into `main`.\nbranches.qmd:If you have only created new commits on the branch `test`, the merge is called a \"fast-forward merge\" because `main` and `test` have not diverged: it is simply a question of having `main` catch up to `test`.\nbranches.qmd:git merge test\nbranches.qmd:Then, usually, you delete the branch `test` as it has served its purpose:\nbranches.qmd:git branch -d test\nbranches.qmd:Alternatively, you can switch back to `test` and do the next bit of experimental work on it. This allows to keep `main` free of mishaps and bad developments.\nbranches.qmd:Let's go back to our situation before we created the branch `test`:\nbranches.qmd:This time, you create a branch called `test2`:\nbranches.qmd:To merge your branch `test2` into `main`, a new commit is now required. Git will create this new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge:\nbranches.qmd:git merge test2\nbranches.qmd:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\nbranches.qmd:>>>>>>> test2\ncollab.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\npractice_repo/search.qmd:First, let's look for the word `test` in the current version of the tracked files in the test repo:\npractice_repo/search.qmd:git grep test\npractice_repo/search.qmd:git grep --break test\npractice_repo/search.qmd:git grep --break --heading test\npractice_repo/search.qmd:git grep --break --heading -n test\npractice_repo/search.qmd:Notice how the results for the file `src/test_manuel.py` involve functions. It would be very convenient to have the names of the functions in which `test` appears.\npractice_repo/search.qmd:git grep --break --heading -p test src/test_manuel.py\npractice_repo/search.qmd:We added the argument `src/test_manuel.py` to limit the search to that file.\npractice_repo/search.qmd:We can now see that the word `test` appears in the functions `test` and `main`.\npractice_repo/search.qmd:git grep -c test\npractice_repo/search.qmd:`git grep` in fact searches for regular expressions. `test` is a regular expression matching `test`, but we can look for more complex patterns.\npractice_repo/search.qmd:There were 2 lines matching `__` in `src/test_manuel.py` and we have indeed excluded them from our search.\npractice_repo/search.qmd:Let's search for `test` in the tracked files 20 commits ago:\npractice_repo/search.qmd:git grep test HEAD~20\npractice_repo/search.qmd:As you can see, the file `src/test_manuel.py` is not in the results. Either it didn't exist or it didn't have the word `test` at that commit.\npractice_repo/search.qmd:Let's create a new (thus untracked) file with some content including the word `test`:\npractice_repo/search.qmd:echo \"This is a test\" > newfile\npractice_repo/search.qmd:git grep -c test\npractice_repo/search.qmd:git grep -c --untracked test\npractice_repo/search.qmd:Now, let's create a file in it that contains `test`:\npractice_repo/search.qmd:echo \"And another test\" > data/file\npractice_repo/search.qmd:git grep -c test\npractice_repo/search.qmd:git grep -c --untracked test\npractice_repo/search.qmd:git grep -c --untracked --no-exclude-standard test\npractice_repo/search.qmd:To search for `test` in all the commits, we thus run:\npractice_repo/search.qmd:git grep \"test\" $(git rev-list --all)\npractice_repo/search.qmd:git grep \"test\" $(git rev-list --all -2)\npractice_repo/search.qmd:git grep \"test\" $(git rev-list --all) | fzf --cycle -i -e\npractice_repo/search.qmd:git grep \"test\" $(git rev-list --all) |\npractice_repo/search.qmd:git grep \"test\" $(git rev-list --all) |\npractice_repo/search.qmd:git grep \"test\" $(git rev-list --all) |\npractice_repo/search.qmd:git search test\npractice_repo/search.qmd:Let's look for `test` in the commit messages and limit the output to 3 commits:\npractice_repo/search.qmd:git log --grep=test -3\npractice_repo/search.qmd:git log --grep=\"test\" -3 --oneline\npractice_repo/search.qmd:git log --grep=\"test\" | fzf --cycle -i -e\npractice_repo/search.qmd:git log --grep=\"test\" --oneline |\npractice_repo/search.qmd:Remember that `test` was present in the file `src/test_manuel.py`. If we want to see when the pattern was first created and then each time it was modified, we use the `-L` flag in this fashion:\npractice_repo/search.qmd:git log -L :test:src/test_manuel.py\npractice_repo/search.qmd:Now, if we want to list all commits that created a change in the number of occurrences of `test` in our project, we run:\npractice_repo/search.qmd:git log -S test --oneline\nremotes.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\nundo.qmd:Here is a common scenario: you make a commit, then realize that you forgot to include some changes in that commit; or you aren't happy with the commit message; or both. You can edit your latest commit with the `--amend` flag:\n```\n\n\n:::\n:::\n\n\nLet's add blank lines between the results of each file for better readability:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep --break test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\naliases.qmd:Now, let's build an alias for a more complex command: `git grep \"test\" $(git rev-list --all)`. This example\naliases.qmd:from the *\"Searching a Git project\"* section below will search for the string \"test\" in all previous\naliases.qmd:commits. There are two problems with this command: (1) it takes an argument (the string \"test\"), and (2) it\naliases.qmd:git search test\naliases.qmd:should search the entire current Git project history for \"test\".\n\nbranches.qmd:git branch test\nbranches.qmd:git switch test\nbranches.qmd:* test\nbranches.qmd:The `*` shows the branch you are currently on (i.e. the branch to which `HEAD` points to). In our example, the project has two branches and we are on the branch `test`.\nbranches.qmd:git diff main test\nbranches.qmd:When you are happy with the changes you made on your test branch, you can merge it into `main`.\nbranches.qmd:If you have only created new commits on the branch `test`, the merge is called a \"fast-forward merge\" because `main` and `test` have not diverged: it is simply a question of having `main` catch up to `test`.\nbranches.qmd:git merge test\nbranches.qmd:Then, usually, you delete the branch `test` as it has served its purpose:\nbranches.qmd:git branch -d test\nbranches.qmd:Alternatively, you can switch back to `test` and do the next bit of experimental work on it. This allows to keep `main` free of mishaps and bad developments.\nbranches.qmd:Let's go back to our situation before we created the branch `test`:\nbranches.qmd:This time, you create a branch called `test2`:\nbranches.qmd:To merge your branch `test2` into `main`, a new commit is now required. Git will create this new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge:\nbranches.qmd:git merge test2\nbranches.qmd:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\nbranches.qmd:>>>>>>> test2\n\ncollab.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n\npractice_repo/search.qmd:First, let's look for the word `test` in the current version of the tracked files in the test repo:\npractice_repo/search.qmd:git grep test\npractice_repo/search.qmd:git grep --break test\npractice_repo/search.qmd:git grep --break --heading test\npractice_repo/search.qmd:git grep --break --heading -n test\npractice_repo/search.qmd:Notice how the results for the file `src/test_manuel.py` involve functions. It would be very convenient to have the names of the functions in which `test` appears.\npractice_repo/search.qmd:git grep --break --heading -p test src/test_manuel.py\npractice_repo/search.qmd:We added the argument `src/test_manuel.py` to limit the search to that file.\npractice_repo/search.qmd:We can now see that the word `test` appears in the functions `test` and `main`.\npractice_repo/search.qmd:git grep -c test\npractice_repo/search.qmd:`git grep` in fact searches for regular expressions. `test` is a regular expression matching `test`, but we can look for more complex patterns.\npractice_repo/search.qmd:There were 2 lines matching `__` in `src/test_manuel.py` and we have indeed excluded them from our search.\npractice_repo/search.qmd:Let's search for `test` in the tracked files 20 commits ago:\npractice_repo/search.qmd:git grep test HEAD~20\npractice_repo/search.qmd:As you can see, the file `src/test_manuel.py` is not in the results. Either it didn't exist or it didn't have the word `test` at that commit.\npractice_repo/search.qmd:Let's create a new (thus untracked) file with some content including the word `test`:\npractice_repo/search.qmd:echo \"This is a test\" > newfile\npractice_repo/search.qmd:git grep -c test\npractice_repo/search.qmd:git grep -c --untracked test\npractice_repo/search.qmd:Now, let's create a file in it that contains `test`:\npractice_repo/search.qmd:echo \"And another test\" > data/file\npractice_repo/search.qmd:git grep -c test\npractice_repo/search.qmd:git grep -c --untracked test\npractice_repo/search.qmd:git grep -c --untracked --no-exclude-standard test\npractice_repo/search.qmd:To search for `test` in all the commits, we thus run:\npractice_repo/search.qmd:git grep \"test\" $(git rev-list --all)\npractice_repo/search.qmd:git grep \"test\" $(git rev-list --all -2)\npractice_repo/search.qmd:git grep \"test\" $(git rev-list --all) | fzf --cycle -i -e\npractice_repo/search.qmd:git grep \"test\" $(git rev-list --all) |\npractice_repo/search.qmd:git grep \"test\" $(git rev-list --all) |\npractice_repo/search.qmd:git grep \"test\" $(git rev-list --all) |\npractice_repo/search.qmd:git search test\npractice_repo/search.qmd:Let's look for `test` in the commit messages and limit the output to 3 commits:\npractice_repo/search.qmd:git log --grep=test -3\npractice_repo/search.qmd:git log --grep=\"test\" -3 --oneline\npractice_repo/search.qmd:git log --grep=\"test\" | fzf --cycle -i -e\npractice_repo/search.qmd:git log --grep=\"test\" --oneline |\npractice_repo/search.qmd:Remember that `test` was present in the file `src/test_manuel.py`. If we want to see when the pattern was first created and then each time it was modified, we use the `-L` flag in this fashion:\npractice_repo/search.qmd:git log -L :test:src/test_manuel.py\npractice_repo/search.qmd:Now, if we want to list all commits that created a change in the number of occurrences of `test` in our project, we run:\npractice_repo/search.qmd:git log -S test --oneline\n\nremotes.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n\nundo.qmd:Here is a common scenario: you make a commit, then realize that you forgot to include some changes in that commit; or you aren't happy with the commit message; or both. You can edit your latest commit with the `--amend` flag:\n```\n\n\n:::\n:::\n\n\nLet's also put the file names on separate lines:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep --break --heading test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\naliases.qmd\nNow, let's build an alias for a more complex command: `git grep \"test\" $(git rev-list --all)`. This example\nfrom the *\"Searching a Git project\"* section below will search for the string \"test\" in all previous\ncommits. There are two problems with this command: (1) it takes an argument (the string \"test\"), and (2) it\ngit search test\nshould search the entire current Git project history for \"test\".\n\nbranches.qmd\ngit branch test\ngit switch test\n* test\nThe `*` shows the branch you are currently on (i.e. the branch to which `HEAD` points to). In our example, the project has two branches and we are on the branch `test`.\ngit diff main test\nWhen you are happy with the changes you made on your test branch, you can merge it into `main`.\nIf you have only created new commits on the branch `test`, the merge is called a \"fast-forward merge\" because `main` and `test` have not diverged: it is simply a question of having `main` catch up to `test`.\ngit merge test\nThen, usually, you delete the branch `test` as it has served its purpose:\ngit branch -d test\nAlternatively, you can switch back to `test` and do the next bit of experimental work on it. This allows to keep `main` free of mishaps and bad developments.\nLet's go back to our situation before we created the branch `test`:\nThis time, you create a branch called `test2`:\nTo merge your branch `test2` into `main`, a new commit is now required. Git will create this new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge:\ngit merge test2\nAfter which, you can delete the (now useless) test branch (with `git branch -d test2`):\n>>>>>>> test2\n\ncollab.qmd\nClick on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n\npractice_repo/search.qmd\nFirst, let's look for the word `test` in the current version of the tracked files in the test repo:\ngit grep test\ngit grep --break test\ngit grep --break --heading test\ngit grep --break --heading -n test\nNotice how the results for the file `src/test_manuel.py` involve functions. It would be very convenient to have the names of the functions in which `test` appears.\ngit grep --break --heading -p test src/test_manuel.py\nWe added the argument `src/test_manuel.py` to limit the search to that file.\nWe can now see that the word `test` appears in the functions `test` and `main`.\ngit grep -c test\n`git grep` in fact searches for regular expressions. `test` is a regular expression matching `test`, but we can look for more complex patterns.\nThere were 2 lines matching `__` in `src/test_manuel.py` and we have indeed excluded them from our search.\nLet's search for `test` in the tracked files 20 commits ago:\ngit grep test HEAD~20\nAs you can see, the file `src/test_manuel.py` is not in the results. Either it didn't exist or it didn't have the word `test` at that commit.\nLet's create a new (thus untracked) file with some content including the word `test`:\necho \"This is a test\" > newfile\ngit grep -c test\ngit grep -c --untracked test\nNow, let's create a file in it that contains `test`:\necho \"And another test\" > data/file\ngit grep -c test\ngit grep -c --untracked test\ngit grep -c --untracked --no-exclude-standard test\nTo search for `test` in all the commits, we thus run:\ngit grep \"test\" $(git rev-list --all)\ngit grep \"test\" $(git rev-list --all -2)\ngit grep \"test\" $(git rev-list --all) | fzf --cycle -i -e\ngit grep \"test\" $(git rev-list --all) |\ngit grep \"test\" $(git rev-list --all) |\ngit grep \"test\" $(git rev-list --all) |\ngit search test\nLet's look for `test` in the commit messages and limit the output to 3 commits:\ngit log --grep=test -3\ngit log --grep=\"test\" -3 --oneline\ngit log --grep=\"test\" | fzf --cycle -i -e\ngit log --grep=\"test\" --oneline |\nRemember that `test` was present in the file `src/test_manuel.py`. If we want to see when the pattern was first created and then each time it was modified, we use the `-L` flag in this fashion:\ngit log -L :test:src/test_manuel.py\nNow, if we want to list all commits that created a change in the number of occurrences of `test` in our project, we run:\ngit log -S test --oneline\n\nremotes.qmd\nClick on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n\nundo.qmd\nHere is a common scenario: you make a commit, then realize that you forgot to include some changes in that commit; or you aren't happy with the commit message; or both. You can edit your latest commit with the `--amend` flag:\n```\n\n\n:::\n:::\n\n\nWe can display the line numbers for the results with the `-n` flag:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep --break --heading -n test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\naliases.qmd\n46:Now, let's build an alias for a more complex command: `git grep \"test\" $(git rev-list --all)`. This example\n47:from the *\"Searching a Git project\"* section below will search for the string \"test\" in all previous\n48:commits. There are two problems with this command: (1) it takes an argument (the string \"test\"), and (2) it\n66:git search test\n69:should search the entire current Git project history for \"test\".\n\nbranches.qmd\n52:git branch test\n70:git switch test\n97:* test\n100:The `*` shows the branch you are currently on (i.e. the branch to which `HEAD` points to). In our example, the project has two branches and we are on the branch `test`.\n107:git diff main test\n114:When you are happy with the changes you made on your test branch, you can merge it into `main`.\n118:If you have only created new commits on the branch `test`, the merge is called a \"fast-forward merge\" because `main` and `test` have not diverged: it is simply a question of having `main` catch up to `test`.\n133:git merge test\n138:Then, usually, you delete the branch `test` as it has served its purpose:\n141:git branch -d test\n146:Alternatively, you can switch back to `test` and do the next bit of experimental work on it. This allows to keep `main` free of mishaps and bad developments.\n152:Let's go back to our situation before we created the branch `test`:\n156:This time, you create a branch called `test2`:\n180:To merge your branch `test2` into `main`, a new commit is now required. Git will create this new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge:\n183:git merge test2\n188:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\n213:>>>>>>> test2\n\ncollab.qmd\n50:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n\npractice_repo/search.qmd\n101:First, let's look for the word `test` in the current version of the tracked files in the test repo:\n104:git grep test\n110:git grep --break test\n116:git grep --break --heading test\n122:git grep --break --heading -n test\n125:Notice how the results for the file `src/test_manuel.py` involve functions. It would be very convenient to have the names of the functions in which `test` appears.\n130:git grep --break --heading -p test src/test_manuel.py\n135:We added the argument `src/test_manuel.py` to limit the search to that file.\n139:We can now see that the word `test` appears in the functions `test` and `main`.\n144:git grep -c test\n149:`git grep` in fact searches for regular expressions. `test` is a regular expression matching `test`, but we can look for more complex patterns.\n217:There were 2 lines matching `__` in `src/test_manuel.py` and we have indeed excluded them from our search.\n225:Let's search for `test` in the tracked files 20 commits ago:\n228:git grep test HEAD~20\n233:As you can see, the file `src/test_manuel.py` is not in the results. Either it didn't exist or it didn't have the word `test` at that commit.\n239:Let's create a new (thus untracked) file with some content including the word `test`:\n242:echo \"This is a test\" > newfile\n248:git grep -c test\n254:git grep -c --untracked test\n277:Now, let's create a file in it that contains `test`:\n280:echo \"And another test\" > data/file\n286:git grep -c test\n290:git grep -c --untracked test\n296:git grep -c --untracked --no-exclude-standard test\n313:To search for `test` in all the commits, we thus run:\n316:git grep \"test\" $(git rev-list --all)\n322:git grep \"test\" $(git rev-list --all -2)\n332:git grep \"test\" $(git rev-list --all) | fzf --cycle -i -e\n338:git grep \"test\" $(git rev-list --all) |\n366:git grep \"test\" $(git rev-list --all) |\n375:git grep \"test\" $(git rev-list --all) |\n424:git search test\n459:Let's look for `test` in the commit messages and limit the output to 3 commits:\n462:git log --grep=test -3\n468:git log --grep=\"test\" -3 --oneline\n476:git log --grep=\"test\" | fzf --cycle -i -e\n482:git log --grep=\"test\" --oneline |\n495:Remember that `test` was present in the file `src/test_manuel.py`. If we want to see when the pattern was first created and then each time it was modified, we use the `-L` flag in this fashion:\n504:git log -L :test:src/test_manuel.py\n511:Now, if we want to list all commits that created a change in the number of occurrences of `test` in our project, we run:\n514:git log -S test --oneline\n\nremotes.qmd\n43:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n\nundo.qmd\n14:Here is a common scenario: you make a commit, then realize that you forgot to include some changes in that commit; or you aren't happy with the commit message; or both. You can edit your latest commit with the `--amend` flag:\n```\n\n\n:::\n:::\n\n\nNotice how the results for the file `src/test_manuel.py` involve functions. It would be very convenient to have the names of the functions in which `test` appears.\n\nWe can do this with the `-p` flag:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep --break --heading -p test src/test_manuel.py\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfatal: ambiguous argument 'src/test_manuel.py': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]'\n```\n\n\n:::\n:::\n\n\n:::{.note}\n\nWe added the argument `src/test_manuel.py` to limit the search to that file.\n\n:::\n\nWe can now see that the word `test` appears in the functions `test` and `main`.\n\nNow, instead of printing all the matching lines, let's print the number of matches per file:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\naliases.qmd:5\nbranches.qmd:17\ncollab.qmd:1\npractice_repo/search.qmd:41\nremotes.qmd:1\nundo.qmd:1\n```\n\n\n:::\n:::\n\n\n### More complex patterns\n\n`git grep` in fact searches for regular expressions. `test` is a regular expression matching `test`, but we can look for more complex patterns.\n\nLet's look for `image`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep image\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nignore.qmd:- Non-text files (e.g. images, office documents)\npractice_repo/search.qmd:Let's look for `image`:\npractice_repo/search.qmd:git grep image\npractice_repo/search.qmd:git grep -i image\n```\n\n\n:::\n:::\n\n\n:::{.note}\n\nNo output means that the search is not returning any result.\n\n:::\n\nLet's make this search case insensitive:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -i image\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nignore.qmd:- Non-text files (e.g. images, office documents)\npractice_repo/search.qmd:Let's look for `image`:\npractice_repo/search.qmd:git grep image\npractice_repo/search.qmd:git grep -i image\npractice_repo/search.qmd:We are now getting some results as `Image` was present in three lines of the file `src/new_file.py`.\n```\n\n\n:::\n:::\n\n\nWe are now getting some results as `Image` was present in three lines of the file `src/new_file.py`.\n\nLet's now search for `data`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep data\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nchanges.qmd:Remember that HEAD is a pointer pointing at a branch, that a branch is itself a pointer pointing at a commit, and finally that a commit is a Git object pointing at compressed blobs containing data about your project at a certain commit. When the HEAD pointer moves around, whatever commit it points to populates the [HEAD]{.emph} tree with the corresponding data.\nfirst_steps.qmd:Alternatively, you can download the file with this button: {{< downloadthis project.zip dname=\"project\" label=\"Download the data\" >}}\nfirst_steps.qmd:data/\nfirst_steps.qmd:data\nfirst_steps.qmd:data\nfirst_steps.qmd:./data:\nfirst_steps.qmd:dataset.csv\nfirst_steps.qmd:├── data\nfirst_steps.qmd:│   └── dataset.csv\nfirst_steps.qmd:cat data/dataset.csv\nfirst_steps.qmd:This is our very exciting data set.\nfirst_steps.qmd:df = pd.read_csv('../data/dataset.csv')\nfirst_steps.qmd:data\nfirst_steps.qmd:        data/\nfirst_steps.qmd:        data/\nfirst_steps.qmd:Remember that each commit contains the following metadata:\nfirst_steps.qmd:        data/\nignore.qmd:- Your initial data\nignore.qmd:Notice how `data/` is not listed in the untracked files anymore.\nignore.qmd:git commit -m \"Add .gitignore file with data and results\"\nignore.qmd:[main a1df8e5] Add .gitignore file with data and results\nintro_slides.qmd:The data is stored as blobs, doesn't create unnecessary copies (unchanged files are referenced from old blobs), and uses excellent compression\nintro_slides.qmd:Each commit has a unique *hash* and contains the following metadata:\nlogs.qmd:    Add .gitignore file with data and results\nlogs.qmd:c4ab5e7 Add .gitignore file with data and results\nlogs.qmd:|     Add .gitignore file with data and results\nlogs.qmd:* c4ab5e7 34 minutes ago Add .gitignore file with data and results xxx@xxx\nlogs.qmd:+df = pd.read_csv('../data/dataset.csv')\nlogs.qmd:    Add .gitignore file with data and results\nlogs.qmd:+/data/\nlogs.qmd:In addition to displaying the commit metadata, `git show` also displays the diff of that commit with its parent commit.\npractice_repo/search.qmd:Let's now search for `data`:\npractice_repo/search.qmd:git grep data\npractice_repo/search.qmd:We are getting results for the word `data`, but also for the pattern `data` in longer expressions such as `train_data` or `dataset`. If we only want results for the word `data`, we can use the `-w` flag:\npractice_repo/search.qmd:git grep -w data\npractice_repo/search.qmd:The directory `data` is in `.gitignore`. This means that it is not under version control and it thus doesn't exist in our repo (since we cloned our repo, we only have the version-controlled files). Let's create it:\npractice_repo/search.qmd:mkdir data\npractice_repo/search.qmd:echo \"And another test\" > data/file\npractice_repo/search.qmd:`data/file`, despite being excluded from version control, is also searched.\nBinary file project.zip matches\nremotes.qmd:## Getting data from a remote\nremotes.qmd:If you collaborate on a project, you have to get the data added by your teammates to keep your local project up to date.\nremotes.qmd:To download new data from a remote, you have 2 options:\nremotes.qmd:*Fetching* downloads the data from a remote that you don't already have in your local version of the project:\nremotes.qmd:Uploading data to the remote is called *pushing*:\nundo.qmd:As you just experienced, this command leads to data loss. \\\nwb_dvc.qmd:title: Version control for data science and machine learning with DVC\n```\n\n\n:::\n:::\n\n\nWe are getting results for the word `data`, but also for the pattern `data` in longer expressions such as `train_data` or `dataset`. If we only want results for the word `data`, we can use the `-w` flag:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -w data\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nchanges.qmd:Remember that HEAD is a pointer pointing at a branch, that a branch is itself a pointer pointing at a commit, and finally that a commit is a Git object pointing at compressed blobs containing data about your project at a certain commit. When the HEAD pointer moves around, whatever commit it points to populates the [HEAD]{.emph} tree with the corresponding data.\nfirst_steps.qmd:Alternatively, you can download the file with this button: {{< downloadthis project.zip dname=\"project\" label=\"Download the data\" >}}\nfirst_steps.qmd:data/\nfirst_steps.qmd:data\nfirst_steps.qmd:data\nfirst_steps.qmd:./data:\nfirst_steps.qmd:├── data\nfirst_steps.qmd:cat data/dataset.csv\nfirst_steps.qmd:This is our very exciting data set.\nfirst_steps.qmd:df = pd.read_csv('../data/dataset.csv')\nfirst_steps.qmd:data\nfirst_steps.qmd:        data/\nfirst_steps.qmd:        data/\nfirst_steps.qmd:        data/\nignore.qmd:- Your initial data\nignore.qmd:Notice how `data/` is not listed in the untracked files anymore.\nignore.qmd:git commit -m \"Add .gitignore file with data and results\"\nignore.qmd:[main a1df8e5] Add .gitignore file with data and results\nintro_slides.qmd:The data is stored as blobs, doesn't create unnecessary copies (unchanged files are referenced from old blobs), and uses excellent compression\nlogs.qmd:    Add .gitignore file with data and results\nlogs.qmd:c4ab5e7 Add .gitignore file with data and results\nlogs.qmd:|     Add .gitignore file with data and results\nlogs.qmd:* c4ab5e7 34 minutes ago Add .gitignore file with data and results xxx@xxx\nlogs.qmd:+df = pd.read_csv('../data/dataset.csv')\nlogs.qmd:    Add .gitignore file with data and results\nlogs.qmd:+/data/\npractice_repo/search.qmd:Let's now search for `data`:\npractice_repo/search.qmd:git grep data\npractice_repo/search.qmd:We are getting results for the word `data`, but also for the pattern `data` in longer expressions such as `train_data` or `dataset`. If we only want results for the word `data`, we can use the `-w` flag:\npractice_repo/search.qmd:git grep -w data\npractice_repo/search.qmd:The directory `data` is in `.gitignore`. This means that it is not under version control and it thus doesn't exist in our repo (since we cloned our repo, we only have the version-controlled files). Let's create it:\npractice_repo/search.qmd:mkdir data\npractice_repo/search.qmd:echo \"And another test\" > data/file\npractice_repo/search.qmd:`data/file`, despite being excluded from version control, is also searched.\nBinary file project.zip matches\nremotes.qmd:## Getting data from a remote\nremotes.qmd:If you collaborate on a project, you have to get the data added by your teammates to keep your local project up to date.\nremotes.qmd:To download new data from a remote, you have 2 options:\nremotes.qmd:*Fetching* downloads the data from a remote that you don't already have in your local version of the project:\nremotes.qmd:Uploading data to the remote is called *pushing*:\nundo.qmd:As you just experienced, this command leads to data loss. \\\nwb_dvc.qmd:title: Version control for data science and machine learning with DVC\n```\n\n\n:::\n:::\n\n\nNow, let's use a more complex regular expression. We want the counts for the pattern `\".*_.*\"` (i.e. any name with a snail case such as `train_loader`):\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c \".*_.*\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfirst_steps.qmd:3\nimg/01.png:16\nimg/02.png:32\nimg/03.png:31\nimg/04.png:26\nimg/05.png:31\nimg/06.png:32\nimg/07.png:30\nimg/08.png:34\nimg/09.png:35\nimg/10.png:41\nimg/11.png:47\nimg/12.png:40\nimg/13.png:39\nimg/14.png:32\nimg/15.png:38\nimg/16.png:43\nimg/17.png:34\nimg/18.png:35\nimg/19.png:30\nimg/20.png:33\nimg/21.png:40\nimg/22.png:41\nimg/23.png:47\nimg/24.png:64\nimg/25.png:66\nimg/26.png:50\nimg/27.png:60\nimg/28.png:57\nimg/29.png:33\nimg/30.png:39\nimg/31.png:14\nimg/32.png:16\nimg/33.png:18\nimg/34.png:16\nimg/35.png:20\nimg/36.png:18\nimg/37.png:18\nimg/51.png:55\nimg/52.png:46\nimg/53.png:55\nimg/collab.jpg:178\nimg/git_logo.png:4\nimg/github_logo_red.png:17\nimg/gitlab_logo.png:27\nimg/gitout.png:42\nimg/vc.jpg:1563\nindex.qmd:4\ninstall.qmd:1\nintro.qmd:1\nintro_slides.qmd:2\nlogs.qmd:1\npractice_repo/search.qmd:31\ntags.qmd:5\ntop_intro.qmd:1\nwb_dvc.qmd:1\n```\n\n\n:::\n:::\n\n\nLet's print the first 3 results per file:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -m 3 \".*_.*\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfirst_steps.qmd:wget --no-check-certificate 'https://docs.google.com/uc?export=download&id=1SJV5mRGexf91lNyFwdS_JmuAXX0xS4pE' -O project.zip\nfirst_steps.qmd:df = pd.read_csv('../data/dataset.csv')\nfirst_steps.qmd:![](https://imgs.xkcd.com/comics/git_commit.png){fig-alt=\"noshadow\"}\nBinary file img/01.png matches\nBinary file img/02.png matches\nBinary file img/03.png matches\nBinary file img/04.png matches\nBinary file img/05.png matches\nBinary file img/06.png matches\nBinary file img/07.png matches\nBinary file img/08.png matches\nBinary file img/09.png matches\nBinary file img/10.png matches\nBinary file img/11.png matches\nBinary file img/12.png matches\nBinary file img/13.png matches\nBinary file img/14.png matches\nBinary file img/15.png matches\nBinary file img/16.png matches\nBinary file img/17.png matches\nBinary file img/18.png matches\nBinary file img/19.png matches\nBinary file img/20.png matches\nBinary file img/21.png matches\nBinary file img/22.png matches\nBinary file img/23.png matches\nBinary file img/24.png matches\nBinary file img/25.png matches\nBinary file img/26.png matches\nBinary file img/27.png matches\nBinary file img/28.png matches\nBinary file img/29.png matches\nBinary file img/30.png matches\nBinary file img/31.png matches\nBinary file img/32.png matches\nBinary file img/33.png matches\nBinary file img/34.png matches\nBinary file img/35.png matches\nBinary file img/36.png matches\nBinary file img/37.png matches\nBinary file img/51.png matches\nBinary file img/52.png matches\nBinary file img/53.png matches\nBinary file img/collab.jpg matches\nBinary file img/git_logo.png matches\nBinary file img/github_logo_red.png matches\nBinary file img/gitlab_logo.png matches\nBinary file img/gitout.png matches\nBinary file img/vc.jpg matches\nindex.qmd:  Version control & collaboration with &nbsp;[![](img/git_logo.png){width=\"1.3em\" fig-alt=\"noshadow\"}](https://git-scm.com/)\nindex.qmd:[Getting started with &nbsp;![](img/git_logo.png){width=\"1.2em\" fig-alt=\"noshadow\"}](top_intro.qmd){.card-title2 .stretched-link}\nindex.qmd:[Workshops](practice_repo/search.qmd){.card-title2 .stretched-link}\ninstall.qmd:git config user.email \"your_other@email\"\nintro.qmd:[Slides](intro_slides.html){.btn .btn-outline-primary} [(Click and wait: the presentation might take a few instants to load)]{.inlinenote}\nintro_slides.qmd:    logo: /img/sfudrac_logo.png\nintro_slides.qmd:<script type=\"text/javascript\" src=\"https://ssl.gstatic.com/trends_nrtr/3045_RC01/embed_loader.js\"></script> <script type=\"text/javascript\"> trends.embed.renderExploreWidget(\"TIMESERIES\", {\"comparisonItem\":[{\"keyword\":\"/m/05vqwg\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"},{\"keyword\":\"/m/08441_\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"},{\"keyword\":\"/m/012ct9\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"},{\"keyword\":\"/m/09d6g\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"}],\"category\":0,\"property\":\"\"}, {\"exploreQuery\":\"date=all&q=%2Fm%2F05vqwg,%2Fm%2F08441_,%2Fm%2F012ct9,%2Fm%2F09d6g\",\"guestPath\":\"https://trends.google.com:443/trends/embed/\"}); </script>\nlogs.qmd:+df = pd.read_csv('../data/dataset.csv')\npractice_repo/search.qmd:git clone git@github.com:prosoitos/practice_repo.git\npractice_repo/search.qmd:git clone https://github.com/prosoitos/practice_repo.git\npractice_repo/search.qmd:cd practice_repo\ntags.qmd:git tag J_Climate_2009\ntags.qmd:git show J_Climate_2009\ntags.qmd:git checkout J_Climate_2009\ntop_intro.qmd:description: An introductory course to version control with &nbsp;[![](img/git_logo.png){width=\"1.3em\" fig-alt=\"noshadow\"}](https://git-scm.com/)\nwb_dvc.qmd:As DVC is a popular tool in machine learning, please find this webinar [in the AI section](/ai/wb_dvc.html).\n```\n\n\n:::\n:::\n\n\nAs you can see, our results also include `__init__` which is not what we were looking for. So let's exclude `__`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -m 3 -e \".*_.*\" --and --not -e \"__\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfirst_steps.qmd:wget --no-check-certificate 'https://docs.google.com/uc?export=download&id=1SJV5mRGexf91lNyFwdS_JmuAXX0xS4pE' -O project.zip\nfirst_steps.qmd:df = pd.read_csv('../data/dataset.csv')\nfirst_steps.qmd:![](https://imgs.xkcd.com/comics/git_commit.png){fig-alt=\"noshadow\"}\nBinary file img/01.png matches\nBinary file img/02.png matches\nBinary file img/03.png matches\nBinary file img/04.png matches\nBinary file img/05.png matches\nBinary file img/06.png matches\nBinary file img/07.png matches\nBinary file img/08.png matches\nBinary file img/09.png matches\nBinary file img/10.png matches\nBinary file img/11.png matches\nBinary file img/12.png matches\nBinary file img/13.png matches\nBinary file img/14.png matches\nBinary file img/15.png matches\nBinary file img/16.png matches\nBinary file img/17.png matches\nBinary file img/18.png matches\nBinary file img/19.png matches\nBinary file img/20.png matches\nBinary file img/21.png matches\nBinary file img/22.png matches\nBinary file img/23.png matches\nBinary file img/24.png matches\nBinary file img/25.png matches\nBinary file img/26.png matches\nBinary file img/27.png matches\nBinary file img/28.png matches\nBinary file img/29.png matches\nBinary file img/30.png matches\nBinary file img/31.png matches\nBinary file img/32.png matches\nBinary file img/33.png matches\nBinary file img/34.png matches\nBinary file img/35.png matches\nBinary file img/36.png matches\nBinary file img/37.png matches\nBinary file img/51.png matches\nBinary file img/52.png matches\nBinary file img/53.png matches\nBinary file img/collab.jpg matches\nBinary file img/git_logo.png matches\nBinary file img/github_logo_red.png matches\nBinary file img/gitlab_logo.png matches\nBinary file img/gitout.png matches\nBinary file img/vc.jpg matches\nindex.qmd:  Version control & collaboration with &nbsp;[![](img/git_logo.png){width=\"1.3em\" fig-alt=\"noshadow\"}](https://git-scm.com/)\nindex.qmd:[Getting started with &nbsp;![](img/git_logo.png){width=\"1.2em\" fig-alt=\"noshadow\"}](top_intro.qmd){.card-title2 .stretched-link}\nindex.qmd:[Workshops](practice_repo/search.qmd){.card-title2 .stretched-link}\ninstall.qmd:git config user.email \"your_other@email\"\nintro.qmd:[Slides](intro_slides.html){.btn .btn-outline-primary} [(Click and wait: the presentation might take a few instants to load)]{.inlinenote}\nintro_slides.qmd:    logo: /img/sfudrac_logo.png\nintro_slides.qmd:<script type=\"text/javascript\" src=\"https://ssl.gstatic.com/trends_nrtr/3045_RC01/embed_loader.js\"></script> <script type=\"text/javascript\"> trends.embed.renderExploreWidget(\"TIMESERIES\", {\"comparisonItem\":[{\"keyword\":\"/m/05vqwg\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"},{\"keyword\":\"/m/08441_\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"},{\"keyword\":\"/m/012ct9\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"},{\"keyword\":\"/m/09d6g\",\"geo\":\"\",\"time\":\"2004-01-01 2022-10-03\"}],\"category\":0,\"property\":\"\"}, {\"exploreQuery\":\"date=all&q=%2Fm%2F05vqwg,%2Fm%2F08441_,%2Fm%2F012ct9,%2Fm%2F09d6g\",\"guestPath\":\"https://trends.google.com:443/trends/embed/\"}); </script>\nlogs.qmd:+df = pd.read_csv('../data/dataset.csv')\npractice_repo/search.qmd:git clone git@github.com:prosoitos/practice_repo.git\npractice_repo/search.qmd:git clone https://github.com/prosoitos/practice_repo.git\npractice_repo/search.qmd:cd practice_repo\ntags.qmd:git tag J_Climate_2009\ntags.qmd:git show J_Climate_2009\ntags.qmd:git checkout J_Climate_2009\ntop_intro.qmd:description: An introductory course to version control with &nbsp;[![](img/git_logo.png){width=\"1.3em\" fig-alt=\"noshadow\"}](https://git-scm.com/)\nwb_dvc.qmd:As DVC is a popular tool in machine learning, please find this webinar [in the AI section](/ai/wb_dvc.html).\n```\n\n\n:::\n:::\n\n\n:::{.note}\n\nFor simple searches, you don't have to use the `-e` flag before the pattern you are searching for. Here however, our command has gotten complex enough that we have to use it before each pattern.\n\n:::\n\nLet's make sure this worked as expected:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c \".*_.*\"\necho \"---\"\ngit grep -c \"__\"\necho \"---\"\ngit grep -ce \".*_.*\" --and --not -e \"__\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfirst_steps.qmd:3\nimg/01.png:16\nimg/02.png:32\nimg/03.png:31\nimg/04.png:26\nimg/05.png:31\nimg/06.png:32\nimg/07.png:30\nimg/08.png:34\nimg/09.png:35\nimg/10.png:41\nimg/11.png:47\nimg/12.png:40\nimg/13.png:39\nimg/14.png:32\nimg/15.png:38\nimg/16.png:43\nimg/17.png:34\nimg/18.png:35\nimg/19.png:30\nimg/20.png:33\nimg/21.png:40\nimg/22.png:41\nimg/23.png:47\nimg/24.png:64\nimg/25.png:66\nimg/26.png:50\nimg/27.png:60\nimg/28.png:57\nimg/29.png:33\nimg/30.png:39\nimg/31.png:14\nimg/32.png:16\nimg/33.png:18\nimg/34.png:16\nimg/35.png:20\nimg/36.png:18\nimg/37.png:18\nimg/51.png:55\nimg/52.png:46\nimg/53.png:55\nimg/collab.jpg:178\nimg/git_logo.png:4\nimg/github_logo_red.png:17\nimg/gitlab_logo.png:27\nimg/gitout.png:42\nimg/vc.jpg:1563\nindex.qmd:4\ninstall.qmd:1\nintro.qmd:1\nintro_slides.qmd:2\nlogs.qmd:1\npractice_repo/search.qmd:31\ntags.qmd:5\ntop_intro.qmd:1\nwb_dvc.qmd:1\n---\nimg/01.png:1\nimg/02.png:2\nimg/03.png:2\nimg/04.png:1\nimg/05.png:3\nimg/06.png:3\nimg/07.png:1\nimg/08.png:1\nimg/09.png:1\nimg/10.png:1\nimg/11.png:1\nimg/12.png:1\nimg/13.png:2\nimg/14.png:2\nimg/15.png:3\nimg/16.png:1\nimg/17.png:1\nimg/18.png:2\nimg/19.png:1\nimg/20.png:1\nimg/21.png:1\nimg/22.png:2\nimg/23.png:4\nimg/24.png:2\nimg/25.png:1\nimg/26.png:1\nimg/27.png:2\nimg/28.png:3\nimg/29.png:2\nimg/30.png:1\nimg/31.png:1\nimg/51.png:1\nimg/52.png:2\nimg/53.png:1\nimg/collab.jpg:1\nimg/gitout.png:1\nimg/vc.jpg:12\npractice_repo/search.qmd:5\n---\nfirst_steps.qmd:3\nimg/01.png:15\nimg/02.png:30\nimg/03.png:29\nimg/04.png:25\nimg/05.png:28\nimg/06.png:29\nimg/07.png:29\nimg/08.png:33\nimg/09.png:34\nimg/10.png:40\nimg/11.png:46\nimg/12.png:39\nimg/13.png:37\nimg/14.png:30\nimg/15.png:35\nimg/16.png:42\nimg/17.png:33\nimg/18.png:33\nimg/19.png:29\nimg/20.png:32\nimg/21.png:39\nimg/22.png:39\nimg/23.png:43\nimg/24.png:62\nimg/25.png:65\nimg/26.png:49\nimg/27.png:58\nimg/28.png:54\nimg/29.png:31\nimg/30.png:38\nimg/31.png:13\nimg/32.png:16\nimg/33.png:18\nimg/34.png:16\nimg/35.png:20\nimg/36.png:18\nimg/37.png:18\nimg/51.png:54\nimg/52.png:44\nimg/53.png:54\nimg/collab.jpg:177\nimg/git_logo.png:4\nimg/github_logo_red.png:17\nimg/gitlab_logo.png:27\nimg/gitout.png:41\nimg/vc.jpg:1551\nindex.qmd:4\ninstall.qmd:1\nintro.qmd:1\nintro_slides.qmd:2\nlogs.qmd:1\npractice_repo/search.qmd:26\ntags.qmd:5\ntop_intro.qmd:1\nwb_dvc.qmd:1\n```\n\n\n:::\n:::\n\n\nThere were 2 lines matching `__` in `src/test_manuel.py` and we have indeed excluded them from our search.\n\nExtended regular expressions are also covered with the flag `-E`.\n\n### Searching other trees\n\nSo far, we have searched the current version of tracked files, but we can just as easily search files at any commit.\n\nLet's search for `test` in the tracked files 20 commits ago:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep test HEAD~20\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nHEAD~20:aliases.qmd:Now, let's build an alias for a more complex command: `git grep \"test\" $(git rev-list --all)`. This example\nHEAD~20:aliases.qmd:from the *\"Searching a Git project\"* section below will search for the string \"test\" in all previous\nHEAD~20:aliases.qmd:commits. There are two problems with this command: (1) it takes an argument (the string \"test\"), and (2) it\nHEAD~20:aliases.qmd:git search test\nHEAD~20:aliases.qmd:should search the entire current Git project history for \"test\".\nHEAD~20:branches.qmd:git branch test\nHEAD~20:branches.qmd:git switch test\nHEAD~20:branches.qmd:* test\nHEAD~20:branches.qmd:The `*` shows the branch you are currently on (i.e. the branch to which `HEAD` points to). In our example, the project has two branches and we are on the branch `test`.\nHEAD~20:branches.qmd:git diff main test\nHEAD~20:branches.qmd:When you are happy with the changes you made on your test branch, you can merge it into `main`.\nHEAD~20:branches.qmd:If you have only created new commits on the branch `test`, the merge is called a \"fast-forward merge\" because `main` and `test` have not diverged: it is simply a question of having `main` catch up to `test`.\nHEAD~20:branches.qmd:git merge test\nHEAD~20:branches.qmd:Then, usually, you delete the branch `test` as it has served its purpose:\nHEAD~20:branches.qmd:git branch -d test\nHEAD~20:branches.qmd:Alternatively, you can switch back to `test` and do the next bit of experimental work on it. This allows to keep `main` free of mishaps and bad developments.\nHEAD~20:branches.qmd:Let's go back to our situation before we created the branch `test`:\nHEAD~20:branches.qmd:This time, you create a branch called `test2`:\nHEAD~20:branches.qmd:To merge your branch `test2` into `main`, a new commit is now required. Git will create this new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge:\nHEAD~20:branches.qmd:git merge test2\nHEAD~20:branches.qmd:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\nHEAD~20:branches.qmd:>>>>>>> test2\nHEAD~20:collab.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\nHEAD~20:practice_repo/search.qmd:First, let's look for the word `test` in the current version of the tracked files in the test repo:\nHEAD~20:practice_repo/search.qmd:git grep test\nHEAD~20:practice_repo/search.qmd:git grep --break test\nHEAD~20:practice_repo/search.qmd:git grep --break --heading test\nHEAD~20:practice_repo/search.qmd:git grep --break --heading -n test\nHEAD~20:practice_repo/search.qmd:Notice how the results for the file `src/test_manuel.py` involve functions. It would be very convenient to have the names of the functions in which `test` appears.\nHEAD~20:practice_repo/search.qmd:git grep --break --heading -p test src/test_manuel.py\nHEAD~20:practice_repo/search.qmd:We added the argument `src/test_manuel.py` to limit the search to that file.\nHEAD~20:practice_repo/search.qmd:We can now see that the word `test` appears in the functions `test` and `main`.\nHEAD~20:practice_repo/search.qmd:git grep -c test\nHEAD~20:practice_repo/search.qmd:`git grep` in fact searches for regular expressions. `test` is a regular expression matching `test`, but we can look for more complex patterns.\nHEAD~20:practice_repo/search.qmd:There were 2 lines matching `__` in `src/test_manuel.py` and we have indeed excluded them from our search.\nHEAD~20:practice_repo/search.qmd:Let's search for `test` in the tracked files 20 commits ago:\nHEAD~20:practice_repo/search.qmd:git grep test HEAD~20\nHEAD~20:practice_repo/search.qmd:As you can see, the file `src/test_manuel.py` is not in the results. Either it didn't exist or it didn't have the word `test` at that commit.\nHEAD~20:practice_repo/search.qmd:Let's create a new (thus untracked) file with some content including the word `test`:\nHEAD~20:practice_repo/search.qmd:echo \"This is a test\" > newfile\nHEAD~20:practice_repo/search.qmd:git grep -c test\nHEAD~20:practice_repo/search.qmd:git grep -c --untracked test\nHEAD~20:practice_repo/search.qmd:Now, let's create a file in it that contains `test`:\nHEAD~20:practice_repo/search.qmd:echo \"And another test\" > data/file\nHEAD~20:practice_repo/search.qmd:git grep -c test\nHEAD~20:practice_repo/search.qmd:git grep -c --untracked test\nHEAD~20:practice_repo/search.qmd:git grep -c --untracked --no-exclude-standard test\nHEAD~20:practice_repo/search.qmd:To search for `test` in all the commits, we thus run:\nHEAD~20:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all)\nHEAD~20:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all -2)\nHEAD~20:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all) | fzf --cycle -i -e\nHEAD~20:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all) |\nHEAD~20:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all) |\nHEAD~20:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all) |\nHEAD~20:practice_repo/search.qmd:git search test\nHEAD~20:practice_repo/search.qmd:Let's look for `test` in the commit messages and limit the output to 3 commits:\nHEAD~20:practice_repo/search.qmd:git log --grep=test -3\nHEAD~20:practice_repo/search.qmd:git log --grep=\"test\" -3 --oneline\nHEAD~20:practice_repo/search.qmd:git log --grep=\"test\" | fzf --cycle -i -e\nHEAD~20:practice_repo/search.qmd:git log --grep=\"test\" --oneline |\nHEAD~20:practice_repo/search.qmd:Remember that `test` was present in the file `src/test_manuel.py`. If we want to see when the pattern was first created and then each time it was modified, we use the `-L` flag in this fashion:\nHEAD~20:practice_repo/search.qmd:git log -L :test:src/test_manuel.py\nHEAD~20:practice_repo/search.qmd:Now, if we want to list all commits that created a change in the number of occurrences of `test` in our project, we run:\nHEAD~20:practice_repo/search.qmd:git log -S test --oneline\nHEAD~20:remotes.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\nHEAD~20:undo.qmd:Here is a common scenario: you make a commit, then realize that you forgot to include some changes in that commit; or you aren't happy with the commit message; or both. You can edit your latest commit with the `--amend` flag:\n```\n\n\n:::\n:::\n\n\n:::{.note}\n\nAs you can see, the file `src/test_manuel.py` is not in the results. Either it didn't exist or it didn't have the word `test` at that commit.\n\n:::\n\nIf you want to search tracked files AND untracked files, you need to use the `--untracked` flag.\n\nLet's create a new (thus untracked) file with some content including the word `test`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho \"This is a test\" > newfile\n```\n:::\n\n\nNow compare the following:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\naliases.qmd:5\nbranches.qmd:17\ncollab.qmd:1\npractice_repo/search.qmd:41\nremotes.qmd:1\nundo.qmd:1\n```\n\n\n:::\n:::\n\n\nwith:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c --untracked test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\naliases.qmd:5\nbranches.qmd:17\ncollab.qmd:1\nnewfile:1\nremotes.qmd:1\nsearch.rmarkdown:41\nundo.qmd:1\n```\n\n\n:::\n:::\n\n\n:::{.note}\n\nThis last result also returned our untracked file `newfile`.\n\n:::\n\nIf you want to search untracked and ignored files (meaning all your files), use the flags `--untracked --no-exclude-standard`.\n\nLet's see what the `.gitignore` file contains:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat .gitignore\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncat: .gitignore: No such file or directory\n```\n\n\n:::\n:::\n\n\nThe directory `data` is in `.gitignore`. This means that it is not under version control and it thus doesn't exist in our repo (since we cloned our repo, we only have the version-controlled files). Let's create it:\n\n```{.bash}\nmkdir data\n```\n\nNow, let's create a file in it that contains `test`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho \"And another test\" > data/file\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nbash: line 1: data/file: No such file or directory\n```\n\n\n:::\n:::\n\n\nWe can rerun our previous two searches to verify that files excluded from version control are not searched:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\naliases.qmd:5\nbranches.qmd:17\ncollab.qmd:1\npractice_repo/search.qmd:41\nremotes.qmd:1\nundo.qmd:1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c --untracked test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\naliases.qmd:5\nbranches.qmd:17\ncollab.qmd:1\nnewfile:1\nremotes.qmd:1\nsearch.rmarkdown:41\nundo.qmd:1\n```\n\n\n:::\n:::\n\n\nAnd now, let's try:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep -c --untracked --no-exclude-standard test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\naliases.qmd:5\nbranches.qmd:17\ncollab.qmd:1\nintro_old.qmd:9\nnewfile:1\nremotes.qmd:1\nrevisiting_old_commits_alternate.qmd:1\nsearch.rmarkdown:41\nundo.qmd:1\n```\n\n\n:::\n:::\n\n\n:::{.note}\n\n`data/file`, despite being excluded from version control, is also searched.\n\n:::\n\n### Searching all commits\n\nWe saw that `git grep <pattern> <commit>` can search a pattern in any commit. Now, what if we all to search *all* commits for a pattern?\n\nFor this, we pass the expression `$(git rev-list --all)` in lieu of `<commit>`.\n\n`git rev-list --all` creates a list of all the commits in a way that can be used as an argument to other functions. The `$()` allows to run the expression inside it and pass the result as and argument.\n\nTo search for `test` in all the commits, we thus run:\n\n```{.bash}\ngit grep \"test\" $(git rev-list --all)\n```\n\nI am not running this command has it has a huge output. Instead, I will limit the search to the last two commits:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit grep \"test\" $(git rev-list --all -2)\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n8c7858fed11c2d338b119058a26f95adb62b361d:aliases.qmd:Now, let's build an alias for a more complex command: `git grep \"test\" $(git rev-list --all)`. This example\n8c7858fed11c2d338b119058a26f95adb62b361d:aliases.qmd:from the *\"Searching a Git project\"* section below will search for the string \"test\" in all previous\n8c7858fed11c2d338b119058a26f95adb62b361d:aliases.qmd:commits. There are two problems with this command: (1) it takes an argument (the string \"test\"), and (2) it\n8c7858fed11c2d338b119058a26f95adb62b361d:aliases.qmd:git search test\n8c7858fed11c2d338b119058a26f95adb62b361d:aliases.qmd:should search the entire current Git project history for \"test\".\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:git branch test\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:git switch test\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:* test\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:The `*` shows the branch you are currently on (i.e. the branch to which `HEAD` points to). In our example, the project has two branches and we are on the branch `test`.\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:git diff main test\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:When you are happy with the changes you made on your test branch, you can merge it into `main`.\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:If you have only created new commits on the branch `test`, the merge is called a \"fast-forward merge\" because `main` and `test` have not diverged: it is simply a question of having `main` catch up to `test`.\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:git merge test\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:Then, usually, you delete the branch `test` as it has served its purpose:\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:git branch -d test\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:Alternatively, you can switch back to `test` and do the next bit of experimental work on it. This allows to keep `main` free of mishaps and bad developments.\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:Let's go back to our situation before we created the branch `test`:\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:This time, you create a branch called `test2`:\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:To merge your branch `test2` into `main`, a new commit is now required. Git will create this new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge:\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:git merge test2\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\n8c7858fed11c2d338b119058a26f95adb62b361d:branches.qmd:>>>>>>> test2\n8c7858fed11c2d338b119058a26f95adb62b361d:collab.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:First, let's look for the word `test` in the current version of the tracked files in the test repo:\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep test\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep --break test\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep --break --heading test\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep --break --heading -n test\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:Notice how the results for the file `src/test_manuel.py` involve functions. It would be very convenient to have the names of the functions in which `test` appears.\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep --break --heading -p test src/test_manuel.py\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:We added the argument `src/test_manuel.py` to limit the search to that file.\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:We can now see that the word `test` appears in the functions `test` and `main`.\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep -c test\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:`git grep` in fact searches for regular expressions. `test` is a regular expression matching `test`, but we can look for more complex patterns.\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:There were 2 lines matching `__` in `src/test_manuel.py` and we have indeed excluded them from our search.\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:Let's search for `test` in the tracked files 20 commits ago:\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep test HEAD~20\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:As you can see, the file `src/test_manuel.py` is not in the results. Either it didn't exist or it didn't have the word `test` at that commit.\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:Let's create a new (thus untracked) file with some content including the word `test`:\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:echo \"This is a test\" > newfile\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep -c test\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep -c --untracked test\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:Now, let's create a file in it that contains `test`:\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:echo \"And another test\" > data/file\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep -c test\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep -c --untracked test\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep -c --untracked --no-exclude-standard test\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:To search for `test` in all the commits, we thus run:\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all)\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all -2)\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all) | fzf --cycle -i -e\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all) |\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all) |\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all) |\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git search test\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:Let's look for `test` in the commit messages and limit the output to 3 commits:\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git log --grep=test -3\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git log --grep=\"test\" -3 --oneline\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git log --grep=\"test\" | fzf --cycle -i -e\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git log --grep=\"test\" --oneline |\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:Remember that `test` was present in the file `src/test_manuel.py`. If we want to see when the pattern was first created and then each time it was modified, we use the `-L` flag in this fashion:\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git log -L :test:src/test_manuel.py\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:Now, if we want to list all commits that created a change in the number of occurrences of `test` in our project, we run:\n8c7858fed11c2d338b119058a26f95adb62b361d:practice_repo/search.qmd:git log -S test --oneline\n8c7858fed11c2d338b119058a26f95adb62b361d:remotes.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n8c7858fed11c2d338b119058a26f95adb62b361d:undo.qmd:Here is a common scenario: you make a commit, then realize that you forgot to include some changes in that commit; or you aren't happy with the commit message; or both. You can edit your latest commit with the `--amend` flag:\n943f847124bafea17be87a1b624467122c3e1ab7:aliases.qmd:Now, let's build an alias for a more complex command: `git grep \"test\" $(git rev-list --all)`. This example\n943f847124bafea17be87a1b624467122c3e1ab7:aliases.qmd:from the *\"Searching a Git project\"* section below will search for the string \"test\" in all previous\n943f847124bafea17be87a1b624467122c3e1ab7:aliases.qmd:commits. There are two problems with this command: (1) it takes an argument (the string \"test\"), and (2) it\n943f847124bafea17be87a1b624467122c3e1ab7:aliases.qmd:git search test\n943f847124bafea17be87a1b624467122c3e1ab7:aliases.qmd:should search the entire current Git project history for \"test\".\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:git branch test\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:git switch test\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:* test\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:The `*` shows the branch you are currently on (i.e. the branch to which `HEAD` points to). In our example, the project has two branches and we are on the branch `test`.\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:git diff main test\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:When you are happy with the changes you made on your test branch, you can merge it into `main`.\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:If you have only created new commits on the branch `test`, the merge is called a \"fast-forward merge\" because `main` and `test` have not diverged: it is simply a question of having `main` catch up to `test`.\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:git merge test\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:Then, usually, you delete the branch `test` as it has served its purpose:\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:git branch -d test\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:Alternatively, you can switch back to `test` and do the next bit of experimental work on it. This allows to keep `main` free of mishaps and bad developments.\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:Let's go back to our situation before we created the branch `test`:\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:This time, you create a branch called `test2`:\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:To merge your branch `test2` into `main`, a new commit is now required. Git will create this new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge:\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:git merge test2\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\n943f847124bafea17be87a1b624467122c3e1ab7:branches.qmd:>>>>>>> test2\n943f847124bafea17be87a1b624467122c3e1ab7:collab.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:First, let's look for the word `test` in the current version of the tracked files in the test repo:\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep test\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep --break test\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep --break --heading test\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep --break --heading -n test\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:Notice how the results for the file `src/test_manuel.py` involve functions. It would be very convenient to have the names of the functions in which `test` appears.\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep --break --heading -p test src/test_manuel.py\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:We added the argument `src/test_manuel.py` to limit the search to that file.\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:We can now see that the word `test` appears in the functions `test` and `main`.\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep -c test\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:`git grep` in fact searches for regular expressions. `test` is a regular expression matching `test`, but we can look for more complex patterns.\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:There were 2 lines matching `__` in `src/test_manuel.py` and we have indeed excluded them from our search.\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:Let's search for `test` in the tracked files 20 commits ago:\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep test HEAD~20\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:As you can see, the file `src/test_manuel.py` is not in the results. Either it didn't exist or it didn't have the word `test` at that commit.\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:Let's create a new (thus untracked) file with some content including the word `test`:\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:echo \"This is a test\" > newfile\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep -c test\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep -c --untracked test\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:Now, let's create a file in it that contains `test`:\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:echo \"And another test\" > data/file\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep -c test\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep -c --untracked test\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep -c --untracked --no-exclude-standard test\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:To search for `test` in all the commits, we thus run:\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all)\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all -2)\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all) | fzf --cycle -i -e\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all) |\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all) |\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git grep \"test\" $(git rev-list --all) |\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git search test\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:Let's look for `test` in the commit messages and limit the output to 3 commits:\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git log --grep=test -3\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git log --grep=\"test\" -3 --oneline\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git log --grep=\"test\" | fzf --cycle -i -e\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git log --grep=\"test\" --oneline |\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:Remember that `test` was present in the file `src/test_manuel.py`. If we want to see when the pattern was first created and then each time it was modified, we use the `-L` flag in this fashion:\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git log -L :test:src/test_manuel.py\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:Now, if we want to list all commits that created a change in the number of occurrences of `test` in our project, we run:\n943f847124bafea17be87a1b624467122c3e1ab7:practice_repo/search.qmd:git log -S test --oneline\n943f847124bafea17be87a1b624467122c3e1ab7:remotes.qmd:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n943f847124bafea17be87a1b624467122c3e1ab7:undo.qmd:Here is a common scenario: you make a commit, then realize that you forgot to include some changes in that commit; or you aren't happy with the commit message; or both. You can edit your latest commit with the `--amend` flag:\n```\n\n\n:::\n:::\n\n\n:::{.info}\n\nIn combination with the fuzzy finder tool [fzf](https://github.com/junegunn/fzf), this can make finding a particular commit extremely easy.\n\nFor instance, the code below allows you to dynamically search in the result through incremental completion:\n\n```{.bash}\ngit grep \"test\" $(git rev-list --all) | fzf --cycle -i -e\n```\n\nOr even better, you can automatically copy the short form of the hash of the selected commit to clipboard so that you can use it with `git show`, `git checkout`, etc.:\n\n```{.bash}\ngit grep \"test\" $(git rev-list --all) |\n\tfzf --cycle -i -e |\n\tcut -c 1-7 |\n\txclip -r -selection clipboard\n```\n\n:::{.note}\n\nHere, I am using [xclip](https://github.com/astrand/xclip) to copy to the clipboard as I am on Linux. Depending on your OS you might need to use a different tool.\n\n:::\n\nOf course, you can create a function in your `.bashrc` file with such code so that you wouldn't have to type it each time:\n\n```{.bash}\ngrep_all_commits () {\n\tgit grep \"$1\" $(git rev-list --all) |\n\t\tfzf --cycle -i -e |\n\t\tcut -c 1-7 |\n\t\txclip -r -selection clipboard\n}\n```\n\nAlternatively, you can pass the result directly into whatever git command you want to use that commit for.\n\nHere is an example with `git show`:\n\n```{.bash}\ngit grep \"test\" $(git rev-list --all) |\n\tfzf --cycle -i -e |\n\tcut -c 1-7 |\n\tgit show\n```\n\nAnd if you wanted to get really fancy, you could go with:\n\n```{.bash}\ngit grep \"test\" $(git rev-list --all) |\n\tfzf --cycle -i -e --no-multi \\\n\t\t--ansi --preview=\"$_viewGitLogLine\" \\\n\t\t--header \"enter: view, C-c: copy hash\" \\\n\t\t--bind \"enter:execute:$_viewGitLogLine | less -R\" \\\n\t\t--bind \"ctrl-c:execute:$_gitLogLineToHash |\n\t\txclip -r -selection clipboard\"\n```\n\nWrapped in a function:\n\n```{.bash}\ngrep_all_commits_preview () {\n\tgit grep \"$1\" $(git rev-list --all) |\n\t\tfzf --cycle -i -e --no-multi \\\n\t\t\t--ansi --preview=\"$_viewGitLogLine\" \\\n\t\t\t--header \"enter: view, C-c: copy hash\" \\\n\t\t\t--bind \"enter:execute:$_viewGitLogLine |\n              less -R\" \\\n\t\t\t--bind \"ctrl-c:execute:$_gitLogLineToHash |\n\t\txclip -r -selection clipboard\"\n}\n```\n\nThis last function allows you to search through all the results in an incremental fashion while displaying a preview of the selected diff (the changes made at that particular commit). If you want to see more of the diff than the preview displays, press `<enter>` (then `q` to quit the pager), if you want to copy the hash of a commit, press `C-c` (Control + c).\n\nWith this function, you can now instantly get a preview of the changes made to any line containing an expression for any file, at any commit, and copy the hash of the selected commit. This is really powerful.\n\n:::\n\n### Aliases\n\nIf you don't want to type a series of flags all the time, you can configure [aliases for Git](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases). For instance, Alex Razoumov uses the alias `git search` for `git grep --break --heading -n -i`.\n\nLet's add to it the `-p` flag. Here is how you would set this alias:\n\n```{.bash}\ngit config --global alias.search 'grep --break --heading -n -i -p'\n```\n\n:::{.note}\n\nThis setting gets added to your main Git configuration file (on Linux, by default, at `~/.gitconfig`).\n\n:::\n\nFrom there on, you can use your alias with:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit search test\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\naliases.qmd\n43=git one    # very nicely formatted version of git log\n46:Now, let's build an alias for a more complex command: `git grep \"test\" $(git rev-list --all)`. This example\n47:from the *\"Searching a Git project\"* section below will search for the string \"test\" in all previous\n48:commits. There are two problems with this command: (1) it takes an argument (the string \"test\"), and (2) it\n63=will place the script into the file $HOME/bin/git-search and will make it executable. Now, running\n66:git search test\n69:should search the entire current Git project history for \"test\".\n\nbranches.qmd\n47=Example:\n52:git branch test\n65=Example:\n70:git switch test\n92=git branch\n97:* test\n100:The `*` shows the branch you are currently on (i.e. the branch to which `HEAD` points to). In our example, the project has two branches and we are on the branch `test`.\n104=You can use `git diff` to compare branches:\n107:git diff main test\n110=This shows all the lines that have been modified (added or deleted) between the commits both branches point to.\n114:When you are happy with the changes you made on your test branch, you can merge it into `main`.\n118:If you have only created new commits on the branch `test`, the merge is called a \"fast-forward merge\" because `main` and `test` have not diverged: it is simply a question of having `main` catch up to `test`.\n130=Then you do the fast-forward merge:\n133:git merge test\n138:Then, usually, you delete the branch `test` as it has served its purpose:\n141:git branch -d test\n146:Alternatively, you can switch back to `test` and do the next bit of experimental work on it. This allows to keep `main` free of mishaps and bad developments.\n150=If the branches have diverged (you created commits on both branches), the merge requires the creation of an additional commit called a \"merge commit\".\n152:Let's go back to our situation before we created the branch `test`:\n156:This time, you create a branch called `test2`:\n174=And you create commits from `main` too:\n180:To merge your branch `test2` into `main`, a new commit is now required. Git will create this new commit automatically. As long as there is no conflict, it is just as easy as a fast-forward merge:\n183:git merge test2\n188:After which, you can delete the (now useless) test branch (with `git branch -d test2`):\n212=Great sentence with some variations.\n213:>>>>>>> test2\n\ncollab.qmd\n37=To avoid having to type your password all the time, you should [set up SSH for your account](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh).\n50:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n\npractice_repo/search.qmd\n99=By default, `git grep` searches recursively through the tracked files in the working directory (that is, the current version of the tracked files).\n101:First, let's look for the word `test` in the current version of the tracked files in the test repo:\n104:git grep test\n107=Let's add blank lines between the results of each file for better readability:\n110:git grep --break test\n113=Let's also put the file names on separate lines:\n116:git grep --break --heading test\n119=We can display the line numbers for the results with the `-n` flag:\n122:git grep --break --heading -n test\n125:Notice how the results for the file `src/test_manuel.py` involve functions. It would be very convenient to have the names of the functions in which `test` appears.\n127=We can do this with the `-p` flag:\n130:git grep --break --heading -p test src/test_manuel.py\n135:We added the argument `src/test_manuel.py` to limit the search to that file.\n139:We can now see that the word `test` appears in the functions `test` and `main`.\n141=Now, instead of printing all the matching lines, let's print the number of matches per file:\n144:git grep -c test\n149:`git grep` in fact searches for regular expressions. `test` is a regular expression matching `test`, but we can look for more complex patterns.\n214=git grep -ce \".*_.*\" --and --not -e \"__\"\n217:There were 2 lines matching `__` in `src/test_manuel.py` and we have indeed excluded them from our search.\n223=So far, we have searched the current version of tracked files, but we can just as easily search files at any commit.\n225:Let's search for `test` in the tracked files 20 commits ago:\n228:git grep test HEAD~20\n233:As you can see, the file `src/test_manuel.py` is not in the results. Either it didn't exist or it didn't have the word `test` at that commit.\n237=If you want to search tracked files AND untracked files, you need to use the `--untracked` flag.\n239:Let's create a new (thus untracked) file with some content including the word `test`:\n242:echo \"This is a test\" > newfile\n245=Now compare the following:\n248:git grep -c test\n251=with:\n254:git grep -c --untracked test\n274=mkdir data\n277:Now, let's create a file in it that contains `test`:\n280:echo \"And another test\" > data/file\n283=We can rerun our previous two searches to verify that files excluded from version control are not searched:\n286:git grep -c test\n290:git grep -c --untracked test\n293=And now, let's try:\n296:git grep -c --untracked --no-exclude-standard test\n309=For this, we pass the expression `$(git rev-list --all)` in lieu of `<commit>`.\n313:To search for `test` in all the commits, we thus run:\n316:git grep \"test\" $(git rev-list --all)\n319=I am not running this command has it has a huge output. Instead, I will limit the search to the last two commits:\n322:git grep \"test\" $(git rev-list --all -2)\n329=For instance, the code below allows you to dynamically search in the result through incremental completion:\n332:git grep \"test\" $(git rev-list --all) | fzf --cycle -i -e\n335=Or even better, you can automatically copy the short form of the hash of the selected commit to clipboard so that you can use it with `git show`, `git checkout`, etc.:\n338:git grep \"test\" $(git rev-list --all) |\n363=Here is an example with `git show`:\n366:git grep \"test\" $(git rev-list --all) |\n372=And if you wanted to get really fancy, you could go with:\n375:git grep \"test\" $(git rev-list --all) |\n421=From there on, you can use your alias with:\n424:git search test\n457=To look for a pattern in all your commit messages, use `git log --grep=<pattern>`.\n459:Let's look for `test` in the commit messages and limit the output to 3 commits:\n462:git log --grep=test -3\n465=For a more compact output:\n468:git log --grep=\"test\" -3 --oneline\n473=Here too you can use this in combination to [fzf](https://github.com/junegunn/fzf) with for instance:\n476:git log --grep=\"test\" | fzf --cycle -i -e\n479=Or:\n482:git log --grep=\"test\" --oneline |\n495:Remember that `test` was present in the file `src/test_manuel.py`. If we want to see when the pattern was first created and then each time it was modified, we use the `-L` flag in this fashion:\n501=In our case:\n504:git log -L :test:src/test_manuel.py\n507=This is very useful if you want to see, for instance, changes made to a function in a script.\n511:Now, if we want to list all commits that created a change in the number of occurrences of `test` in our project, we run:\n514:git log -S test --oneline\n\nremotes.qmd\n30=To avoid having to type your password all the time, you should [set up SSH for your account](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh).\n43:Click on the `Code` green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.\n\nundo.qmd\n8=This section covers a few of the ways actions can be undone in Git.\n14:Here is a common scenario: you make a commit, then realize that you forgot to include some changes in that commit; or you aren't happy with the commit message; or both. You can edit your latest commit with the `--amend` flag:\n```\n\n\n:::\n:::\n\n\n## Searching logs\n\nThe second thing that can happen is that you are looking for some pattern in your version control logs.\n\n### git log\n\n`git log` allows to get information on commit logs.\n\nBy default, it outputs all the commits of the current branch.\n\nLet's show the logs of the last 3 commits:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit log -3\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncommit 8c7858fed11c2d338b119058a26f95adb62b361d\nAuthor: Marie-Helene Burle <marie.burle@westdri.ca>\nDate:   Tue Dec 5 13:47:43 2023 -0800\n\n    update site\n\ncommit 943f847124bafea17be87a1b624467122c3e1ab7\nAuthor: Marie-Helene Burle <marie.burle@westdri.ca>\nDate:   Tue Dec 5 13:47:40 2023 -0800\n\n    play with navbar settings in style\n\ncommit 680528d7d000a8c3ea8dc1ef7c69d2e8708d773a\nAuthor: Marie-Helene Burle <marie.burle@westdri.ca>\nDate:   Tue Dec 5 12:11:55 2023 -0800\n\n    update site\n```\n\n\n:::\n:::\n\n\nThe output can be customized thanks to a plethora of options.\n\nFor instance, here are the logs of the last 15 commits, in a graph, with one line per commit:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit log --graph --oneline -n 15\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n* 8c7858f update site\n* 943f847 play with navbar settings in style\n* 680528d update site\n* 54ad809 experiment changing right to tools (top right icons)\n* dd312ae update site\n* 4a5ef1e update site\n* 64c14a8 update Python files with renaming + new section\n* d0a6f1a update gitignore\n* f89698b add missing cross topic links + better formatting to existing ones\n* 063b9a2 draft files polars webinar and course\n* 7a1977a rename Python files with intro, ws, wb, etc.\n* 0ffee91 navbar: comment out r packages (not doing it this term) + add polars webinar and course + add missing cross topics links\n* 9c9e544 styles: add betterbox div\n* f763bc1 update site\n* 0441d87 move flux webinar to ai section (from julia)\n```\n\n\n:::\n:::\n\n\nBut `git log` has also flags that allow to search for patterns.\n\n### Searching commit messages\n\nOne of the reasons it is so important to write informative commit messages is that they are key to finding commits later on.\n\nTo look for a pattern in all your commit messages, use `git log --grep=<pattern>`.\n\nLet's look for `test` in the commit messages and limit the output to 3 commits:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit log --grep=test -3\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncommit 9187263f2d3d6f3a1c7cb21327650c96cf64a4c1\nAuthor: Marie-Helene Burle <marie.burle@westdri.ca>\nDate:   Wed Nov 29 14:25:34 2023 -0800\n\n    test on media too\n\ncommit 1092f0428a05d9cc92bc7fd49778ac2bb36cbfb8\nAuthor: Marie-Helene Burle <marie.burle@westdri.ca>\nDate:   Wed Nov 29 14:24:04 2023 -0800\n\n    new test\n\ncommit 6d2b3d5ed8982a2ab1e54458b9245c1bfcb8e2c2\nAuthor: Marie-Helene Burle <marie.burle@westdri.ca>\nDate:   Wed Nov 29 13:56:50 2023 -0800\n\n    test fixing flex basis on phone\n```\n\n\n:::\n:::\n\n\nFor a more compact output:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit log --grep=\"test\" -3 --oneline\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n9187263 test on media too\n1092f04 new test\n6d2b3d5 test fixing flex basis on phone\n```\n\n\n:::\n:::\n\n\n:::{.info}\n\nHere too you can use this in combination to [fzf](https://github.com/junegunn/fzf) with for instance:\n\n```{.bash}\ngit log --grep=\"test\" | fzf --cycle -i -e\n```\n\nOr:\n\n```{.bash}\ngit log --grep=\"test\" --oneline |\n\tfzf --cycle -i -e --no-multi \\\n        --ansi --preview=\"$_viewGitLogLine\" \\\n        --header \"enter: view, C-c: copy hash\" \\\n        --bind \"enter:execute:$_viewGitLogLine | less -R\" \\\n\t\t--bind \"ctrl-c:execute:$_gitLogLineToHash |\n        xclip -r -selection clipboard\"\n```\n\n:::\n\n### Changes made to a pattern\n\nRemember that `test` was present in the file `src/test_manuel.py`. If we want to see when the pattern was first created and then each time it was modified, we use the `-L` flag in this fashion:\n\n```{.bash}\ngit log -L :<pattern>:file\n```\n\nIn our case:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit log -L :test:src/test_manuel.py\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfatal: There is no path git/src/test_manuel.py in the commit\n```\n\n\n:::\n:::\n\n\nThis is very useful if you want to see, for instance, changes made to a function in a script.\n\n### Changes in number of occurrences of a pattern\n\nNow, if we want to list all commits that created a change in the number of occurrences of `test` in our project, we run:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit log -S test --oneline\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n4a5ef1e update site\nf763bc1 update site\n3b955ea update site\n27e1a09 update site\n3158ff1 update site\n7c132d5 update site\n141204e add flax abstract\n52152ef update JAX abstract after removing dl part with flax\n8f250d5 update site\n255b320 update freeze\nb61b6df update site\n99a77db finish jit draft\n57d5629 update site\nd7e0bcb finish jx numpy section\nd344ad8 update site\n858e542 JAX: big revamp course structure\n62c400b update site\n1b2e846 jx principles: add async dispatch\n8c8116e update site\n0908085 update site\n8f32ea6 update site\ncd78f15 udpate site\n4a003c5 update site\n4b3bec7 update site\ne8e7386 update site\nc545c68 update site\n0b628db finish hpc data partition chapter\n1a5c59f save a version of hpc_partition before modifying it\n08552b7 update site\nc7fccd5 update site\nd85a054 edit running htop on local machine\nb5fa9d3 update site\nacb1a4f rename and heavily modify the foreach chapter\n4536fc6 add pics\n7c318e7 f4 and f5: do testing on the cluster and remove quarto comment\n2aa72b9 update site\n22192db add example releasing memory\n08d8f89 add jx profiling page\na841844 improve hpc optimization\nbde35ec improve intro indexing\nf178043 jx why: replace gtrend embedded by img (keeps breaking), improve graph color, add abstract, add a bit of content\n78c3b7b add colors to jax intro diagrams\nfb5662b add a number of jx early drafts\nc54f6ed add new jx sections and update site using a virtual env for Python\ndbcfca2 add prefix for various sections in julia and r, prevent old and bk files from being executed/rendered, prevent webscraping files from being created\n43b79ab update site\n64ddfd7 small edits to hpc r before course\n9204ff3 add jax top intro\n09f64ae add info on profiling\n0cce737 move jax below PyTorch as it is a more advanced course\nf33135e update gcc and r module versions\n96c23b7 update site\n279f693 update site after full render\n084d522 embed resources\nae9b67b update site\n4e9c611 more improvements and little tweaks frameworks slides. Add more info\nd58ae46 update site\n445bb29 improvements frameworks slides\n2188205 update site\nfd17244 update formatting framework slides\n185e051 update site\nbead0b0 many tweaks of formatting\nc68c461 first very rough draft of frameworks slides\n09f1fe5 replace mermaid diagram in file system exercise with a graphviz one\nc6d4a35 filesystem: add exercise with a diagram\n2798c6a minor fix\n7a08552 update skl workflow\nac76eea update site\n8a50423 add sklearn workflow\nea800fd add an sklearn serie\nc7ac730 update site\nccf1a85 added content to aliases.qmd\nf17c8c9 added aliases.qmd\ndc7aae4 update site\n74a4e08 finish logs\n0ffe3e1 add logs draft\n2382725 add project.zip\nc8afe95 add downloadthis extension\nfe3f956 add abstract to documentation section\nbb14573 edits intro slides\n4057164 embed resources intro slides\nffa2c74 total revamp of git intro with simply link to slides\n2803201 update ml course\n043c6cf minor edits r course\n4888db4 edit sections on how to run r\ne16c946 update site\n44ceba8 update site\n0ece9c2 update site\n51b8534 replace old webscraping (Python) workshop to new version from DHSI\nfecc161 add webscraping old to gitignore\n4bb8faf little improvements web scraping R\nb784f17 update site\n91fa024 update site\n3bbe8ac add (bad) intro blurb to Python course\n3a3361a update site\nf589a66 rename the ext section into talks\n73dfeda improvements collections section\n6617a5b update site\n622631f fix and improve pandas section\n3eaacd1 update site\nf8c47d0 add index for new big section (talks)\ne29ae75 update site\n9e6a1b8 edit scripts\n0f60d0d finish redirections\n583f27c add filesystem section\na7c0855 gis slides: fix typo\nfec32a1 makie: add content in html below video\n954eb10 makie slides: minor improvements\n90adee8 more info in workflow section\n2250d59 minor edits workflow\n39f737d add workflow section\n2cd8c6f update navbar by moving data, model, and training in a single section\n5f33a18 make backup of autograd in autograd_old and start to make new version of autograd (not complete)\nfc853e1 some edits to training, but still not complete\n01f0f73 finish tensor section\n24b059f finalize parallel loops\ne540189 again many changes to parallel loops before changing yet again\n1428b5f many changes to parallel loops before making yet many new alternative changes\n6abe68e move copy on modify from basics to indexing and make it better\nfd1d140 update site\n0649af9 move concepts to reading and create a new intro section with slides\nba7938d update site\n2525e9e finish function section\nb71c761 finish control flow section\n7f22658 finalize plotting section\n302627a add plotting section\na477bd4 add publishing page with links to quarto workshop and webinar\na30a075 add data structures section\nc5a92ed add blurb basics\n68489a3 basics: change title + move a lot of content into section specific pages\n58e586e packages: add blurb\n848f436 update navbar\nb728404 minor edits bash intro\n075dd52 update site\na519d85 create wildcards section\n42f51d4 rename file from search to find\n7df872b add videos: 4 workshops for HSS series + staff to staff webinar + regular webinar\nb2e565c update site\n590bb50 quarto: add installation links\neca80cd make slides less wordy based on the s2s webinar given on quarto\n43d1ea7 update site\nf424bba add slides for quarto staff to staff webinar\n1f33a77 update site\n99c7e56 add new minor optimization\ndd71a56 turn the parallel loop lesson from the webinar version to the workshop version using batch jobs\n07871c1 add 2nd optimization by louis\n55e7c61 update site\nabb1ced update site\nf758b8c update site\n61f3b8e add function suggested by workshop participant\n649f825 update site\nbafb769 remove profiler from performance section\n176e5ba finish optimization section\n3d42df1 add section on memory\n1ba9cc4 important commit: remove \"avoid type conversions\" in R hpc optimizations section as this doesn't change the timing consistently\nb64856d first draft optimizations\na563fa9 re-render site\n95086e8 update site\n473d722 many edits r resource page\ne0ab5c7 tweak all heading levels\n934f9a8 update site\n37cef29 remove front page for workshops and webinars + add logo image for front page for intro and hpc courses + re-shuffle a few sections + move most ml topics into a course + minor edits (abstract, etc.)\nfc82cf5 update site\n3bcf2df rename first git section of git course to match structure of other topics\n628525d fix how to download bash data\n952d027 create front pages for Bash and cards on main topic page\nc6ea3e0 add buttons to r main page\nf3e7069 several improvements to web scraping\nc5258d5 split parallel r section into 3 section and add improvements and edits\n046b607 minor fixes hss slides\ncda4fc9 add missing image and very minor edits ml hss slides\nb9f8b5f embed resources intro hss ml slides\n898cdd9 update site\n4c07296 add intro ml for hss slides\n38a825d many formatting edits all reveal.js presentations\n8688a71 replace workshop by webinar in all webinars\n20224c1 update site\n50fcdc7 finish script section (shortened. Need to add more content)\n5ef06d8 finish function section\nbf2653f move control flow, script, and search to molecules folder\nbad3da3 transfer: add globus and abstract\ne7412c3 finish redirections and move it to the molecules repo to run code\n23bed49 add html_children\n9ff42fb add html section\n9c2f06e add delay at each iteration to reduce risk of being blocked\n246c64d web scraping: minor edits and improvements\n0d08979 add explanations and comments web scraping\n4599ed3 disable cache for webscraping as it conflicts with rvest\n2703353 minor edit nav titles\n5cd6930 change rstudio server time to 1.5h and remove jh option image as it is not the right one\n8159f9b minor edits: add some explanations, improve code a bit\nb78b4b6 add first decent draft webscraping with more or less all code and some explanations\n1c25103 add alliance wiki page for r in intro hss resources\ncf85139 first draft bash redirections and pipes\n03b9e33 first draft bash script\n20a392b add a little content to intro r\n5c3cfb0 add 2 new sections (not covered by alex)\nfb69b01 add draft content to intro hss r\n6c6d0cf add bash empty chapters for online course\nb900e68 intro hpc slides by re-embeding resources\n66bca7e fix typo git search\nd72b170 finish hpc r slides\n1f14f6b open link to hpc slides\n95f2074 finish control flow chapter\n12d248d add many little things in list and make a correction for strings\nc9d2e1d update site\na65bd05 remove out of the package section everything that can live elsewhere\n173d128 move content jh instructions to a new chapter on running Python\nb259e52 remove alex acknowledgement\nb4b87e6 minor edit git front page\nbb2c6fe add acknowledgement of alex content\ndd132ab supress redundancy between basic and functions\n6f2f0ae finish list section (Python)\ndb33cd1 finish basic chapter (Python)\n7ac5744 first draft collections\n04db2fc edit basics\nfd677ff add first draft Python intro hpc copied from Julia. Still needs lots of work\n7464d14 add first draft Python functions (not far from ready)\n1ccb156 add first draft web scraping in Python\n663e401 yml: uncomment Python tab and add first two Python workshops\n4450be7 add alias\n479f1aa many small edits search + add fzf example for searching the logs\n2556ab4 update site\nc53e0f5 add a big info block with more fancy searches using fzf\n1752db6 first final version of search workshop\nfab1000 minor updates hpc r slides\n534a0da first draft hpc in r slides\n2f647bd remove unnecessary jupyter: python3 in 2 ml revealjs\n919d206 git lessons: adjust img new names + fixes, corrections, improvements\n7a3d5b1 rename all git diagram img in some sensible order\n16ca4f6 finish branches and add it to the nav\n2725f41 improve front page image\n115aa01 edits many julia files: remove unnecessary jupyter: julia-1.8, small additions, small fixes, small improvements\n9db0e74 add preliminary draft of branches (git) and commented out nav entry\n4ca06a6 add distributed (julia)\na181d66 add symlink for search.qmd which is in the nested git repo\nbdb30cb edit control flow\nda7332f add remotes\n774a9d4 rename git main workshop\n8f8eb03 add tags and its img\nc1d8385 add multithreading\na31c5aa edits, additions, fixes\n2ba9708 remove from basics elements moved to other files\n8472020 remove from intro hpc everything that is intro julia (move it in various other sections)\na8f0980 turn arrays to collections and add content\n0cc0c59 add julia functions\n1d65319 add julia control flow\n5ec2bcc add julia basics\n2249467 add julia types\n4b09f00 add julia performance\n5581390 add non interactive julia\nf9dd47c add julia arrays\nea059d5 edit paths and remove shadow img three trees\n38e370f add undo\n29eb1ac add tools\n81fa864 add stashing\n73ee1b1 add ignore\nd8970df add three trees of git\n8148a86 move all top levels to h2 instead of h1 following chat with quarto developpers\n4637b68 julia intro: change header levels + reformat all code blocks\nc072c6c add packages\n1601205 add r resources\n3e81b34 add contrib workshop\n5cc2efa move section about collaboration through git to new workshop\n96108ed uncomment grid section with wider body width\ncddb972 add ml hpc.qmd\n6fa885a add quarto link to about\n08e488a make all page start with h1 instead of h2 + add author where missing + move intro to def block\nf09e60b update site\n9f97ec8 add 5 new ml workshops\n50a465a add note about revealjs presentations slow to load in all links\n2a6a3fa improvement to mnist: small additions + run code\ne205633 add choosing frameworks\n2e28113 add concept workshop in ml\n68183ee add autograd to workshops\n8e6c61c add mnist to workshops\ne8b2166 add intro scripting workshop\n6e5faa1 add julia intro hpc workshop\n2ab3deb add julia covid plotting\n7e19653 add torchtensor slides\n515a4dd fix R logo (not good on light bg) and add logos for all other sections\n6a781ea rename ml intro hss\n0649618 finish formatting upscaling slides\n44bc853 reduce high res pics upscaling because GitHub's limit is reach with revealjs with self embedded option\n7989e1a add gis mapping slides\n0454b61 add upscaling slides\nd9e4e10 turn link to slides into buttons\n8235653 add _site to vc to solve publish issue on GitHub\neb7f3b1 delete publish.yml for GitHub actions\n8278145 update freeze\nf7f08ca update freeze\n7417494 update freeze\nccc30a7 update freeze\n9ef79da update freeze\nf23a412 remove in code lengthy comment and add note instead\nb75bf0d add custom title-slide.html with partial template for revealjs title slide\n16ebe72 re-add makie slides *after* having rebuilt the site with freeze true\n348b7ac remove makie slides\nf131770 makie webinar: re-add slides\n3653918 remove makie slides for now for gh actions to build\necda9e1 update freeze with julia makie slides\nff2ec56 add makie slides\n6d40658 front page: switch buttons to cards and readjust content accordingly\nfc20339 update freeze\n4ceac57 add outputs of quarto demos so as not to have to run them all the time (annoying with latex). works with blocking rendering of that dir in yml\n0bbc311 update freeze with computations from r the basics\n71c4ab6 add r the basics from autumn school 22 to r workshops\nb2e7370 add all quarto example files\n358bfb8 add quarto webinar\n818cb8c first commit with _freeze (for the quarto examples)\n8b21abf add all ml webinars\nfeafdc5 front page: finalize title and add aside about main site\n13dad00 big changes to about page\n3dd050c add publish.yml file for GitHub actions\nb6fc959 add 2022_git_sfu.qmd\n```\n\n\n:::\n:::\n\n\nThis can be useful to identify the commit you need.\n\n## TL;DR\n\nHere are the search functions you are the most likely to use:\n\n- Search for a pattern in the current version of your tracked files: \n\n```{.bash}\ngit grep <pattern>\n```\n\n- Search for a pattern in your files at a certain commit:\n\n```{.bash}\ngit grep <pattern> <commit>\n```\n\n- Search for a pattern in your files in all the commits:\n\n```{.bash}\ngit grep <pattern> $(git rev-list --all)\n```\n\n- Search for a pattern in your commit messages:\n\n```{.bash}\ngit log --grep=<pattern>\n```\n\nNow you should be able to find pretty much anything in your projects and their histories.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}