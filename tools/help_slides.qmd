---
title: "So, you are stuck ... now what?"
subtitle: "Tips & tricks to get help in any programming language"
author: Marie-Hélène Burle
date: November 13, 2020
date-format: long
frontlogo: /img/sfudrac.png
execute:
  error: true
  echo: true
format:
  revealjs:
    embed-resources: true
    theme: [default, ../revealjs.scss]
    logo: /img/sfudrac_logo.png
    highlight-style: monokai
    code-line-numbers: false
    code-overflow: wrap
    template-partials:
      - ../title-slide.html
    pointer:
      color: "#b5111b"
      pointerSize: 32
    link-external-newwindow: true
    footer: <a href="help.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgb(153, 153, 153)" class="bi bi-arrow-90deg-up" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z"/></svg>&nbsp;Back to workshop page</a>
revealjs-plugins:
  - pointer
---

# When you are stuck

## When you are stuck
<br>

. . .

*First,* **look** for information that is already out there

. . .

*Then,* **ask** for help

## Look for information
<br>

1. Read carefully any **error message**
2. Read the **documentation** (local or online)
3. Make sure you have **up-to-date versions**
4. **Google** (using carefully selected keywords or the error message)
5. Look for **open issues** & **bug reports**

## Error messages
<br>

. . .

### Read them!

. . .

Familiarise yourself with the error types in the languages you use\

:::{.example}

Example: Python's **syntax errors** vs **exceptions**

:::

. . .

Warnings ≠ errors

. . .

Look for bits you understand (don't get put off by what you don't understand)

. . .

Identify the locations of the errors to go investigate that part of the code


## Documentation
<br>

. . .

**You need to [find]{.emph} it**

. . .

**You need to [understand]{.emph} it**

## Finding documentation

. . .

**Online:**

Take the time to look for the official documentation & other high quality sources for the languages & tools you use.

. . .

:::{.example}

*Examples:*

Python: [Reference manual](https://docs.python.org/3/reference/index.html), [Standard library manual](https://docs.python.org/3/library/index.html), [Tutorial](https://docs.python.org/3/tutorial/index.html) \
NumPy: [Tutorial](https://numpy.org/devdocs/user/tutorials_index.html) \
R: [Open source book "R for Data Science"](https://r4ds.had.co.nz/index.html), [Open source book "Advanced R"](https://adv-r.hadley.nz/) \
Julia: [Documentation](https://docs.julialang.org/en/v1/) \
Bash: [Manual](https://www.gnu.org/software/bash/manual/html_node/index.html) \
Git: [Manual](https://git-scm.com/docs), [Open source book](https://git-scm.com/book/en/v2)

:::

. . .

**In the program itself**

. . .

**Understanding the documentation**

## Up-to-date versions
<br>

. . .

**First, you need to know what needs to be updated.**

. . .

Keeping a system up to date includes updating:

- the OS
- the program
- (any potential IDE)
- packages

. . .

**Then, you need to update regularly.**

## Google
<br>

Google's algorithms are great at guessing what we are looking for.

. . .

*But* there is a frequency problem:

Searches relating to programming-specific questions represent too small a fraction of the overall searches for results to be relevant unless you use **key vocabulary**.

. . .

Be precise.

. . .

Learn the vocabulary of your language/tool to know what to search for.

## Open issues & bug reports
<br>

If the tool you are using is open source, look for issues matching your problem in the source repository (e.g. on GitHub or GitLab).

## What if the answer isn't out there?
<br>

When everything has failed & you have to ask for help, you need to know:

. . .

- [Where]{.emph} to ask

. . .

- [How]{.emph} to ask

# [Where]{.emph} to ask

## [Where]{.emph} to ask
<br>

### Q&A sites

Mostly, **[Stack Overflow](https://en.wikipedia.org/wiki/Stack_Overflow)** & **[the Stack Exchange network](https://en.wikipedia.org/wiki/Stack_Exchange)**.

Co-founded in 2008 & 2009 by [Jeff Atwood](https://en.wikipedia.org/wiki/Jeff_Atwood) & [Joel Spolsky](https://en.wikipedia.org/wiki/Joel_Spolsky).
<br><br>

### Forums

Mostly, **[Discourse](https://en.wikipedia.org/wiki/Discourse_(software))**.

Co-founded in 2013 by [Jeff Atwood](https://en.wikipedia.org/wiki/Jeff_Atwood), Robin Ward & Sam Saffron.

A few other older forums.

## [Where]{.emph} to ask
<br>

**Which one to choose is a matter of personal preference.**

Possible considerations:

- Some niche topics have very active communities on Discourse
- Stack Overflow & some older forums can be intimidating with higher expectations for the questions quality & a more direct handling of mistakes
- For conversations, advice, or multiple step questions, go to Discourse
- Stack Overflow has over 13 million users
- Stack Overflow & co have a very efficient approach

## Stack Overflow & co
<br>

Pick the best site to ask your question.

A few of the Stack Exchange network sites:

[Stack Overflow](https://stackoverflow.com/): programming \
[Super User](https://superuser.com): computer hardware & software \
[Unix & Linux](https://unix.stackexchange.com/): *nix OS
[TEX](https://tex.stackexchange.com/): TeX/LaTeX \
[Cross Validated](https://stats.stackexchange.com/): stats; data mining, collecting, analysis & visualization; ML \
[Data Science](https://datascience.stackexchange.com/): focus on implementation & processes \
[Open Data](https://opendata.stackexchange.com/) \
[GIS](https://gis.stackexchange.com/)

# [How]{.emph} to ask

## [How]{.emph} to ask

. . .

**Familiarize yourself with the site by reading posts**

. . .

Read the "Tour" page (SO/SE) or take the "New user tutorial" (Discourse)

. . .

Make sure the question has not already been asked

. . .

**Format the question properly**

. . .

**Give a minimum reproducible example**

. . .

**Do not share sensitive data**

. . .

**Show your attempts**

. . .

Avoid cross-posting. If you really have to, make sure to cross-reference

## [How]{.emph} to ask: [SO & co]{.emph}

. . .

**Don't ask opinion-based questions**

. . .

**Don't ask for package, tool, or service recommendations**

. . .

**Don't ask more than one question in a single post**

. . .

Check your spelling, grammar, punctuation, capitalized sentences, etc.

. . .

Avoid greetings, signatures, thank-yous; keep it to the point

. . .

Avoid apologies about being a beginner, this being your first post, the question being stupid, etc: do the best you can & skip the personal, self-judgmental & irrelevant bits

## Formatting your question

Nowadays, most sites (including Stack Overflow & Discourse) allow [markdown](https://en.wikipedia.org/wiki/Markdown) rendering.

Some older forums implement other markup languages (e.g. [BBCode](https://en.wikipedia.org/wiki/BBCode)).

The information is always easy to find. **Spend the time to format your question properly.** People will be much less inclined to help you if you don't show any effort & if your question is a nightmare to read.

## Example of a typical downvoted question
<br>

```
howdy!!
i am new to R sorry for a very silly question.i looked all oever the itnernwet, but i dint find
anyanswer. i tried to use ggplot i get the error: Error in loadNamespace(i, c(lib.loc, .libPaths()),
versionCheck = vI[[i]]) : there is no package called 'stringi'
thank youu very much!!!!!
marie
```

<div style="font-size: 20px; margin: 25px 0 12px 1px; text-align: left; color: #802b00">[Out]</div>

![](img/so_question_pre.png)

## Same question, fixed

````
When I try to load the package `ggplot2` with:

```{{r}}
library(ggplot2)
```
I get the error:

> Error in loadNamespace(i, c(lib.loc, .libPaths()), versionCheck = vI[[i]]) :
there is no package called 'stringi'

What am I doing wrong?
````

![](img/so_question_post.png)

## Still not good enough
<br>

This question is actually a duplicate of [a question asked](https://stackoverflow.com/q/30983013/9210961) which is itself a duplicate of [another question](https://stackoverflow.com/q/31038636/9210961).

## Creating a minimal reproducible example
<br>

There are great posts on how to create a good minimal reproducible example. In particular:

[How to create a Minimal, Reproducible Example](https://stackoverflow.com/help/minimal-reproducible-example)
<br><br>
For R (but concepts apply to any language):

[How to make a great R reproducible example](https://stackoverflow.com/q/5963269/9210961) \
[What's a reproducible example (`reprex`) and how do I do one?](https://community.rstudio.com/t/faq-whats-a-reproducible-example-reprex-and-how-do-i-do-one/5219?u=prosoitos)

## Creating a minimal reproducible example
<br>

- Load all necessary packages
- Load or create necessary data
- Simplify the data & the code as much as possible while still reproducing the problem
- Use simple variable names

## Data for your example: your own data
<br>

Do not upload data somewhere on the web to be downloaded.

Make sure that the data is anonymised.

Don't keep more variables & more data points than are necessary to reproduce the problem.

Simplify the variable names.

In R, you can use functions such as `dput()` to turn your reduced, anonymised data into text that is easy to copy/paste & can then be used to recreate the data.

## Data for your example: create a toy dataset
<br>

You can also create a toy dataset.

Functions that create random data, series, or repetitions are very useful here.

## Data for your example: pre-packaged datasets
<br>

Some languages/packages come with pre-packaged datasets. If your code involves such languages/packages, you can make use of these datasets to create your reproducible example.

For example, R comes with many datasets directly available, including `iris`, `mtcars`, `trees`, `airquality`. In the R console, try:
<br>

```{.r}
?iris
?mtcars
```

## Additional considerations
<br>

Even if you always find answers to your questions without having to post yourself, **consider signing up** to these sites:

- It allows you to upvote (SO/SE) or like (Discourse) the questions & answers that help you—and why not thank in this fashion those that are making your life easier?

- It makes you a part of these communities.

- Once you are signed up, maybe you will start being more involved & contribute with questions & answers of your own.

## A last word
<br>

While it takes some work to ask a good question, do not let this discourage you from posting on Stack Overflow: if you ask a good question, you will get many great answers.

You will learn in the process of developing your question (you may actually find the answer in that process) & you will learn from the answers.

It is forth the effort.

[Here](https://stackoverflow.com/help/how-to-ask) is the Stack Overflow documentation on how to ask a good question.
