---
title: Quarto as a great teaching tool
author: Marie-Hélène Burle
date: April 3, 2023
date-format: long
frontlogo: /img/sfudrac.png
execute:
  error: true
  echo: true
format:
  revealjs:
    embed-resources: true
    theme: [default, ../revealjs.scss]
    logo: /img/sfudrac_logo.png
    highlight-style: monokai
    code-line-numbers: false
    template-partials:
      - ../title-slide.html
    pointer:
      color: "#b5111b"
      pointerSize: 32
    link-external-newwindow: true
revealjs-plugins:
  - pointer
---

# Markup & markdown

## Markup languages

- Control the formatting of text documents
- Powerful but the unrendered text is visually cluttered and hard to read

## Markup languages

- Control the formatting of text documents
- Powerful but the unrendered text is visually cluttered and hard to read

:::{.example}

Example: Tex—often with macro package LaTeX—to create pdfs

:::

```{.latex}
\documentclass{article}
\title{My title}
\author{My name}
\usepackage{datetime}
\newdate{date}{24}{11}{2022}
\date{\displaydate{date}}
\begin{document}
 \maketitle
 \section{First section}
 Some text in the first section.
\end{document}
```

---

## Markup languages

- Control the formatting of text documents
- Powerful but the unrendered text is visually cluttered and hard to read

:::{.example}

Example: HTML—often with css/scss files—to create webpages

:::

```{.html}
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>My title</title>
	<address class="author">My name</address>
	<input type="date" value="2022-11-24" />
  </head>
  <h1>First section</h1>
  <body>
	Some text in the first section.
  </body>
</html>
```

## Markdown

- Removes the visual clutter and makes texts readable prior to rendering
- Created in 2004
- By now quasi-ubiquitous
- Initially created for webpages
- Raw HTML can be inserted when easy syntax falls short

. . .

### Pandoc's extended Markdown

[Pandoc](https://pandoc.org/) (free and open-source markup formats converter) supports [an extended Markdown syntax](https://quarto.org/docs/authoring/markdown-basics.html) with functionality for figures, tables, callout blocks, LaTeX equations, citations...

Remains as readable as basic Markdown, but can be rendered in any format (pdf, books, entire websites, Word documents...)

---

## Markdown

- Removes the visual clutter and makes texts readable prior to rendering
- Created in 2004
- By now quasi-ubiquitous
- Initially created for webpages
- Raw HTML can be inserted when easy syntax falls short

:::{.example}

Previous example using Pandoc's Markdown:

:::

```{.markdown}
---
title: My title
author: My name
date: 2022-11-24
---
# First section
Some text in the first section.
```

# Literate programming

---

<br><br><br><br><br>
[Literate programming](https://en.wikipedia.org/wiki/Literate_programming) is a methodology that combines snippets of code and written text.

First introduced in 1984, this approach to the creation of documents has truly exploded in popularity in recent years thanks to the development of new tools such as [R Markdown](https://r4ds.had.co.nz/r-markdown.html) and, later, [Jupyter notebooks](https://jupyter.org/)

# Quarto

[Website](https://quarto.org/)\
[Repo](https://github.com/quarto-dev/quarto-cli)\
[Documentation index](https://quarto.org/docs/guide/)

## How it works

Code blocks are executed by Jupyter (Python or Julia) or knitr (R), then pandoc renders the document into any format

. . .

#### Julia/Python:

![](img/qmd_jupyter.png){fig-alt="noshadow" width="70%"}
[From [Quarto documentation](https://quarto.org/)]{.caption}

#### R:

![](img/qmd_knitr.png){fig-alt="noshadow" width="70%"}
[From [Quarto documentation](https://quarto.org/)]{.caption}

---

## How it works

Code blocks are executed by Jupyter (Python or Julia) or knitr (R), then pandoc renders the document into any format

Can be used from `.qmd` text files or directly from RStudio or Jupyter notebooks.


## Supported languages

Syntax highlighting in pretty much any language

. . .

Executable code blocks in Python, R, Julia, Observable JS

. . .

Output formats

```
- HTML
- PDF
- MS Word
- OpenOffice
- ePub
- Revealjs
- PowerPoint
- Beamer
- GitHub Markdown
- CommonMark
- Hugo
- Docusaurus
- Markua
- MediaWiki
- DokuWiki
- ZimWiki
- Jira Wiki
- XWiki
- JATS
- Jupyter
- ConTeXt
- RTF
- reST
- AsciiDoc
- Org-Mode
- Muse
- GNU
- Groff
```

## Document structure & syntax: front matter

Written in YAML \
Sets the options for the document. Let's see a few examples.

. . .

:::{.example}

Can be very basic:

:::

```{.yaml}
---
title: "My title"
author: "My name"
format: html
---
```

---

## Document structure & syntax: front matter

Written in YAML \
Sets the options for the document. Let's see a few examples.

:::{.example}

Or more sophisticated:

:::

```{.yaml}
---
title: "Some title"
subtitle: "Some subtitle"
institute: "Simon Fraser University"
date: "2022-11-24"
execute:
  error: true
  echo: true
format:
  revealjs:
    theme: [default, custom.scss]
    highlight-style: monokai
    code-line-numbers: false
    embed-resources: true
---
```

## Document structure & syntax: text

Written in [Pandoc's extended Markdown](https://quarto.org/docs/authoring/markdown-basics.html)

## Document structure & syntax: code blocks

Syntax highlighting only:

```{{.language}}
code
```

. . .

Syntax highlighting and code execution:

```{{language}}
code
```

. . .

Options can be added to individual blocks:

```{{language}}
#| option: value

code
```

## Rendering

Two commands:

```{.bash}
quarto render file.qmd     # Renders the document
quarto preview file.qmd	 # Displays a live preview
```

# Quarto as a teaching tool

## General considerations

- Extremely well documented
- Solid team behind the work
- Free and open source
- Uses only well established and well tested tools

## Webpages/websites

- Fast, easy, and clean
- Sites work on screens of any size out of the box (uses [Bootstrap 5](https://getbootstrap.com/))
- Can be customized with CSS/SCSS, but good out of the box
- Code blocks can have a little copy button
- Site/pages can be hosted anywhere easily

## Advantages of code execution

- People can see the output without running the code
- Forces to test every bit of code
- If the code broke when giving an old workshop, prevents the embarrassment of discovering it in the middle of a live demo
- No need for a complex system linking code scripts with teaching documents

# Demo
