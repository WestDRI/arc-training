---
title: "The new R Markdown:"
subtitle: Authoring dynamic scientific documents with Quarto
author: Marie-Hélène Burle
date: April 11, 2023
date-format: long
frontlogo: /img/sfudrac.png
execute:
  error: true
  echo: true
format:
  revealjs:
    embed-resources: true
    theme: [default, ../revealjs.scss]
    logo: /img/sfudrac_logo.png
    highlight-style: monokai
    code-line-numbers: false
    code-overflow: wrap
    template-partials:
      - ../title-slide.html
    pointer:
      color: "#b5111b"
      pointerSize: 32
    link-external-newwindow: true
    footer: <a href="quarto_webinar.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgb(153, 153, 153)" class="bi bi-arrow-90deg-up" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z"/></svg>&nbsp;Back to webinar page</a>
revealjs-plugins:
  - pointer
---

# Markup & Markdown

## Markup languages

Markup languages control the formatting of text documents. They are powerful but complex and the raw text (before it is rendered into its formatted version) is visually cluttered and hard to read.

Examples of markup languages include LaTeX and HTML.

---

### Tex is used to create pdfs

:::{.note}

Tex is often used with the macro package LaTeX.

:::

:::{.example}

Example LaTeX:

:::

```{.latex}
\documentclass{article}
\title{My title}
\author{My name}
\usepackage{datetime}
\newdate{date}{24}{11}{2022}
\date{\displaydate{date}}
\begin{document}
 \maketitle
 \section{First section}
 Some text in the first section.
\end{document}
```

---

### HTML is used to create webpages

:::{.note}

HTML is often used with css or scss files to customize the format.

:::

:::{.example}

Example HTML:

:::

```{.html}
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>My title</title>
	<address class="author">My name</address>
	<input type="date" value="2022-11-24" />
  </head>
  <h1>First section</h1>
  <body>
	Some text in the first section.
  </body>
</html>
```

## Markdown

A number of minimalist markup languages intend to remove all the visual clutter and complexity to create raw texts that are readable prior to rendering. [Markdown](https://en.wikipedia.org/wiki/Markdown) (note the pun with "markup"), created in 2004, is the most popular of them. Due to its simplicity, it has become quasi-ubiquitous. Many implementations exist which add a varying number of features (as you can imagine, a very simple markup language is also fairly limited).

Markdown files are simply text files and they use the `.md` extension.

---

### Basic Markdown syntax

In its [basic form](https://daringfireball.net/projects/markdown/), Markdown is mostly used to create webpages. Conveniently, raw HTML can be included whenever the limited markdown syntax isn't sufficient.

[Here](https://www.markdownguide.org/basic-syntax/) is an overview of the Markdown syntax supported by many applications.

---

### Pandoc and its extended Markdown syntax

While the basic syntax is good enough for HTML outputs, it is very limited for other formats.

[Pandoc](https://pandoc.org/) is a free and open-source markup format converter. Pandoc supports [an extended Markdown syntax](https://quarto.org/docs/authoring/markdown-basics.html) with functionality for figures, tables, callout blocks, LaTeX mathematical equations, citations, and YAML metadata blocks. In short, everything needed for the creation of scientific documents.

Such documents remain as readable as basic Markdown documents (thus respecting the Markdown philosophy), but they can now be rendered in sophisticated pdf, books, entire websites, Word documents, etc.

And of course, as such documents remain text files, you can put them under version control with [Git](https://git-scm.com/).

---

### Pandoc and its extended Markdown syntax

:::{.example}

Previous example using Pandoc's Markdown:

:::

```{.markdown}
---
title: My title
author: My name
date: 2022-11-24
---
# First section
Some text in the first section.
```

# Literate programming

[Literate programming](https://en.wikipedia.org/wiki/Literate_programming) is a methodology that combines snippets of code and written text. While first introduced in 1984, this approach to the creation of documents has truly exploded in popularity in recent years thanks to the development of new tools such as [R Markdown](https://r4ds.had.co.nz/r-markdown.html) and, later, [Jupyter notebooks](https://jupyter.org/).

# Quarto

# How it works

---

Quarto files are turned into Markdown by Jupyter (for Python or Julia) or knitr (for R), then pandoc turns the Markdown document into the output of your choice.

#### Julia/Python:

![](img/qmd_jupyter.png){fig-alt="noshadow" width="70%"}
[From [Quarto documentation](https://quarto.org/)]{.caption}

#### R:

![](img/qmd_knitr.png){fig-alt="noshadow" width="70%"}
[From [Quarto documentation](https://quarto.org/)]{.caption}

---

Quarto files use the extension `.qmd`.

You can use Quarto directly from RStudio or a Jupyter notebook.

#### Using Quarto directly from a Jupyter notebook:

![](img/ipynb.png){fig-alt="noshadow" width="65%"}
[From [Quarto documentation](https://quarto.org/)]{.caption}

In this webinar, I will simply use a text editor.

## Supported languages

Syntax highlighting in pretty much any language.

Executable code blocks in:

- Python
- R
- Julia
- Observable JS

## Output formats

```
- HTML
- PDF
- MS Word
- OpenOffice
- ePub
- Revealjs
- PowerPoint
- Beamer
- GitHub Markdown
- CommonMark
- Hugo
- Docusaurus
- Markua
- MediaWiki
- DokuWiki
- ZimWiki
- Jira Wiki
- XWiki
- JATS
- Jupyter
- ConTeXt
- RTF
- reST
- AsciiDoc
- Org-Mode
- Muse
- GNU
- Groff
```

This training website is actually built with Quarto!

# Document structure & syntax

## Front matter

Written in YAML. Sets the options for the document. Let's see a few examples.

:::{.note}

HTML output:

:::

```{.yaml}
---
title: "My title"
author: "My name"
format: html
---
```

:::{.note}

HTML output with a few options:

:::

```{.yaml}
---
title: "My title"
author: "My name"
format:
  html:
    toc: true
    css: <my_file>.css
---
```

---

:::{.note}

MS Word output with Python code blocks:

:::

```{.yaml}
---
title: "My title"
author: "My name"
format: docx
jupyter: python3
---
```

---

:::{.note}

revealjs output with some options and Julia code blocks:

:::

```{.yaml}
---
title: "Some title"
subtitle: "Some subtitle"
institute: "Simon Fraser University"
date: "2022-11-24"
execute:
  error: true
  echo: true
format:
  revealjs:
    theme: [default, custom.scss]
    highlight-style: monokai
    code-line-numbers: false
    embed-resources: true
jupyter: julia-1.8
---
```

See [the Quarto documentation](https://quarto.org/docs/guide/) for an exhaustive list of options for all formats.

## Written sections

Written sections are written in [Pandoc's extended Markdown](https://quarto.org/docs/authoring/markdown-basics.html).

## Code blocks

If all you want is **syntax highlighting** of the code blocks, use this syntax:

```{{.language}}
<some code>
```

If you want **syntax highlighting** of the blocks and **for the code to run**, use instead:

```{{language}}
<some code>
```

In addition, options can be added to individual code blocks:

```{{language}}
#| <some option>: <some option value>

<some code>
```

## Rendering

There are only two commands you need to know.

In a terminal, simply run either of:

```{.bash}
quarto render <file>.qmd     # Render the document
quarto preview <file>.qmd	 # Display a live preview
```

# Examples

You can find several examples [in our previous workshop on Quarto](https://mint.westdri.ca/tools/quarto.html){target="_blank"}

# Live demo
