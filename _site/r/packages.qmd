---
title: Packages
author: Marie-Hélène Burle
---

:::{.def}

Packages are a set of functions, constants, and/or data developed by the community that add functionality to R.

In this section, we look at where to find packages and how to install them.

:::

## Looking for packages

- [Package finder](https://rdrr.io/find/?repos=cran%2Cbioc%2Crforge%2Cgithub&fuzzy_slug=)
- Your peers and the literature

## Package documentation

- [List of CRAN packages](https://cran.r-project.org/web/packages/available_packages_by_name.html)
- [Package documentation](https://rdrr.io/)

## Managing R packages

R packages can be installed, updated, and removed from within R:

```{.r}
install.packages("<package_name>", repos="<url-cran-mirror>")
remove.packages("<package-name>")
update_packages()
```

:::{.note}

`repos` argument: chose a [CRAN mirror close to the location of your cluster](https://cran.r-project.org/mirrors.html) or use <https://cloud.r-project.org/>.

:::

:::{.note}

The first time you install a package, R will ask you whether you want to create a personal library in your home directory. Answer `yes` to both questions. Your packages will now install under `~/`.

:::

:::{.note}

Some packages require additional modules to be loaded before they can be installed. Other packages need additional R packages as dependencies. In either case, you will get explicit error messages. Adding the argument `dependencies = T` helps in the second case, but you will still have to add packages manually from time to time.

:::

## Loading packages

To make a package available in an R session, you load it with the `library()` function.

:::{.example}

Example:

:::

```{.r}
library(readxl)
```

Alternatively, you can access a function from a package without loading it with the syntax: `package::function()`.

:::{.example}

Example:

:::

```{.r}
readxl::read_excel("file.xlsx")
```
