---
title: Loading datasets
author: Marie-Hélène Burle
bibliography: fl.bib
---

:::{.def}

[PyTorch](https://github.com/pytorch/pytorch), [TensorFlow](https://github.com/tensorflow/datasets), and [Hugging Face](https://github.com/huggingface/datasets) all provide APIs to download datasets for deep learning. In this course, we will use Hugging Face.

:::

The [Datasets](https://github.com/huggingface/datasets) library from Hugging Face is a lightweight, framework-agnostic, and easy to use API to download datasets from the [Hugging Face Hub](https://huggingface.co/datasets). It uses [Apache Arrow](https://arrow.apache.org/)'s efficient caching system, allowing large datasets to be used on machines with small memory [@lhoest-etal-2021-datasets].

Let's use one of the most classic of all deep learning datasets, the MNIST [@lecun2010mnist].

## Search dataset

Go to the [Hugging Face Hub](https://huggingface.co/datasets) and search through thousands of open source datasets provided by the community.

## Inspect dataset

You can get information on a dataset before downloading it.

Load the dataset builder for the dataset you are interested in:

```{python}
from datasets import load_dataset_builder
ds_builder = load_dataset_builder("mnist")
```

Get a description of the dataset:

```{python}
ds_builder.info.description
```

Get information on the features:

```{python}
ds_builder.info.features
```

## Download dataset and load in session

```{python}
from datasets import load_dataset

ds = load_dataset("mnist")
ds
```

:::{.note}

You need to have the [Pillow](https://python-pillow.org/) package installed for this to work since the MNIST is an image dataset.

:::

Let's explore our dataset dictionary:

```{python}
len(ds)
```

```{python}
ds.keys()
```

```{python}
ds['train']
```

```{python}
len(ds['train'])
```

```{python}
ds['train'][0]
```

```{python}
len(ds['train'][0])
```

```{python}
ds['train'][0].keys()
```

```{python}
ds['train'][0]['image']
```

```{python}
ds['train'][0]['label']
```

## Convert to JAX object

We need to convert our dataset to a JAX `Array` object:

```{.python}
dsj = ds.with_format("jax")
dsj
```

Printing `dsj` looks the same, but:

```{.python}
dsj['train'][0]
```

```
{'image': Array([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0],
       ...,
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0]], dtype=uint8),
 'label': Array(5, dtype=int32)}
```

```{.python}
dsj['train'][0]['image']
```

```
Array([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       ...,
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0]], dtype=uint8)
```

```{.python}
dsj['train'][0]['label']
```

```
Array(5, dtype=int32)
```
