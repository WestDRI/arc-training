---
title: Version control for data science & machine learning with DVC
# frontlogo: /img/sfudrac.png
frontpic: "img/logo_dvc.svg"
frontpicwidth: 50%
noshadow: noshadow
author: Marie-Hélène Burle
date: 2023-12-12
date-format: long
execute:
  error: true
  echo: true
format:
  revealjs:
    # embed-resources: true
    theme: [default, ../revealjs.scss]
    logo: /img/logo_sfudrac.png
    highlight-style: ayu
    code-line-numbers: false
    template-partials:
      - ../title-slide.html
    pointer:
      color: "#b5111b"
      pointerSize: 32
    link-external-newwindow: true
    footer: <a href="wb_dvc.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgb(153, 153, 153)" class="bi bi-arrow-90deg-up" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z"/></svg>&nbsp;Back to webinar page</a>
    auto-stretch: false
revealjs-plugins:
  - pointer
---

## On version control {.center}

I won't introduce here the benefits of using a good version control system such as [Git](https://git-scm.com/)

![On the benefits of VCS](img/vc.jpg){width="45%"}

## Extending Git for data {.center}

While Git is a wonderful tool for text files versioning (code, writings in markup formats), it isn't a tool to manage changes to datasets

Several open source tools—each with a different structure and functioning—extend Git capabilities to track data: [Git LFS](https://git-lfs.com/), [git-annex](https://git-annex.branchable.com/), [lakeFS](https://github.com/treeverse/lakeFS), [Dolt](https://github.com/dolthub/dolt), [DataLad](https://github.com/datalad/datalad)...

. . .

and yes, [DVC](https://dvc.org/)

## Extending Git for models and experiments {.center}

Reproducible research and collaboration on data science and machine learning projects involve more than datasets management: experiments and the models they produce also need to be tracked

. . .

DVC xxx pipelining 

## Installation {.center}

- `pip`:

	```{.bash}
	pip install dvc
	```

- `conda`

- [pipx](https://github.com/pypa/pipx) (if you want `dvc` available everywhere without having to activate virtual envs):

	```{.bash}
	pipx install dvc
	```

Optional dependencies `[s3]`, `[gdrive]`, etc. for remote storage

## How to run {.center}

- Terminal

    ```{.bash}
    dvc ...
    ```

- [VS Code extension](https://marketplace.visualstudio.com/items?itemName=Iterative.dvc)

- Python library if installed via `pip` or `conda`

	```{.python}
	import dvc.api
	```

:::{.notenoline}

In this webinar, I will use DVC through the command line

:::

## Initialize DVC project

- Initialize Git repo:

	```{.bash}
	git init
	```

	```
	Initialized empty Git repository in dvc/.git/
	```

- Initialize DVC project:

	```{.bash}
	dvc init
	```

	```
	Initialized DVC repository.

	You can now commit the changes to git.

	What's next?
	------------
	- Check out the documentation: <https://dvc.org/doc>
	- Get help and share ideas: <https://dvc.org/chat>
	- Star us on GitHub: <https://github.com/iterative/dvc>
```

:::{.notenoline}

You will also see a note about usage analytics collection and info on how to opt out

:::

## Initialize DVC project

- Commit DVC system files:

  :::{.note}

  DVC automatically staged its system file for us:

	```{.bash}
	git status
	```

	```
	On branch main

	No commits yet

	Changes to be committed:
	  (use "git rm --cached <file>..." to unstage)
		new file:   .dvc/.gitignore
		new file:   .dvc/config
		new file:   .dvcignore
	```

  :::

## Initialize DVC project

- Commit DVC system files:

  So we can directly commit:

	```{.bash}
	git commit -m "Initialize DVC"
	```

	```
	[main (root-commit) a32e0ed] Initialize DVC
	 3 files changed, 6 insertions(+)
	 create mode 100644 .dvc/.gitignore
	 create mode 100644 .dvc/config
	 create mode 100644 .dvcignore
	```

# Tracking data

# Tracking experiments

## [DVCLive](https://github.com/iterative/dvclive)

Python library to log experiment metrics

# Data registry



# Continuous integration

The sister project [CML](https://github.com/iterative/cml) (Continuous Machine Learning)
