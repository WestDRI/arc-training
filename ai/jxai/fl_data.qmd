---
title: Loading data
aliases:
  - fl_dataset
  - /ai/jx/fl_data
bibliography: fl.bib
csl: diabetologia.csl
author:
  - Marie-Hélène Burle
  - Code adapted from JAX's [Implement ViT from scratch](https://docs.jaxstack.ai/en/latest/JAX_Vision_transformer.html)
---

:::{.def}

In this section, we download the [Food-101 dataset](https://data.vision.ee.ethz.ch/cvl/datasets_extra/food-101/) [@bossard14] that we will later use to train and fine-tune models.

:::

## Context

Step one of a classic deep learning workflow: getting the data. There are several options. In this example, we use [Datasets](https://github.com/huggingface/datasets) from [Hugging Face](https://github.com/huggingface).

```{dot}
//| echo: false
//| fig-width: 700px

digraph {

bgcolor="transparent"
node [fontname="Inconsolata, sans-serif", color=gray55, fontsize="18pt"]
edge [color=gray55]

load [label="Load data", shape=plaintext, group=g1]
proc [label="Process data", shape=plaintext, group=g1, fontcolor=gray55]
nn [label="Define architecture", shape=plaintext, group=g1, fontcolor=gray55]
pretr [label="Pre-trained model", shape=plaintext, group=g1, fontcolor=gray55]
opt [label="Hyperparameters", shape=plaintext, group=g1, fontcolor=gray55]
train [label="Train", shape=plaintext, group=g1, fontcolor=gray55]
cp [label="Checkpoint", shape=plaintext, group=g1, fontcolor=gray55]

pt [label=torchdata, fontcolor=gray55, color=gray55]
tfds [label=tfds, group=g2, fontcolor=gray55, color=gray55]
dt [label=datasets, fontcolor=darkorange4, color=darkorange4]

gr [label=grain, fontcolor=gray55, color=gray55]
tv [label=torchvision, fontcolor=gray55, color=gray55]

tr [label=transformers, fontcolor=gray55, color=gray55]

fl1 [label=flax, group=g2, fontcolor=gray55, color=gray55]
fl2 [label=flax, group=g2, fontcolor=gray55, color=gray55]

oa [label=optax, group=g2, fontcolor=gray55, color=gray55]

jx [label=jax, group=g2, fontcolor=gray55, color=gray55]

ob [label=orbax, group=g2, fontcolor=gray55, color=gray55]

{rank=same; gr load tv tr}
gr -> load -> tv -> tr [style=invis]

{rank=same; fl1 proc pretr}
fl1 -> proc -> pretr [style=invis]

{rank=same; jx fl2 opt}
fl1 -> proc -> pretr [style=invis]

{pt tfds} -> load [color=gray55]
dt -> load [color=darkorange4]
{gr tv} -> proc [color=gray55]
fl1 -> nn [color=gray55]
pretr -> nn [dir=none]
tr -> pretr [color=gray55]
oa -> opt [color=gray55]
jx -> fl2 -> train [color=gray55]
ob -> cp [color=gray55]

load -> proc -> nn -> opt -> train -> cp [dir=none]

}
```

## Load packages

Packages necessary for this section:

```{python}
# to get information about a dataset before downloading it
from datasets import load_dataset_builder

# to load dataset from Hugging Face Hub
from datasets import load_dataset

# to display a few samples
import matplotlib.pyplot as plt
```

## Choosing a library

Data can be downloaded and processed manually, but many datasets are available via [Hugging Face datasets](https://github.com/huggingface/datasets), [torchvision](https://github.com/pytorch/vision), and [TensorFlow datasets](https://github.com/tensorflow/datasets). Remember that JAX does not implement domain-specific utilities and is not a deep learning library. Flax is a deep learning library, but, because there are already so many good options to load and process data, they did not implement a method of their own.

Choose the library you are the most familiar with, or the one for which you found code somewhere, or the one that seems the easiest to you, or provides the exact functionality that you want for your project.

The [Food-101](https://data.vision.ee.ethz.ch/cvl/datasets_extra/food-101/) dataset for instance can be accessed with `torchvision.datasets.Food101` since it is [one of TorchVision datasets](https://pytorch.org/vision/main/generated/torchvision.datasets.Food101.html) or with `tfds.image_classification.Food101` since it is also [one of TFDS datasets](https://www.tensorflow.org/datasets/catalog/food101).

[It is also](https://huggingface.co/datasets/ethz/food101) in the [Hugging Face Hub](https://huggingface.co/datasets) and that's the method that we will use here.

## Hugging Face datasets

The [Datasets](https://github.com/huggingface/datasets) library from [Hugging Face](https://github.com/huggingface) is a lightweight, framework-agnostic, and easy to use API to download datasets from the [Hugging Face Hub](https://huggingface.co/datasets). It uses [Apache Arrow](https://arrow.apache.org/)'s efficient caching system, allowing large datasets to be used on machines with small memory [@lhoest-etal-2021-datasets].

### Search dataset

Go to the [Hugging Face Hub](https://huggingface.co/datasets) and search through thousands of open source datasets provided by the community.

### Inspect dataset

You can get information on a dataset before downloading it.

Load the dataset builder for the dataset you are interested in:

```{python}
ds_builder = load_dataset_builder("food101")
```

Get a description of the dataset (if it exists—here it doesn't):

```{python}
ds_builder.info.description
```

Get information on the features:

```{python}
ds_builder.info.features
```

### Download dataset

We will only use the first 5 classes of food (instead of 101) to test our code. To prevent us from all downloading the data (by default in `~/.cache/huggingface`), we will use a joint cache directory at `/project/60055/data`.

```{.python}
train_size = 5 * 750
val_size = 5 * 250

train_dataset = load_dataset("food101",
                             split=f"train[:{train_size}]",
                             cache_dir="/project/60055/data")

val_dataset = load_dataset("food101",
                           split=f"validation[:{val_size}]",
                           cache_dir="/project/60055/data")
```

```{python}
#| echo: false

train_size = 5 * 750
val_size = 5 * 250

train_dataset = load_dataset("food101",
                             split=f"train[:{train_size}]")

val_dataset = load_dataset("food101",
                           split=f"validation[:{val_size}]")
```

## Explore data

Let's inspect our data:

```{python}
print("Training set size:", len(train_dataset))
print("Validation set size:", len(val_dataset))
print("Training set shape:", train_dataset.shape)
print("Validation set shape:", val_dataset.shape)
print("First item of training set:", train_dataset[0])
print("Firt image of training set:", train_dataset[0]["image"])
print("First label of training set:", train_dataset[0]["label"])
```

Here is the beginning of the list of foods:

```{python}
print(train_dataset.features["label"].names[:5])
```

And here is the food of the first item in the training set (label `6`):

```{python}
print("First food of training set:", train_dataset.features["label"].names[6])
```

To make this simpler, we can create a mapping of the labels matching their order:

```{python}
labels_mapping = {}
index = 0
for i in range(0, len(val_dataset), 250):
    label = val_dataset[i]["label"]
    if label not in labels_mapping:
        labels_mapping[label] = index
        index += 1

inv_labels_mapping = {v: k for k, v in labels_mapping.items()}

print(inv_labels_mapping)
```

And a mapping of the names:

```{python}
names_map={k: train_dataset.features["label"].names[v] for k, v in inv_labels_mapping.items()}
print(names_map)
```

Now, to get the food of the first item, we just have to do:

```{python}
print(names_map[0])
```

Here is a function to display some samples (their images, label, and food type):

```{python}
def display_datapoints(*datapoints, tag="", names_map=None):
    num_samples = len(datapoints)

    fig, axs = plt.subplots(1, num_samples, figsize=(20, 10))
    for i, datapoint in enumerate(datapoints):
        if isinstance(datapoint, dict):
            img, label = datapoint["image"], datapoint["label"]
        else:
            img, label = datapoint

        if hasattr(img, "dtype") and img.dtype in (np.float32, ):
            img = ((img - img.min()) / (img.max() - img.min()) * 255.0).astype(np.uint8)

        label_str = f" ({names_map[label]})" if names_map is not None else ""
        axs[i].set_title(f"{tag} Label: {label}{label_str}")
        axs[i].imshow(img)
```

Let's display the first 3 items (images and labels) of both the training and validation sets:

```{python}
display_datapoints(
    train_dataset[0],
    train_dataset[1],
    train_dataset[2],
    tag="(Training)",
    names_map=train_dataset.features["label"].names,
)

display_datapoints(
    val_dataset[0],
    val_dataset[1],
    val_dataset[2],
    tag="(Validation)",
    names_map=val_dataset.features["label"].names,
)
```
