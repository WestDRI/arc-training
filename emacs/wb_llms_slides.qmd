---
title: AI pair programming &<br>LLMs chats in Emacs
frontpic: img/emacs_llm.png
frontpicwidth: 45%
frontpicborderradius: 40px
noshadow: noshadow
author: Marie-HÃ©lÃ¨ne Burle
date: 2025-10-07
date-format: long
execute:
  freeze: auto
  cache: true
  error: true
  echo: true
format:
  revealjs:
    <!-- embed-resources: true -->
    theme: [default, ../revealjsemacs.scss]
    logo: /img/favicon_sfudrac.png
    highlight-style: ayu
    code-line-numbers: false
    template-partials:
      - ../title-slide.html
    pointer:
      color: "#b5111b"
      pointerSize: 32
    link-external-newwindow: true
    footer: <a href="wb_llms.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgb(32,118,193)" class="bi bi-arrow-90deg-up" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z"/></svg>&nbsp;Back to webinar page</a>
    auto-stretch: false
revealjs-plugins:
  - pointer
---

## *Warning* {.center}

I normally don't share my Emacs init code because it relies on many idiosyncratic setups that I have on my machineâ€”key bindings in particular. Moreover, the packages READMEs give much better code snippets and are a much better place to start

But I keep being asked for it after each webinar. So here, I am sharing it

Don't copy-paste it in your init file: it would break a lot of things. Instead, use it to inspire you for potential setups (or, better still, **go to the packages READMEs instead**)

You have been warned... ðŸ™‚

# [copilot.el](https://github.com/copilot-emacs/copilot.el)

[GitHub copilot](https://github.com/features/copilot) code completion

## Requirements {.center}

- access to [GitHub copilot](https://github.com/features/copilot)

:::{.note}

There is a free tier available to everybody

Pro available free for students, teachers, maintainers of popular open-source projects

Paid subscriptions for Pro and Pro+

:::

- Emacs 27+

- Node.js 22+

## My setup (see [warning](#a-note-of-caution)) {.center}

```{.lisp}
;; dependency
(straight-use-package 'editorconfig)

(use-package copilot
	:straight (:host github
			   :repo "copilot-emacs/copilot.el"
			   :files ("dist" "*.el"))
  :bind (("C-8" . copilot-complete)
  :map copilot-completion-map
  ("C-j" . copilot-accept-completion)
  ("C-f" . copilot-accept-completion-by-word)
  ("C-t" . copilot-accept-completion-by-line)
  ("M-n" . copilot-next-completion)
  ("M-p" . copilot-previous-completion)))
```

# [copilot-chat.el](https://github.com/chep/copilot-chat.el)

[GitHub copilot](https://github.com/features/copilot) chat

## Requirements {.center}

- access to [GitHub copilot](https://github.com/features/copilot)

:::{.note}

There is a free tier available to everybody

Pro available free for students, teachers, maintainers of popular open-source projects

Paid subscriptions for Pro and Pro+

:::

## Functionality {.center}

## My setup (see [warning](#a-note-of-caution)) {.center}

```{.lisp}
;; dependency
(straight-use-package 'magit)

(use-package copilot-chat
  :straight (:host github:repo "chep/copilot-chat.el" :files ("*.el"))
  :after (org markdown-mode)
  :bind (("; C" . copilot-chat-display)
    :map prog-mode-map				                  ; ask Copilot to:
    ;; explain symbol under point
    ("; p e s" . copilot-chat-explain-symbol-at-line)
    ;; explain function under point
    ("; p e f" . copilot-chat-explain-defun)
    ;; explain selected code
    ("; p e c" . copilot-chat-explain)
    ;; review selected code
    ("; p r c" . copilot-chat-review)
    ;; review current buffer
    ("; p r b" . copilot-chat-review-whole-buffer)
    ;; document selected code
    ("; p d c" . copilot-chat-doc)
    ;; fix selected code
    ("; p f c" . copilot-chat-fix)
    ;; optimize selected code
    ("; p o c" . copilot-chat-optimize)
    ;; write tests for selected code
    ("; p t c" . copilot-chat-test)
    ;; apply a custom prompt to the function body under point
    ;; (instruct on how to refactor the function)
    ("; p c f" . copilot-chat-custom-prompt-function)
    :map copilot-chat-org-prompt-mode-map
    ("C-<return>" . copilot-chat-prompt-send)
    :map org-mode-map
    ("; p l" . copilot-chat-prompt-split-and-list)))
```

# [gptel](https://github.com/karthink/gptel)

Access any LLM from any buffer



## My setup (see [warning](#a-note-of-caution)) {.center}

```{.lisp}
(use-package gptel
  :config
  (setq
   gptel-model 'gemini-2.5-pro
   gptel-backend (gptel-make-gemini "Gemini"
				   :key #'gptel-api-key-from-auth-source
				   :stream t))
  :bind (("; g g" . gptel)
		 ("; g s" . gptel-send)
		 ("; g m" . gptel-menu)))
```

# [chatgpt-shell](https://github.com/xenodium/chatgpt-shell)

A shell to access LLMs



## My setup (see [warning](#a-note-of-caution)) {.center}

```{.lisp}
;; dependency
(use-package shell-maker
  :straight (:type git :host github :repo "xenodium/shell-maker"))

(use-package chatgpt-shell
  :straight (:type git
  		     :host github \
			 :repo "xenodium/chatgpt-shell"
			 :files ("chatgpt-shell*.el"))
  :custom
  (setq chatgpt-shell-google-key
    (lambda ()
      (auth-source-pick-first-password
	   :host "generativelanguage.googleapis.com"))))
```

# [aidermacs](https://github.com/MatthewZMD/aidermacs)

[aider](https://github.com/Aider-AI/aider) in Emacs



## My setup (see [warning](#a-note-of-caution)) {.center}

```{.lisp}

```

## Alternative: [aider.el](https://github.com/tninja/aider.el) {.center}

[aidermacs](https://github.com/MatthewZMD/aidermacs) is a fork of [aider.el](https://github.com/tninja/aider.el)

- [aider.el](https://github.com/tninja/aider.el) is closer to [aider](https://github.com/Aider-AI/aider) (the original CLI tool)
- [aidermacs](https://github.com/MatthewZMD/aidermacs) integrates more into Emacs

