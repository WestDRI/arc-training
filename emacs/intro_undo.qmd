---
title: Undoing and redoing
author: Marie-HÃ©lÃ¨ne Burle
---

:::{.def}

Undoing and redoing are operations so common while editing files that we don't think about them much. Most software however have a poor undo/redo system in which edits get lost all the time.

Emacs' undos never loses edits and [undo-tree](https://github.com/tarsiiformes/undo-tree) brings a wonderful undo/redo system to it.

:::

## Undo systems

### Linear systems: classic undo/redo

<center>You have some file:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>You make some edit:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>You make another edit:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" "))---3((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>And another one:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" "))---3((" "))---4((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>You can undo:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" "))---3((" ")):::current---4((" "))
   classDef current stroke: #f96, stroke-width: 2px
```

<center>You can undo some more:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" ")):::current---3((" "))---4((" "))
   classDef current stroke: #f96, stroke-width: 2px
```

<center>You can also redo:</center>


```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" "))---3((" ")):::current---4((" "))
   classDef current stroke: #f96, stroke-width: 2px
```

<center>Now, you make some new edit. From this point on, some edits are lost:</center>


```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" "))---3((" "))-.-4((" ")):::lost
   3((" "))---5((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
   classDef lost stroke-dasharray: 3 4
```

<center>You can still undo:</center>


```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" "))---3((" ")):::current-.-4((" ")):::lost
   3((" "))---5((" "))
   classDef current stroke: #f96, stroke-width: 2px
   classDef lost stroke-dasharray: 3 4
```

<center>And you can redo your last undo, but you can't access all previous states of the file:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" "))---3((" "))-.-4((" ")):::lost
   3((" "))---5((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
   classDef lost stroke-dasharray: 3 4
```

### Linear systems: Emacs

<center>You have some file:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((1)):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>You make some edit:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((1))---2((2)):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>You make another edit:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((1))---2((2))---3((3)):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>And another one:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((1))---2((2))---3((3))---4((4)):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>The first undo adds a new point to the chain of edits, reversing the effects of the last edit:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((1))---2((2))---3((3))---4((4))---5((3)):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>More undoing keeps adding points to the chain:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((1))---2((2))---3((3))---4((4))---5((3))---6((2)):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>There is no proper redo. Instead, you stop undoing, then start again to undo the undo:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((1))---2((2))---3((3))---4((4))---5((3))---6((2))---7((3)):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>You can make new edits</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((1))---2((2))---3((3))---4((4))---5((3))---6((2))---7((3))---8((5)):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>Nothing ever gets lost, but you might get headaches. For instance, to go back to the beginning, you have to do:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((1))---2((2))---3((3))---4((4))---5((3))---6((2))---7((3))---8((5))---9((3))---10((2))---11((3))---12((4))---13((3))---14((2))---15((1)):::current
   classDef current stroke: #f96, stroke-width: 2px
```

### Non linear system: [undo-tree](https://github.com/tarsiiformes/undo-tree)

<center>You have some file:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>You make some edit:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>You make another edit:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" "))---3((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>And another one:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" "))---3((" "))---4((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>You can undo:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" "))---3((" ")):::current---4((" "))
   classDef current stroke: #f96, stroke-width: 2px
```

<center>You can undo some more:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" ")):::current---3((" "))---4((" "))
   classDef current stroke: #f96, stroke-width: 2px
```

<center>You can also redo:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" "))---3((" ")):::current---4((" "))
   classDef current stroke: #f96, stroke-width: 2px
```

<center>Now, you make some new edit:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" "))---3((" "))---4((" "))
   3((" "))---5((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
```

<center>You can still undo:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" "))---3((" "))---4((" "))
   3((" ")):::current---5((" "))
   classDef current stroke: #f96, stroke-width: 2px
```

<center>You can switch branch and redo the old version:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" "))---2((" "))---3((" "))---4((" ")):::current
   3((" "))---5((" "))
   classDef current stroke: #f96, stroke-width: 2px
```

<center>Nothing ever gets lost and it is a lot more sane to navigate the history.</center>

<center>To to back to the beginning, you only have to do:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((" ")):::current---2((" "))---3((" "))---4((" "))
   3((" "))---5((" "))
   classDef current stroke: #f96, stroke-width: 2px
```

<center>Compare this with the insane Emacs default system:</center>

```{mermaid}
%%| echo: false
%%| fig-align: center
%%{init: { 'flowchart': {'rankSpacing':20} } }%%

flowchart TD
   1((1))---2((2))---3((3))---4((4))---5((3))---6((2))---7((3))---8((5))---9((3))---10((2))---11((3))---12((4))---13((3))---14((2))---15((1)):::current
   classDef current stroke: #f96, stroke-width: 2px
```

And this is an exceedingly simple example only involving 5 different file states. I let you imagine how it quickly explodes in complexity in real life situations ðŸ™‚

Now, the default Emacs system has the huge benefit to never lose any edit. It is already a huge improvement over the default system on most software! The thing is that when we undo and redo changes, linear systems are not ideal. A tree structure that can be fully navigated is just a more sensible solution.

:::{.note}

Undo-tree was initially developed for Vim, so Vim can also use an ideal undo/redo system.

:::

## Installing and customizing undo-tree

This is a personal affair.

The minimal configuration when using [straight](https://github.com/radian-software/straight.el) (to download the package) and [use-package](https://github.com/jwiegley/use-package) to load it and customize it, looks like this:

```{.lisp}
(use-package undo-tree
  :straight t)
```

My personal configuration looks like that:

```{.lisp}
(use-package undo-tree
  :straight t
  :init
  (global-undo-tree-mode 1)
  :bind (("C-l" . undo-tree-undo)
	 ("C-r" . undo-tree-redo)
	 ("s-t" . undo-tree-visualize)
	 :map undo-tree-visualizer-mode-map
	 ;; go to selected undo state
	 ("<return>" . undo-tree-visualizer-quit)
	 ;; cancel (return to state before calling undo-tree-visualize)
	 ("q" . undo-tree-visualizer-abort)))
```
