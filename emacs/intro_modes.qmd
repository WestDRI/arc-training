---
title: Emacs modes
author: Marie-Hélène Burle
---

:::{.def}

[webinar](wb_emacs_modes.qmd)

:::

## Major modes

Different types of text require different behaviours, syntax highlighting, formatting, functions, variables, etc.

Each type of buffer (e.g. Python script, Markdown document, Julia REPL, Bash shell, directory editor, pdf) is associated with a different major mode

File extensions, particular markers in the file, or other elements tell Emacs to automatically switch to the appropriate major mode

Only one major mode is active at a time

Switching to a different major mode is possible by running the corresponding major mode command (e.g. `M-x python-mode` will switch to Python mode)

### Fundamental mode

`fundamental-mode` is the most basic major mode, with no particular feature

This is the mode enabled by default if Emacs cannot detect what specific major mode to enable

## Minor modes

Minor modes provide additional and optional features that can be turned on or off (e.g. spell checking, auto-completion, auto-indentation, fancy undo behaviour, fancy parenthesis matching highlighting)

Minor modes can be turned on/off by running the corresponding minor mode commands (e.g. `M-x flyspell-mode` will turn spell checking on/off). The command `consult-minor-mode-menu` from the package [consult](https://github.com/minad/consult) makes this particularly easy

Each mode comes with a set of commands. [consult](https://github.com/minad/consult)'s command `consult-mode-command` makes it easy to search for commands within each mode

Any number of minor modes can be active at the same time

## List of enabled modes

By default, `<f1> m` or `M-x describe-mode` will open a list and description of the active modes

The major mode can also be determined with `<f1> v major-mode` (`<f1> v` runs the command `describe-variable`)

A list of minor modes can also be viewed with `<f1> v minor-mode-list`

Again, [consult](https://github.com/minad/consult)'s `consult-minor-mode-menu` makes all this much nicer

## The mode line

Another way to get information about enabled modes is the mode line

![](img/display10.png){width="70%" fig-alt="noshadow" fig-align="center"}

## Hooks

Minor modes can be automatically enabled when other modes (major or minor) are enabled thanks to [hooks](https://www.gnu.org/software/emacs/manual/html_node/emacs/Hooks.html)

:::{.example}

For example, to enable the aggressive indent minor mode whenever the ESS R major mode is enabled, you can add to your init file:

:::

```{.lisp}
(add-hook 'ess-r-mode-hook 'aggressive-indent-mode)
```

:::{.example}

Or, using [use-package](https://github.com/jwiegley/use-package), now part of base Emacs:

:::

```{.lisp}
(use-package aggressive-indent
:hook (ess-r-mode . aggressive-indent-mode))
```

## Modes source code

To see the source code of a mode, run `<f1> v` (or `M-x describe-variable`) followed by the name of the mode map

This will open a help buffer with a link to the source code file

:::{.example}

For example `<f1> v text-mode-map` will open a help buffer with a link to `text-mode.el`

:::

:::{.note}

The help buffer opened by `<f1> m` or `M-x describe-mode` also gives a link to the source code of the major mode

:::

Looking at the source code of a mode is very useful to customize it

## Polymode

While it is normally impossible to associate multiple major modes with a single buffer, [Polymode](https://github.com/polymode) allows to insert sections of a major mode within another major mode

This is extremely convenient for instance to embed sections of code within human text, or even to have code executed within human text (e.g. [R Markdown](https://rmarkdown.rstudio.com/) or its successor [Quarto](https://quarto.org/), [Org Babel](https://orgmode.org/worg/org-contrib/babel/))

`markdown-mode` with snippets of `julia-mode`:

````
Julia has "assignment by operation" operators:

```{{julia}}
a = 2;
a += 7    # this is the same as a = a + 7
```

There is a *left* division operator:

```{{julia}}
2\8 == 8/2
```
````

Rendered by [Quarto](https://quarto.org/) into:

![](img/polymode.png)
