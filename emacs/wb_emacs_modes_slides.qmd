---
title: Understanding Emacs modes
frontpic: img/logo_emacs.png
frontpicwidth: 30%
noshadow: noshadow
author: Marie-Hélène Burle
date: 2024-09-17
date-format: long
execute:
  error: true
  echo: true
format:
  revealjs:
    embed-resources: true
    theme: [default, ../revealjs.scss]
    logo: /img/logo_sfudrac.png
    highlight-style: ayu
    code-line-numbers: false
    template-partials:
      - ../title-slide.html
    pointer:
      color: "#b5111b"
      pointerSize: 32
    link-external-newwindow: true
    footer: <a href="wb_emacs_modes.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgb(153, 153, 153)" class="bi bi-arrow-90deg-up" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z"/></svg>&nbsp;Back to webinar page</a>
    auto-stretch: false
revealjs-plugins:
  - pointer
---

## Why use Emacs? {.center}

. . .

::::{.columns}

:::{.column width="30%"}

<br>
<span style="font-size: 2rem;">To brag.</span>

:::

:::{.column width="5%"}
:::

:::{.column width="65%"}

![](img/emacs2.jpg){fig-alt="noshadow" width="80%"}

:::

::::

## Why use Emacs? {.center}

::::{.columns}

:::{.column width="30%"}

<br>
<span style="font-size: 2rem;">To brag. Obviously.</span>

:::

:::{.column width="5%"}
:::

:::{.column width="65%"}

![](img/emacs2.jpg){fig-alt="noshadow" width="80%"}

:::

::::

## Why use Emacs? {.center}

<br>
<span style="font-size: 2rem;">But there are other reasons:

- Free and open source
- Endlessly customizable
- Amazing diff
- Macros
- Text searching
- IDE
- Lossless undo/redo
- Fun!
- ...

## Now ... getting started can be daunting {.center}

![](img/intuitive.jpg){width="62%" fig-align="center"}

## ... and it doesn't necessarily get easier {.center}

![](img/learning_curve.jpg){fig-align="center"}

. . .

<center>But it's all worth it!</center>

# A few Emacs concepts

## Emacs Lisp {.center}

[Emacs Lisp](https://en.wikipedia.org/wiki/Emacs_Lisp) is a dialect of the [Lisp programming language](https://en.wikipedia.org/wiki/Lisp_(programming_language)) developed especially to write the editing functionality of the Emacs text editor (the rest of Emacs and its interpreter are written in C)

Emacs is endlessly customizable to anyone with a basic knowledge of Emacs Lisp. In particular,  [variables](https://www.gnu.org/software/emacs/manual/html_node/elisp/Variables.html) and [functions](https://www.gnu.org/software/emacs/manual/html_node/elisp/Functions.html) setting the behaviour and appearance of the text editor can be created or modified

## Graphical display {.center}

![](img/display01.png){width="80%" fig-alt="noshadow" fig-align="center"}

## Graphical display {.center}

![](img/display02.png){width="80%" fig-alt="noshadow" fig-align="center"}

## Graphical display {.center}

![](img/display03.png){width="80%" fig-alt="noshadow" fig-align="center"}

## Graphical display {.center}

![](img/display04.png){width="80%" fig-alt="noshadow" fig-align="center"}

## Graphical display {.center}

![](img/display05.png){width="80%" fig-alt="noshadow" fig-align="center"}

## Graphical display {.center}

![](img/display06.png){width="80%" fig-alt="noshadow" fig-align="center"}

## Graphical display {.center}

![](img/display07.png){width="80%" fig-alt="noshadow" fig-align="center"}

## Graphical display {.center}

![](img/display08.png){width="80%" fig-alt="noshadow" fig-align="center"}

## Graphical display {.center}

![](img/display09.png){width="80%" fig-alt="noshadow" fig-align="center"}

## Graphical display {.center}

![](img/display10.png){width="80%" fig-alt="noshadow" fig-align="center"}

## Keybindings (kbd) {.center}

![From [Ecol LG #134](http://linuxgazette.net/134/ecol.html) by [Javier Malonda](https://linuxgazette.net/authors/malonda.html)](img/kbd.png){fig-align="center"}

## Kbd notations {.center}

`C-h` means pressing the **Control** key and the **H** key together

`M-x` means pressing the **Alt** (Windows) or **Option** (MacOS) key and the **X** key together

`C-h m` means pressing the **Control** key and the **H** key together, then pressing the **M** key

`C-c C-x m` means pressing **Ctl+C**, then **Ctl+X**, then **M**

`C-x C-c M-w C-m M-v M-t M-u` means that you probably should choose another kbd

## Command execution {.center}

A useful way to execute a command interactively, when it is not bound to a kbd, is to type `M-x` (this brings up the *minibuffer*, a place in which to type inputs) followed by the command name

# Time to talk about Emacs modes

## Major modes {.center}

Different types of text require different behaviours, syntax highlighting, formatting, functions, etc.

Each type of buffer (e.g. Python script, Markdown document, Julia REPL, Bash shell, directory editor, pdf) is associated with a major mode

File extensions, particular markers in the file, or other elements tell Emacs to automatically switch to the appropriate major mode

Only one major mode is active at a time

Switching to a different major mode is possible by running the corresponding major mode command (e.g. `M-x python-mode` will switch to Python mode)

## Fundamental mode {.center}

`fundamental-mode` is the most basic major mode, with no particular feature

This is the mode enabled by default if Emacs cannot detect what specific major mode to enable

## Minor modes {.center}

Minor modes provide additional and optional features that can be turned on or off (e.g. spell checking, auto-indentation, fancy undo behaviour, fancy parenthesis matching)

Minor modes can be turned on/off by running the corresponding minor mode commands (e.g. `M-x flyspell-mode` will turn spell checking on/off)

Many minor modes can be active at the same time

The command `consult-minor-mode-menu` from the package [consult](https://github.com/minad/consult) makes this particularly easy

## List of enabled modes {.center}

By default, `C-h m` or `M-x describe-mode` will open a list and description of the active modes

The major mode can also be determined with `C-h v major-mode` (`C-h v` runs the command `describe-variable`)

A list of minor modes can also be viewed with `C-h v minor-mode-list`

Again, [consult](https://github.com/minad/consult)'s `consult-minor-mode-menu` makes all this much nicer

## The mode line {.center}

Another way to get some information about enabled modes is the mode line

![](img/display10.png){width="70%" fig-alt="noshadow" fig-align="center"}

## Hooks {.center}

Minor modes can be automatically enabled in particular major modes with [hooks](https://www.gnu.org/software/emacs/manual/html_node/emacs/Hooks.html)

:::{.example}

For example, to start the aggressive indent minor mode with the ESS R major mode:

:::

```{.lisp}
(add-hook 'ess-r-mode-hook 'aggressive-indent-mode)
```

:::{.example}

Or, using [use-package](https://github.com/jwiegley/use-package):

:::

```{.lisp}
(use-package aggressive-indent
:hook (ess-r-mode . aggressive-indent-mode))
```

## Customizing modes {.center}

In Emacs, **everything** is customizable

To customize modes, you can write your own Emacs Lisp code in your [init file](https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html) (the configuration file that gets loaded when Emacs launches) or you can use the [easy customization interface](https://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html)

:::{.example}

For example, to customize the Python major mode, you would run `M-x customize-group python`

:::

## Customizing kbd {.center}

Most modes come with specific [keymaps](https://www.gnu.org/software/emacs/manual/html_node/elisp/Keymaps.html): kbd only active when the mode is enabled. These kbd can be customized

:::{.example}

For example, to modify the kbd for the function `markdown-outline-previous` in the `markdown-mode-map`:

:::

```{.lisp}
(define-key markdown-mode-map (kbd "M-p") 'markdown-outline-previous)
```

:::{.example}

Or, using [use-package](https://github.com/jwiegley/use-package):

:::

```{.lisp}
(use-package markdown-mode
	:bind (:map markdown-mode-map
				("M-p" . markdown-outline-previous)))
```

## Polymode {.center}

While it is normally impossible to associate multiple major modes with a single buffer, [Polymode](https://github.com/polymode) allows to insert sections of a major mode within another major mode

This is extremely convenient for instance to embed sections of code within human text, or even to have code executed within human text (e.g. [R Markdown](https://rmarkdown.rstudio.com/) or its successor [Quarto](https://quarto.org/), [Org Babel](https://orgmode.org/worg/org-contrib/babel/))

## Polymode {.center}

`markdown-mode` with snippets of `julia-mode`:

````
Julia has "assignment by operation" operators:

```{{julia}}
a = 2;
a += 7    # this is the same as a = a + 7
```

There is a *left* division operator:

```{{julia}}
2\8 == 8/2
```
````

## Polymode {.center}

Rendered by [Quarto](https://quarto.org/) into:

![](img/polymode.png)

## Confused? {.center}

I will be giving an intro Emacs course on September 26 and October 3

You can sign up for it [here](https://docs.google.com/forms/d/e/1FAIpQLSdOjQZ9T7xOZm8h9nuQJeYYKunRSl70Q_oze5snrQci5N_w-w/viewform)
