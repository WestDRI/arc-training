---
title: Emacs as a programming IDE
aliases:
  - emacs_prog_ide_slides.html
  - ../tools/wb_emacs_ide_slides.html
  - wb_emacs_ide_slides
frontpic: "img/emacs_python.jpg"
frontpicwidth: 50%
author: Marie-Hélène Burle
date: 2023-11-14
date-format: long
execute:
  freeze: auto
  cache: true
  error: true
  echo: true
format:
  revealjs:
    embed-resources: true
    theme: [default, ../revealjs.scss]
    logo: /img/favicon_sfudrac.png
    highlight-style: monokai
    code-line-numbers: false
    code-overflow: wrap
    template-partials:
      - ../title-slide.html
    pointer:
      color: "#b5111b"
      pointerSize: 32
    link-external-newwindow: true
    footer: <a href="wb_ide.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgb(153, 153, 153)" class="bi bi-arrow-90deg-up" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z"/></svg>&nbsp;Back to webinar page</a>
    auto-stretch: false
revealjs-plugins:
  - pointer
---

<br><br>
I am not trying to start [an editor war](https://en.wikipedia.org/wiki/Editor_war) here
<br><br>

![https://cube-drone.com](img/emacs1.jpg)

---

<br><br>
Particularly as there are now excellent IDEs for Python, Julia, and R without Emacs learning curve (think [VS Code](https://code.visualstudio.com/), [RStudio](https://posit.co/download/rstudio-desktop/), or [JupyterLab](https://jupyter.org/))

<center>![](img/learning_curve.jpg)</center>

# Why I still use (and love) Emacs

---

<br><br>
Bookmarking

:::{.fragment}
Fully customizable
:::

:::{.fragment}
Kbd for everything
:::

:::{.fragment}
Org mode (org tables!)
:::

:::{.fragment}
Organization of windows
:::

:::{.fragment}
Search and replace with regexp
:::

:::{.fragment}
[Ediff](https://www.gnu.org/software/emacs/manual/html_mono/ediff.html)
:::

:::{.fragment}
Macros
:::

:::{.fragment}
Emacs everywhere (emails, Slack, Telegram with [mu4e](https://github.com/djcb/mu), [emacs-slack](https://github.com/yuya373/emacs-slack), [telega](https://github.com/zevlg/telega.el))
:::

## [Helm](https://github.com/emacs-helm/helm) {.center}

Searching in buffer

:::{.fragment}
Navigating open buffers and recent files
:::

:::{.fragment}
Navigating file sections
:::

:::{.fragment}
Selecting from kill ring
:::

:::{.fragment}
Moving in mark ring
:::

:::{.fragment}
Looking at active modes
:::

## Completion {.center}

[company-mode](https://github.com/company-mode/company-mode)

:::{.fragment}
[yasnippet](https://github.com/joaotavora/yasnippet)
:::

:::{.fragment}
[Dynamic abbrev expansion](https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html)
:::

## Undoing/redoing with [undo-tree](https://github.com/tarsiiformes/undo-tree) {.center}

---

### Linear systems: classic undo/redo
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
```
<br>
<center>Have some file</center>

---

### Linear systems: classic undo/redo
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
```
<br>
<center>Make some edits</center>

---

### Linear systems: classic undo/redo
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" "))---3((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
```
<br>
<center>Make more edits</center>

---

### Linear systems: classic undo/redo
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" "))---3((" "))---4((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
```
<br>
<center>Make more edits</center>

---

### Linear systems: classic undo/redo
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" "))---3((" ")):::current---4((" "))
   classDef current stroke: #f96, stroke-width: 2px
```
<br>
<center>Can undo</center>

---

### Linear systems: classic undo/redo
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" ")):::current---3((" "))---4((" "))
   classDef current stroke: #f96, stroke-width: 2px
```
<br>
<center>Undo some more</center>

---

### Linear systems: classic undo/redo
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" "))---3((" ")):::current---4((" "))
   classDef current stroke: #f96, stroke-width: 2px
```
<br>
<center>Can redo</center>

---

### Linear systems: classic undo/redo
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" "))---3((" "))-.-4((" ")):::lost
   3((" "))---5((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
   classDef lost stroke-dasharray: 3 4
```
<br>
<center>Make new edits</center>

---

### Linear systems: classic undo/redo
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" "))---3((" ")):::current-.-4((" ")):::lost
   3((" "))---5((" "))
   classDef current stroke: #f96, stroke-width: 2px
   classDef lost stroke-dasharray: 3 4
```
<br>
<center>Can still undo</center>

---

### Linear systems: classic undo/redo
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" ")):::current---3((" "))-.-4((" ")):::lost
   3((" "))---5((" "))
   classDef current stroke: #f96, stroke-width: 2px
   classDef lost stroke-dasharray: 3 4
```
<br>
<center>Can still undo</center>

---

### Linear systems: classic undo/redo
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" "))---3((" ")):::current-.-4((" ")):::lost
   3((" "))---5((" "))
   classDef current stroke: #f96, stroke-width: 2px
   classDef lost stroke-dasharray: 3 4
```
<br>
<center>And can redo</center>

---

### Linear systems: classic undo/redo
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" "))---3((" "))-.-4((" ")):::lost
   3((" "))---5((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px
   classDef lost stroke-dasharray: 3 4
```
<br>
<center>But some edits are forever lost</center>

---

### Linear systems: Emacs

```{mermaid}
%%| echo: false
%%| fig-align: center
---
config:
  rankSpacing: 10
---
flowchart TD
   1((1)):::current
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```

<center>Have some file</center>

---

### Linear systems: Emacs

```{mermaid}
%%| echo: false
%%| fig-align: center
---
config:
  rankSpacing: 10
---
flowchart TD
   1((1))---2((2)):::current
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```

<center>Make some edits</center>

---

### Linear systems: Emacs

```{mermaid}
%%| echo: false
%%| fig-align: center
---
config:
  rankSpacing: 10
---
flowchart TD
   1((1))---2((2))---3((3)):::current
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```

<center>Make more edits</center>

---

### Linear systems: Emacs

```{mermaid}
%%| echo: false
%%| fig-align: center
---
config:
  rankSpacing: 10
---
flowchart TD
   1((1))---2((2))---3((3))---4((4)):::current
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```

<center>Make more edits</center>

---

### Linear systems: Emacs

```{mermaid}
%%| echo: false
%%| fig-align: center
---
config:
  rankSpacing: 10
---
flowchart TD
   1((1))---2((2))---3((3))---4((4))---5((3)):::current
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```

<center>The first undo adds a new point to the chain of edits</center>

---

### Linear systems: Emacs

```{mermaid}
%%| echo: false
%%| fig-align: center
---
config:
  rankSpacing: 10
---
flowchart TD
   1((1))---2((2))---3((3))---4((4))---5((3))---6((2)):::current
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```

<center>More undoing keeps adding points to the chain</center>

---

### Linear systems: Emacs

```{mermaid}
%%| echo: false
%%| fig-align: center
---
config:
  rankSpacing: 10
---
flowchart TD
   1((1))---2((2))---3((3))---4((4))---5((3))---6((2))---7((3)):::current
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```

<center>There is no redo: you stop undoing, then start again to undo the undo</center>

---

### Linear systems: Emacs

```{mermaid}
%%| echo: false
%%| fig-align: center
---
config:
  rankSpacing: 10
---
flowchart TD
   1((1))---2((2))---3((3))---4((4))---5((3))---6((2))---7((3))---8((5)):::current
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```

<center>You can make new edits</center>

:::{.fragment}

<center>Nothing ever gets lost, but you might get headaches</center>

:::

:::{.fragment}

<center>Example: let's go back to the starting point</center>

:::

---

### Linear systems: Emacs

```{mermaid}
%%| echo: false
%%| fig-align: center
---
config:
  rankSpacing: 10
---
flowchart TD
   1((1))---2((2))---3((3))---4((4))---5((3))---6((2))---7((3))---8((5))---9((3))---10((2))---11((3))---12((4))---13((3))---14((2))---15((1)):::current
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```

---

### Non linear system: undo-tree
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```
<br>
<center>Have some file</center>

---

### Non linear system: undo-tree
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```
<br>
<center>Make some edits</center>

---

### Non linear system: undo-tree
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" "))---3((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```
<br>
<center>Make some edits</center>

---

### Non linear system: undo-tree
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" "))---3((" "))---4((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```
<br>
<center>Make some edits</center>

---

### Non linear system: undo-tree
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" "))---3((" ")):::current---4((" "))
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```
<br>
<center>Undo</center>

---

### Non linear system: undo-tree
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" ")):::current---3((" "))---4((" "))
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```
<br>
<center>Undo</center>

---

### Non linear system: undo-tree
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" "))---3((" ")):::current---4((" "))
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```
<br>
<center>Redo</center>

---

### Non linear system: undo-tree
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" "))---3((" "))---4((" "))
   3((" "))---5((" ")):::current
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```
<br>
<center>Make new edits</center>

---

### Non linear system: undo-tree
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" "))---3((" "))---4((" "))
   3((" ")):::current---5((" "))
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```
<br>
<center>Undo</center>

---

### Non linear system: undo-tree
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" "))---2((" "))---3((" "))---4((" ")):::current
   3((" "))---5((" "))
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```
<br>
<center>Switch branch and redo the old version</center>

---

### Non linear system: undo-tree
<br>

```{mermaid}
%%| echo: false
%%| fig-align: center
flowchart TD
   1((" ")):::current---2((" "))---3((" "))---4((" "))
   3((" "))---5((" "))
   classDef current stroke: #f96, stroke-width: 2px, color: #f96
```
<br>
<center>Nothing gets lost and it is more sane to navigate the history</center>

# Emacs with Python

---

Emacs comes with a Python mode that provides syntax highlighting. For a full IDE experience, there are multiple options, the most popular of which being the [elpy](https://github.com/jorgenschaefer/elpy) package

![Code from [matplotlib](https://matplotlib.org/stable/gallery/lines_bars_and_markers/spectrum_demo.html#sphx-glr-gallery-lines-bars-and-markers-spectrum-demo-py)](img/emacs_python.jpg){width="78%"}

# Emacs with R

---

R is—as Emacs—[GNU](https://en.wikipedia.org/wiki/GNU) software and has been integrated with Emacs via the [ESS (Emacs Speaks Statistics)](https://github.com/emacs-ess/ESS) package for a very long time

<center>![](img/emacs_ess.png){width="78%"}</center>

# Emacs with Julia

---

The [julia-mode](https://github.com/JuliaEditorSupport/julia-emacs) package provides syntax highlighting and the [julia-repl](https://github.com/tpapp/julia-repl) package implements a fully functional Julia REPL, optionally with the [emacs-libvterm](https://github.com/akermu/emacs-libvterm) package

![Code from [Beautiful Makie](https://beautiful.makie.org/dev/examples/generated/2d/streamplot/poincare_vander/)](img/emacs_julia.jpg){width="78%"}

---

<br><br><br><br><br><br><br>
ESS also provides an IDE for Julia, but it does not allow for the funky Julia-specific REPL

Another sophisticated option is to use [julia-mode](https://github.com/JuliaEditorSupport/julia-emacs) with the [julia-snail](https://github.com/gcv/julia-snail) package
