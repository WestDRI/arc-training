---
title: Bookmarks and completion frameworks
author: Marie-Hélène Burle
---

:::{.def}

One of the reasons why I love working in Emacs is the ease to find and jump to files or specific locations in files. Whether it is reopening a recent document, jumping to a bookmark, hopping to a specific header, looking for an expression, it can all be done smoothly and with useful previews with a handful of kbds.

Another strength is the countless options to auto-complete text. While this is quite a separate topic, modern frameworks 

:::

## Bookmarks


## Completion frameworks

### History of code completion in Emacs

#### [IDO](https://www.gnu.org/software/emacs/manual/html_mono/ido.html) ("Interactively DO things")

![From [Xah Emacs Blog](https://wilkesley.org/~ian/xah/emacs/emacs_iswitch_vs_ido.html)](img/ido.png)

#### [IDO vertical](https://github.com/creichert/ido-vertical-mode.el)

![From [oremacs](https://oremacs.com/2015/02/09/ido-vertical/)](img/ido_vertical.png)

#### [HELM](https://github.com/emacs-helm/helm)

![From [oracleyue](https://github.com/emacs-helm/helm/issues/2023)](img/helm.png){width="60%"}

#### [Ivy](https://github.com/abo-abo/swiper)

*With optional Counsel & Swiper*

![From [abo-abo/swiper](https://github.com/abo-abo/swiper)](img/ivy.png)

### A modern framework

- Integrates beautifully with internal Emacs functions
- Easy jump back & forth between buffer and completion buffer
- Much faster than HELM
- Lightning fast previews with auto-closing buffers
- Easy customization

*External packages* \
*Use default Emacs functions (less code)* \
***Faster**, flexible, customizable with discrete units*

#### List of packages

::::{.columns}

:::{.column width="52%"}

#### Minibuffer

- [vertico](https://github.com/minad/vertico) &emsp;&emsp;&nbsp;frontend completion UI
- [orderless](https://github.com/oantolin/orderless) &emsp;backend completion style
- [consult](https://github.com/minad/consult) &emsp;&emsp;backend completion functions
- [marginalia](https://github.com/minad/marginalia/) &ensp;annotations
- [embark](https://github.com/oantolin/embark/) &emsp;&nbsp;&nbsp;&nbsp;actions on completion buffer

:::

:::{.column width="48%"}

#### In buffer

- [corfu](https://github.com/minad/corfu) &emsp;&emsp;&nbsp;frontend completion UI
- [orderless](https://github.com/oantolin/orderless) &nbsp;backend completion style
- [cape](https://github.com/minad/cape) &emsp;&emsp;&ensp;backend completion functions
- *[eglot](https://github.com/joaotavora/eglot) &emsp;&emsp;&nbsp;&nbsp;backend LSP client*

:::

::::

## Compared to previous frameworks


## Example configuration

*Vertico (frontend for completion in minibuffer)*

```{.commonlisp}
(use-package vertico
  :init
  (vertico-mode 1)
  (vertico-multiform-mode 1)
  :config
  (setq vertico-multiform-commands
	'((consult-line buffer)
	  (consult-line-thing-at-point buffer)
	  (consult-recent-file buffer)
	  (consult-mode-command buffer)
	  (consult-complex-command buffer)
	  (embark-bindings buffer)
	  (consult-locate buffer)
	  (consult-project-buffer buffer)
	  (consult-ripgrep buffer)
	  (consult-fd buffer)))
  :bind (:map vertico-map
	      ("C-k" . kill-whole-line)
	      ("C-u" . kill-whole-line)
	      ("C-o" . vertico-next-group)
	      ("<tab>" . minibuffer-complete)
	      ("M-<return>" . minibuffer-force-complete-and-exit)))

;; save search history
(use-package savehist
  :init
  (savehist-mode 1))
```
