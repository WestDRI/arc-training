---
title: A tool to rule them all
subtitle: Versions, virtual env, and co with ~~pip, pipx, pyenv, virtualenv~~ **uv**
frontpic: img/uv.png
frontpicwidth: 35%
noshadow: noshadow
author: Marie-Hélène Burle
date: 2025-05-06
date-format: long
execute:
  error: true
  echo: true
format:
  revealjs:
    embed-resources: true
    theme: [default, ../revealjspink.scss]
    logo: /img/favicon_sfudrac.png
    highlight-style: ayu
    code-line-numbers: false
    template-partials:
      - ../title-slide.html
    pointer:
      color: "#b5111b"
      pointerSize: 32
    link-external-newwindow: true
    footer: <a href="wb_uv.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgb(38,18,48)" class="bi bi-arrow-90deg-up" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z"/></svg>&nbsp;Back to webinar page</a>
    auto-stretch: false
revealjs-plugins:
  - pointer
---

```{r}

```

# Context

## A cluttered toolkit

<iframe width="900" height="600" src="https://chadsmith.dev/python-packaging/" data-external="1"></iframe>

## Age of Rust {.center}

<iframe width="900" height="600" src="https://docs.astral.sh/uv/" data-external="1"></iframe>

# Warning

:::{.info}

Do not use **uv** on the Alliance clusters. This is for your local computer only

Following is a recap of a good workflow on the Alliance clusters

:::

## Python versions on Alliance clusters {.center}

Use `module`

:::{.example}

List available Python versions:

:::

```{.bash}
module spider python
```

:::{.example}

Check how to load a particular version:

:::

```{.bash}
module spider python/3.12.4
```

:::{.example}

Load a particular version:

:::

```{.bash}
module load python/3.12.4
```

## Python packages on Alliance clusters {.center}

Create a Python virtual environment:

```{.bash}
python -m venv ~/env
```

Activate it:

```{.bash}
source ~/env/bin/activate
```

Update pip from wheel:

```{.bash}
python -m pip install --upgrade pip --no-index
```

Use `pip` to install packages and `--no-index` to use [wheels](https://docs.alliancecan.ca/wiki/Available_Python_wheels) whenever possible:

```{.bash}
python -m pip install --no-index jax[cuda12] jax-ai-stack[grain]
```

# Getting started with **uv**

## Install **uv** {.center}

<iframe width="900" height="600" src="https://docs.astral.sh/uv/getting-started/installation/" data-external="1"></iframe>

## Help {.center}

List of commands and options:

```{.bash}
uv
```

List of options:

```{.bash}
uv <command> -h	   # e.g. uv init -h
```

Man page:

```{.bash}
uv help <command>  # e.g. uv help init
```

# Stuck in a rut

*(When you can't change your workflow)*

## Drop-in replacement {.center}

You can add `uv` in front of your usual `venv` and `pip` commands

This actually runs `uv` (and neither `pip` nor `venv`) so you get the speedup, but it keeps everything compatible

## Create a virtual env {.center}

```{.bash}
uv venv
```

:::{.example}

With specific Python version:

:::

```{.bash}
uv venv --python 3.12
```

By default, the virtual env is called `.venv`. If you don't change its name, `uv` will use it automatically so you don't need to source it

## Install packages in virtual env {.center}

```{.bash}
uv pip install jax flax
```

:::{.example}

From GitHub repo:

:::

```{.bash}
uv pip install "git+https://github.com/jax-ml/jax"
uv pip install "git+https://github.com/jax-ml/jax@main"
uv pip install "git+https://github.com/jax-ml/jax@766e68c4813a30e29b4fcefaa3253a42d0e197be"
```

:::{.example}

From requirements.txt or [pyproject.toml](https://peps.python.org/pep-0518/) files:

:::

```{.bash}
uv pip install -r requirements.txt
uv pip install -r pyproject.toml
```

## All your usual commands work {.center}

```{.bash}
uv pip uninstall jax
uv pip list
uv pip freeze
…
```

# Python versions

## Install Python {.center} 

```{.bash}
uv python install
```

:::{.example}

Specific version:

:::

```{.bash}
uv python install 3.12.3
uv python install '>=3.8,<3.10'
```

:::{.example}

Specific implementation:

:::

```{.bash}
uv python install cpython
```

## Manage versions {.center}

:::{.example}

View available versions:

:::

```{.bash}
uv python list
```

:::{.example}

Uninstall Python version:

:::

```{.bash}
uv python uninstall 3.13
```

# Python projects

## Initialize projects {.center}

```{.bash}
uv init my_project
```

:::{.example}

With specific Python version:

:::

```{.bash}
uv init --python 3.12 my_project
```

:::{.example}

Customize which files get created:

:::

```{.bash}
uv init --no-readme --no-description
```

## Project structure {.center}

```{bash}
eza -aT my_project
```

```{bash}
bat -p my_project/pyproject.toml
```

## Add dependencies {.center}

You need to `cd` into the project, then you can add dependencies:

```{.bash}
cd my_project
uv add polars matplotlib
```

This creates a virtual env called `.venv` and a `uv.lock`:

```{.bash}
eza -aTL 1
```

```{bash}
#| echo: false
eza -aTL 1  my_project
```

Here again, no need to source the virtual env as long as you use `uv`

## Project file {.center}

Gets populated automatically with dependencies:

```{.bash}
bat -p pyproject.toml
```

```{bash}
#| echo: false
bat -p my_project/pyproject.toml
```

## List explicitly installed dependencies {.center}

```{.bash}
uv tree -d 1
```

```{bash}
#| echo: false
cd my_project
uv tree -d 1
```

## List all dependencies {.center}

```{.bash}
uv pip list
```

```{bash}
#| echo: false
cd my_project
uv pip list
```

## Manage dependencies {.center}

Update all dependencies in lock file and virtual env:

```{.bash}
uv sync -U
```

Remove dependencies:

```{.bash}
uv remove matplotlib
```
