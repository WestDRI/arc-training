---
title: "Python: the basics"
author: Marie-Hélène Burle
---

:::{.box}

**Running Python**

For this workshop, you can either use your own machine or our temporary JupyterHub.

:::{.note}

To access our JupyterHub, you will need a username and password that I will give you during the workshop.

:::

[This page](jh_instructions.qmd){target="_blank"} provides instructions on how to access our JupyterHub.

:::

## Help and documentation

You can access the internal Python documentation thanks to the `help` function:

```{python}
help(max)
```

:::{.note}

In Jupyter, you can also use `?max` or `max?`.

:::

## Syntax

Commands are usually written one per line, but you can write multiple commands on the same line with the separator `;`:

```{python}
a = 2.0; a
```

Tabs or 4 spaces (the number of spaces can be customized in many IDEs) have a syntactic meaning in Python and are not just for human readability:

```{python}
# Incorrect code
for i in [1, 2]:
print(i)
```

```{python}
# Correct code
for i in [1, 2]:
    print(i)
```

:::{.note}

IDEs and good text editors can indent the code automatically.

:::

Comments (snippets of text for human consumption and ignored by Python) are marked by `#`:

```{python}
# This is a full-line comment

a         # This is an inline comment
```

[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length)—the style guide for Python code—suggests a maximum of 72 characters per line for comments. Try to keep comments to the point and spread them over multiple lines if they are too long.

## Creating and deleting objects

### Assignment

The assignment statement `=` binds a name (a reference) and a value to create an [object](https://en.wikipedia.org/wiki/Object_(computer_science)) ([variable](https://en.wikipedia.org/wiki/Variable_(computer_science)), [data structure](https://en.wikipedia.org/wiki/Data_structure), [function](https://en.wikipedia.org/wiki/Function_(computer_programming)), or [method](https://en.wikipedia.org/wiki/Method_(computer_programming))).

:::{.example}

For instance, we can bind the name `a` and the value `1` to create the variable `a`:

:::

```{python}
a = 1
```

You can define multiple objects at once (here variables), assigning them the same value:

```{python}
a = b = 10
print(a, b)
```

... or different values:

```{python}
a, b = 1, 2
print(a, b)
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

```{python}
a = 1
b = a
a = 2
```

What do you think the value of `b` is now?

:::

### Choosing names

While I am using `a` and `b` a lot in this workshop (since the code has no other purpose than to demo the language itself), in your scripts you should use meaningful names (e.g. `survival`, `age`, `year`, `species`, `temperature`). It will make reading the code this much easier.

Make sure not to use the names of built-in [functions](https://docs.python.org/3/library/functions.html) or [constants](https://docs.python.org/3/library/constants.html).

### Deleting objects

Deletion of the names can be done with the `del` statement:

```{python}
var = 3
var
```

```{python}
del var
var
```

The Python garbage collector automatically removes values with no names bound to them from memory.

## Data types

Python comes with multiple [built-in types](https://docs.python.org/3/library/stdtypes.html).

:::{.example}

Examples (non exhaustive):

:::

```{python}
type(1), type(1.0), type('1'), type(3+2j), type(True)
```

:::{.note}

`int` = integer \
`float` = floating point number \
`complex` = complex number \
`str` = string \
`bool` = Boolean

:::

Python is [dynamically-typed](https://en.wikipedia.org/wiki/Type_system#DYNAMIC): names do not have types, but they are bound to typed values and they can be bound over time to values of different types.

```{python}
var = 2.3
type1 = type(var)
var = "A string."
type2 = type(var)

type1, type2
```

## Quotes

Pairs of single and double quotes are used to create strings. [PEP 8](https://peps.python.org/pep-0008/#maximum-line-length) does not recommend one style over the other. It does suggest however that once you have chosen a style, you stick to it to make scripts consistent.

```{python}
"This is a string."
```

```{python}
type("This is a string.")
```

```{python}
'This is also a string.'
```

```{python}
type('This is also a string.')
```

Apostrophes and textual quotes interfere with Python quotes. In these cases, use the opposite style to avoid any problem:

```{python}
# This doesn't work
'This string isn't easy'
```

```{python}
# This is good
"This string isn't easy"
```

```{python}
# This doesn't work
"He said: "this is a problem.""
```

```{python}
# This is good
'He said: "this is a problem."'
```

Sometimes, neither option works and you have to escape some of the quotes with `\`:

```{python}
# This doesn't work
"He said: "this string isn't easy""
```

```{python}
# This doesn't work either
'He said: "this string isn't easy"'
```

```{python}
# You can use double quotes and escape double quotes in the string
"He said: \"this string isn't easy\""
```

```{python}
# Or you can use single quotes and escape single quotes in the string
'He said: "this string isn\'t easy"'
```

## Basic operations

```{python}
3 + 2
```

```{python}
3.0 - 2.0
```

```{python}
10 / 2
```

:::{.note}

Notice how the result can be of a different type

:::

Variables can be used in operations:

```{python}
a = 3
a + 2
```

`a = a + 10` can be replaced by the more elegant:

```{python}
a += 10
a
```
