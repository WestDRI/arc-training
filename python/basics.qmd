---
title: "Python: the basics"
author: Marie-Hélène Burle
---

## Help and documentation

You can access the internal Python documentation thanks to the `help` function:

```{python}
help(max)
```

:::{.note}

In Jupyter, you can also use `?max` or `max?`.

:::

## Syntax

Commands can often written one per line, but you can write multiple commands on the same line with the separator `;`:

```{python}
a = 2.0; a
```

Tabs or 4 spaces (the number of spaces can be customized in many IDEs) have a syntactic meaning in Python and are not just for human readability:

```{python}
for i in [1, 2]:
print(i)
```

```{python}
for i in [1, 2]:
    print(i)
```

:::{.note}

IDEs and good text editors can indent the code automatically.

:::

Comments (snippets of text for human consumption and ignored by Python) are marked by `#`:

```{python}
# This is a full line comment

a         # This is an inline comment
```

[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length)—the style guide for Python code—suggests a maximum of 72 characters per line for comments. Try to keep comments to the point and spread them over multiple lines if they are too long.

## Creating and deleting objects

### Assignment

The assignment statement `=` binds a name and a value to create an [object](https://en.wikipedia.org/wiki/Object_(computer_science)) ([variable](https://en.wikipedia.org/wiki/Variable_(computer_science)), [data structure](https://en.wikipedia.org/wiki/Data_structure), [function](https://en.wikipedia.org/wiki/Function_(computer_programming)), or [method](https://en.wikipedia.org/wiki/Method_(computer_programming))).

:::{.example}

For instance, we can bind the name `a` and the value `1` to create the variable `a`:

:::

```{python}
a = 1
```

You can define multiple objects at once (here variables), assigning them the same value:

```{python}
a = b = 10
print(a, b)
```

... or different values:

```{python}
a, b = 1, 2
print(a, b)
```

### Choosing names

Make sure not to use the names of [built-in functions and types](https://docs.python.org/3/library/functions.html).

### Deleting objects

Deletion of the names can be done with the `del` statement:

```{python}
print(a, b)
```

```{python}
del a, b
a
```

```{python}
b
```

The Python garbage collector automatically removes values without names from memory.

## Data types

Python is [dynamically-typed](https://en.wikipedia.org/wiki/Type_system#DYNAMIC): variables are bound to typed objects, but they can be dynamically reallocated to objects of different types.

```{python}
print(type(52))
print(type(52.0))
print(type('52'))

var = 2.3
type1 = type(var)
var = "This is a string."
type2 = type(var)

type1, type2
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

What is the final value of the variable `b` in the following code?

:::

```{python}
a = "left"
b = a
a = "right"
```

## Quotes

```{python}
print("Jason's age in three years:", age)  # Note that we have to use double quotes here
```

## Basic operations

```{python}
age += 3                                   # Another syntax for: age = age + 3
```

## Strings

Use square brackets to get a substring:

```{python}
element = 'helium'
print(element[0])
print(element[0:3])
```

```{python}
name = 'Paul'
print(name+' Smith')   # You can add strings
print(name*10)         # You can replicate strings by mutliplying by a number
print(len(name))       # Strings have lengths
```
