---
title: Syntax
aliases:
  - basics.html
author: Marie-Hélène Burle
---

## Commands

Short commands are usually written one per line:

```{python}
a = 2.0
print(a)
```

but you can write multiple commands on the same line with the semi-colon separator:

```{python}
a = 2.0; print(a)
```

Some commands (e.g. function definitions, for loops, if else statements) span over multiple lines. The first line starts normally, but subsequent lines are indented to mark that they are part of the same command.

**This indentation—one tab or a series of spaces (often 4 spaces, but the number can be customized in many IDEs)—has a syntactic meaning in Python and is not just for human readability:**

```{python}
# Incorrect code
for i in [1, 2]:
print(i)
```

```{python}
# Correct code
for i in [1, 2]:
    print(i)
```

:::{.note}

IDEs and good text editors indent code automatically.

:::

## Comments

Comments (snippets of text for human consumption and ignored by the Python interpreter) are marked by the hashtag:

```{python}
# This is a full-line comment

print(a)         # This is an inline comment
```

:::{.note}

[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length)—the style guide for Python code—suggests a maximum of 72 characters per line for comments. Try to keep comments to the point and spread them over multiple lines if they are too long.

:::

## Basic operations

```{python}
3 + 2
```

```{python}
3.0 - 2.0
```

```{python}
10 / 2
```

:::{.note}

Notice how the result can be of a different type.

:::

Variables can be used in operations:

```{python}
a = 3
a + 2
```

`a = a + 10` can be replaced by the more elegant:

```{python}
a += 10
a
```
