---
title: Data structures
author: Marie-Hélène Burle
---

:::{.def}

Polars provides two fundamental data structures: series and data frames.

:::

## Series

In Polars, **series are one-dimensional and homogeneous** (all elements have the same data type).

:::{.note}

In other frameworks or languages (e.g. pandas, R), such data structure would be called a *vector*.

:::

```{python}
import polars as pl

s1 = pl.Series(range(5))
print(s1)
```

### Data types

Polars infers data types from the data. Defaults are Int64 and Float64. For other options, you can create typed series by specifying the type:

```{python}
s2 = pl.Series(range(5), dtype=pl.Int32)
print(s2)
```

### Named series

Series can be named:

```{python}
s3 = pl.Series("Name", ["Bob", "Luc", "Lucy"])
print(s3)
```

## Data frames

Data frames are **two-dimensional and composed of named series of equal lengths**. This means that data frames are heterogeneous, but that columns contain homogeneous data.

They can be created from:

- lists of series:

```{python}
df1 = pl.DataFrame([s3, pl.Series("Colour", ["Red", "Green", "Blue"])])
print(df1)
```

- dictionaries:

```{python}
from datetime import date

df2 = pl.DataFrame(
    {
        "Date": [
            date(2024, 10, 1),
            date(2024, 10, 2),
            date(2024, 10, 3), date(2024, 10, 6)
        ],
        "Rain": [2.1, 0.5, 0.0, 1.8],
        "Cloud cover": [1, 1, 0, 2]
        }
    )
print(df2)
```

- NumPy ndarrays:

```{python}
import numpy as np

df3 = pl.DataFrame(np.array([(1, 2), (3, 4)]))
print(df3)
```

Because NumPy ndarrays are stored in memory by rows, the values in the first dimension of the array fill in the first row. If you want to fill in the data frame by column, you use the `orient` parameter:

```{python}
df4 = pl.DataFrame(np.array([(1, 2), (3, 4)]), orient="col")
print(df4)
```

To specify column names, you can use the schema parameter:

```{python}
df5 = pl.DataFrame(np.array([(1, 2), (3, 4)]), schema=["Var1", "Var2"])
print(df5)
```

## Data types

To specify data types different from the default, you also use the schema parameter:

```{python}
df6 = pl.DataFrame(
    {
        "Rain": [2.1, 0.5, 0.0, 1.8],
        "Cloud cover": [1, 1, 0, 2],
    },
    schema={"Rain": pl.Float32, "Cloud cover": pl.Int32}
)
print(df6)
```
