---
title: Python objects
author: Marie-Hélène Burle
---

:::{.def}

This session explores the creation, naming, deletion, and types of Python objects.

:::

## Creating and deleting objects

### Assignment

The assignment statement (`=`) binds a name (a reference) and a value to create an [object](https://en.wikipedia.org/wiki/Object_(computer_science)) ([variable](https://en.wikipedia.org/wiki/Variable_(computer_science)), [data structure](https://en.wikipedia.org/wiki/Data_structure), [function](https://en.wikipedia.org/wiki/Function_(computer_programming)), or [method](https://en.wikipedia.org/wiki/Method_(computer_programming))).

:::{.example}

For instance, we can bind the name `a` and the value `1` to create the variable `a`:

:::

```{python}
a = 1
```

You can define multiple objects at once, assigning them the same value:

```{python}
a = b = 10
print(a, b)
```

... or different values:

```{python}
a, b = 1, 2
print(a, b)
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

```{python}
a = 1
b = a
a = 2
```

What do you think the value of `b` is now?

:::

### Choosing names

While I am using `a` and `b` a lot in this workshop (since the code has no other purpose than to demo the language itself), in your scripts you should use meaningful names (e.g. `survival`, `age`, `year`, `species`, `temperature`). It will make reading the code this much easier.

Make sure not to use the names of [built-in functions](https://docs.python.org/3/library/functions.html) or [built-in constants](https://docs.python.org/3/library/constants.html).

### Deleting objects

Deletion of the names can be done with the `del` statement:

```{python}
var = 3
var
```

```{python}
del var
var
```

The Python garbage collector automatically removes values with no names bound to them from memory.

## Types

Python comes with multiple [built-in types](https://docs.python.org/3/library/stdtypes.html).

:::{.example}

Examples (non exhaustive):

:::

```{python}
type(1), type(1.0), type('1'), type(3+2j), type(True), type(sum)
```

:::{.note}

`int` = integer \
`float` = floating point number \
`complex` = complex number \
`str` = string \
`bool` = Boolean

:::

Python is [dynamically-typed](https://en.wikipedia.org/wiki/Type_system#DYNAMIC): names do not have types, but they are bound to typed values and they can be bound over time to values of different types.

```{python}
var = 2.3
type1 = type(var)
var = "A string."
type2 = type(var)

type1, type2
```

You can also convert the type of some values:

```{python}
'4', type('4'), int('4'), type(int('4'))
```

```{python}
float(3)
```

```{python}
str(3.4)
```

```{python}
bool(0)
```

```{python}
bool(1)
```

```{python}
int(True)
```

```{python}
float(False)
```

Of course, not all conversions are possible:

```{python}
int('red')
```

You might be surprised by some of the conversions:

```{python}
int(3.9)
```

```{python}
bool(3.4)
```
