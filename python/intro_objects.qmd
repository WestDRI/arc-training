---
title: Python objects
author: Marie-Hélène Burle
---

:::{.def}

In Python, everything is an object. So let's talk about Python objects.

:::

## Fundamental definitions

### Object

Every piece of data in Python, whether it's a number, a string, a list, or a class instance is an object. Objects reside in memory and have a unique identity (address in memory), which can be checked using the `id` function. Objects have a type (e.g., `int`, `str`, `list`) which determines their behaviour and the operations that can be performed on them. Objects are the actual "things" that your program manipulates.

### Value

A value is what an object stores. For example, an integer object might have the value `42`, or a string object might have the value `"hello"`. Two different objects can have the same value (e.g. two distinct integer objects both storing `5`). The concept of "value" is often used when discussing the data itself, independent of its specific memory location or object identity.

### Variable

In Python, a variable is a name that refers to an object. It acts as a label or reference to the specific memory location where an object is stored. When you assign a value to a variable, you are making that variable (name) point to an object holding that particular value.

## Creating and deleting objects

### Assignment

The assignment statement (`=`) assigns a variable (or name, or label, or reference) to an object in memory. This object holds a value.

:::{.example}

For instance, we can assign the variable `a` to some object in memory that holds the value `1`:

:::

```{python}
a = 1
```

You can define multiple variables at once, assigning them the same object:

```{python}
a = b = 10
print(a, b)
```

... or different objects:

```{python}
a, b = 1, 2
print(a, b)
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

```{.python}
a = 1
b = a
a = 2
```

What do you think the value of `b` is now?

:::

:::{.callout-note collapse="true"}

## Explanation

The variable `a` gets assigned to an object holding the value `1`. Then the variable `b` gets assigned to that same object in memory (you can double-check this with `id(a) == id(b)`). Finally, we reassign the variable `a` to a new object in memory holding the value `2`. Meanwhile, the variable `b` still points to the first object with a value of `1` (so now `id(a) == id(b)` is not true anymore).

:::

### Choosing variables

While I am using `a` and `b` a lot in this workshop (since the code has no other purpose than to demo the language itself), in your scripts you should use meaningful names (e.g. `survival`, `age`, `year`, `species`, `temperature`). It will make reading the code this much easier.

Make sure not to use the names of [built-in functions](https://docs.python.org/3/library/functions.html) or [built-in constants](https://docs.python.org/3/library/constants.html).

### Deleting objects

You can delete variables with the `del` statement:

```{python}
a = 3
print(a)
```

```{python}
del a
print(a)
```

Then the garbage collector automatically deletes from memory objects with no variables assigned to them.

## Types

Python comes with multiple [built-in types](https://docs.python.org/3/library/stdtypes.html).

:::{.example}

Examples (non exhaustive):

:::

```{python}
type(1), type(1.0), type('1'), type(3+2j), type(True), type(sum)
```

:::{.note}

`int` = integer \
`float` = floating point number \
`complex` = complex number \
`str` = string \
`bool` = Boolean

:::

Python is [dynamically-typed](https://en.wikipedia.org/wiki/Type_system#DYNAMIC), meaning you do not need to explicitly declare the type of a variable. It is inferred at runtime based on the value of the object the variable is assigned to.

Variables can be reassigned to objects holding different data types:

```{python}
a = 2.3
type(a)
```

```{python}
a = "A string."
type(a)
```

### Type conversion

You can convert the type of some values. Here are some examples:

```{python}
type('4'), type(int('4'))
```

```{python}
type(3), type(str(3))
```

```{python}
type(3), type(float(3))
```

```{python}
type(3.4), type(str(3.4))
```

```{python}
type(0), type(bool(0))
```

```{python}
type(True), type(int(True))
```

Of course, not all conversions are possible:

```{python}
int('red')
```

You might be surprised by some of the conversions:

```{python}
int(3.9)
```

```{python}
bool(3.4)
```

:::{.note}

That's because the Boolean of zero is `False` and the Boolean of any non-zero number is `True`.

:::
