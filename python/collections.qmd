---
title: Collections
author: Marie-Hélène Burle
---

## Lists

Lists are declared in square brackets. **They are mutable, ordered (thus indexable), and possibly heterogeneous collections of values.**

Lists can be homogeneous:

```{python}
type(['b', 'a', 'x', 'e'])
```

```{python}
type('b') == type('a') == type('x') == type('e')
```

or heterogeneous:

```{python}
type([3, 'some string', 2.9, 'z'])
```

```{python}
type(3) == type('some string') == type(2.9) == type('z')
```

They can even be nested:

```{python}
type([3, ['b', 'e', 3.9, ['some string', 9.9]], 8])
```

The length of a list is the number of items it contains and can be obtained with the function `len`:

```{python}
len([3, ['b', 'e', 3.9, ['some string', 9.9]], 8])
```

To extract an item from a list, you index it:

```{python}
[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][0]
```

```{python}
[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][1]
```

```{python}
[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][2]
```

```{python}
# Of course you can't extract items that don't exist
[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][3]
```

:::{.note}

Python starts indexing at `0`, so what we tend to think of as the "first" element of a list is for Python the "zeroth" element.

:::

:::{.exo}

:::{.yourturn}

Your turn:

:::

How could you extract the string `'some string'` from the list `[3, ['b', 'e', 3.9, ['some string', 9.9]], 8]`?

:::

You can test whether an item is in a list:

```{python}
3 in [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]
```

```{python}
9 in [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]
```

You can get the index (position) of an item inside a list:

```{python}
[3, ['b', 'e', 3.9, ['some string', 9.9]], 8].index(3)
```

:::{.note}

Note that this only returns the index of the first occurrence:

```{python}
[3, 3, ['b', 'e', 3.9, ['some string', 9.9]], 8].index(3)
```

:::

Lists are mutable (they can be modified):

- You can replace items in a list by other items:

```{python}
L = [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]
L
```

```{python}
L[1] = 2
L
```

- You can delete items from a list:

```{python}
# Using their indices with list.pop
L.pop(2)
L
```

:::{.note}

Here, because we are using `list.pop`, `2` represents the index (the 3rd item).

:::

```{python}
# Using their indexes with del
del L[0]
L
```

:::{.note}

Notice how a list can have a single item:

```{python}
len(L)
```

:::

```{python}
# Using their values
L.remove(2)
L
```

:::{.note}

Here, because we are using `list.remove`, `2` is the value `2`.

:::

:::{.note}

Notice how a list can even be empty:

```{python}
len(L)
```

You can actually initialise empty lists:

```{python}
M = []
type(M)
```

:::

- You can add items to a list:

One at a time:

```{python}
L.append(7)
L
```

And if you want to add multiple items at once?


```{python}
# This doesn't work...
L.append(3, 6, 9)
```

```{python}
# This doesn't work either (that's not what we wanted)
L.append([3, 6, 9])
L
```

In this case, you need to use different method:

```{python}
L.extend([3, 6, 9])
L
```

- You can sort an homogeneous list:

```{python}
# Items of different types cannot be sorted
L = [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]
L.sort()
```

```{python}
L = [3, 9, 10, 0]
L.sort()
L
```

```{python}
L = ['some string', 'b', 'a']
L.sort()
L
```

## Strings

Strings behave (a little) like lists of characters in that they have a length (the number of characters):

```{python}
S = 'This is a string.'
len(S)
```

and you can index them:

```{python}
S[10:16]
```

This is where the similarities stop however: methods such as `list.sort`, `list.append`, etc. will not work on strings. You can also do with strings things you can't do with lists:

- Strings can be concatenated with `+`:

```{python}
T = 'This is another string.'
print(S + ' ' + T)
```

- Strings can be repeated with `*`:

```{python}
print(S * 3)
```

```{python}
print((S + ' ') * 3)
```

## Arrays

Python comes with a built-in [array](https://docs.python.org/3/library/array.html) module. When you need arrays for storing and retrieving data, this module is perfectly suitable and extremely lightweight. [This tutorial](https://www.softwaretestinghelp.com/how-to-use-python-array/) covers the syntax in detail.

Whenever you plan on performing calculations on your data however (which is the vast majority of cases), you should instead use the [NumPy](https://numpy.org/) package that Alex will cover this afternoon.

## Tuples

Tuples are declared in parentheses. They are immutable and ordered (thus indexable) collections of values.

## Sets

Sets are declared in square brackets.

## Dictionaries

<!-- Dictionaries are declared in curly braces. They are mutable and unordered sets of key/value pairs. -->

<!-- ```{python} -->
<!-- favs = {'mary': 'orange', 'john': 'green', 'eric': 'blue'} -->
<!-- print(favs) -->
<!-- print(favs['john']) -->
<!-- print(favs['mary']) -->
<!-- ``` -->

<!-- Now let's see how to add items to a dictionary: -->

<!-- ```{python} -->
<!-- concepts = {} -->
<!-- concepts['list'] = 'An ordered collection of values' -->
<!-- concepts['dictionary'] = 'A collection of key-value pairs' -->
<!-- print(concepts) -->
<!-- ``` -->

<!-- We can modify the values: -->

<!-- ```{python} -->
<!-- concepts['list'] = 'Simple: ' + concepts['list'] -->
<!-- concepts['dictionary'] = 'Complex: ' + concepts['dictionary'] -->
<!-- print(concepts) -->
<!-- ``` -->

<!-- Deleting dictionary pairs: -->

<!-- ```{python} -->
<!-- del concepts['list']      # Removes the key 'list' and its value -->
<!-- print(concepts) -->
<!-- ``` -->

<!-- Values can be numerical: -->

<!-- ```{python} -->
<!-- grades = {} -->
<!-- grades['mary'] = 5 -->
<!-- grades['john'] = 4.5 -->
<!-- print(grades) -->
<!-- ``` -->

<!-- The keys can also be numerical: -->

<!-- ```{python} -->
<!-- grades[1] = 2 -->
<!-- print(grades) -->
<!-- ``` -->

## Collections module

Python has a built-in [collections](https://docs.python.org/3/library/collections.html) module providing the additional data structures: [deque](https://docs.python.org/3/library/collections.html#collections.deque), [defaultdict](https://docs.python.org/3/library/collections.html#collections.defaultdict), [namedtuple](https://docs.python.org/3/library/collections.html#collections.namedtuple), [OrderedDict](https://docs.python.org/3/library/collections.html#collections.OrderedDict), [Counter](https://docs.python.org/3/library/collections.html#collections.Counter), [ChainMap](https://docs.python.org/3/library/collections.html#collections.ChainMap), [UserDict](https://docs.python.org/3/library/collections.html#collections.UserDict), [UserList](https://docs.python.org/3/library/collections.html#collections.UserList), and [UserList](https://docs.python.org/3/library/collections.html#collections.UserString), but we will not cover these in this workshop.
