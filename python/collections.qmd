---
title: Collections
author: Marie-Hélène Burle
---

## Lists

Lists are declared in square brackets. They are mutable and ordered (thus indexable) collections of values.

```{python}
T = [27.3, 27.5, 27.7, 27.5, 27.6]
print('temperature:', T)
print('length:', len(T))
```

Python starts indexing at `0`:

```{python}
print('zeroth item of T is', T[0])
print('fourth item of T is', T[4])
```

Lists are mutable (they can be modified):

```{python}
T[0] = 21.3
print('temperature is now:', T)
```

```{python}
a = [2, 3, 5]
print('a is initially', a)
a.append(7)
a.append(11)
print('a has become', a)
```

```{python}
print('a before', a)
del a[4]                 # Remove 4th element
print('a after', a)
```

You can initialize an empty list and fill it in:

```{python}
a = []                   # Start with an empty list
a.append('Vancouver')
a.append('Toronto')
a.append('Kelowna')
print(a)
```

Lists can be heterogeneous and nested:

```{python}
a = [11, 21, 31]
b = ['Mercury', 'Venus', 'Earth']
c = 'hello'
nestedList = [a, b, c]
print(nestedList)
```

You can search inside a list:

```{python}
print('Venus' in b)
print('Mars' in b)
b.index('Venus')      # Returns the index
```

And you sort lists alphabetically:

```{python}
b.sort()
print(b)
```

To delete an item from a list:

```{python}
b.pop(2)              # Using its index
print(b)

b.remove('Earth')     # Using its value
print(b)
```

## Strings

Strings are lists of characters

Use square brackets to get a substring:

```{python}
element = 'helium'
print(element[0])
print(element[0:3])
```

```{python}
name = 'Paul'
print(name+' Smith')   # You can add strings
print(name*10)         # You can replicate strings by mutliplying by a number
print(len(name))       # Strings have lengths
```

## Arrays

Python comes with a built-in [array](https://docs.python.org/3/library/array.html) module. When you need arrays for storing and retrieving data, this module is perfectly suitable and extremely light-weight. [This tutorial](https://www.softwaretestinghelp.com/how-to-use-python-array/) covers the syntax in detail.

Whenever you plan on performing calculations on your data however (which is the vast majority of cases), you should instead use the [NumPy](https://numpy.org/) package that Alex will cover this afternoon.

## Tuples

Tuples are declared in parentheses. They are immutable and ordered (thus indexable) collections of values.

## Sets

Sets are declared in square brackets.

## Dictionaries

Dictionaries are declared in curly braces. They are mutable and unordered sets of key/value pairs.

```{python}
favs = {'mary': 'orange', 'john': 'green', 'eric': 'blue'}
print(favs)
print(favs['john'])
print(favs['mary'])
```

Now let's see how to add items to a dictionary:

```{python}
concepts = {}
concepts['list'] = 'An ordered collection of values'
concepts['dictionary'] = 'A collection of key-value pairs'
print(concepts)
```

We can modify the values:

```{python}
concepts['list'] = 'Simple: ' + concepts['list']
concepts['dictionary'] = 'Complex: ' + concepts['dictionary']
print(concepts)
```

Deleting dictionary pairs:

```{python}
del concepts['list']      # Removes the key 'list' and its value
print(concepts)
```

Values can be numerical:

```{python}
grades = {}
grades['mary'] = 5
grades['john'] = 4.5
print(grades)
```

The keys can also be numerical:

```{python}
grades[1] = 2
print(grades)
```

## Collections module

Python has a built-in [collections](https://docs.python.org/3/library/collections.html) module providing the additional data structures: [deque](https://docs.python.org/3/library/collections.html#collections.deque), [defaultdict](https://docs.python.org/3/library/collections.html#collections.defaultdict), [namedtuple](https://docs.python.org/3/library/collections.html#collections.namedtuple), [OrderedDict](https://docs.python.org/3/library/collections.html#collections.OrderedDict), [Counter](https://docs.python.org/3/library/collections.html#collections.Counter), [ChainMap](https://docs.python.org/3/library/collections.html#collections.ChainMap), [UserDict](https://docs.python.org/3/library/collections.html#collections.UserDict), [UserList](https://docs.python.org/3/library/collections.html#collections.UserList), and [UserList](https://docs.python.org/3/library/collections.html#collections.UserString), but we will not cover these in this workshop.
