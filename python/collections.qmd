---
title: Collections
author: Marie-Hélène Burle
---

:::{.def}

Values can be stored in collections. This section introduces tuples, dictionaries, sets, and arrays in Python.

:::

## Lists

Lists are declared in square brackets:

```{python}
l = [2, 1, 3]
l
```

```{python}
type(l)
```

They are mutable:

```{python}
l.append(0)
l
```

Lists are ordered:

```{python}
['b', 'a'] == ['a', 'b']
```

They can have repeat values:

```{python}
['a', 'a', 'a', 't']
```

Lists can be homogeneous:

```{python}
['b', 'a', 'x', 'e']
```

```{python}
type('b') == type('a') == type('x') == type('e')
```

or heterogeneous:

```{python}
[3, 'some string', 2.9, 'z']
```

```{python}
type(3) == type('some string') == type(2.9) == type('z')
```

They can even be nested:

```{python}
[3, ['b', 'e', 3.9, ['some string', 9.9]], 8]
```

The length of a list is the number of items it contains and can be obtained with the function `len`:

```{python}
len([3, ['b', 'e', 3.9, ['some string', 9.9]], 8])
```

To extract an item from a list, you index it:

```{python}
[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][0]
```

:::{.note}

Python starts indexing at `0`, so what we tend to think of as the "first" element of a list is for Python the "zeroth" element.

:::

```{python}
[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][1]
```

```{python}
[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][2]
```

```{python}
# Of course you can't extract items that don't exist
[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][3]
```

You can index from the end of the list with negative values (here you start at `-1` for the last element):

```{python}
[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][-1]
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

How could you extract the string `'some string'` from the list `[3, ['b', 'e', 3.9, ['some string', 9.9]], 8]`?

:::

You can also slice a list:

```{python}
[3, ['b', 'e', 3.9, ['some string', 9.9]], 8][0:1]
```

:::{.note}

Notice how slicing returns a list.

Notice also how the left index is included but the right index excluded.

:::

If you omit the first index, the slice starts at the beginning of the list:

```{python}
[1, 2, 3, 4, 5, 6, 7, 8, 9][:6]
```

If you omit the second index, the slice goes to the end of the list:

```{python}
[1, 2, 3, 4, 5, 6, 7, 8, 9][6:]
```

When slicing, you can specify the stride:

```{python}
[1, 2, 3, 4, 5, 6, 7, 8, 9][2:7:2]
```

:::{.note}

The default stride is `1`:

```{python}
[1, 2, 3, 4, 5, 6, 7, 8, 9][2:7] == [1, 2, 3, 4, 5, 6, 7, 8, 9][2:7:1]
```

:::

You can reverse the order of a list with a `-1` stride applied on the whole list:

```{python}
[1, 2, 3, 4, 5, 6, 7, 8, 9][::-1]
```

You can test whether an item is in a list:

```{python}
3 in [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]
```

```{python}
9 in [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]
```

or not in a list:

```{python}
3 not in [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]
```

You can get the index (position) of an item inside a list:

```{python}
[3, ['b', 'e', 3.9, ['some string', 9.9]], 8].index(3)
```

:::{.note}

Note that this only returns the index of the first occurrence:

```{python}
[3, 3, ['b', 'e', 3.9, ['some string', 9.9]], 8].index(3)
```

:::

Lists are mutable (they can be modified). For instance, you can replace items in a list by other items:

```{python}
L = [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]
L
```

```{python}
L[1] = 2
L
```

You can delete items from a list using their indices with `list.pop`:

```{python}
L.pop(2)
L
```

:::{.note}

Here, because we are using `list.pop`, `2` represents the index (the 3rd item).

:::

or with `del`:

```{python}
del L[0]
L
```

:::{.note}

Notice how a list can have a single item:

```{python}
len(L)
```

It is then called a "singleton list".

:::

You can also delete items from a list using their values with `list.remove`:

```{python}
L.remove(2)
L
```

:::{.note}

Here, because we are using `list.remove`, `2` is the value `2`.

:::

:::{.note}

Notice how a list can even be empty:

```{python}
len(L)
```

You can actually initialise empty lists:

```{python}
M = []
type(M)
```

:::

You can add items to a list. One at a time:

```{python}
L.append(7)
L
```

And if you want to add multiple items at once?


```{python}
# This doesn't work...
L.append(3, 6, 9)
```

```{python}
# This doesn't work either (that's not what we wanted)
L.append([3, 6, 9])
L
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

Fix this mistake we just made and remove the nested list `[3, 6, 9]`.

:::

:::{.callout collapse="true"}

## Solution

One option is:

```{python}
del L[1]
```

:::

To add multiple values to a list (and not a nested list), you need to use `list.extend`:

```{python}
L.extend([3, 6, 9])
L
```

If you don't want to add an item at the end of a list, you can use `list.insert(<index>, <object>)`:

```{python}
L.insert(3, 'test')
L
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

Let's have the following list:

```{python}
L = [7, [3, 6, 9], 3, 'test', 6, 9]
```

Insert the string `'nested'` in the zeroth position of the nested list `[3, 6, 9]` in `L`.

:::

You can sort an homogeneous list:

```{python}
L = [3, 9, 10, 0]
L.sort()
L
```

```{python}
L = ['some string', 'b', 'a']
L.sort()
L
```

:::{.note}

Heterogeneous lists cannot be sorted:

```{python}
L = [3, ['b', 'e', 3.9, ['some string', 9.9]], 8]
L.sort()
```

:::

You can also get the min and max value of homogeneous lists:

```{python}
min([3, 9, 10, 0])
```

```{python}
max(['some string', 'b', 'a'])
```

:::{.note}

For heterogeneous lists, this also doesn't work:

```{python}
min([3, ['b', 'e', 3.9, ['some string', 9.9]], 8])
```

:::

Lists can be concatenated with `+`:

```{python}
L + [3, 6, 9]
```

or repeated with `*`:

```{python}
L * 3
```

:::{.info}

To sum up, lists are declared in square brackets. They are mutable, ordered (thus indexable), and possibly heterogeneous collections of values.

:::

## Strings

Strings behave (a little) like lists of characters in that they have a length (the number of characters):

```{python}
S = 'This is a string.'
len(S)
```

They have a min and a max:

```{python}
min(S)
```

```{python}
max(S)
```

You can index them:

```{python}
S[3]
```

Slice them:

```{python}
S[10:16]
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

Reverse the order of the string `S`.

:::

They can also be concatenated with `+`:

```{python}
T = 'This is another string.'
print(S + ' ' + T)
```

or repeated with `*`:

```{python}
print(S * 3)
```

```{python}
print((S + ' ') * 3)
```

This is where the similarities stop however: methods such as `list.sort`, `list.append`, etc. will not work on strings.

## Arrays

Python comes with a built-in [array](https://docs.python.org/3/library/array.html) module. When you need arrays for storing and retrieving data, this module is perfectly suitable and extremely lightweight. [This tutorial](https://www.softwaretestinghelp.com/how-to-use-python-array/) covers the syntax in detail.

Whenever you plan on performing calculations on your data however (which is the vast majority of cases), you should instead use the [NumPy](https://numpy.org/) package, covered in another section.

## Tuples

Tuples are defined with parentheses:

```{python}
t = (3, 1, 4, 2)
t
```

```{python}
type(t)
```

Tuples are ordered:

```{python}
(2, 3) == (3, 2)
```

This means that they are indexable and sliceable:

```{python}
(2, 4, 6)[2]
```

```{python}
(2, 4, 6)[::-1]
```

They can be nested:

```{python}
type((3, 1, (0, 2)))
```

```{python}
len((3, 1, (0, 2)))
```

```{python}
max((3, 1, 2))
```

They can be heterogeneous:

```{python}
type(('string', 2, True))
```

You can create empty tuples:

```{python}
type(())
```

You can also create singleton tuples, but the syntax is a bit odd:

```{python}
# This is not a tuple...
type((1))
```

```{python}
# This is the weird way to define a singleton tuple
type((1,))
```

However, the big difference with lists is that tuples are **immutable**:

```{python}
T = (2, 5)
T[0] = 8
```

Tuples are quite fascinating:

```{python}
a, b = 1, 2
a, b
```

```{python}
a, b = b, a
a, b
```

:::{.info}

Tuples are declared in parentheses. They are immutable, ordered (thus indexable), and possibly heterogeneous collections of values.

:::

## Sets

Sets are declared in curly braces:

```{python}
s = {3, 2, 5}
s
```

```{python}
type(s)
```

Sets are unordered:

```{python}
{2, 4, 1} == {4, 2, 1}
```

Consequently, it makes no sense to index a set.

Sets can be heterogeneous:

```{python}
S = {2, 'a', 'string'}
isinstance(S, set)
```

```{python}
type(2) == type('a') == type('string')
```

There are no duplicates in a set:

```{python}
{2, 2, 'a', 2, 'string', 'a'}
```

You can define an empty set, but only with the `set` function (because empty curly braces define a dictionary):

```{python}
t = set()
t
```

```{python}
len(t)
```

```{python}
type(t)
```

Since strings an iterables, you can use `set` to get a set of the unique characters:

```{python}
set('abba')
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

How could you create a set with the single element `'abba'` in it?

:::

:::{.info}

Sets are declared in curly brackets. They are mutable, unordered (thus non indexable), possibly heterogeneous collections of unique values.

:::

## Dictionaries

Dictionaries are declared in curly braces. They associate values to keys:

```{python}
d = {'key1': 'value1', 'key2': 'value2'}
d
```

```{python}
type(d)
```

Dictionaries are unordered:

```{python}
{'a': 1, 'b': 2} == {'b': 2, 'a': 1}
```

Consequently, the pairs themselves cannot be indexed. However, you can access values in a dictionary from their keys:

```{python}
D = {'c': 1, 'a': 3, 'b': 2}
D['b']
```

```{python}
D.get('b')
```

```{python}
D.items()
```

```{python}
D.values()
```

```{python}
D.keys()
```

To return a sorted list of keys:

```{python}
sorted(D)
```

You can create empty dictionaries:

```{python}
E = {}
type(E)
```

Dictionaries are mutable, so you can add, remove, or replace items.

Let's add an item to our empty dictionary `E`:

```{python}
E['author'] = 'Proust'
E
```

We can add another one:

```{python}
E['title'] = 'In search of lost time'
E
```

We can modify one:

```{python}
E['author'] = 'Marcel Proust'
E
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

Add a third item to E with the number of volumes.

:::

We can also remove items:

```{python}
E.pop('author')
E
```

Another method to remove items:

```{python}
del E['title']
E
```

:::{.info}

Dictionaries are declared in curly braces. They are mutable and unordered collections of key/value pairs. They play the role of an associative array.

:::

## Conversion between collections

From tuple to list:

```{python}
list((3, 8, 1))
```

From tuple to set:

```{python}
set((3, 2, 3, 3))
```

From list to tuple:

```{python}
tuple([3, 1, 4])
```

From list to set:

```{python}
set(['a', 2, 4])
```

From set to tuple:

```{python}
tuple({2, 3})
```

From set to list:

```{python}
list({2, 3})
```


## Collections module

Python has a built-in [collections](https://docs.python.org/3/library/collections.html) module providing the additional data structures: [deque](https://docs.python.org/3/library/collections.html#collections.deque), [defaultdict](https://docs.python.org/3/library/collections.html#collections.defaultdict), [namedtuple](https://docs.python.org/3/library/collections.html#collections.namedtuple), [OrderedDict](https://docs.python.org/3/library/collections.html#collections.OrderedDict), [Counter](https://docs.python.org/3/library/collections.html#collections.Counter), [ChainMap](https://docs.python.org/3/library/collections.html#collections.ChainMap), [UserDict](https://docs.python.org/3/library/collections.html#collections.UserDict), [UserList](https://docs.python.org/3/library/collections.html#collections.UserList), and [UserList](https://docs.python.org/3/library/collections.html#collections.UserString).
