---
title: The next generation of Python notebooks
frontpic: img/logo_marimo.svg
frontpicwidth: 45%
frontpicmargintop: 40px
frontpicmarginbottom: 50px
noshadow: noshadow
author: Marie-Hélène Burle
date: 2025-10-28
date-format: long
execute:
  freeze: auto
  cache: true
  error: true
  echo: true
format:
  revealjs:
    <!-- embed-resources: true -->
    theme: [default, ../revealjsgreen.scss]
    logo: /img/favicon_sfudrac.png
    highlight-style: vim-dark
    code-line-numbers: false
    template-partials:
      - ../title-slide.html
    pointer:
      color: "#b5111b"
      pointerSize: 32
    link-external-newwindow: true
    footer: <a href="wb_marimo.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgb(64,81,181)" class="bi bi-arrow-90deg-up" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z"/></svg>&nbsp;Back to webinar page</a>
    auto-stretch: false
revealjs-plugins:
  - pointer
---

## Notes {.center}

- I am making an opinionated decision to use [uv](https://docs.astral.sh/uv/) (because it is great)
- Notebooks are great for prototyping but [not at scale](intro_hpc)
- `marimo` is not available on the Alliance clusters at this point

# A new notebook

## What's wrong with Jupyter? {.center}

Jupyter notebooks are very popular but they come with

- a nightmare for version control
- an awkward JSON file format
- [reproducibility issues](https://blog.jetbrains.com/datalore/2020/12/17/we-downloaded-10-000-000-jupyter-notebooks-from-github-this-is-what-we-learned/#consistency-of-notebooks)

## DAC notebooks {.center}

marimo notebooks automatically generate an [intermediate representation (IR)](https://en.wikipedia.org/wiki/Intermediate_representation) in the form of a [directed acyclic graph (DAC)](https://en.wikipedia.org/wiki/Directed_acyclic_graph) of

- *definitions* of global variables
- *references* of global variables

Each cell is parsed into an [abstract syntax tree (AST)](https://en.wikipedia.org/wiki/Abstract_syntax_tree)

Statically inferred (no runtime tracing)

## Saved as Python file {.center}

::::{.columns}

:::{.column width="50%"}

Notebooks are saved as `.py` files \
Each cell stored as a function \
Pure functions can be reused as modules

:::

:::{.column width="3%"}
:::

:::{.column width="47%"}
:::

::::

. . .

::::{.columns}

:::{.column width="40%"}
:::

:::{.column width="5%"}

<br>
➔

:::

:::{.column width="55%"}

Easy version control \
Directly executable as script or web app \
Readable in any text editor

:::

::::

## The constraints {.center}

Names can't be reused

Even reusing `i` in loops is a problem

Variables local to a cell are created with `_`

So `_i` can be reused between cells:

```{.python}
for _i in range(10):
    ...
```

Can't use mutations

# Getting started

## Installation {.center}

Create a [`uv` project](https://docs.astral.sh/uv/concepts/projects/):

```{.bash}
uv init --bare
```

Install marimo in it as a [development dependency](https://docs.astral.sh/uv/concepts/projects/dependencies/#development-dependencies):

```{.bash}
uv add --dev marimo
```

(Optional) add tools `marimo` can make use of:

```{.bash}
uv add --dev ruff basedpyright mcp
```

## Configuration {.center}

Via GUI

- Notebook settings
- User settings

User settings saved in `~/.config/marimo/marimo.toml` or similar \
Logs found at `~/.cache/marimo/logs` or similar

## Package manager {.center}

User [settings]{.codelike} ➔ [Package Management]{.codelike} ➔ [Manager]{.codelike}: `uv`

## AI pair programming {.center}

### Code completion

Use [GitHub Copilot](https://github.com/features/copilot) without account

### AI assistant

Use any of the classic LLMs with API key

### MCP servers

- `marimo` docs
- [Context7](https://context7.com/)

## Tutorials {.center}

```{.bash}
uv run marimo tutorial intro
```

For more tutorials, replace `intro` with any of:

`dataflow` \
`ui` \
`markdown` \
`plots` \
`sql` \
`layout` \
`fileformat` \
`markdown-format` \
`for-jupyter-users`

# Usage

## ipynb notebooks conversion {.center}

```{.bash}
marimo convert notebook.ipynb -o notebook.py
```

IPython magics are replaced by Python functions

## Package installation {.center}

Using `uv`:

```{.bash}
uv add <package>
```

:::{.example}

Example:

:::

```{.bash}
uv add numpy
```

or via GUI (after it has been [set properly](package-manager))

