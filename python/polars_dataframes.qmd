---
title: The world of data frames
author: Marie-Hélène Burle
---

:::{.def}

Let's talk about data frames, how they came to the world of programming, how Pandas had the monopoly for many years in Python, and how things are changing very quickly at the moment.

:::

## Tabular data

Many fields of machine learning, data science, and humanities rely on tabular data where

- columns hold variables and are homogeneous (same data type),
- rows contain observations and can be heterogeneous.

Early computer options to manipulate such data were limited to [spreadsheets](https://en.wikipedia.org/wiki/Spreadsheet) (e.g. Microsoft Excel).

Dataframes (data frames or DataFrames) are two dimensional objects that brought tabular data to programming.

## Early history of dataframes

After data frames emerged in S, then R, they were added to Python with the library [Pandas](https://pandas.pydata.org/) in 2008.

```{dot}
//| echo: false
//| fig-height: 250px

strict graph {
  
bgcolor="transparent"
graph [fontname="Inconsolata, sans-serif"]
node [fontname="Inconsolata, sans-serif", fontsize=15]

y1 [label=1990, shape=plaintext, group=g1, group=g1]
y2 [label=2000, shape=plaintext, group=g1, group=g1]
y3 [label=2008, shape=plaintext, group=g1]

l1 [label="S programming language", href="https://en.wikipedia.org/wiki/S_(programming_language)", shape=plaintext, group=g2, fontcolor="#5592FD"]
l2 [label="R", href="https://en.wikipedia.org/wiki/R_(programming_language)", shape=plaintext, group=g2, fontcolor="#5592FD"]
l3 [label="Pandas (Python)", href="https://en.wikipedia.org/wiki/Pandas_(software)", shape=plaintext, group=g2, fontcolor="#5592FD"]

{rank=same; y1 l1}

y1 -- y2 -- y3
l1 -- l2 -- l3 [style=invis]

}
```

The world was simple ... but slow with high memory usage and it remains thus for a long time.

## Issues with Pandas

While Pandas was *the* Python data frame library and is now at the core of many other libraries, [Wes McKinney](https://wesmckinney.com/) (pandas creator) himself [has complaints about it](https://wesmckinney.com/blog/apache-arrow-pandas-internals/), mostly:

- the internals are too far from the hardware,
- no support for memory-mapped datasets,
- poor performance in database and file ingest / export,
- lack of proper support for missing data,
- lack of memory use and RAM management transparency,
- weak support for categorical data,
- `groupby` operations are complex, awkward, and slow,
- appending data to a DataFrame tedious and very costly,
- limited, non-extensible type metadata,
- eager evaluation model with no query planning,
- slow and limited multicore algorithms for large datasets.

## A rich new field

After years of Pandas as *the* Python dataframe library, there is currently an exuberant explosion of faster alternatives.

### Parallel computing

The Python [global interpreter lock (GIL)](https://en.wikipedia.org/wiki/Global_interpreter_lock) gets in the way of multi-threading.

Libraries such as [Ray](https://github.com/ray-project/ray), [Dask](https://github.com/dask/dask), and [Apache Spark](https://github.com/apache/spark) allow the use of multiple cores and bring dataframes to clusters.

Dask and Spark have APIs for Pandas and [Modin](https://docs.ray.io/en/latest/ray-more-libs/modin/index.html) makes this even more trivial by providing a drop-in replacement for Pandas on Dask, Spark, and Ray.

[fugue](https://github.com/fugue-project/fugue/) provides a unified interface for distributed computing that works on Spark, Dask, and Ray.

### Accelerators

[RAPIDS](https://rapids.ai/) brings dataframes on the GPUs with the [cuDF library](https://github.com/rapidsai/cudf).

Integration with pandas is easy.

### Lazy out-of-core

[Vaex](https://github.com/vaexio/vaex) exists as an alternative to pandas.

### SQL

[Structured query language (SQL)](https://en.wikipedia.org/wiki/SQL) handles [relational databases](https://en.wikipedia.org/wiki/Relational_database), but the distinction between SQL and dataframe software is getting increasingly blurry with most libraries now able to handle both.

[DuckDB](https://github.com/duckdb/duckdb) is a very fast and popular option with good integration with pandas.

Many additional options such as [dbt](https://github.com/dbt-labs/dbt-core) and the [snowflake snowpark Python API](https://github.com/snowflakedb/snowpark-python) exist, although integration with pandas is not always as good.

## Polars

And then came [Polars](https://pola.rs/).

The new memory standard is [Apache Arrow](https://arrow.apache.org/) and the most efficient library making use of it is Polars.

In addition, most libraries are developing an integration with Polars, lodging it nicely in the Python ecosystem.

For maximum dataframe efficiency, the best strategy currently seems to be:

- single machine&nbsp; ➔ &nbsp;use Polars,
- cluster&nbsp; ➔ &nbsp;use Polars + [fugue](https://github.com/fugue-project/fugue/) ([example benchmark](https://medium.com/fugue-project/benchmarking-pyspark-pandas-pandas-udfs-and-fugue-polars-198c3109a226), [documentation of Polars integration](https://fugue-tutorials.readthedocs.io/tutorials/integrations/backends/polars.html)),
- GPUs available&nbsp; ➔ &nbsp;use Polars + [RAPIDS](https://rapids.ai/) library [cuDF](https://github.com/rapidsai/cudf) ([Polars integration coming soon](https://pola.rs/posts/polars-on-gpu/)),
- SQL&nbsp; ➔ &nbsp;use Polars + [DuckDB](https://github.com/duckdb/duckdb) ([documentation of Polars integration](https://duckdb.org/docs/guides/python/polars.html)),
- combination of the above (e.g. cluster with GPUs)&nbsp; ➔ &nbsp;use a combination of the above tools (e.g. Polars + fugue + RAPIDS).

### Comparison with Pandas

#### Overview

| | Pandas | Polars |
|--|--|--|
| Available for | Python | Rust, Python, R, NodeJS |
| Written in | Cython | Rust |
| Multithreading | Some operations | Yes (GIL released) |
| Index | Rows are indexed | Integer positions are used |
| Evaluation | Eager only | Lazy and eager |
| Query optimizer | No | Yes |
| Out-of-core | No | Yes |
| [SIMD](https://en.wikipedia.org/wiki/Single_instruction,_multiple_data) vectorization | Yes | Yes |
| Data in memory | With [NumPy](https://github.com/numpy/numpy) arrays | With [Apache Arrow](https://github.com/apache/arrow) arrays |
| Memory efficiency | Poor | Excellent |
| Handling of missing data | Inconsistent | Consistent, promotes type stability |

<!-- #### Table visualization -->

<!-- While Pandas comes with internal capabilities [to make publication ready tables](https://pandas.pydata.org/docs/user_guide/style.html), Polars [integrates very well](https://posit-dev.github.io/great-tables/blog/polars-styling/) with [great-tables](https://github.com/posit-dev/great-tables) to achieve the same goal. -->

#### Performance

Let's go back to the [FizzBuzz](https://en.wikipedia.org/wiki/Fizz_buzz#:~:text=Fizz%20buzz%20is%20a%20group,with%20the%20word%20%22fizzbuzz%22.) problem.

[The best method with Pandas used masks](https://wgpages.netlify.app/python2/python-13-pandas/#three-solutions-to-a-classification-problem). Let's see how Polars fares in comparison.

First, let's load the packages we will need:

```{python}
import pandas as pd
import numpy as np
import polars as pl
```

And let's make sure that the code works.

With Pandas:

```{.python}
df_pd = pd.DataFrame()
size = 10_000
df_pd["number"] = np.arange(1, size+1)
df_pd["response"] = df_pd["number"].astype(str)
df_pd.loc[df_pd["number"] % 3 == 0, "response"] = "Fizz"
df_pd.loc[df_pd["number"] % 5 == 0, "response"] = "Buzz"
df_pd.loc[df_pd["number"] % 15 == 0, "response"] = "FizzBuzz"

df_pd
```

```
      number response
0          1        1
1          2        2
2          3     Fizz
3          4        4
4          5     Buzz
...      ...      ...
9995    9996     Fizz
9996    9997     9997
9997    9998     9998
9998    9999     Fizz
9999   10000     Buzz

[10000 rows x 2 columns]
```

With Polars:

```{.python}
size = 10_000
df_pl = pl.DataFrame({"number": np.arange(1, size+1)})
df_pl.with_columns(pl.col("number").cast(pl.String).alias("response"))
df_pl.with_columns(
    pl.when(pl.col("number") % 3 == 0)
    .then(pl.lit("Fizz"))
    .when(pl.col("number") % 5 == 0)
    .then(pl.lit("Buzz"))
    .when(pl.col("number") % 15 == 0)
    .then(pl.lit("FizzBuzz"))
    .otherwise(pl.col("number"))
    .alias("response")
)
```

```
shape: (10_000, 2)
┌────────┬──────────┐
│ number ┆ response │
│ ---    ┆ ---      │
│ i64    ┆ str      │
╞════════╪══════════╡
│ 1      ┆ 1        │
│ 2      ┆ 2        │
│ 3      ┆ Fizz     │
│ 4      ┆ 4        │
│ 5      ┆ Buzz     │
│ …      ┆ …        │
│ 9996   ┆ Fizz     │
│ 9997   ┆ 9997     │
│ 9998   ┆ 9998     │
│ 9999   ┆ Fizz     │
│ 10000  ┆ Buzz     │
└────────┴──────────┘
```

Now, let's time them.

Pandas:

```{.python}
%%timeit

df_pd = pd.DataFrame()
size = 10_000
df_pd["number"] = np.arange(1, size+1)
df_pd["response"] = df_pd["number"].astype(str)
df_pd.loc[df_pd["number"] % 3 == 0, "response"] = "Fizz"
df_pd.loc[df_pd["number"] % 5 == 0, "response"] = "Buzz"
df_pd.loc[df_pd["number"] % 15 == 0, "response"] = "FizzBuzz"
```

```
4.75 ms ± 9.76 μs per loop (mean ± std. dev. of 7 runs, 100 loops each)
```

Polars:

```{.python}
%%timeit

size = 10_000
df_pl = pl.DataFrame({"number": np.arange(1, size+1)})
df_pl.with_columns(pl.col("number").cast(pl.String).alias("response"))
df_pl.with_columns(
    pl.when(pl.col("number") % 3 == 0)
    .then(pl.lit("Fizz"))
    .when(pl.col("number") % 5 == 0)
    .then(pl.lit("Buzz"))
    .when(pl.col("number") % 15 == 0)
    .then(pl.lit("FizzBuzz"))
    .otherwise(pl.col("number"))
    .alias("response")
)
```

```
518 μs ± 580 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)
```

That's a speedup of almost 10 (the longer the series, the larger this speedup will be).

Polars: 1, Pandas: 0 🙂

But it gets even better: **Polars support [lazy evaluation](https://en.wikipedia.org/wiki/Lazy_evaluation)**. Let's go back to [the jeopardy example with a large file](https://wgpages.netlify.app/python2/python-13-pandas/#example-with-a-larger-dataframe).

[Lazy evaluation is not yet implemented when reading files from the cloud](https://github.com/pola-rs/polars/issues/13115) (Polars is a very new tool, but its functionalities are expanding very fast). This means that we cannot test the benefit of lazy evaluation in our example by using the CSV file in its current location (<https://github.com/pola-rs/polars/issues/13115>).

I downloaded it on our training cluster however so that we can run the test.

First, let's make sure that the code works.

Pandas:

```{.python}
df_pd = pd.read_csv("/project/def-sponsor00/data/jeopardy.csv")
df_pd.loc[df_pd["Category"] == "HISTORY"].shape
```

```
(349, 7)
```

Polars:

```{.python}
df_pl = pl.scan_csv("/project/def-sponsor00/data/jeopardy.csv")
df_pl.filter(pl.col("Category") == "HISTORY").collect().shape
```

```
(349, 7)
```

And now for the timing.

Pandas:

```{.python}
%%timeit

df_pd = pd.read_csv("/project/def-sponsor00/data/jeopardy.csv")
df_pd.loc[df_pd["Category"] == "HISTORY"].shape
```

```
331 ms ± 2.29 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
```

Polars:

```{.python}
%%timeit

df_pl = pl.scan_csv("/project/def-sponsor00/data/jeopardy.csv")
df_pl.filter(pl.col("Category") == "HISTORY").collect().shape
```

```
13.1 ms ± 175 μs per loop (mean ± std. dev. of 7 runs, 100 loops each)
```

That's a speedup of 25 (the larger the file, the larger this speedup will be). This is because `pl.scan_csv` doesn't read the file. Instead, it creates a future. By using a lazy query, only the part of the file that is necessary actually gets read in. This potentially saves a lot of time for very large files and it even allows to work with files too large to fit in memory.

Lazy evaluation also allows the query optimizer to combine operations where possible, very much the way compiled languages work.

To evaluate the future and get a result, we use the `collect` method.

:::{.note}

Note that Polars also has a `pl.read_csv` function if you want to use eager evaluation.

:::

Polars: 2, Pandas: 0 🙂

<!-- Comparisons between Polars and distributed (Dask, Ray, Spark) or GPU (RAPIDS) libraries aren't the most pertinent since they can be used in *combination with* Polars and the benefits can thus be combined. -->

<!-- It makes most sense to compare Polars with another library occupying the same "niche" such as Pandas or Vaex. -->

<!-- The net is full of benchmarks with consistent results: Polars is 3 to 150 times faster than Pandas. -->

<!-- Pandas is trying to fight back: v 2.0 came with optional Arrow support instead of NumPy, then [it became the default engine](https://dataalgo.medium.com/pandas-2-0-ditches-numpy-for-pyarrow-what-you-need-to-know-cbba4cb60249), but performance remains way below that of Polars (e.g. in [DataCamp benchmarks](https://www.datacamp.com/tutorial/high-performance-data-manipulation-in-python-pandas2-vs-polars), [official benchmarks](https://pola.rs/posts/benchmarks/), many blog posts for [whole scripts](https://medium.com/@asimandia/benchmarking-performance-polars-vs-vaex-vs-pandas-f1c889dccc12) or [individual tasks](https://medium.com/cuenex/pandas-2-0-vs-polars-the-ultimate-battle-a378eb75d6d1)). -->

<!-- As for Vaex, [it seems twice slower](https://medium.com/@asimandia/benchmarking-performance-polars-vs-vaex-vs-pandas-f1c889dccc12) and [development has stalled over the past 10 months](https://github.com/vaexio/vaex). -->

<!-- The only framework performing better than Polars in some benchmarks is [datatable](https://github.com/h2oai/datatable) (derived from the R package [data.table](https://cran.r-project.org/web/packages/data.table/index.html)), but it hasn't been developed for 6 months—a sharp contrast with the fast development of Polars. -->
