---
title: Getting the data
author: Marie-Hélène Burle
---

:::{.def}

In this section, we will import the pdf of a book from an online URL into Python.

:::

## The text

::::{layout="[8, -1, 12]"}

:::{.col1}

[Wyrd Sisters](https://en.wikipedia.org/wiki/Wyrd_Sisters), the sixth [Discworld](https://en.wikipedia.org/wiki/Discworld) novel by [Terry Pratchett](https://en.wikipedia.org/wiki/Terry_Pratchett) published in 1988, has countless references to [Macbeth](https://en.wikipedia.org/wiki/Macbeth) (including, obviously, the title), other [Shakespeare](https://en.wikipedia.org/wiki/William_Shakespeare)'s plays, [the Marx Brothers](https://en.wikipedia.org/wiki/Marx_Brothers), [Charlie Chaplin](https://en.wikipedia.org/wiki/Charlie_Chaplin), and [Laurel and Hardy](https://en.wikipedia.org/wiki/Laurel_and_Hardy).
<br><br>
The book is available as a pdf at [this URL](https://funnyengwish.wordpress.com/wp-content/uploads/2017/05/pratchett_terry_wyrd_sisters_-_royallib_ru.pdf) and this is the text we will use for this course.

:::

:::{.col2}

![Art by [Josh Kirby](https://en.wikipedia.org/wiki/Josh_Kirby) used for the cover of Wyrd Sisters](img/wyrd.jpg)

:::

::::

## Packages needed

First off, we need to load two of the packages that you installed in the previous section:

- [Requests](https://requests.readthedocs.io/en/latest/): this package sends requests to websites to download information. We will use it to download the pdf.
- [PyMuPDF](https://pymupdf.readthedocs.io/en/latest/): this package will allow us to extract the content from the pdf.

Let's load the packages into our session to make them available:

```{python}
import requests
import pymupdf
```

## Download the data

First, let's create a string with the URL of the online pdf:

```{python}
url = "https://funnyengwish.wordpress.com/wp-content/uploads/2017/05/pratchett_terry_wyrd_sisters_-_royallib_ru.pdf"
```

Now we can send a request to that URL to download the data and create a `response` object:

```{python}
response = requests.get(url)
```

Let's print the value of our response to ensure that it was successful:

```{python}
print(response)
```

:::{.note}

On the list of [HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes), you can see that `200` means OK. So our request was successful.

:::

Then we extract the text from the pdf:

```{python}
data = response.content
doc = pymupdf.Document(stream=data)
```

Let's explore this `doc` object that we created.

It is a `Document` object from the pymupdf package:

```{python}
type(doc)
```

The first element corresponds to the first page of the pdf:

```{python}
doc[0]
```

:::{.note}

Remember that indexing in Python starts at `0`.

:::

```{python}
type(doc[0])
```

The pdf had 139 pages:

```{python}
len(doc)
```

We can get the text of the first page with the `get_text` method. Let's create an string that we call `page1` with this text:

```{python}
page1 = doc[0].get_text()
```

We can now print the text of the first page of the pdf:

```{python}
print(page1)
```
