---
title: First dab at playing with an LLM
author: Marie-H√©l√®ne Burle
---

:::{.def}

In this section, we will download a text from a URL and get some info on it.

:::

## Open a chat

Open an LLM chat interface. If you are familiar with a particular LLM, feel free to use that one. If you have never used an LLM before, you can pick one in [the non-exhaustive list I gave in the previous section](llm_why.html#which-llm-to-use).

It would be great if you could sit next to someone using a different model so that you could compare the outputs given by both models to similar prompts.

You will probably have to create an account. Also note that for most companies, the free models are older and less powerful than those in the pay versions or you might be limited to a certain number of queries.

## Open a notebook

Open a new notebook in JupyterLab.

When the LLM gives us some code, we will copy paste it in the notebook to run it.

## LLM as instructor

LLMs are great at teaching programming concepts. For instance, you learnt about loops this morning. Let's ask our LLM to explain Python loops.

Here is the question I asked the LLM:

:::{.llm}

Explain to me how to write Python loops.

:::

:::{.exo}

:::{.yourturn}

Your turn:

:::

Ask questions about variables, data types, dictionaries, and other things you learnt this mourning. In particular, ask questions about things you didn't fully understand.

:::

Now, let's learn something that wasn't covered this mourning: writing Python functions.

:::{.exo}

:::{.yourturn}

Your turn:

:::

- Ask the LLM what Python functions are.

- Ask how to write them.

- Ask the model to write a Python function that would give you the time.

:::

<!-- ```{python} -->
<!-- from datetime import datetime -->

<!-- def get_current_time(): -->
<!--     # Get the current local time -->
<!--     now = datetime.now() -->
<!--     # Format the time as HH:MM:SS -->
<!--     return now.strftime("%H:%M:%S") -->

<!-- # Example usage: -->
<!-- print("The current time is:", get_current_time()) -->
<!-- ``` -->

## LLM as coder

### Download a text file from a URL

The snippet of text we will play with is in a text file I created containing the very beginning of the novel [Going Postal](https://en.wikipedia.org/wiki/Going_Postal) by [Terry Pratchett](https://en.wikipedia.org/wiki/Terry_Pratchett). I made it available at the URL <https://mint.westdri.ca/python/data/pratchett.txt>.

Let's ask our LLM how to do this. Here is the prompt I use (feel free to write your own prompt):

:::{.llm}

How can I download the text from this url: https://mint.westdri.ca/python/data/pratchett.txt in Python?

:::

On my end, I got some nice explanations and the following code:

```{python}
import requests

url = "https://mint.westdri.ca/python/data/pratchett.txt"
response = requests.get(url)
text = response.text  # This contains the text content as a string

print(text)  # Prints the downloaded text
```

:::{.note}

Note that the comments in the code are not mine but from the LLM, which is nice.

:::

It looks like the code works.

### Count a few things

Now, let's count the number of words in the text.

I asked the follow-up question (here again, you can phrase the question however you want. It is good to experiment):

:::{.llm}

Write Python code to count the number of words in this text.

:::

Here again, I got some explanations and the following code:

```{python}
# Split the text into words using whitespace
words = text.split()
word_count = len(words)

print(f"Number of words in the text: {word_count}")
```

:::{.llm}

Write Python code to find the number of times the word "the" occurs in the text.

:::

Here, the LLM warned me that the following answer counts all instances of "the" (ignoring case) and that if this was not what I wanted, I just had to say so in a follow-up chat entry. This is what I wanted, so I am keeping the code as is:

```{python}
import re

# Use regular expressions to find all whole-word, case-insensitive matches of "the"
the_count = len(re.findall(r'\bthe\b', text, flags=re.IGNORECASE))

print(f'The word "the" occurs {the_count} times in the text.')
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

- Ask your LLM to explain the regular expression in the code.

- We all know that LLMs hallucinate and make plenty of mistakes. You should never trust the code (or any LLM answer for that matter) uncritically. How could you double-check that this code is correct?

:::

<!-- - try a different model -->
<!-- - how many words are there in the first sentence? (then count to confirm) -->

### Extracting quotes

Now, let's extract all quotes from the text.

My prompt:

:::{.llm}

Write Python code that would extract all the quotes from the text

:::

Here is the code I got in the answer:

```{python}
# Extract all quotes enclosed in double quotes
quotes = re.findall(r'"(.*?)"', text)

# Example: print the first 10 quotes
for quote in quotes[:10]:
    print(quote)
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

- This looks good, but what if we want *all* the quotes from the text?

- What does `quotes[:10]` mean?

- What kind of structure is this:

```{.python}
for quote in quotes[:10]:
    print(quote)
```

- How do such structures work?

:::

## LLM as debugger

Here is a Python code snippet:

```{python}
import string

clean_text = text.translate(str.maketrans(string.punctuation))
print(clean_text)
```

It doesn't work üôÅ

:::{.exo}

:::{.yourturn}

Your turn:

:::

- What is wrong with it?

- What would be the proper syntax?

- What does that code do?

:::

<!-- ```{python} -->

<!-- clean_text = text.translate(str.maketrans('', '', string.punctuation)) -->
<!-- print(clean_text) -->
<!-- ``` -->
<!-- ``` -->
