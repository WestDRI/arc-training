---
title: Writing functions
author: Marie-Hélène Burle
---

:::{.def}

Python comes with a number of built-in functions. Packages can provide additional ones. In many cases however, you will want to create your own functions to perform exactly the computations that you need.

In this section, we will see how to define new functions.

:::

## Syntax

The function definition syntax follows:

```default
def <name>(<arguments>):
    <body>
```

Once defined, new functions can be used as any other function.

Let's give this a try by creating some greeting functions.

## Function without argument

Let's start with the simple case in which our function does not accept any argument:

```{python}
def hello():
    print('Hello')
```

Then we call it:

```{python}
hello()
```

This was great, but ...

```{python}
hello('Marie')
```

... it does not accept arguments.

## Function with one argument

Let's step this up with a function which can accept an argument:

```{python}
def greetings(name):
    print('Hello ' + name)
```

This time, this works:

```{python}
greetings('Marie')
```

However, this does not work anymore:

```{python}
greetings()
```

:(

## Function with a facultative argument

Let's make this even more fancy: a function with a facultative argument. That is, a function which accepts an argument, but also has a default value for when we do not provide any argument:

```{python}
def howdy(name='you'):
    print('Hello ' + name)
```

We can call it without argument (making use of the default value):

```{python}
howdy()
```

And we can call it with an argument:

```{python}
howdy('Marie')
```

This was better, but ...

```{python}
howdy('Marie', 'Paul')
```

... this does not work.

## Function with two arguments

We could create a function which takes two arguments:

```{python}
def hey(name1, name2):
    print('Hello ' + name1 + ', ' + name2)
```

Which solves our problem:

```{python}
hey('Marie', 'Paul')
```

But it is terribly limiting:

```{python}
# This doesn't work
hey()
```

```{python}
# And neither does this
hey('Marie')
```

```{python}
# Nor to mention this...
hey('Marie', 'Paul', 'Alex')
```

## Function with any number of arguments

Let's create a truly great function which handles all our cases:

```{python}
def hi(name='you', *args):
    result = ''
    for i in args:
        result += (', ' + i)
    print('Hello ' + name + result)
```

And let's test it:

```{python}
hi()
hi('Marie')
hi('Marie', 'Paul')
hi('Marie', 'Paul', 'Alex')
```

Everything works!

<!-- ## Returning values -->

## Documenting functions

It is a good habit to document what your functions do. As with comments, those "documentation strings" or "docstrings" will help future you or other users of your code.

[PEP 257](https://peps.python.org/pep-0257/#multi-line-docstrings)—docstring conventions—suggests to use single-line docstrings surrounded by triple quotes.

Remember the function definition syntax we saw at the start of this chapter? To be more exhaustive, we should have written it this way:

```default
def <name>(<arguments>):
    """<docstrings>"""
    <body>
```

:::{.example}

Example:

:::

```{python}
def hi(name='you', *args):
    """Print a greeting"""
    result = ''
    for i in args:
        result += (', ' + i)
    print('Hello ' + name + result)
```

[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length)—the style guide for Python code—suggests a maximum of 72 characters per line for docstrings.

If your docstring is longer, you should create a multi-line one. In that case, [PEP 257](https://peps.python.org/pep-0257/#multi-line-docstrings) suggests to have a summary line at the top (right after the opening set of triple quotes), then leave a blank line, then have your long docstrings (which can occupy multiple lines), and finally have the closing set of triple quotes on a line of its own:

```default
def <name>(<arguments>):
    """<summary docstrings line>"""

    <more detailed description>
    """
    <body>
```

:::{.example}

Example:

:::

```{python}
def hi(name='you', *args):
    """Print a greeting

    Accepts any number of arguments
    """
    result = ''
    for i in args:
        result += (', ' + i)
    print('Hello ' + name + result)
```

:::{.note}

You can (and should) document modules, classes, and methods in the same way.

:::

You can now access the documentation of your function as you would any Python function:

```{python}
help(hi)
```

Or:

```{python}
print(hi.__doc__)
```
