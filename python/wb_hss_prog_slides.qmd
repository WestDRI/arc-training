---
title: Intro programming for the humanities
frontpic: img/logo_dhsi.png
noshadow: noshadow
author: Marie-Hélène Burle
date: 2025-06-2
date-format: long
execute:
  freeze: auto
  cache: true
  error: true
  echo: true
format:
  revealjs:
    embed-resources: true
    theme: [default, ../revealjsdhsi.scss]
    logo: img/logo_dhsi.png
    highlight-style: ayu
    code-line-numbers: false
    template-partials:
      - ../title-slide.html
    pointer:
      color: "#b5111b"
      pointerSize: 32
    link-external-newwindow: true
    footer: <a href="wb_hss_prog.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgb(134,110,26)" class="bi bi-arrow-90deg-up" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z"/></svg>&nbsp;Back to webinar page</a>
    auto-stretch: false
revealjs-plugins:
  - pointer
---

## Computer programming {.center}

Programming (or coding) consists of writing a set of instructions (a program) for computers so that they perform a task

There are many programming languages—each with its own syntax—but the core concepts apply to all languages. For this course, we will use Python

**Programs accept inputs (data) and produce outputs (transformed data)**

# How to choose a language?

## Important considerations {.center}

- [Free and open source software (FOSS)](https://en.wikipedia.org/wiki/Free_and_open-source_software) vs proprietary
- [Compiled](https://en.wikipedia.org/wiki/Compiled_language) vs [interpreted](https://en.wikipedia.org/wiki/Interpreter_(computing)) language (speed vs convenience)
- Language adapted to particular usage
- Language used in your field (colleagues, collaborators, literature)

## Downsides of proprietary software {.center}

- Researchers who do not have access to the tool cannot reproduce your methods
- Once you leave academia, you may not have access to the tool anymore
- Your university may stop paying for a license
- You may get locked-in
- Proprietary tools are black boxes
- Long-term access is uncertain
- Proprietary tools fall behind popular open-source tools
- Proprietary tools often fail to address specialized edge cases needed in research

## The argument for FOSS {.center}

- Equal access to everyone, including poorer countries or organizations (it's free!)
- Open science
- Transparency
- The whole community can contribute to and have a say about development
- You an build specific capabilities for your edge cases
- Guarantied long term access
- No risk of getting locked-in

## Compiled languages {.center}

You write code, compile it into machine code, then use this to process your data

![](img/compiled_language.png){fig-alt="noshadow" width="80%"}

Compiled languages are fast. The two step process however makes prototyping less practical and these languages are hard to learn and debug

:::{.example}

Examples of compiled languages include C, C++, Fortran, Go, Haskell

:::

## Interpreted languages {.center}

Interpreted languages are executed directly

![](img/interpreted_language.png){fig-alt="noshadow" width="80%"}

You get direct feed-back, making it easier to prototype. Interpreted languages are easy to learn and debug, but they are much slower

:::{.example}

Examples of interpreted languages include R, Python, Perl, and JavaScript

:::

## Python {.center}

Python is free and open-source, interpreted, and general-purpose

It was created by Dutch programmer [Guido van Rossum](https://en.wikipedia.org/wiki/Guido_van_Rossum) in the 80s, with a launch in 1989

The [PYPL PopularitY of Programming Language index](https://pypl.github.io/PYPL.html) is based on the number of tutorial searches in Google. Python has been going up steadily, reaching the first position in 2018. It is also ahead in other indices and is the language used by most of the deep learning community

This doesn't mean that Python is better than other languages, but it means that there are a lot of resources and a large collection of external packages

# Tools you need for programming

## Text editor to write scripts {.center}

A text editor is **not** the same as a word processor such as Microsoft Office Word. Word documents are **not** plain text documents: they contain a lot of hidden formatting and are actually a collection of files. This is not what you want to write scripts

Examples of good text editors (free and open source):

- [Emacs](https://www.gnu.org/software/emacs/)
- [Visual Studio Code](https://code.visualstudio.com/)
- [Vim](https://www.vim.org/)

## Optional: an IDE {.center}

[Integrated development environments (IDEs)](https://en.wikipedia.org/wiki/Integrated_development_environment) are software that make running a language more friendly by adding functionality and convenience tools, usually within a [graphical user interface (GUI)](https://en.wikipedia.org/wiki/Graphical_user_interface)

A popular IDE for Python is [JupyterLab](https://jupyter.org/)

## Debugging and profiling tools {.center}

Some languages come with debugging tools that make it easier to find problems in the code

Profilers allow you to spot bottlenecks in the execution of your code

Benchmarking tools allow you to compare several versions of code to find which is faster

## Hardware {.center}

Python is great in many respects, but it is not a fast language

Many libraries for Python are written in faster compiled languages (e.g. [C](https://en.wikipedia.org/wiki/C_(programming_language)), [C++](https://en.wikipedia.org/wiki/C%2B%2B), [Fortran](https://en.wikipedia.org/wiki/Fortran))

To speed things up more, some code or sections of code can be run in parallel (instead of serially). To do this though, you need more hardware

You can run code using multiple [CPUs (central processing unit)](https://en.wikipedia.org/wiki/Central_processing_unit). Some code can be accelerated using [GPUs (graphical processing unit)](https://en.wikipedia.org/wiki/Graphics_processing_unit)

For very large scale projects such as very large simulations, deep learning, or big data projects, you can use [supercomputers](https://en.wikipedia.org/wiki/Supercomputer)

# How to run Python

## Python shell {.center}

The simplest way to use Python is to type commands directly in the Python shell. This sends commands directly to the interpreter

The Python shell has a prompt that looks like this:

```
>>>
```

## IPython {.center}

[IPython](https://ipython.org/) is an improved shell with better performance and more functionality (e.g. colour-coding, magic commands)

The prompt looks like:

```
In [x]:
```

:::{.notenoit}

`x` is the command number (e.g. for your first command, it will show `In [1]:`

:::

## Jupyter {.center}

The IPython shell was integrated into a fancy interface, the Jupyter notebook. This later lead to a fully fledged [IDE (integrated development environment)](https://en.wikipedia.org/wiki/Integrated_development_environment) called [JupyterLab](https://jupyter.org/) which contains notebooks, a command line, a file explorer, and other functionality

:::{.note}

Even though JupyterLab runs in your browser, it does not use the internet: it is all run locally on your machine (browsers are software that are great at displaying HTML files, so we use them to access the web, but they can also display files from your computer)

:::

## Other IDEs {.center}

Jupyter has probably become the most popular IDE, but it is possible to run Python in other IDE such as [Emacs](https://mint.westdri.ca/emacs/wb_ide)

## Python script {.center}

You can write your Python code in a text file with a `.py` extension and run the script in your terminal with:

```{.bash}
python script.py
```

This will execute the code non-interactively

# Programming concepts

## Packages {.center}

Many languages can have their functionality expanded by the installation of packages developed by the open source community. The potential is unlimited

Many languages come with their own package manager

In Python, popular package managers include [pip](https://pip.pypa.io/en/stable/), [Conda](https://docs.conda.io/projects/conda/en/stable/), and the newer much faster [uv](https://docs.astral.sh/uv/)

## Syntax {.center}

Each language uses its own syntax

:::{.example}

Example:

In Python, the tab (equal to four spaces by default) has meaning, while in R, it doesn't (it only makes it easier for people to read code)

:::

## Data types {.center}

Each language contains various data types such as integers, floating-point numbers (decimals), strings (series of characters), Booleans (true/false), etc.

:::{.example}

Python examples:

:::

```{python}
type(5)
```

```{python}
type(5.0)
```

```{python}
type("This is a string")
```

```{python}
type(True)
```

## Variables {.center}

Values can be assigned to names to create variables

:::{.example}

Python example

:::

```{python}
a = 3
```

`a` is now a variable containing the value `3`:

```{python}
print(a)
```

```{python}
a * 2
```

## Data structures {.center}

A data structure is a collection of values

:::{.example}

Python examples:

:::

```{python}
type([0, 5, "something"])
```

```{python}
type((3, 5, "something"))
```

```{python}
type({0, 2, 6})
```

Each type of structure has its own characteristics (necessarily homogeneous or not, mutable or not, ordered or not, etc.). This gives several data storage options, each best in different situations

## Functions {.center}

Functions are snippets of code that accomplish a specific task

Built-in functions come with the language and are readily available. Other functions become available once a particular module or package is loaded. Finally, the user can definite their own functions

Some functions take arguments

:::{.example}

Python examples:

:::

```{python}
max([3, 5, 2])
```

```{python}
def hello():
    print("Hello everyone!")

hello()
```

## Control flow {.center}

Commands are normally run sequentially, from top to bottom, but it is possible to alter the flow of execution by creating repeats (loops) or conditional executions

:::{.example}

Python examples:

:::

```{python}
for i in range(3):
    print(i)
```

```{python}
x = -3

if x > 0:
    print(x + 2)
else:
    print(x * 3)
```

# Getting help

## Internal documentation {.center}

Most languages come with their internal documentation

:::{.example}

Example with Python:

:::

```{.python}
help(sum)
```

```
Help on built-in function sum in module builtins:

sum(iterable, /, start=0)
    Return the sum of a 'start' value (default: 0) plus an iterable of numbers

    When the iterable is empty, return the start value.
    This function is intended specifically for use with numeric values and may
    reject non-numeric types.
```

## The internet {.center}

Google is often your best bet, but you need to know the vocabulary in order to ask questions

[Stack Overflow](https://stackoverflow.com/) is a fantastic community question & answer website

## Large language models (LLMs) {.center}

Over the past few years, [LLMs](https://en.wikipedia.org/wiki/Large_language_model) have become increasingly performant at coding

People use them in different ways:

- Ask questions (explain code, documentation)
- Auto-completion
- First code draft
- Debugging
- Vibe coding

In this course, I will show you how they can help you write code
