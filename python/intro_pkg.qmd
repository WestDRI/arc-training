---
title: Modules, packages, and libraries
aliases:
  - packages.html
author: Marie-Hélène Burle
---

:::{.def}

So far, we have talked about functionality that is available whenever you launch Python. Python however comes with a lot more capabilities, some of it out of the box, some of it after you have installed third-party components.

This session covers the types of additional code that can be loaded in a Python session.

:::

## The standard library

Python comes with a [standard library](https://docs.python.org/3/library/index.html#library-index). As soon as you launch the program, you can access part of the standard library such as the [built-in functions](https://docs.python.org/3/library/functions.html) and [built-in constants](https://docs.python.org/3/library/constants.html):

:::{.example}

Example:

:::

```{python}
type(3)    # type is a built-in function
```

Most of the standard library however is held in [several thematic modules](https://docs.python.org/3/py-modindex.html). Each module contains additional functions, constants, and facilities. Before you can use them, you need to load them into your session.

### Example: the [os](https://docs.python.org/3/library/os.html#module-os) module

The [os](https://docs.python.org/3/library/os.html#module-os) module contains the function `getcwd` returning the path of the current working directory as a string.

This function cannot be used directly:

```{python}
getcwd()
```

In order to access it, you have several options:

- Load the module, then access the function as a method of the module:

```{python}
import os
os.getcwd()
```

:::{.note}

You can create an alias for the module:

```{python}
import os as o
o.getcwd()
```

While it is a little silly for a module with such a short name, it is very convenient with modules of longer names.

:::

- Import the function directly:

```{python}
from os import getcwd
getcwd()
```

## Definitions

"Modules" are Python files containing reusable code (e.g. functions, constants, utilities).

"Packages" are collections of modules.

"Libraries", technically, are collections of packages, although "packages" and "libraries" are often used loosely and interchangeably in Python.

## Installing packages on your machine

You can install external packages containing additional functions, constants, and utilities to extend the capabilities of Python.

The [Python Package Index](https://pypi.org/) is a public repository of open source packages contributed by users.

Installation of packages can be done via [pip](https://pip.pypa.io/en/stable/).

Instead of installing packages system wide or for your user, you can create a semi-isolated Python environment in which you install the packages needed for a particular project. This makes reproducibility and collaboration easier. It also helps handle dependency conflicts. Some Linux distributions will not let you use `pip` outside a virtual environment anymore. It is a great practice to always use virtual environments.

Create a Python virtual environment called `env`:

```{.bash}
python -m venv ~/env
```

Activate it:

```{.bash}
source ~/env/bin/activate
```

Update pip:

```{.bash}
python -m pip install --upgrade pip
```

Install packages:

```{.bash}
python -m pip install <package>
```

On your local machine, particularly if you are on Windows and want to install a complex software stack, [conda](https://packaging.python.org/en/latest/key_projects/#conda) can makes things easy by installing from the [Anaconda Distribution](https://docs.anaconda.com/anaconda/).

## Installing packages on the clusters

**[Don't use conda or Anaconda on the Alliance clusters.](https://docs.alliancecan.ca/wiki/Anaconda/en)** If you really must, do it in a container with [Apptainer](https://docs.alliancecan.ca/wiki/Apptainer).

On the Alliance clusters, install packages inside a virtual environment and use [Python wheels](https://pythonwheels.com/) whenever possible.

You can see whether a wheel is available with `avail_wheels <package>` or look at [the list of available wheels](https://docs.alliancecan.ca/wiki/Available_Python_wheels). To install from wheels instead of downloading from PyPI, add the `--no-index` flag to the install command.

Advantages of wheels:

- compiled for the clusters hardware,
- ensures no missing or conflicting dependencies,
- much faster installation.

The workflow thus looks like:

```{.bash}
python -m venv ~/env
source ~/env/bin/activate
python -m pip install --upgrade --no-index pip
python -m pip install --no-index <package>
```
