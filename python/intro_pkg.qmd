---
title: Libraries, packages, and modules
author: Marie-Hélène Burle
---

:::{.def}



:::

## The standard library

Python comes with a [standard library](https://docs.python.org/3/library/index.html#library-index). As soon as you launch the program, you can access part of the standard library such as the [built-in functions](https://docs.python.org/3/library/functions.html) and [built-in constants](https://docs.python.org/3/library/constants.html):

:::{.example}

Example:

:::

```{python}
type(3)    # type is a built-in function
```

Most of the standard library however is held in [several thematic modules](https://docs.python.org/3/py-modindex.html). Each module contains additional functions, constants, and facilities. Before you can use them, you need to load them into your session.

### Example: the [os](https://docs.python.org/3/library/os.html#module-os) module

The [os](https://docs.python.org/3/library/os.html#module-os) module contains the function `getcwd` returning the path of the current working directory as a string.

This function cannot be used directly:

```{python}
getcwd()
```

In order to access it, you have several options:

- Load the module, then access the function as a method of the module:

```{python}
import os
os.getcwd()
```

:::{.note}

You can create an alias for the module:

```{python}
import os as o
o.getcwd()
```

While it is a little silly for a module with such a short name, it is very convenient with modules of longer names.

:::

- Import the function directly:

```{python}
from os import getcwd
getcwd()
```

