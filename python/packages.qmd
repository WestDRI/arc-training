---
title: Modules, packages, and libraries
author: Marie-Hélène Burle
---

:::{.example}

Acknowledgements: many of the exercises in these Python lessons are heavily inspired by content from Alex Razoumov.

:::

:::{.box}

**Running Python**

For this workshop, you can either use your own machine or our temporary JupyterHub.

:::{.note}

To access our JupyterHub, you will need a username and password that I will give you during the workshop.

:::

[This page](jh_instructions.qmd){target="_blank"} provides instructions on how to access our JupyterHub.

:::

## Definitions

"Modules" are Python files containing reusable code (e.g. functions, constants, utilities).

"Packages" are collections of modules.

"Libraries", technically, are collections of packages, although "packages" and "libraries" are often used loosely and interchangeably in Python.

## The standard library

Python comes with a [standard library](https://docs.python.org/3/library/index.html#library-index). As soon as you launch the program, you can access part of the standard library such as the [built-in functions](https://docs.python.org/3/library/functions.html) and [built-in constants](https://docs.python.org/3/library/constants.html):

:::{.example}

Example:

:::

```{python}
type(3)    # type is a built-in function
```

Most of the standard library however is held in [several thematic modules](https://docs.python.org/3/py-modindex.html). Each module contains additional functions, constants, and facilities. Before you can use them, you need to load them into your session.

### Example: the [os](https://docs.python.org/3/library/os.html#module-os) module

The [os](https://docs.python.org/3/library/os.html#module-os) module contains the function `getcwd` returning the path of the current working directory as a string.

This function cannot be used directly:

```{python}
getcwd()
```

In order to access it, you have several options:

- Load the module, then access the function as a method of the module:

```{python}
import os
os.getcwd()
```

:::{.note}

You can create an alias for the module:

```{python}
import os as o
o.getcwd()
```

While it is a little silly for a module with such a short name, it is very convenient with modules of longer names.

:::

- Import the function directly:

```{python}
from os import getcwd
getcwd()
```

:::{.note}

You can get help on a module, but only after you have loaded it into your session:

```{.python}
help(os)
```

```
Help on module os:

NAME
    os - OS routines for NT or Posix depending on what system we're on.

MODULE REFERENCE
    https://docs.python.org/3.10/library/os.html

    The following documentation is automatically generated from the Python
    source files.  It may be incomplete, incorrect or include features that
    are considered implementation detail and may vary between Python
    implementations.  When in doubt, consult the module reference at the
    location listed above.
	
...	
```

:::

## Installing external packages

You can install external packages containing additional functions, constants, and utilities. The [Python Package Index (PyPI)](https://pypi.org/) is a repository of external packages for Python.





## Virtual environments

