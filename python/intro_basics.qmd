---
title: "Python: the basics"
aliases:
  - basics.html
author: Marie-Hélène Burle
---

## About Python

Python is a hugely popular interpreted language with a simple, easily readable syntax, and a large collection of external packages.

It was created by Dutch programmer [Guido van Rossum](https://en.wikipedia.org/wiki/Guido_van_Rossum) in the 80s, with a launch in 1989.

Since the start of the [PYPL PopularitY of Programming Language index](https://pypl.github.io/PYPL.html) (based on the number of tutorial searches in Google) in 2004, its popularity has grown steadily, reaching the number one position in 2018. As of June 2024, its advantage over other programming languages keeps increasing.

## The standard library

Python comes with a [standard library](https://docs.python.org/3/library/index.html#library-index). As soon as you launch the program, you can access part of the standard library such as the [built-in functions](https://docs.python.org/3/library/functions.html) and [built-in constants](https://docs.python.org/3/library/constants.html):

:::{.example}

Example:

:::

```{python}
type(3)    # type is a built-in function
```

Most of the standard library however is held in [several thematic modules](https://docs.python.org/3/py-modindex.html). Each module contains additional functions, constants, and facilities. Before you can use them, you need to load them into your session.

### Example: the [os](https://docs.python.org/3/library/os.html#module-os) module

The [os](https://docs.python.org/3/library/os.html#module-os) module contains the function `getcwd` returning the path of the current working directory as a string.

This function cannot be used directly:

```{python}
getcwd()
```

In order to access it, you have several options:

- Load the module, then access the function as a method of the module:

```{python}
import os
os.getcwd()
```

:::{.note}

You can create an alias for the module:

```{python}
import os as o
o.getcwd()
```

While it is a little silly for a module with such a short name, it is very convenient with modules of longer names.

:::

- Import the function directly:

```{python}
from os import getcwd
getcwd()
```

## Help and documentation

### Module

You can get help on a module thanks to the `help` function, but only after you have loaded that module into your session:

```{.python}
import os
help(os)
```

```
Help on module os:

NAME
    os - OS routines for NT or Posix depending on what system we're on.

MODULE REFERENCE
    https://docs.python.org/3.10/library/os.html

    The following documentation is automatically generated from the Python
    source files.  It may be incomplete, incorrect or include features that
    are considered implementation detail and may vary between Python
    implementations.  When in doubt, consult the module reference at the
    location listed above.
	
...	
```

### Functions

You can also access the internal Python documentation on a function with `help`:

```{python}
help(max)
```

:::{.note}

In Jupyter, you can also use `?max` or `max?`.

:::

Alternatively, you can print the `__doc__` method of the function:

```{python}
print(max.__doc__)
```

### Methods of object types

Some methods belong to specific objects types (e.g. lists have a method called `append`).

In those cases, `help(<method>)` won't work.

:::{.example}

Example:

:::

```{python}
help(append)
```

What you need to run instead is `help(<object>.<method>)`.

:::{.example}

Example:

:::

```{python}
help(list.append)
```

## Syntax

Commands are usually written one per line, but you can write multiple commands on the same line with the separator `;`:

```{python}
a = 2.0; a
```

Tabs or 4 spaces (the number of spaces can be customized in many IDEs) have a syntactic meaning in Python and are not just for human readability:

```{python}
# Incorrect code
for i in [1, 2]:
print(i)
```

```{python}
# Correct code
for i in [1, 2]:
    print(i)
```

:::{.note}

IDEs and good text editors can indent the code automatically.

:::

Comments (snippets of text for human consumption and ignored by Python) are marked by `#`:

```{python}
# This is a full-line comment

a         # This is an inline comment
```

[PEP 8](https://peps.python.org/pep-0008/#maximum-line-length)—the style guide for Python code—suggests a maximum of 72 characters per line for comments. Try to keep comments to the point and spread them over multiple lines if they are too long.

## Creating and deleting objects

### Assignment

The assignment statement `=` binds a name (a reference) and a value to create an [object](https://en.wikipedia.org/wiki/Object_(computer_science)) ([variable](https://en.wikipedia.org/wiki/Variable_(computer_science)), [data structure](https://en.wikipedia.org/wiki/Data_structure), [function](https://en.wikipedia.org/wiki/Function_(computer_programming)), or [method](https://en.wikipedia.org/wiki/Method_(computer_programming))).

:::{.example}

For instance, we can bind the name `a` and the value `1` to create the variable `a`:

:::

```{python}
a = 1
```

You can define multiple objects at once (here variables), assigning them the same value:

```{python}
a = b = 10
print(a, b)
```

... or different values:

```{python}
a, b = 1, 2
print(a, b)
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

```{python}
a = 1
b = a
a = 2
```

What do you think the value of `b` is now?

:::

### Choosing names

While I am using `a` and `b` a lot in this workshop (since the code has no other purpose than to demo the language itself), in your scripts you should use meaningful names (e.g. `survival`, `age`, `year`, `species`, `temperature`). It will make reading the code this much easier.

Make sure not to use the names of [built-in functions](https://docs.python.org/3/library/functions.html) or [built-in constants](https://docs.python.org/3/library/constants.html).

### Deleting objects

Deletion of the names can be done with the `del` statement:

```{python}
var = 3
var
```

```{python}
del var
var
```

The Python garbage collector automatically removes values with no names bound to them from memory.

## Data types

Python comes with multiple [built-in types](https://docs.python.org/3/library/stdtypes.html).

:::{.example}

Examples (non exhaustive):

:::

```{python}
type(1), type(1.0), type('1'), type(3+2j), type(True)
```

:::{.note}

`int` = integer \
`float` = floating point number \
`complex` = complex number \
`str` = string \
`bool` = Boolean

:::

Python is [dynamically-typed](https://en.wikipedia.org/wiki/Type_system#DYNAMIC): names do not have types, but they are bound to typed values and they can be bound over time to values of different types.

```{python}
var = 2.3
type1 = type(var)
var = "A string."
type2 = type(var)

type1, type2
```

You can also convert the type of some values:

```{python}
'4', type('4'), int('4'), type(int('4'))
```

```{python}
float(3)
```

```{python}
str(3.4)
```

```{python}
bool(0)
```

```{python}
bool(1)
```

```{python}
int(True)
```

```{python}
float(False)
```

Of course, not all conversions are possible:

```{python}
int('red')
```

You might be surprised by some of the conversions:

```{python}
int(3.9)
```

```{python}
bool(3.4)
```

## Quotes

Pairs of single and double quotes are used to create strings. [PEP 8](https://peps.python.org/pep-0008/#maximum-line-length) does not recommend one style over the other. It does suggest however that once you have chosen a style, you stick to it to make scripts consistent.

```{python}
"This is a string."
```

```{python}
type("This is a string.")
```

```{python}
'This is also a string.'
```

```{python}
type('This is also a string.')
```

Apostrophes and textual quotes interfere with Python quotes. In these cases, use the opposite style to avoid any problem:

```{python}
# This doesn't work
'This string isn't easy'
```

```{python}
# This is good
"This string isn't easy"
```

```{python}
# This doesn't work
"He said: "this is a problem.""
```

```{python}
# This is good
'He said: "this is a problem."'
```

Sometimes, neither option works and you have to escape some of the quotes with `\`:

```{python}
# This doesn't work
"He said: "this string isn't easy""
```

```{python}
# This doesn't work either
'He said: "this string isn't easy"'
```

```{python}
# You can use double quotes and escape double quotes in the string
"He said: \"this string isn't easy\""
```

```{python}
# Or you can use single quotes and escape single quotes in the string
'He said: "this string isn\'t easy"'
```

## Basic operations

```{python}
3 + 2
```

```{python}
3.0 - 2.0
```

```{python}
10 / 2
```

:::{.note}

Notice how the result can be of a different type

:::

Variables can be used in operations:

```{python}
a = 3
a + 2
```

`a = a + 10` can be replaced by the more elegant:

```{python}
a += 10
a
```
