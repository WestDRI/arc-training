---
title: Playing with text
author: Marie-HÃ©lÃ¨ne Burle
resources: data/pratchett.txt
---

:::{.def}

There are fancy tools to scrape the web and play with text. In preparation for those, in this section, we will download a text file from the internet and play with it using simple commands.

:::

## Downloading a text file from a URL

First, we need to load the [`urllib.request` module](https://docs.python.org/3/library/urllib.request.html#module-urllib.request) from the Python standard library. It contains functions to deal with URLs:

```{python}
import urllib.request
```

The snippet of text we will play with is in a text file containing the very beginning of the novel [Going Postal](https://en.wikipedia.org/wiki/Going_Postal) by [Terry Pratchett](https://en.wikipedia.org/wiki/Terry_Pratchett) and located at the URL <https://mint.westdri.ca/python/data/pratchett.txt>. We can create a variable that we call `url` (we can call it whatever we want) and that contains the string of the URL:

```{python}
url = "https://mint.westdri.ca/python/data/pratchett.txt"
```

```{python}
print(url)
```

```{python}
type(url)
```

To download a text file from a URL, we use the `urllib.request.urlopen` function:

```{python}
urllib.request.urlopen(url)
```

This return an `HTTPResponse` object. It is not very useful in this form, but we can get the text out of it by applying the `read` method:

```{python}
urllib.request.urlopen(url).read()
```

We can save our text in a new variable:

```{python}
encoded_text = urllib.request.urlopen(url).read()
```

Now, `encoded_text` is not of a very convenient type:

```{python}
type(encoded_text)
```

Before we can really start playing with it, we want to convert it to a string by decoding it:

```{python}
text = encoded_text.decode("utf-8")
type(text)
```

We know have a string, which is great to work on. Let's print our text:

```{python}
print(text)
```

And now we can start playing with the data ðŸ™‚

## Counting things

One of the things we can do with our text is counting things.

### Counting characters

For instance, we can count the number of characters thanks to the `len` function:

```{python}
len(text)
```

We can count the number of occurrences of any sequence of character with the method `count`.

For instance, the see how many times the letter "e" appears in the text, we would run:

```{python}
text.count("e")
```

For the name of the main character "Moist", we would do:

```{python}
text.count("Moist")
```

### Counting words

Or we could try to see how many words there are in this text.

:::{.exo}

:::{.yourturn}

Your turn:

:::

How would you go about this?

:::

Another method to count the number of words is to use the `split` method:

```{python}
words = text.split()
print(words)
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

What is the type of the variable `words`?

:::

To get its length, we can use the `len` function:

```{python}
len(words)
```

Now, let's try to count how many times the word `the` is in the text.

:::{.exo}

:::{.yourturn}

Your turn:

:::

We could use:

```{python}
text.count("the") + text.count("The")
```

but it won't answer our question. Why?

:::

Instead, we should use the list of words that we called `words` and count how many of them are equal to `the`. We do this with a loop:

```{python}
# We set our counter (the number of occurrences) to zero:
occurrences = 0

# And now we can use a loop to test the words one by one and add 1 to our counter each time the equality returns true
for word in words:
    if word == "the" or word == "The":
        occurrences += 1

print(occurrences)
```

:::{.info}

An alternative syntax that looks a lot more elegant is the following:

```{python}
sum(word == "the" or word == "The" for word in words)
```

However, elegance and short syntax don't necessarily mean fast code.

We can benchmark Python code very easy when we use Jupyter or IPython by using the magic `%%timeit` at the top of a code cell.

Let's try it:

```{.python}
%%timeit

# We set our counter (the number of occurrences) to zero:
occurrences = 0

# And now we can use a loop to test the words one by one and add 1 to our counter each time the equality returns true
for word in words:
    if word == "the" or word == "The":
        occurrences += 1
```

```
9.52 Î¼s Â± 510 ns per loop (mean Â± std. dev. of 7 runs, 100,000 loops each)
```

:::{.note}

I removed the `print` function so that we don't end up printing the result a bunch of times: `timeit` does a lot of tests and takes the average. At each run, we would have a printed result!

:::

And for the other method

```{.python}
%%timeit

occurrences = sum(word == "the" or word == "The" for word in words)
```

```
24.2 Î¼s Â± 243 ns per loop (mean Â± std. dev. of 7 runs, 10,000 loops each)
```

:::{.note}

To make a fair comparison with the previous expression, I am not printing the result here either, but assigning it to a variable.

:::

As you can see, the short neat-looking expression takes more than twice the time of the not so nice-looking one. Without benchmarking, it is very hard to predict what code is efficient.

:::

#### Removing punctuation

Now, let's count the number of times the word "sir" occurs in the text:

```{python}
occurrences = 0

for word in words:
    if word == "sir" or word == "Sir":
        occurrences += 1

print(occurrences)
```

Mmm... that is strange because, if we read the text, we can see that the word "sir" actually occurs in the text...

Looking carefully at our list `words`, we can see what the problem is: the word "sir" appears as `sir.`, `sir,`, `sir."`, `sir?"`.

This shows that in order to do a cleaner job and get our method to work for any word, we need to remove the punctuation.

Step one, we remove the punctuation from our `text` string:

```{python}
import string

clean_text = text.translate(str.maketrans('', '', string.punctuation))
print(clean_text)
```

And now we split it into words:

```{python}
clean_words = clean_text.split()
print(clean_words)
```

This is a much better list to work from and this one will work for any word. For the word "sir" for instance, we would do:

```{python}
occurrences = 0

for word in clean_words:
    if word == "sir" or word == "Sir":
        occurrences += 1

print(occurrences)
```

#### Removing case

Now, having to look for the word of interest with and without capital letter as we have been doing so far is not the most robust method: what if the text had "SIR" in all caps? After all, Death in Pratchett novels speaks in all caps! Of course, we could add this as a third option (`if word == "sir" or word == "Sir" or word == "SIR"`), but that is becoming a little tedious.

A better solution is to turn the whole text into lower case before splitting it into words. That way we don't have to worry about case.

Let's remove all capital letters:

```{python}
final_text = clean_text.lower()
```

Now we split it into words:

```{python}
final_words = final_text.split()
print(final_words)
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

What would the code look like now to count the number of times the word "sir" appears?

:::

### Counting unique words

Yet something else we can count is the number of unique words in the text. The simplest way to do this is to turn our list of words into a set and see how many elements this set contains:

```{python}
len(set(final_words))
```

## Extracting characters from strings

### Indexing

Let's go back to our text. Remember that we have this object `text` which is a list.

```{python}
type(text)
```

You can extract characters from strings by *indexing*.

Indexing in Python is done with square brackets and starts at 0 (the first element has index 0). This means that we can extract the first character with:

```{python}
print(text[0])
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

How would you index the 4^th^ element? Try it out. It should return "y".

:::

You can extract the last element with a minus sign (and this time, the indexing starts at 1):

```{python}
print(text[-1])
```

We aren't getting any output here because the last character is the special character `\n` which encodes for a line break. You can see it when you don't use the `print` function (`print` makes things look nicer and transforms those characters into what they represent):

```{python}
text[-1]
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

**Question 1:** \
How would you get the last letter of the text?

**Question 2:** \
How would you index the 11^th^ element from the end? Give it a try. You should get "V".

:::

### Slicing

You can also extract multiple contiguous elements with a *slice*. A slice is also defined with square brackets, but this time you add a colon in it. Left of the colon is the start of the slice and right of the colon is the end of the slice.

In Python, the left element of a slice is *included*, but the right element is *excluded*.

First, let's omit both indices on either side of the colon:

```{python}
print(text[:])
```

This returns the full text. This is because when a slice boundary is omitted, by default it starts at the very beginning of the object you are slicing.

We can test that we indeed get the full text by comparing it to the non-sliced version of `text`:

```{python}
text[:] == text
```

Now, let's slice the first 10 elements of `text`:

```{python}
print(text[:10])
```

:::{.hnote}

Let's explain this code a bit:

We want our slice to start at the beginning of the text, so we are omitting that boundary (we could also use `0` left of the colon).

Because indexing starts at 0, the 10^th^ element is actually not "t", but the following "h". The reason we get "t" rather than "h" is because the right boundary of a slice is excluded.

:::

:::{.exo}

:::{.yourturn}

Your turn:

:::

**Question 1:** \
Try to write some code that will return "prospect".

<!-- ```{python} -->
<!-- text[18:26] -->
<!-- ``` -->

**Question 2:** \
Now, remember how we created the `words` object earlier? Try to use it to get the same result.

<!-- ```{python} -->
<!-- words[4] -->
<!-- ``` -->

:::

### Striding

A last way to extract characters out of a string is to use *strides*. A stride is defined with square brackets and 3 values separated by colons. The first value is the left boundary (included), the second value is the right boundary (excluded), and the third value is the step. By default (if omitted), the step is 1.

:::{.exo}

:::{.yourturn}

Your turn:

:::

**Question 1:** \
What do you think that `text[::]` would return?

**Question 2:** \
How would you test it?

**Question 3:** \
How would you get every 3^rd^ character of the whole text?

:::

Now, a fun one: the step can also take a negative value. With `-1`, we get the text backward! This is because `-` indicates that we want to step from the end and `1` means that we want every character:

```{python}
print(text[::-1])
```

## String concatenation

Strings are fun because they can be concatenated with the operator `+`:

```{python}
print("This is the beginning of Going Postal:" + "\n\n" + text)
```

<!-- ```{python} -->
<!-- def end_of_sentence_marker(char): -->
<!--     if char == "." or char == "?" or char == "!": -->
<!--         return True -->
<!--     else: -->
<!--         return False -->
<!-- ``` -->

<!-- ```{python} -->
<!-- # these tests should return True if your code is correct -->
<!-- print(end_of_sentence_marker("?") == True) -->
<!-- print(end_of_sentence_marker("a") == False) -->
<!-- ``` -->

<!-- ```{python} -->
<!-- end_of_sentence_marker("!") -->
<!-- ``` -->

<!-- ```{python} -->
<!-- def split_sentences(text): -->
<!--     sentences = [] -->
<!--     start = 0 -->
<!--     for end, char in enumerate(text): -->
<!--         if end_of_sentence_marker(char): -->
<!--             sentence = text[start:end + 1] -->
<!--             sentences.append(sentence) -->
<!--             start = end + 1 -->
<!--     return sentences -->
<!-- ``` -->

<!-- ```{python} -->
<!-- split_sentences(text) -->
<!-- ``` -->

<!-- ```{python} -->
<!-- print(split_sentences(text))[0] -->
<!-- ``` -->

If you want to go much beyond this (e.g. sentences tokenization, [natural language processing (NLP)](https://en.wikipedia.org/wiki/Natural_language_processing), etc.), you probably want to install a library for this such as [NLTK](https://en.wikipedia.org/wiki/Natural_Language_Toolkit) or [spaCy](https://spacy.io/).
