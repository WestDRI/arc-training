---
title: Performance
author: Marie-Hélène Burle
---

The one thing you need to remember: [avoid global variables]{.emph}.

This means: avoid variables defined in the global environment.

## Definitions

*Scope of variables*: &emsp;&nbsp;Environment within which a variables exist

*Global scope*: &emsp;&emsp;&emsp;&ensp;Global environment of a module

*Local scope*: &ensp;&emsp;&emsp;&emsp;&ensp;Environment within a function, a loop, a struct, a macro, etc.

## Why avoid global variables?

The Julia compiler is not good at optimizing code using global variables.

Part of the reason is that their type can change.

### Example

We will use the `@time` macro to time a loop:

- In the global environment:

```{julia}
total = 0
n = 1e6

@time for i in 1:n
    global total += i
end
```

:::{.note}

Note the garbage collection (gc) time: 14% of total time.

Garbage collection time is a sign of poor code.

:::

- In a local environment (a function):


```{julia}
function local_loop(total, n)
    total = total
    @time for i in 1:n
        global total += i
    end
end

local_loop(0, 1e6)
```

:::{.note}

We get a 7.5 speedup.

The memory allocation also decreased by more than half.

:::

For more accurate performance measurements, you should use the `@btime` macro from the [BenchmarkTools package](https://github.com/JuliaCI/BenchmarkTools.jl) which excludes compilation time from the timing, averages metrics over multiple runs, and is highly customizable.
