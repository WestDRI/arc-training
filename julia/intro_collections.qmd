---
title: Collections
aliases:
  - collections.html
author: Marie-Hélène Burle
---

:::{.def}

Values can be stored in collections. This workshop introduces tuples, dictionaries, sets, and arrays in Julia.

:::

## Tuples

Tuples are immutable, indexable, and possibly heterogeneous collections of elements. The order of elements matters.

```{julia}
# Possibly heterogeneous (values can be of different types)
typeof((2, 'a', 1.0, "test"))
```

```{julia}
# Indexable (note that indexing in Julia starts with 1)
x = (2, 'a', 1.0, "test");
x[3]
```

```{julia}
# Immutable (they cannot be modified)
# So this returns an error
x[3] = 8
```

#### Named tuples

Tuples can have named components:

```{julia}
typeof((a=2, b='a', c=1.0, d="test"))
```

```{julia}
x = (a=2, b='a', c=1.0, d="test");
x.c
```

## Dictionaries

Julia also has dictionaries: associative collections of key/value pairs:

```{julia}
x = Dict("Name"=>"Roger", "Age"=>52, "Index"=>0.3)
```

`"Name"`, `"Age"`, and `"Index"` are the keys; `"Roger"`, `52`, and `0.3` are the values.

The `=>` operator is the same as the `Pair` function:

```{julia}
p = "foo" => 7
```

```{julia}
q = Pair("bar", 8)
```

Dictionaries can be heterogeneous (as in this example) and the order doesn't matter. They are also indexable:

```{julia}
x["Name"]
```

And mutable (they can be modified):

```{julia}
x["Name"] = "Alex";
x
```

## Sets

Sets are collections without duplicates. The order of elements doesn't matter.

```{julia}
set1 = Set([9, 4, 8, 2, 7, 8])
```

:::{.note}

Notice how this is a set of 5 (and not 6) elements: the duplicated 8 didn't matter.

:::

```{julia}
set2 = Set([10, 2, 3])
```

You can compare sets:

```{julia}
# The union is the set of elements that are in one OR the other set
union(set1, set2)
```

```{julia}
# The intersect is the set of elements that are in one AND the other set
intersect(set1, set2)
```

```{julia}
# The setdiff is the set of elements that are in the first set but not in the second
# Note that the order matters here
setdiff(set1, set2)
```

Sets can be heterogeneous:

```{julia}
Set(["test", 9, :a])
```

## Arrays

### Vectors

Unidimensional arrays in Julia are called vectors.

#### Vectors of one element

```{julia}
[3]
```

```{julia}
[3.4]
```

```{julia}
["Hello, World!"]
```

#### Vectors of multiple elements

```{julia}
[3, 4]
```

### Two dimensional arrays

```{julia}
[3 4]
```

```{julia}
[[1, 3] [1, 2]]
```

### Syntax subtleties

These 3 syntaxes are equivalent:

```{julia}
[2 4 8]
```

```{julia}
hcat(2, 4, 8)
```

```{julia}
cat(2, 4, 8, dims=2)
```

These 4 syntaxes are equivalent:

```{julia}
[2
 4
 8]
```

```{julia}
[2; 4; 8]
```

```{julia}
vcat(2, 4, 8)
```

```{julia}
cat(2, 4, 8, dims=1)
```

Elements separated by semi-colons or end of lines get expanded vertically. \
Those separated by commas do not get expanded. \
Elements separated by spaces or tabs get expanded horizontally.

:::{.exo}

:::{.yourturn}

Your turn:

:::

Compare the outputs of the following:

:::

```{julia}
[1:2; 3:4]
```

```{julia}
[1:2
 3:4]
```

```{julia}
[1:2, 3:4]
```

```{julia}
[1:2 3:4]
```

### Arrays and types

In Julia, arrays can be heterogeneous:

```{julia}
[3, "hello"]
```

This is possible because all elements of an array, no matter of what types, will always sit below the `Any` type in the type hierarchy.

### Initializing arrays

Below are examples of some of the functions initializing arrays:

```{julia}
rand(2, 3, 4)
```

```{julia}
rand(Int64, 2, 3, 4)
```

```{julia}
zeros(Int64, 2, 5)
```

```{julia}
ones(2, 5)
```

```{julia}
reshape([1, 2, 4, 2], (2, 2))
```

```{julia}
fill("test", (2, 2))
```

### Broadcasting

To apply a function to each element of a collection rather than to the collection as a whole, Julia uses broadcasting.

```{julia}
a = [-3, 2, -5]
```

```{.julia}
abs(a)
```

```
LoadError: MethodError: no method matching abs(::Vector{Int64})
```

This doesn't work because the function `abs` only applies to single elements.

By broadcasting `abs`, you apply it to each element of `a`:

```{julia}
broadcast(abs, a)
```

The dot notation is equivalent:

```{julia}
abs.(a)
```

It can also be applied to the pipe, to unary and binary operators, etc.

```{julia}
a .|> abs
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

Try to understand the difference between the following 2 expressions:

:::

```{julia}
abs.(a) == a .|> abs
```

```{julia}
abs.(a) .== a .|> abs
```

:::{.note}

Hint: 0/1 are a short-form notations for false/true in arrays of Booleans.

:::

### Comprehensions

Julia has an array comprehension syntax similar to Python's:

```{julia}
[ 3i + j for i=1:10, j=3 ]
```

## Indexing

As in other mathematically oriented languages such as R, Julia starts indexing at `1`.

Indexing is done with square brackets:

```{julia}
a = [1 2; 3 4]
```

```{julia}
a[1, 1]
```

```{julia}
a[1, :]
```

```{julia}
a[:, 1]
```

```{julia}
# Here, we are indexing a tuple
(2, 4, 1.0, "test")[2]
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

Index the element on the 3^rd^ row and 2^nd^ column of `b`:

```{julia}
b = ["wrong" "wrong" "wrong"; "wrong" "wrong" "wrong"; "wrong" "you got it" "wrong"]
```

:::

:::{.exo}

:::{.yourturn}

Your turn:

:::

```{.julia}
a = [1 2; 3 4]
a[1, 1]
a[1, :]
```

How can I get the second column? \
How can I get the tuple `(2, 4)`? (a tuple is a list of elements)

:::

As in Python, by default, arrays are passed by sharing:

```{julia}
a = [1, 2, 3];
a[1] = 0;
a
```

This prevents the unwanted copying of arrays.
