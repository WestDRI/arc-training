---
title: Control flow
author: Marie-Hélène Burle
jupyter: julia-1.8
---

## Conditional statements

Conditional statements allow to run instructions based on predicates: different sets of instructions will be executed depending on whether the predicates return `true` or `false`.

### Predicates

:::{.example}

Here are a few examples of predicates with classic operators:

:::

```{.julia}
occursin("that", "this and that")
4 < 3
a == b
a != b
2 in 1:3
3 <= 4 && 4 > 5
3 <= 4 || 4 > 5
```

In addition, Julia possesses more exotic operators that can be used in predicates:

- The inexact equality comparator, useful to compare floating-point numbers despite computer rounding.

The function `isapprox` or the equivalent binary operator `≈` (typed with `\approx<tab>`) can be used:

```{julia}
0.1 + 0.2 == 0.3
```

```{julia}
0.1 + 0.2 ≈ 0.3
```

```{julia}
isapprox(0.1 + 0.2, 0.3)
```

The negatives are the function `!isapprox` and `≉` (typed with `\napprox<tab>`).

- The equivalent or triple equal operator compares objects in deeper ways (address in memory for mutable objects and content at the bit level for immutable objects).

`===` or `≡` (typed with `\equiv<tab>`) can be used:

```{julia}
a = [1, 2]; b = [1, 2];
```

```{julia}
a == b
```

```{julia}
a ≡ b     # This can also be written `a === b`
```

```{julia}
a ≡ a
```

### If statements

```{.julia}
if <predicate>
    <some action>
end
```

- If the predicate evaluates to `true`, the body of the if statement gets evaluated,
- If the predicate evaluates to `false`, nothing happens.

:::{.example}

Example:

:::

```{julia}
function testsign1(x)
    if x >= 0
        println("x is positive")
    end
end
```

```{julia}
testsign1(3)
```

```{julia}
testsign1(-2)
```

:::{.note}

Nothing gets returned since the predicate returned `false`.

:::

### If else statements

```{.julia}
if <predicate>
    <some action>
else
    <some other action>
end
```

- If the predicate evaluates to `true`, `<some action>` is done,
- If the predicate evaluates to `false`, `<some other action>` is done.

:::{.example}

Example:

:::

```{julia}
function testsign2(x)
    if x >= 0
        println("x is positive")
    else
        println("x is negative")
    end
end
```

```{julia}
testsign2(3)
```

```{julia}
testsign2(-2)
```

If else statements can be written in a terse format using the ternary operator:

```
predicate ? if true : if false
```

:::{.example}

Here is our function `testsign2` written in terse format:

:::

```{julia}
function testsign2(x)
    x >= 0 ? println("x is positive") : println("x is negative")
end

testsign2(-2)
```

:::{.example}

Here is another example:

:::

```{.julia}
a = 2
b = 2.0

if a == b
    println("It's true")
else
    println("It's false")
end
```

And in terse format:

```{julia}
a == b ? println("It's true") : println("It's false")
```

### If elseif else statements

```{.julia}
if <predicate1>
    <do if predicate1 true>
elseif <predicate2>
    <do if predicate1 false and predicate2 true>
else
    <do if predicate1 and predicate2 false>
end
```

:::{.example}

Example:

:::

```{julia}
function testsign3(x)
    if x > 0
        println("x is positive")
    elseif x == 0
        println("x is zero")
    else
        println("x is negative")
    end
end
```

```{julia}
testsign3(3)
```

```{julia}
testsign3(0)
```

```{julia}
testsign3(-2)
```

## Loops

### For loops

For loops run a set of instructions for each element of an iterator:

```{julia}
for name = ["Paul", "Lucie", "Sophie"]
    println("Hello $name")
end
```

```{julia}
for i = 1:3, j = 3:5
    println(i + j)
end
```

### While loops

While loops run as long as the condition remains true:

```{julia}
i = 0

while i <= 10
    println(i)
    i += 1
end
```
