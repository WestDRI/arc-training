---
title: Basics of the Julia language
aliases:
  - basics.html
author: Marie-H√©l√®ne Burle
---

## Comments

Comments do not get evaluated by Julia and are for humans only.

```{julia}
# Comments in Julia are identified by hastags
```

```{julia}
#=
Comments can also spread over multiple lines
if you enclose them with this syntax
=#
```

```{julia}
x = 2          # Comments can be added at the end of lines
```

## Basic operations

```{julia}
# By default, Julia returns the output
2 + 3
```

```{julia}
# Trailing semi-colons suppress the output
3 + 7;
```

```{julia}
# Alternative syntax that can be used with operators
+(2, 5)
```

```{julia}
# Updating operators
a = 3
a += 8    # this is the same as a = a + 8
```

```{julia}
# Operator precedence follows standard rules
3 + 2 ^ 3 * 10
```

### More exotic operators

```{julia}
# Usual division
6 / 2
```

```{julia}
# Inverse division
2 \ 6
```

```{julia}
# Integer division (division truncated to an integer)
7 √∑ 2
```

```{julia}
# Remainder
7 % 2        # equivalent to rem(7, 2)
```

```{julia}
# Fraction
4//8
```

```{julia}
# Julia supports fraction operations
1//2 + 3//4
```

## Variables

![from [xkcd.com](https://xkcd.com/)](https://imgs.xkcd.com/comics/x.png){fig-alt="noshadow"}

A variable is a name bound to a value:

```{julia}
a = 3;
```

It can be called:

```{julia}
a
```

Or used in expressions:

```{julia}
a + 2
```

### Assignment

You can re-assign new values to variables:

```{julia}
a = 3;
a = -8.2;
a
```

Even values of a different type:

```{julia}
a = "a is now a string"
```

You can define multiple variables at once:

```{julia}
a, b, c = 1, 2, 3
b
```

### Variable names

These names are extremely flexible and [can use Unicode character:](https://docs.julialang.org/en/v1/manual/unicode-input/)

```{.julia}
\omega		 # press TAB
\sum         # press TAB
\sqrt	     # press TAB
\in          # press TAB
\:phone:     # press TAB
```

```{julia}
Œ¥ = 8.5;
üêå = 3;
Œ¥ + üêå
```

Admittedly, using emojis doesn't seem very useful, but using Greek letters to write equations really makes Julia a great mathematical language:

```{julia}
œÉ = 3
Œ¥ = œÄ
œï = 8

(5œÉ + 3Œ¥) / œï
```

:::{.note}

Note how the multiplication operator can be omitted when this does not lead to confusion.<br>
Also note how the mathematical constant œÄ is available in Julia without having to load any module.

:::

If you want to know how to type a symbol, ask Julia: type `?` and paste it in the REPL.

[The only hard rules for variable names are:]{.underline}

- They must begin with a letter or an underscore,
- They cannot take the names of [built-in keywords](https://docs.julialang.org/en/v1/base/base/#Keywords) such as `if`, `do`, `try`, `else`,
- They cannot take the names of built-in constants (e.g. `œÄ`) and keywords in use in a session.

:::{.example}

We thus get an error here:

:::

```{julia}
false = 3
```

In addition, the [Julia Style Guide](https://docs.julialang.org/en/v1/manual/style-guide/#Style-Guide-1) recommends to follow these conventions:

- Use lower case,
- Word separation can be indicated by underscores, but better not to use them if the names can be read easily enough without them.

### The ans variable

The keyword `ans` is a variable which, in the REPL, takes the value of the last computation:

```{.julia}
a = 3 ^ 2;
ans + 1
```

```
10
```

### Printing

To print the value of a variable in an interactive session, you only need to call it:

```{julia}
a = 3;
a
```

In non interactive sessions, you have to use the `println` function:

```{julia}
println(a)
```

## Quotes

Note the difference between single and double quotes:

```{julia}
typeof("a")
```

```{julia}
typeof('a')
```

```{julia}
"This is a string"
```

```{julia}
'This is not a sring'
```

:::{.note}

We got an error here since `'` is used for the character type and can thus only contain a single character.

:::

```{julia}
'a'
```
