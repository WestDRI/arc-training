---
title: Types
author: Marie-Hélène Burle
jupyter: julia-1.8
---

## Types systems

### Two main type systems in programming languages

#### Static type-checking

Type safety (catching errors of inadequate type) performed at compilation time.

:::{.example}

Examples: C, C++, Java, Fortran, Haskell.

:::

#### Dynamic type-checking

Type safety performed at runtime.

:::{.example}

Examples: Python, JavaScript, PHP, Ruby, Lisp.

:::

### Julia type system

Julia type system is *dynamic* (types are unknown until runtime), but types *can* be declared, optionally bringing the advantages of static type systems.

This gives users the freedom to choose between an easy and convenient language, or a clearer, faster, and more robust one (or a combination of the two).

## Julia types: a hierarchical tree

At the bottom: &emsp;**concrete types**. \
Above: &emsp;&emsp;&emsp;&emsp;**abstract types** (concepts for collections of concrete types). \
At the top: &emsp;&emsp;&ensp;&nbsp;the **`Any` type**, encompassing all types.

![](img/type.png){fig-alt="noshadow" width="80%"}

:::{.caption}

From <a href="https://www.oreilly.com/library/view/learning-julia-abstract/9781491999585/ch01.html">O'Reilly</a>

:::

One common type missing in this diagram is the boolean type.

It is a subtype of the integer type, as can be tested with the subtype operator `<:`

```{julia}
Bool <: Integer
```

It can also be made obvious by the following:

```{julia}
false == 0
```

```{julia}
true == 1
```

```{julia}
a = true;
b = false;
3a + 2b
```

## Optional type declaration

Done with `::`

```{.julia}
<value>::<type>
```

:::{.example}

Example:

:::

```{julia}
2::Int
```

## Illustration of type safety

This works:

```{julia}
2::Int
```

This doesn't work:

```{julia}
2.0::Int
```

Type declaration is not yet supported on global variables; this is used in local contexts such as inside a function.

:::{.example}

Example:

:::

```{julia}
function floatsum(a, b)
    (a + b)::Float64
end
```

This works:

```{julia}
floatsum(2.3, 1.0)
```

This doesn't work:

```{julia}
floatsum(2, 4)
```

## Information and conversion

The `typeof` function gives the type of an object:

```{julia}
typeof(2)
```

```{julia}
typeof(2.0)
```

```{julia}
typeof("Hello, World!")
```

```{julia}
typeof(true)
```

```{julia}
typeof((2, 4, 1.0, "test"))
```

Conversion between types is possible in some cases:

```{julia}
Int(2.0)
```

```{julia}
typeof(Int(2.0))
```

```{julia}
Char(2.0)
```

```{julia}
typeof(Char(2.0))
```

## Stylistic convention

The names of types start with a capital letter and camel case is used in multiple-word names.
