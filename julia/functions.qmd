---
title: Functions
author: Marie-Hélène Burle
---

Functions are objects containing a set of instructions. \
When you pass a tuple of argument(s) (possibly an empty tuple) to them, you get one or more values as output.

## Operators

Operators are functions and can be written in a way that shows the tuple of arguments more explicitly:

```{julia}
3 + 2 == +(3, 2)  # `==` tests for equality
```

```{julia}
+(3, 2)
```

## Function definition

There are 2 ways to define a new function:

### Long form

```{.julia}
function <name>(<arguments>)
    <body>
end
```

:::{.example}

Example:

:::

```{julia}
function hello1()
    println("Hello")
end
```

### Assignment form

```{.julia}
<name>(<arguments>) = <body>
```

:::{.example}

Example:

:::

```{julia}
hello1() = println("Hello")
```

The function `hello1` defined with this compact syntax is exactly the same as the one we defined above.

### Stylistic convention

Julia suggests to use lower case, without underscores, as function names.

## Calling functions

Since you pass a tuple to a function when you run it, you call a function by appending parentheses to its name:

```{julia}
hello1()
```

:::{.note}

Here, our function does not take any argument, so the tuple is empty.

:::

## Arguments

### No argument

Our function `hello` does not accept any argument. If we pass an argument, we get an error message:

```{.julia}
hello1("Bob")
```

```
LoadError: MethodError: no method matching hello1(::String)
```

### One argument

To define a function which accepts an argument, we need to add a placeholder for it in the function definition.

:::{.example}

So let's try this:

:::

```{julia}
function hello2(name)
    println("Hello name")
end
```

```{julia}
hello2("Bob")
```

Mmm ... not quite ... this function works but does not give the result we wanted.

Here, we need to use [string interpolation:](https://en.wikipedia.org/wiki/String_interpolation)

```{julia}
function hello3(name)
    println("Hello $name")
end
```

`$name` in the body of the function points to `name` in the tuple of argument.

When we run the function, `$name` is replaced by the value we used in lieu of `name` in the function definition:

```{julia}
hello3("Bob")
```

:::{.example}

Note that this dollar sign is only required with strings. Here is an example with integers:

:::

```{julia}
function cube(a)
    a ^ 3
end

cube(4)
```

### Multiple arguments

Now, let's write a function which accepts 2 arguments. For this, we put 2 placeholders in the tuple passed to the function in the function definition:

```{julia}
function hello4(name1, name2)
    println("Hello $name1 and $name2")
end
```

This means that this function expects a tuple of 2 values:

```{julia}
hello4("Bob", "Pete")
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

See what happens when you pass no argument, a single argument, or three arguments to this function.

:::

### Default arguments

You can set a default value for some or all arguments. In this case, the function will run with or without a value passed for those arguments. If no value is given, the default is used. If a value is given, it will replace the default.

:::{.example}

Example:

:::

```{julia}
function hello5(name="")
    println("Hello $name")
end
```

```{julia}
hello5()
```

```{julia}
hello5("Bob")
```

## Returning the result

In Julia, functions return the value(s) of the last expression automatically.<br>
If you want to return something else instead, you need to use the `return` statement. This causes the function to exit early.

:::{.example}

Look at these 5 functions:

:::

```{.julia}
function test1(x, y)
    x + y
end

function test2(x, y)
    return x + y
end

function test3(x, y)
    x * y
    x + y
end

function test4(x, y)
    return x * y
    x + y
end

function test5(x, y)
    return x * y
    return x + y
end

function test6(x, y)
    x * y, x + y
end
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

Without running the code, try to guess the outputs of:

:::

```{.julia}
test1(1, 2)
test2(1, 2)
test3(1, 2)
test4(1, 2)
test5(1, 2)
test6(1, 2)
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

Now, run the code and draw some conclusions on the behaviour of the return statement.

:::

## Anonymous functions

Anonymous functions are functions which aren't given a name:

```{.julia}
function (<arguments>)
    <body>
end
```

In compact form:

```{.julia}
<arguments> -> <body>
```

:::{.example}

Example:

:::

```{julia}
function (name)
    println("Hello $name")
end
```

Compact form:

```{julia}
name -> println("Hello $name")
```

### When would you want to use anonymous functions?

This is very useful for functional programming (when you apply a function—for instance `map`—to other functions to apply them in a vectorized manner which avoids repetitions).

:::{.example}

Example:

:::

```{julia}
map(name -> println("Hello $name"), ["Bob", "Lucie", "Sophie"]);
```

## Pipes

`|>` is the pipe in Julia.<br>
It redirects the output of the expression on the left as the input of the expression on the right.

:::{.example}

The following 2 expressions are equivalent:

:::

```{.julia}
println("Hello")
"Hello" |> println
```

:::{.example}

Here is another example:

:::

```{julia}
sqrt(2) == 2 |> sqrt
```

## Function composition

You can pass a function inside another function:

```{.julia}
<function2>(<function1>(<arguments>))
```

`<arguments>` will be passed to `<function1>` and the result will then be passed to `<function2>`.

An equivalent syntax is to use the composition operator `∘` (in the REPL, type `\circ` then press tab):

```{.julia}
(<function2> ∘ <function1>)(<arguments>)
```

:::{.example}

Example:

:::

```{julia}
# sum is our first function
sum(1:3)
```

```{julia}
# sqrt is the second function
sqrt(sum(1:3))
```

```{julia}
# This is equivalent
(sqrt ∘ sum)(1:3)
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

Write three other equivalent expressions using the pipe.

:::

## Mutating functions

Functions usually do not modify their argument(s):

```{julia}
a = [-2, 3, -5]
```

```{julia}
sort(a)
```

```{julia}
a
```

Julia has a set of functions which modify their argument(s). By convention, their names end with `!`

:::{.example}

The function sort has a mutating equivalent sort!:

:::

```{julia}
sort!(a);
a
```

:::{.note}

If you write functions which modify their arguments, make sure to follow this convention too.

:::

## Broadcasting

To apply a function to each element of a collection rather than to the collection as a whole, Julia uses broadcasting.

:::{.example}

Let's create a collection (here a tuple):

:::

```{julia}
a = (2, 3)
```

:::{.example}

If we pass `a` to the string function, that function applies to the whole collection:

:::

```{julia}
string(a)
```

:::{.example}

In contrast, we can broadcast the function string to all elements of a:

:::

```{julia}
broadcast(string, a)
```

:::{.example}

An alternative syntax is to add a period after the function name:

:::

```{julia}
string.(a)
```
