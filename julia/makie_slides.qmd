---
title: Makie
subtitle: A data visualization ecosystem for Julia
frontpic: "img/beautifulmakie.png"
author: Marie-HÃ©lÃ¨ne Burle
date: 2022-10-26
date-format: long
format:
  revealjs:
    embed-resources: true
    theme: [default, ../revealjs.scss]
    logo: /img/sfudrac_logo.png
    highlight-style: monokai
    code-line-numbers: false
    template-partials:
      - ../title-slide.html
    pointer:
      color: "#b5111b"
      pointerSize: 32
    link-external-newwindow: true
    footer: <a href="makie.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgb(153, 153, 153)" class="bi bi-arrow-90deg-up" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z"/></svg>&nbsp;Back to webinar page</a>
revealjs-plugins:
  - pointer
---

# Introduction

## Plotting in Julia

. . .

Many options:

- [Plots.jl](https://github.com/JuliaPlots/Plots.jl): high-level API for working with different back-ends (GR, Pyplot, Plotly...)
- [PyPlot.jl](https://github.com/JuliaPy/PyPlot.jl): Julia interface to Matplotlib's `matplotlib.pyplot`
- [PlotlyJS.jl](https://github.com/JuliaPlots/PlotlyJS.jl): Julia interface to plotly.js
- [PlotlyLight.jl](https://github.com/JuliaComputing/PlotlyLight.jl): the fastest plotting option in Julia by far, but limited features
- [Gadfly.jl](https://github.com/GiovineItalia/Gadfly.jl): following the grammar of graphics popularized by Hadley Wickham in R
- [VegaLite.jl](https://github.com/queryverse/VegaLite.jl): grammar of interactive graphics
- [PGFPlotsX.jl](https://github.com/KristofferC/PGFPlotsX.jl): Julia interface to the PGFPlots LaTeX package
- [UnicodePlots.jl](https://github.com/JuliaPlots/UnicodePlots.jl): plots in the terminal ðŸ™‚

. . .

- **[Makie.jl](https://github.com/MakieOrg/Makie.jl): powerful plotting ecosystem: animation, 3D, GPU optimization**

## Makie ecosystem

. . .

- Main package:

	+ `Makie`: plots functionalities. Backend needed to render plots into images or vector graphics

. . .

- Backends:

	+ `CairoMakie`: vector graphics or high-quality 2D plots. Creates, but does not display plots (you need an IDE that does or you can use [ElectronDisplay.jl](https://github.com/queryverse/ElectronDisplay.jl))

	+ `GLMakie`: based on [OpenGL](https://en.wikipedia.org/wiki/OpenGL); 3D rendering and interactivity in [GLFW](https://www.glfw.org/) window (no vector graphics)

	+ `WGLMakie`: web version of `GLMakie` (plots rendered in a browser instead of a window)

## Extensions

- [GeoMakie.jl](https://github.com/MakieOrg/GeoMakie.jl) add geographical plotting utilities to Makie
- [AlgebraOfGraphics.jl](https://github.com/MakieOrg/AlgebraOfGraphics.jl/) turns plotting into a simple algebra of building blocks
- [GraphMakie.jl](https://github.com/MakieOrg/GraphMakie.jl) to create network graphs

## Cheatsheet 2D

![](img/makiecheatsheet2D.png){width=85%}

:::{.caption}

From: [Storopoli, Huijzer and Alonso (2021). Julia Data Science. https://juliadatascience.io. ISBN: 97984898](https://juliadatascience.io/datavisMakie_attributes)

:::

## Cheatsheet 3D

![](img/makiecheatsheet3D.png)

:::{.caption}

From: [Storopoli, Huijzer and Alonso (2021). Julia Data Science. https://juliadatascience.io. ISBN: 97984898](https://juliadatascience.io/datavisMakie_attributes)

:::

## Resources

- [Official documentation](https://docs.makie.org/stable/)
- [Julia Data Science book, chapter 5](https://juliadatascience.io/DataVisualizationMakie)
- Many examples in the project [Beautiful Makie](https://github.com/MakieOrg/BeautifulMakie)

## Troubleshooting

Installing GLMakie can be challenging. [This page](https://github.com/MakieOrg/Makie.jl/tree/master/GLMakie#troubleshooting-opengl) may lead you towards solutions

CairoMakie and WGLMakie should install without issues

# Fundamental functioning

## Figure

Load the package (here, we are using CairoMakie):

```{julia}
using CairoMakie                        # no need to import Makie itself
```

:::: {.columns}

::: {.column width="48%"}
Create a `Figure` (container object):

```{julia}
fig = Figure()
```
:::

::: {.column width="4%"}

:::

::: {.column width="48%"}
<br>
```{julia}
typeof(fig)
```

:::

::::

---

You can customize a `Figure`:

```{julia}
fig2 = Figure(backgroundcolor=:grey22, resolution=(300, 300))
```

Makie uses the [Colors.jl](https://github.com/JuliaGraphics/Colors.jl) package as a dependency \
You can find a list of all named colours [here](https://juliagraphics.github.io/Colors.jl/stable/namedcolors/)

---

To use CSS specification (e.g. hex), you need to install Colors explicitly and use [its color parsing capabilities](http://juliagraphics.github.io/Colors.jl/stable/constructionandconversion/#Color-Parsing):

```{julia}
using Colors
fig3 = Figure(backgroundcolor=colorant"#adc2eb")
```

## Axis

:::: {.columns}

::: {.column width="48%"}

Then, you can create an `Axis`:

```{julia}
ax = Axis(Figure()[1, 1])
```

:::

::: {.column width="4%"}

:::

::: {.column width="48%"}

<br>
```{julia}
typeof(ax)
```

:::

::::

---

```{julia}
Axis(fig3[1, 1])  # fig3[1, 1] sets the subplot layout: fig[row, col]
fig3
```

---

```{julia}
Axis(fig[2, 3])  # This is what happens if we change the layout
fig
```

---

```{julia}
Axis(fig3[2, 3])  # We can add another axis on fig3
fig3
```

---

Axis are customizable:

```{julia}
fig4 = Figure()
Axis(fig4[1, 1],
     xlabel="x label",
     ylabel="y label",
     title="Title of the plot")
fig4
```

## Plot

Finally, we can add a plot:

```{julia}
#| code-line-numbers: "1-4|5|6"

fig = Figure()
ax = Axis(fig[1, 1])
x = LinRange(-10, 10, 20)
y = x
scatter!(ax, x, y)  # Functions with ! transform their arguments
fig
```

---

Of course, there are many plotting functions, e.g. `scatterlines!`:

```{julia}
fig = Figure()
ax = Axis(fig[1, 1])
x = LinRange(-10, 10, 20)
y = x
scatterlines!(ax, x, y)  # Functions with ! transform their arguments
fig
```

---

We can also use `lines!`:

```{julia}
fig = Figure()
ax = Axis(fig[1, 1])
x = LinRange(-10, 10, 20)
y = sin.(x)  # The . means that the function is broadcast to each element of x
lines!(ax, x, y)
fig
```

---

Let's add points to get a smoother line:
  
```{julia}
fig = Figure()
ax = Axis(fig[1, 1])
x = LinRange(-10, 10, 1000)
y = sin.(x)  # The . means that the function is broadcast to each element of x
lines!(ax, x, y)
fig
```

---

Now, you don't have to create the `Figure`, `Axis`, and plot one at a time\
You can create them at the same time with, for instance `lines`:

```{julia}
x = LinRange(-10, 10, 1000)
y = sin.(x)
lines(x, y)  # Note the use of lines instead of lines!
```

---

Or even more simply:

```{julia}
x = LinRange(-10, 10, 1000)
lines(x, sin)
```

---

This is a lot simpler, but it is important to understand the concepts of the `Figure` and `Axis` objects as you will need it to customize them:

```{julia}
x = LinRange(-10, 10, 1000)
y = cos.(x)
lines(x, y;
      figure=(; backgroundcolor=:green),
      axis=(; title="Cosinus function", xlabel="x label", ylabel="y label"))
```

---

When you create the `Figure`, `Axis`, and plot at the same time, you create a `FigureAxisPlot` object:

```{julia}
x = LinRange(-10, 10, 1000)
y = cos.(x)
obj = lines(x, y;
            figure=(; backgroundcolor=:green),
            axis=(; title="Cosinus function",
                  xlabel="x label",
                  ylabel="y label"));
typeof(obj)
```

:::{.note}

Note the `;` in the `figure` and `axis` value. This is because these are one-element NamedTuples

:::

---

The mutating functions (with `!`) can be used to add plots to an existing figure, but first, you need to decompose the `FigureAxisPlot` object:

```{julia}
fig, ax, plot = lines(x, sin)
lines!(ax, x, cos)  # Remember that we are transforming the Axis object
fig                 # Now we can plot the transformed Figure
```

---

Or we can add several plots on different `Axis` in the same `Figure`:

```{julia}
fig, ax1, plot = lines(x, sin)
ax2 = Axis(fig[1, 2])
lines!(ax2, x, cos)
fig
```

# Examples

## 2D

```{julia}
#| output-location: slide

using CairoMakie
using StatsBase, LinearAlgebra
using Interpolations, OnlineStats
using Distributions
CairoMakie.activate!(type = "png")

function eq_hist(matrix; nbins = 256 * 256)
    h_eq = fit(Histogram, vec(matrix), nbins = nbins)
    h_eq = normalize(h_eq, mode = :density)
    cdf = cumsum(h_eq.weights)
    cdf = cdf / cdf[end]
    edg = h_eq.edges[1]
    interp_linear = LinearInterpolation(edg, [cdf..., cdf[end]])
    out = reshape(interp_linear(vec(matrix)), size(matrix))
    return out
end

function getcounts!(h, fn; n = 100)
    for _ in 1:n
        vals = eigvals(fn())
        x0 = real.(vals)
        y0 = imag.(vals)
        fit!(h, zip(x0,y0))
    end
end

m(;a=10rand()-5, b=10rand()-5) = [0 0 0 a; -1 -1 1 0; b 0 0 0; -1 -1 -1 -1]

h = HeatMap(range(-3.5,3.5,length=1200), range(-3.5,3.5, length=1200))
getcounts!(h, m; n=2_000_000)

with_theme(theme_black()) do
    fig = Figure(figure_padding=0,resolution=(600,600))
    ax = Axis(fig[1,1]; aspect = DataAspect())
    heatmap!(ax,-3.5..3.5, -3.5..3.5, eq_hist(h.counts); colormap = :bone_1)
    hidedecorations!(ax)
    hidespines!(ax)
    fig
end
```

## 3D

```{.julia}
using GLMakie, Random
GLMakie.activate!()

Random.seed!(13)
x = -6:0.5:6
y = -6:0.5:6
z = 6exp.( -(x.^2 .+ y' .^ 2)./4)

box = Rect3(Point3f(-0.5), Vec3f(1))
n = 100
g(x) = x^(1/10)
alphas = [g(x) for x in range(0,1,length=n)]
cmap_alpha = resample_cmap(:linear_worb_100_25_c53_n256, n, alpha = alphas)

with_theme(theme_dark()) do
    fig, ax, = meshscatter(x, y, z;
                           marker=box,
                           markersize = 0.5,
                           color = vec(z),
                           colormap = cmap_alpha,
                           colorrange = (0,6),
                           axis = (;
                                   type = Axis3,
                                   aspect = :data,
                                   azimuth = 7.3,
                                   elevation = 0.189,
            perspectiveness = 0.5),
        figure = (;
            resolution =(1200,800)))
    meshscatter!(ax, x .+ 7, y, z./2;
        markersize = 0.25,
        color = vec(z./2),
        colormap = cmap_alpha,
        colorrange = (0, 6),
        ambient = Vec3f(0.85, 0.85, 0.85),
        backlight = 1.5f0)
    xlims!(-5.5,10)
    ylims!(-5.5,5.5)
    hidedecorations!(ax; grid = false)
    hidespines!(ax)
    fig
end
```

## 3D

![](img/makie_plot.png)

# <span style="font-size: 50px;">For more examples, have a look at [Beautiful Makie](https://github.com/MakieOrg/BeautifulMakie)</span>

## Compiling sysimages

While Makie is extremely powerful, its compilation time and its time to first plot are extremely long

For this reason, it might save you a lot of time to create a sysimage (a file containing information from a Julia session such as loaded packages, global variables, compiled code, etc.) with [PackageCompiler.jl](https://github.com/JuliaLang/PackageCompiler.jl)

:::{.note}

The upcoming Julia 1.9 will do this automatically

:::

# Using the Alliance clusters

## CairoMakie

CairoMakie will run without problem on the Alliance clusters

It is not designed for interactivity, so saving to file is what makes the most sense

:::{.example}

Example:

:::

```{.julia}
save("graph.png", fig)
```
<br>
[Remember however that CairoMakie is 2D only (for now)]{.note}

## GLMakie

GLMakie relies on [GLFW](https://www.glfw.org/) to create windows with OpenGL

GLFW doesn't support creating contexts without an associated window

The dependency [GLFW.jl](https://github.com/JuliaGL/GLFW.jl) will thus not install in the clustersâ€”even with X11 forwardingâ€”unless you use [VDI nodes](https://docs.alliancecan.ca/wiki/VNC#VDI_Nodes), [VNC](https://docs.alliancecan.ca/wiki/VNC), or [Virtual GL](https://virtualgl.org/)

## WGLMakie

You can setup a server with [JSServe.jl](https://github.com/SimonDanisch/JSServe.jl) as per [the documentation](http://juliaplots.org/WGLMakie.jl/stable/)

However, this method is intended for the creation of interactive widgets, e.g. for a website

While this is really cool, it isn't optimized for performance

There might also be a way to create an SSH tunnel to your local browser, although there is no documentation on this

Best probably is to save to file

## Conclusion: Makie on production clusters

- 2D plots: use CairoMakie and save to file
- 3D plots: use WGLMakie and save to file

# Questions?
