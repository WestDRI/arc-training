---
title: Working without write access
author: Marie-Hélène Burle
---

:::{.def}

There are two situations in which you do not have write access to projects:

- you are an outsider (i.e. you are contributing to open source projects you are using, but you are not part of the team),
- you are part of the team, but the person in charge wants a workflow via [pull requests (PRs)](https://en.wikipedia.org/wiki/Distributed_version_control#Pull_requests)—this is often the case in large teams with a more top-down organization.

This section shows you how you can contribute to such projects.

:::

## Opening issues

The easiest thing to do is to open an issue.

This is a way to bring the attention of the maintainer(s) of the project to a particular question without attempting to directly address the problem.

You might open an issue for instance if:

- you are having problems with an open source tool you are using,
- you found a bug,
- you want to suggest a new feature,
- (more applicable to the research collaboration framework) you want your team to address some question relevant to the project—an issue is a way to keep something in the mind of everyone involved until it is resolved and closed.

:::{.note}

If enabled by the maintainer of a project, the [Discussions]{.codelike} tab is the place where you want to ask for help or discuss topics less directly pertinent to improving the project.

:::

## Submitting changes

If you want to actually edit the content of a project you don't have write-access to, you have to create a pull request (PR).

:::{.note}

In [GitLab](https://gitlab.com/), pull requests are called merge requests (MR), but the concepts are exactly the same.

:::

This is a multi-step process.

```{mermaid}
%%| echo: false
%%| fig-cap: The pull request workflow&nbsp;
flowchart TD
  subgraph gh["<b>GitHub</b>"]
    subgraph project["<b>Project</b>"]
      upstream/main["<b>upstream/main</b>"]
      upstream/dev["<b>upstream/dev</b>"]
    end
    subgraph fork["<b>Your fork</b>"]
      origin/main["<b>origin/main</b>"]
      origin/dev["<b>origin/dev</b>"]
    end
  end
  subgraph local["<b>Your machine</b>"]
    subgraph clone["<b>Your clone</b>"]
      main["<b>main</b>"]
      dev["<b>dev</b>"]
    end
  end

  classDef location fill:#bfbfbf, color:#000;
  class gh location;
  class local location;
  classDef repo fill:#85adad, color:#000;
  class project repo;
  class fork repo;
  class clone repo;
  upstream/main -- GitHub Fork -->  origin/main
  origin/main -- <font color="#ff54ff"; background-color="#000">git clone</font> --> main
  upstream/main -- <font color="#ff54ff" background-color="#000">git pull upstream main</font> --> main
  main -- <font color="#ff54ff" background-color="#000">git push origin main</font> --> origin/main
  main -- <font color="#ff54ff" background-color="#000">git switch -c dev</font> --> dev
  dev -- <font color="#ff54ff" background-color="#000">git push origin dev</font> --> origin/dev
  origin/dev -- GitHub PR --> upstream/dev
```

:::{.note}

"Project" = the project you want to contribute to \
"Your fork" = your fork of the project \
"Your clone" = your local clone of the project (cloned from origin) \
"dev" = a new branch you create and switch to before committing changes \
"upstream" = the name of the remote corresponding to the original project \
"origin" = the name of the remote you can push to (your fork)

:::

### Fork the project

Go to GitHub and fork the project by clicking on the [Fork]{.codelike} button in the top right corner.

:::{.note}

If you want to develop your own version of the project, you can keep working on your fork and develop it in a direction different from that of the initial project.

:::

You have all privileges on the forked project: your fork is your repo. This means that you can make any changes you want. You can clone it to your machine, create commits and push them back to your fork.

Here however, we want to submit changes to the original project.

### Keep your fork up to date

Before you submit a change to the original project, you need to make sure that your fork is up to date. Here are the steps

#### 1. Clone your fork

Clone your fork to have a local copy of the project on your machine. This will automatically set your fork on GitHub as the remote called `origin`:

```{.bash}
# If you have set SSH for your GitHub account
git clone git@github.com:<user>/<repo>.git <name>

# If you haven't set SSH
git clone https://github.com/<user>/<repo>.git <name>
```

#### 2. Add upstream

Add a second remote, this one pointing to the initial project. It is usual to call this remote `upstream`:

```{.bash}
# If you have set SSH for your GitHub account
git remote add upstream git@github.com:<user>/<repo>.git

# If you haven't set SSH
git remote add upstream https://github.com/<user>/<repo>.git
```

#### 3. Pull from upstream

You can now pull from `upstream` to keep your fork up to date:

```{.bash}
git pull upstream main
```

From there on, you can pull from and push to `origin` (your fork) and you can pull from `upstream` (the initial repo).

Of course, if your project and the initial one diverge in places, this will lead to conflicts that you will have to resolve as you merge the pulls from `upstream`.

Most of the time however, you don't want to develop your own version of the project. Instead, you want to make the initial project better by contributing to it. But you can't push changes to `upstream` directly since you are not part of that project. You don't have write access to that repository. If anybody could push to any project, that would be utter chaos.

So how do you contribute code to someone else's project?

### Submit pull requests

1. Pull from `upstream` (see above) to make sure that your contributions are made on an up-to-date version of the project.

2. Create a new branch and switch to it.

:::{.example}

Example for a branch we call "dev" (you can call it however you want):

:::

```{.bash}
git switch -c dev
```

3. Make changes and commit to that branch.

4. Push that branch to your fork (i.e. `origin`—remember that you do not have write access on `upstream`).

5. Go to the original project GitHub's page and open a pull request from your fork.

:::{.note}

After you have pushed your branch to `origin`, GitHub will automatically offer you to do so with a pop-up and you can just follow the instructions.

:::

The maintainer of the initial project may accept or decline the PR. They may also make comments and ask you to make changes. If so, make new changes and push additional commits to that branch until they are happy with the change.

Once the PR is merged by the maintainer, you can delete the branch on your fork and pull from `upstream` to update your local fork with the recently accepted changes.
