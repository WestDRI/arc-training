---
title: What is Git?
aliases:
  - intro_slides.html
frontpic: "img/git_graph.png"
frontpicwidth: 80%
frontpicmargintop: 30px
frontpicmarginbottom: 30px
author: Marie-Hélène Burle
execute:
  error: true
  echo: true
format:
  revealjs:
    embed-resources: true
    theme: [default, ../revealjs.scss]
    logo: /img/favicon_sfudrac.png
    highlight-style: ayu
    code-line-numbers: false
    template-partials:
      - ../title-slide.html
    pointer:
      color: "#b5111b"
      pointerSize: 32
    link-external-newwindow: true
    footer: <a href="intro_intro.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgb(153, 153, 153)" class="bi bi-arrow-90deg-up" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z"/></svg>&nbsp;Back to the course</a>
    slide-level: 0
    auto-stretch: false
revealjs-plugins:
  - pointer
---

<br><br><br><br><br>

First, we need to answer the question:

# What is version control?

---

<br><br><br>

Whenever we work on important documents, we know that we should keep key versions <br><br>

:::{.example}

Example:

- The version of a manuscript that we sent to our supervisor
- The revised version after we addressed their comments
- The revised version after we addressed reviewer comments
- Etc.

:::

---

:::: {.columns}

::: {.column width="50%"}

<br>

Home-made versioning:

:::{.fragment}

It is quite messy...

:::

:::

::: {.column width="50%"}

<br>

![From [PhD](http://phdcomics.com/)](https://phdcomics.com/comics/archive/phd101212s.gif){width="75%"}

:::

::::

---

:::: {.columns}

::: {.column width="50%"}

<br>

And inevitably, it leads to this:

:::

::: {.column width="50%"}

<br>

![From [Geek&Poke](http://geek-and-poke.com/)](img/vc.jpg)

:::

::::

---

<br><br><br><br><br><br>

## Version control systems (VCS) are software that handle versioning effectively {.center}

---

<br><br><br><br><br><br>

# Which VCS should I use?

---

<br>
Several systems have been developed over the years with various functioning

:::{.fragment}

Then came Git...

<script type="text/javascript" src="https://ssl.gstatic.com/trends_nrtr/3045_RC01/embed_loader.js"></script> <script type="text/javascript"> trends.embed.renderExploreWidget("TIMESERIES", {"comparisonItem":[{"keyword":"/m/05vqwg","geo":"","time":"2004-01-01 2022-10-03"},{"keyword":"/m/08441_","geo":"","time":"2004-01-01 2022-10-03"},{"keyword":"/m/012ct9","geo":"","time":"2004-01-01 2022-10-03"},{"keyword":"/m/09d6g","geo":"","time":"2004-01-01 2022-10-03"}],"category":0,"property":""}, {"exploreQuery":"date=all&q=%2Fm%2F05vqwg,%2Fm%2F08441_,%2Fm%2F012ct9,%2Fm%2F09d6g","guestPath":"https://trends.google.com:443/trends/embed/"}); </script>

:::

---

<br>

## Git {.center}

Git is an open source distributed VCS created in 2005 by Linus Torvalds for the versioning of the Linux kernel during its development

In distributed VCS, the full history of projects lives on everybody's machine—as opposed to being only stored on a central server as was the case with centralized VCS. This allows for offline work and multiple backups

Git also introduced an extremely powerful and light-weight branching system

Git is extremely powerful and almost universally adopted

---

<br><br><br><br><br><br>

# How does Git work?

---

<br><br>

Git saves the history of a project as a series of snapshots

![](img/01.png){width=70% fig-alt="noshadow"}

:::{.fragment}

The data is stored as blobs, doesn't create unnecessary copies (unchanged files are referenced from old blobs), and uses excellent compression

:::

---

<br><br>

These snapshots are identified by commits

![](img/02.png){width=70% fig-alt="noshadow"}

---

<br><br><br>

Each commit has a unique *hash* and contains the following metadata:

- Author
- Date and time
- The hash of parent commit(s)
- A descriptive message

---

<br><br>

When you create the 1^st^ commit, a pointer called a *branch* is created and points to it

![](img/03.png){width=70% fig-alt="noshadow"}

By default, that first branch is called `main`

Another pointer (`HEAD`) points to the branch `main`. `HEAD` indicates where you are in the project history

---

<br><br>

As you create more commits the pointers `HEAD` and `main` move automatically

![](img/04.png){width=70% fig-alt="noshadow"}

---

<br><br>

As you create more commits the pointers `HEAD` and `main` move automatically

![](img/05.png){width=70% fig-alt="noshadow"}

---

<br><br>

For simplicity, the diagrams can be simplified this way

![](img/06.png){width=70% fig-alt="noshadow"}

---

<br><br><br><br><br><br>

# How can these commits be used?

---

<br><br>

You can revisit old commits by moving `HEAD` to them

![](img/07.png){width=70% fig-alt="noshadow"}

. . .

This will uncompress the corresponding snapshot and you can look at the state of your files at that commit before going back to your branch

. . .

You can also print the differences between various commits

---

<br><br>

You can create multiple branches to explore freely and safely

![](img/26.png){width=70% fig-alt="noshadow"}

. . .

`HEAD` can be moved back and forth between branches

---

<br><br>

You can merge branches to bring your experiments into your main branch

![](img/28.png){width=70% fig-alt="noshadow"}

---

:::: {.columns}

::: {.column width="62%"}

![From [xkcd.com](https://xkcd.com/)](https://imgs.xkcd.com/comics/git.png){width=60% fig-alt="noshadow"}

:::

::: {.column width="38%"}

<br><br><br><br><br><br><br>

## Time to get started!

:::

::::
