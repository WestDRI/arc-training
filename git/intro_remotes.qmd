---
title: Remotes
aliases:
  - remotes.html
author: Marie-Hélène Burle
---

:::{.def}

Remotes are copies of a project and its history.

They can be located anywhere, including on external drive or on the same machine as the project, although they are often on a different machine to serve as backup, or on a network (e.g. internet) to serve as a syncing hub for collaborations.

Popular online Git repository managers & hosting services:

- [GitHub](https://github.com)
- [GitLab](https://gitlab.com)
- [Bitbucket](https://bitbucket.org)

Let's see how to create and manage remotes.

:::

## Creating a remote on GitHub

### Create a free GitHub account

If you don't already have one, sign up for a [free GitHub account](https://github.com/).

### Connect to GitHub

The 2 main ways to push data to GitHub are:

- using a token,
- using SSH.

We will use a token here.

:::{.note}

There are alternative methods but you will have to look for information on your own:

- If you use Edge, there is an integration with GitHub since they are both owned by Microsoft. \
- The GitHub Desktop application gives additional options to connect. \
- If you use the GitHub app, it also gives authentication methods.

:::

:::{.note}

For information on how to use SSH with GitHub, you can look at [this section](col_setup#using-ssh) of our course on collaborating with GitHub.

:::

A token can be generated [in GitHub settings](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-fine-grained-personal-access-token).

Here is the workflow:

- In the upper-right corner of any page on GitHub, click your profile photo, then click [Settings]{.codelike}.
- In the left sidebar, click [Developer settings]{.codelike}.
- In the left sidebar, under [Personal access tokens]{.codelike}, click [Fine-grained tokens]{.codelike}.
- Click [Generate new token]{.codelike}.
- Under [Token name]{.codelike}, enter a name for the token.
- Under [Repository access]{.codelike}, select which repositories you want the token to access.
- Under [Permissions]{.codelike}, select which permissions to grant the token.
- Click [Generate token]{.codelike}.
- [Make sure to copy the token and save it to your computer.]{.emph}

When you push to GitHub, you will be asked for your username and password. [Your username is your GitHub username and the password is your token.]{.emph}

### Create a repository on GitHub

- Go to the [GitHub website](https://github.com), login, and go to your home page.
- Look for the [Repositories]{.codelike} tab & click the green [New]{.codelike} button.
- Enter the name you want for your repo, *without spaces*.
- Make the repository public or private.

### Link remote repo to local repo

Click on the [Code]{.codelike} green drop-down button, select SSH [if you have set SSH for your GitHub account](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh) or HTTPS and copy the address.

In the command line, `cd` inside your project, and add the remote:

```{.bash}
git remote add <remote-name> <remote-address>
```

`remote-name` is a convenience name to identify that remote. You can choose any name, but since Git automatically call the remote `origin` when you clone a repo, it is common practice to use `origin` as the name for the first remote.

:::{.example}

Example (using an SSH address):

:::

```{.bash}
git remote add origin git@github.com:<user>/<repo>.git
```

:::{.example}

Example (using an HTTPS address):

:::

```{.bash}
git remote add origin https://github.com/<user>/<repo>.git
```

## Getting information on remotes

List remotes:

```{.bash}
git remote
```

List remotes with their addresses:

```{.bash}
git remote -v
```

Get more information on a remote:

```{.bash}
git remote show <remote-name>
```

:::{.example}

Example:

:::

```{.bash}
git remote show origin
```

## Managing remotes

Rename a remote:

```{.bash}
git remote rename <old-remote-name> <new-remote-name>
```

Delete a remote:

```{.bash}
git remote remove <remote-name>
```

Change the address of a remote:

```{.bash}
git remote set-url <remote-name> <new-url> [<old-url>]
```

## Getting data from a remote

If you collaborate on a project, you have to get the data added by your teammates to keep your local project up to date.

To download new data from a remote, you have 2 options:

- `git fetch`
- `git pull`

### Fetching changes

*Fetching* downloads the data from a remote that you don't already have in your local version of the project:

```{.bash}
git fetch <remote-name>
```

The branches on the remote are now accessible locally as `<remote-name>/<branch>`. You can inspect them or you can merge them into your local branches.

:::{.example}

Example:

:::

```{.bash}
git fetch origin
```

### Pulling changes

*Pulling* fetches the changes & merges them onto your local branches:

```{.bash}
git pull <remote-name> <branch>
```

:::{.example}

Example:

:::

```{.bash}
git pull origin main
```

If your branch is already tracking a remote branch, you can omit the arguments:

```{.bash}
git pull
```

## Pushing to a remote

Uploading data to the remote is called *pushing*:

```{.bash}
git push <remote-name> <branch-name>
```

:::{.example}

Example:

:::

```{.bash}
git push origin main
```

You can set an upstream branch to track a local branch with the `-u` flag:

```{.bash}
git push -u <remote-name> <branch-name>
```

:::{.example}

Example:

:::

```{.bash}
git push -u origin main
```

From now on, all you have to run when you are on `main` is:

```{.bash}
git push
```

![by [jscript](https://www.redbubble.com/people/jscript/shop#profile)](img/gitout.png){width="35%" fig-alt="noshadow"}
