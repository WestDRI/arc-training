---
title: Inspecting changes
author: Marie-Hélène Burle
---

:::{.def}



:::

## List of modified files

One command you will run often when working with Git is `git status`:

```{.bash}
git status
```

````
On branch main
nothing to commit, working tree clean
````

This means that we are on the branch `main` (that's the only branch in our repo at this point) and that all changes to our project have been committed.

Let's modify a file and see what happens:

```{.bash}
echo "
## Conclusion

And finally, the great conclusion of our paper." >> ms/chapter3.md
```

```{.bash}
git status
```

````
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   ms/chapter3.md

no changes added to commit (use "git add" and/or "git commit -a")
````

Let's modify another file:

```{.bash}
echo "
a = 23" >> src/chapter3.R
```

```{.bash}
git status
```

````
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   ms/chapter3.md
        modified:   src/chapter3.R

no changes added to commit (use "git add" and/or "git commit -a")
````

Maybe we don't want to create a commit with all those changes, so we only stage the changes made to the manuscript:

```{.bash}
git add ms/chapter3.md
```

Then we check the status of our repository again:

```{.bash}
git status
```

````
On branch main
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   ms/chapter3.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   src/chapter3.R
````

If we ran `git commit` at this point, we would create a new commit with the changes made to the manuscript.

## List of actual changes

While `git status` gives us the list of new files and files with changes, it doesn't allow us to see what those changes are. For this, we need a new command: `git diff`.

### Differences between the working directory and the index

`git diff` shows the difference between the working directory (our actual files) and the index (staging area):

```{.bash}
git diff
```

````
diff --git a/src/chapter3.R b/src/chapter3.R
index 95f1592..2bf030d 100644
--- a/src/chapter3.R
+++ b/src/chapter3.R
@@ -7,3 +7,5 @@ df <- data.frame(
 )

 ggplot(df, aes(x, y)) + geom_point()
+
+a = 23
````

This allows us to see that src/chapter3.R has a new line (`a = 23`) and that it is not yet staged.

### Differences between the index and your last commit

To see what would be committed if you ran `git commit` (so, to see the difference between the index and the last commit), you need to run instead:

```{.bash}
git diff --cached
```

````
diff --git a/ms/chapter3.md b/ms/chapter3.md
index 9408f32..80d2c5c 100644
--- a/ms/chapter3.md
+++ b/ms/chapter3.md
@@ -11,3 +11,7 @@ Bla bla bla.
 ## Results

 We now have a bunch of results in our markdown manuscript.
+
+## Conclusion
+
+And finally, the great conclusion of our paper.
````

This shows us the changes that we have staged but not yet committed (the changes to our manuscript).

### Differences between the working directory and your last commit

This means, both of the above. This can been displayed with:

```{.bash}
git diff HEAD
```

````
diff --git a/ms/chapter3.md b/ms/chapter3.md
index 9408f32..80d2c5c 100644
--- a/ms/chapter3.md
+++ b/ms/chapter3.md
@@ -11,3 +11,7 @@ Bla bla bla.
 ## Results

 We now have a bunch of results in our markdown manuscript.
+
+## Conclusion
+
+And finally, the great conclusion of our paper.
diff --git a/src/chapter3.R b/src/chapter3.R
index 95f1592..2bf030d 100644
--- a/src/chapter3.R
+++ b/src/chapter3.R
@@ -7,3 +7,5 @@ df <- data.frame(
 )

 ggplot(df, aes(x, y)) + geom_point()
+
+a = 23
````

Now, let's clean up our working directory by creating two new commits:

```{.bash}
git commit -m "Add conclusion to the manuscript"
```

````
[main c7fc9c1] Add conclusion to the manuscript
 1 file changed, 4 insertions(+)
````

```{.bash}
git add .
git commit -m "Define the variable a in R script"
```

````
[main a049a2f] Define the variable a in R script
 1 file changed, 2 insertions(+)
````

If we look at the status of our repository now, we can see that it is clean again:

```{.bash}
git status
```

````
On branch main
nothing to commit, working tree clean
````
