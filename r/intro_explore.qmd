---
title: Data exploration
author: Marie-Hélène Burle
---

:::{.def}

An important first step of data analysis is to have a look at the data. In this section, we will explore the `us_contagious_diseases` dataset from the [dslabs package](https://cran.r-project.org/web/packages/dslabs/index.html).

:::

## Load the dslabs package

This package contains a number of datasets. To access any of them, we first need to load the package:

```{r}
library(dslabs)
```

:::{.info}

`library()` is a *function*:

```{r}
class(library)
```

Functions are the "verbs" of programming languages. They do things.

`library()` is a function that loads packages into the current session so that their content becomes available.

`dslabs` is the *argument* that we pass to the function `library()`: it is this particular packages that we are loading in the session here.

`class()` is also a function: it tells what class an object belongs to. In `class(library)`, `library` is the argument of the function `class()`.

:::

## Printing data to screen

To print all the data, we would simply run `us_contagious_diseases`. There are a lot of rows however, so we only want to print a subset to the screen.

To print the first six rows, we use the function `head()`, using our data as the argument:

```{r}
head(us_contagious_diseases)
```

If you look at the documentation of the `head()` function (by running `?head`), you can see that it accepts another argument that allows us to set the number of rows to print.

Let's print the first 15 rows: 

```{r}
head(us_contagious_diseases, n = 15)
```

:::{.info}

By default, `n = 6` which is why `head()` prints six rows unless we specify otherwise. The `L` in the documentation of the `print()` function (`n = 6L`) means that `6` is an integer. You can ignore this for now.

Arguments can be passed to functions as *positional arguments* (then they have to respect the position of the function definition) or as *named arguments* (in that case, you need to use the arguments names).

That means that iff we keep the arguments in the right order, we can omit the *name* of the argument (`n` here) and only write its *value* (`15`). :

```{r}
head(us_contagious_diseases, 15)
```

If the arguments are given to the function out of order however, we do need to use their names.

This won't work because R needs an integer for `n` or for the 2^nd^ argument:

```{r}
head(15, us_contagious_diseases)
```

This however works:

```{r}
head(n = 15, us_contagious_diseases)
```

:::

We can also print the last 6 rows of the data:

```{r}
tail(us_contagious_diseases)
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

How would you print the last 10 rows of the data?

:::

## Structure of the data object

`us_contagious_diseases` is an R object containing the dataset, but what kind of object is it?

```{r}
class(us_contagious_diseases)
```

**Our data is in a class of R object called a *data frame***.

We can get its full structure with:

```{r}
str(us_contagious_diseases)
```

The names of the variables can be obtained with:

```{r}
names(us_contagious_diseases)
```

You can display the data frame in a tabular fashion thanks to:

```{.r}
View(us_contagious_diseases)
```

## Dimensions of our data frame

```{r}
dim(us_contagious_diseases)
ncol(us_contagious_diseases)
nrow(us_contagious_diseases)
```

```{r}
length(us_contagious_diseases)
length(us_contagious_diseases$disease)
```

## Summary statistics

```{r}
summary(us_contagious_diseases)
```
