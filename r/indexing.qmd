---
title: Indexing
author: Marie-Hélène Burle
---

:::{.def}

This section covers indexing from the various data structures.

:::

## Indexing atomic vectors

:::{.example}

Here is an example with an atomic vector of size one:

:::

Indexing in R starts at `1` and is done with square brackets next to the element to index:

```{r}
x <- 2
x
x[1]
```

What happens if we index out of range?

```{r}
x[2]
```

:::{.example}

Example for an atomic vector with multiple elements:

:::

```{r}
x <- c(2, 4, 1)
x
x[2]
x[2:4]
```

### Modifying mutable objects

Indexing also allows to modify some of the values of mutable objects:

```{r}
x
x[2] <- 0
x
```

### Copy-on-modify

Not all languages behave the same when you assign the same mutable object to several variables, then modify one of them.

#### In Python: no copy-on-modify

:::{.note}

Don't try to run this code in R. This is for information only.

:::

```{.python filename="Python"}
a = [1, 2, 3]
b = a
b
```

```
[1, 2, 3]
```

```{.python filename="Python"}
a[0] = 4           # In Python, indexing starts at 0
a
```

```
[4, 2, 3]
```

```{.python filename="Python"}
b
```

```
[4, 2, 3]
```

Modifying `a` also modifies `b`: this is because no copy is made when you modify `a`. If you want to keep `b` unchanged, you need to assign an explicit copy of `a` to it with `b = copy.copy(a)`.

#### In R: copy-on-modify

```{r}
a <- c(1, 2, 3)
b <- a
b
a[1] <- 4          # In R, indexing starts at 1
a
b
```

Here, the default is to create a new copy in memory when `a` is transformed so that `b` remains unchanged.

## Indexing matrices and arrays

```{r}
x <- matrix(1:12, nrow = 3, ncol = 4)
x
x[2, 3]

x <- array(as.double(1:24), c(3, 2, 4))
x
x[2, 1, 3]
```

## Indexing lists

```{r}
x <- list(2L, 3:8, c(2, 1), FALSE, "string")
x
```

Indexing a list returns a list:

```{r}
x[3]
typeof(x[3])
```

To extract elements of a list, double square brackets are required:

```{r}
x[[3]]
typeof(x[[3]])
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

Try to extract the number `7` from this list.

:::

<!-- ```{r} -->
<!-- x[[2]][5] -->
<!-- ``` -->

## Indexing data frames

```{r}
x <- data.frame(
  country = c("Canada", "USA", "Mexico"),
  var = c(2.9, 3.1, 4.5)
)
x
```

A data frame is a list of atomic vectors representing the various columns:

```{r}
x[1]
typeof(x[1])
x[[1]]
typeof(x[[1]])
```

Indexing dataframes can also be done using the column names:

```{r}
x$country
identical(x[[1]], x$country)
```
