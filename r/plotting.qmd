---
title: Plotting
author: Marie-Hélène Burle
---

:::{.def}

This section focuses on plotting in R with the package [ggplot2](https://cran.r-project.org/web/packages/ggplot2/index.html) from [the tidyverse](https://www.tidyverse.org/).

:::

## The data

R comes with a number of datasets. You can get a list by running `data()`. The `ggplot2` package provides [additional ones](https://ggplot2.tidyverse.org/reference/#data). We will use the `mpg` dataset from `ggplot2`.

To access the data, let's load the package:

```{r}
library(ggplot2)
```

Here is what that dataset looks like:

```{r}
mpg
```

`?mpg` will give you information on the variables. In particular:

- `displ` contains data on [engine displacement](https://en.wikipedia.org/wiki/Engine_displacement) (a measure of engine size and thus power) in litres (L).
- `hwy` contains data on [fuel economy](https://en.wikipedia.org/wiki/Fuel_economy_in_automobiles) while driving on highways in miles per gallon (mpg).
- `drv` represents the type of drive train (front-wheel drive, rear wheel drive, 4WD).
- `class` represents the type of car.

We are interested in the relationship between engine size and fuel economy and see how the type of drive train and/or the type of car might affect this relationship.

## Base R plotting

R contains built-in plotting capability thanks to the `plot()` function.

A basic version of our plot would be:

```{r}
plot(
  mpg$displ,
  mpg$hwy,
  main = "Fuel consumption per engine size on highways",
  xlab = "Engine size (L)",
  ylab = "Fuel economy (mpg) on highways"
)
```

## Grammar of graphics

[Leland Wilkinson](https://en.wikipedia.org/wiki/Leland_Wilkinson) developed the concept of grammar of graphics in his 2005 book [The Grammar of Graphics](https://link.springer.com/book/10.1007/0-387-28695-0). By breaking down statistical graphs into components following a set of rules, any plot can be described and constructed in a rigorous fashion.

This was further refined by Hadley Wickham in his 2010 article [A Layered Grammar of Graphics](https://www.tandfonline.com/doi/abs/10.1198/jcgs.2009.07098) and implemented in the package [`ggplot2`](https://cran.r-project.org/web/packages/ggplot2/index.html) (that's what the 2 "g" stand for in "ggplot").

`ggplot2` has become the dominant graphing package in R. Let's see how to construct a plot with this package.

## Plotting with ggplot2

The first component is the data:

```{r}
ggplot(data = mpg)
```

:::{.note}

This can be simplified into `ggplot(mpg)`.

:::

The second component sets the way variables are mapped on the axes. This is done with the `aes()` (aesthetics) function:

```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy))
```

:::{.note}

This can be simplified into `ggplot(mpg, aes(x = displ, y = hwy))`.

:::

Onto this canvas, we can add "geoms" (geometrical objects) representing the data. The type of "geom" defines the type of representation (e.g. boxplot, histogram, bar chart).

To represent the data as a scatterplot, we use the `geom_point()` function:

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point()
```

We can colour-code the points in the scatterplot based on the `drv` variable, showing the lower fuel efficiency of 4WD vehicles:

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv))
```

Or we can colour-code them based on the `class` variable:

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class))
```

If we want to change the colour scale, we add another layer for this:

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  scale_color_brewer(palette = "Dark2")
```

Multiple "geoms" can be added on top of each other. For instance, we can add a smoothed conditional means function that aids at seeing patterns in the data with `geom_smooth()`:

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  scale_color_brewer(palette = "Dark2") +
  geom_smooth()
```

Thanks to the colour-coding of the types of car, we can see that the cluster of points in the top right corner all belong to the same type: 2 seaters. Those are outliers with high power, yet high few efficiency due to their smaller size.

The default smoothing function uses the LOESS (locally estimated scatterplot smoothing) method, which is a nonlinear regression. But maybe a linear model would actually show the general trend better. We can change the method by passing it as an argument to `geom_smooth()`:

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  scale_color_brewer(palette = "Dark2") +
  geom_smooth(method = lm)
```

Other arguments to `geom_smooth()` can set the line width, color, or whether or not the standard error (`se`) is shown:

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  scale_color_brewer(palette = "Dark2") +
  geom_smooth(method = lm, se = FALSE, color = "#999999", linewidth = 0.5)
```

We can keep on adding layers. For instance, the `labs()` function allows to set title, subtitle, captions, tags, axes labels, etc.


```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  scale_color_brewer(palette = "Dark2") +
  geom_smooth(method = lm, se = FALSE, color = "#999999", linewidth = 0.5) +
  labs(
    title = "Fuel consumption per engine size on highways",
    x = "Engine size (L)",
    y = "Fuel economy (mpg) on highways",
    color = "Type of car",
    caption = "EPA data from https://fueleconomy.gov/"
  )
```

Another optional layer sets one of several preset themes.

[Edward Tufte](https://en.wikipedia.org/wiki/Edward_Tufte) developed, amongst others, the principle of *data-ink ratio* which emphasizes that ink should be used primarily where it communicates meaningful messages. It is indeed common to see charts where more ink is used in labels or background than in the actual representation of the data.

The default `ggplot2` theme could be criticized as not following this principle. Let's change it:


```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  scale_color_brewer(palette = "Dark2") +
  geom_smooth(method = lm, se = FALSE, color = "#999999", linewidth = 0.5) +
  labs(
    title = "Fuel consumption per engine size on highways",
    x = "Engine size (L)",
    y = "Fuel economy (mpg) on highways",
    color = "Type of car",
    caption = "EPA data from https://fueleconomy.gov/"
  ) +
  theme_classic()
```

The `theme()` function allows to tweak the theme in any number of ways. For instance, what if we don't like the default position of the title and we'd rather have it centered?

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  scale_color_brewer(palette = "Dark2") +
  geom_smooth(method = lm, se = FALSE, color = "#999999", linewidth = 0.5) +
  labs(
    title = "Fuel consumption per engine size on highways",
    x = "Engine size (L)",
    y = "Fuel economy (mpg) on highways",
    color = "Type of car",
    caption = "EPA data from https://fueleconomy.gov/"
  ) +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))
```

As you could see, the way `ggplot2` works is by adding a number of layers on top of each other, all following a standard set of rules, or "grammar". This way, a vast array of graphs can be created by organizing simple components.

Thanks to its vast popularity, the `ggplot2` has seen [a proliferation of packages extending its capabilities](https://exts.ggplot2.tidyverse.org/gallery/):

```{=html}
<iframe width="780" height="1000" src="https://exts.ggplot2.tidyverse.org/gallery/"></iframe>
```
