---
title: Partitioning data with multidplyr
author: Marie-Hélène Burle
---

## Create a cluster of workers

```{.r}
library(multidplyr)
```

```{.r}
cl <- new_cluster(4)
cl
```

## Main concept

You assign data to the workers, then you execute the code.

:::{.example}

Here is a very basic example:

:::

```{.r}

```

## Data assignment

There are multiple ways to assign the data to the workers.

### Assign the same value to each worker

This is done with the `cluster_assign()` function:

```{.r}
cluster_assign(cl, a = c(1:4))
```

```
[[1]]
[1] 1 2 3 4

[[2]]
[1] 1 2 3 4

[[3]]
[1] 1 2 3 4

[[4]]
[1] 1 2 3 4
```

```{.r}
cluster_assign(cl, b = runif(4))
```

```
[[1]]
[1] 0.5805588

[[2]]
[1] 0.5805588

[[3]]
[1] 0.5805588

[[4]]
[1] 0.5805588
```

### Assign different values to each worker

For this, use instead `cluster_assign_each()`:

```{.r}
cluster_assign_each(cl, c = c(1:4))
```

```
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 4
```

```{.r}
cluster_assign_each(cl, d = runif(4))
```

```
[[1]]
[1] 0.8892167

[[2]]
[1] 0.09334862

[[3]]
[1] 0.614763

[[4]]
[1] 0.6986541
```

### Partition vectors

`cluster_assign_partition()` splits up a vector to assign about the same amount of data to each worker:

```{.r}

```

## Code execution


