---
title: First steps in R
author: Marie-Hélène Burle
---

:::{.def}

In this section, we take our first few steps in R: we will access the R documentation, see how to set R options, and talk about a few concepts.

:::

## Help and documentation

For some general documentation on R, you can run:

```{.r}
help.start()
```

To get help on a function (e.g. `sum`), you can run:

```{.r}
help(sum)
```

Depending on your settings, this will open a documentation for `sum` in a pager or in your browser.

## R settings

Settings are saved in a `.Rprofile` file. You can edit the file directly in any text editor or from within R.

List all options:

```{.r}
options()
```

Return the value of a particular option:

```{r}
getOption("help_type")
```

Set an option:

```{.r}
options(help_type = "html")
```

## Assignment

R can accept the equal sign (`=`) for assignments, but it is more idiomatic to use the assignment sign (`<-`) whenever you bind a name to a value and to use the equal sign everywhere else.

```{r}
a <- 3
```

Once you have bound a name to a value, you can recall the value with that name:

```{r}
a  # Note that you do not need to use a print() function in R
```

You can remove an object from the environment by deleting its name:

```{r}
rm(a)
```

Let's confirm that `a` doesn't exist anymore in the environment:

```{r}
a
```

The garbage collector will take care of deleting the object itself from memory.

## Copy-on-modify

While some languages (e.g. Python) do not make a copy if you modify a mutable object, R does.

Let's have a look at Python:

```{.python}
>>> a = [1, 2, 3]
>>> b = a
>>> b
[1, 2, 3]
>>> a[0] = 4
>>> a
[4, 2, 3]
>>> b
[4, 2, 3]
```

Modifying `a` also modifies `b`. If you want to keep `b` unchanged, you need to explicitly make a copy of `a`.

Now, let's see what happens in R:

```{.r}
> a <- c(1, 2, 3)
> b <- a
> b
[1] 1 2 3
> a[1] <- 4
> a
[1] 4 2 3
> b
[1] 1 2 3
```

Here, the default is to create a new copy in memory when `a` is transformed so that `b` remains unchanged. This is more intuitive, but more memory intensive.

## Comments

Anything to the left of `#` is a comment and is ignored by R:

```{r}
# This is an inline comment

a <- 3  # This is also a comment
```
