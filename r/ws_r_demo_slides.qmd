---
title: A little demo of programming in
frontpic: img/logo_r.png
frontpicwidth: 40%
noshadow: noshadow
author: Marie-H√©l√®ne Burle
date: 2024-02-15
date-format: long
execute:
  error: true
  echo: true
format:
  revealjs:
    embed-resources: true
    theme: [default, ../revealjs.scss]
    logo: /img/logo_sfudrac.png
    highlight-style: monokai
    code-line-numbers: false
    template-partials:
      - ../title-slide.html
    pointer:
      color: "#b5111b"
      pointerSize: 32
    link-external-newwindow: true
    footer: <a href="ws_r_demo.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgb(153, 153, 153)" class="bi bi-arrow-90deg-up" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z"/></svg>&nbsp;Back to workshop page</a>
revealjs-plugins:
  - pointer
---

# A few words about R

## History {.center}

Created by academic statisticians [Ross Ihaka](https://en.wikipedia.org/wiki/Ross_Ihaka) and [Robert Gentleman](https://en.wikipedia.org/wiki/Robert_Gentleman_(statistician))

The name comes from the language S which was a great influence as well as the first initial of the developers

Launched in 1993

A [GNU Project](https://en.wikipedia.org/wiki/GNU_Project) since 1997

## Why R? {.center}

Free and open source

High-level and easy to learn

Large community

Very well documented

Unequalled number of statistics and modelling packages

Integrated package manager

Easy connection with fast compiled languages such as C and C++

Powerful IDEs (e.g. [RStudio](https://posit.co/download/rstudio-desktop/), [ESS](https://ess.r-project.org/), [Jupyter](https://jupyter.org/))

## For whom? {.center}

Fields with heavy statistics, modelling, or Bayesian inference such as biology, linguistics, economics, or statistics

Data science

## Downsides {.center}

Inconsistent syntax full of quirks

Slow

Large memory usage

# Running R

## An interpreted language {.center}

R being an interpreted language, it can be run non-interactively or interactively

## Running R non-interactively {.center}

If you write code in a text file (called a script), you can then execute it with:

```{.r}
Rscript my_script.R
```

:::{.note}

The command to execute scripts is `Rscript` rather than `R`. \
By convention, R scripts take the extension `.R`.

:::

## Running R interactively {.center}

There are several ways to run R interactively:

- directly in the **console** (the name for the R shell)
- in **[Jupyter](https://jupyter.org/)** with the R kernel ([IRkernel package](https://cran.rstudio.com/web/packages/IRkernel/index.html))
- in **another IDE** (e.g. in Emacs with [ESS](https://ess.r-project.org/))
- in the **RStudio IDE**

---

### The R console

![](img/console.png){fig-alt="noshadow" width="80%"}

---

### RStudio

[Posit](https://posit.co/) (formerly RStudio Inc.) developed a great and very popular IDE called [RStudio](https://posit.co/download/rstudio-desktop/)

Here is its cheatsheet:

[![](img/rstudio-ide_1.jpg){width="50%"}](https://posit.co/wp-content/uploads/2022/10/rstudio-ide-1.pdf)

:::{.caption}

from [Posit Cheatsheets](https://posit.co/resources/cheatsheets/)

:::

# A few basics

## Documentation {.center}

The R documentation is excellent. Get info on any function with `?` (e.g. `?sum`)

## Basic operations {.center}

```{r}
a <- 5

4 + a
```

## Statistics, probabilities, and modelling {.center}

R really shines when it comes to statistics and modelling

We will spend the rest of the hour diving into very complex and heavy Bayesian statistics

## Just kidding üôÇ {.center}

In this demo, I will stick to fun topics

# Data visualization

## Datasets {.center}

R comes with a number of datasets. You can get a list by running `data()`

## Datasets {.center}

The `ggplot2` package provides [additional ones](https://ggplot2.tidyverse.org/reference/#data), such as the `mpg` dataset:

```{r}
library(ggplot2)
head(mpg)
```

## The canvas {.center}
<br>
The first component is the data:

```{r}
ggplot(data = mpg)
```

## The canvas {.center}

The second component sets the way variables are mapped on the axes. This is done with the `aes()` (aesthetics) function:

```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy))
```

## Geometric representations of the data {.center}

Onto this canvas, we can add "geoms" (geometrical objects) representing the data. \
To represent the data as a scatterplot, we use the `geom_point()` function:

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point()
```

## Colour-coding based on variables {.center}

We can colour-code the points in the scatterplot based on the `drv` variable, showing the lower fuel efficiency of 4WD vehicles:

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv))
```

## Colour-coding based on variables {.center}

Or we can colour-code them based on the `class` variable:

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class))
```

## Multiple geoms {.center}

Multiple "geoms" can be added on top of each other. For instance, we can add a smoothed conditional means function that aids at seeing patterns in the data with `geom_smooth()`:

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth()
```

---

The default smoothing function uses the LOESS (locally estimated scatterplot smoothing) method. We can change the method by passing it as an argument to `geom_smooth()`:

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(method = lm)
```

---

We can apply the smoothing function to each class instead of the entire data. It creates a busy plot but shows that the downward trend remains true within each type of car:

```{r}
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
  geom_point(aes(color = class)) +
  geom_smooth(method = lm)
```

---

We can remove the standard errors and customize the line for our linear model:

```{r}
#| output-location: slide

ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(
    method = lm,
    se = FALSE,
    color = "#999999",
    linewidth = 0.5
  )
```

## Colour scales {.center}

![](img/color_scale.png){width="80%"}

---

Let's try the `Dark2` palette:

```{r}
#| output-location: slide

ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  scale_color_brewer(palette = "Dark2") +
  geom_smooth(
    method = lm,
    se = FALSE,
    color = "#999999",
    linewidth = 0.5
  )
```

---

We can add title, axes labels, captions...

```{r}
#| output-location: slide

ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  scale_color_brewer(palette = "Dark2") +
  geom_smooth(
    method = lm,
    se = FALSE,
    color = "#999999",
    linewidth = 0.5
  ) +
  labs(
    title = "Fuel consumption per engine size on highways",
    x = "Engine size (L)",
    y = "Fuel economy (mpg) on highways",
    color = "Type of car",
    caption = "EPA data from https://fueleconomy.gov/"
  )
```

---

Let's change the theme to remove all this background noise:

```{r}
#| output-location: slide

ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
  scale_color_brewer(palette = "Dark2") +
  geom_smooth(
    method = lm,
    se = FALSE,
    color = "#999999",
    linewidth = 0.5
  ) +
  labs(
    title = "Fuel consumption per engine size on highways",
    x = "Engine size (L)",
    y = "Fuel economy (mpg) on highways",
    color = "Type of car",
    caption = "EPA data from https://fueleconomy.gov/"
  ) +
  theme_classic()
```

---

The `theme()` function allows to tweak the theme in any number of ways. For instance, what if we don't like the default position of the title and we'd rather have it centered?

```{r}
#| output-location: slide

ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
  scale_color_brewer(palette = "Dark2") +
  geom_smooth(
    method = lm,
    se = FALSE,
    color = "#999999",
    linewidth = 0.5
  ) +
  labs(
    title = "Fuel consumption per engine size on highways",
    x = "Engine size (L)",
    y = "Fuel economy (mpg) on highways",
    color = "Type of car",
    caption = "EPA data from https://fueleconomy.gov/"
  ) +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))
```

---

Many things can be changed thanks to the `theme()` function. For instance, we can move the legend to give more space to the actual graph:

```{r}
#| output-location: slide

ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
  scale_color_brewer(palette = "Dark2") +
  geom_smooth(
    method = lm,
    se = FALSE,
    color = "#999999",
    linewidth = 0.5
  ) +
  labs(
    title = "Fuel consumption per engine size on highways",
    x = "Engine size (L)",
    y = "Fuel economy (mpg) on highways",
    color = "Type of car",
    caption = "EPA data from https://fueleconomy.gov/"
  ) +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5), legend.position = "bottom")
```

## ggplot extension packages

Many extensions exist for `ggplot2`:

```{=html}
<iframe width="780" height="1000" src="https://exts.ggplot2.tidyverse.org/gallery/"></iframe>
```

## Combining plots {.center}

One ggplot extension is the [patchwork](https://patchwork.data-imaginist.com/) package which allows to combine multiple plots on the same frame

---

Let's add a second plot next to our plot (we also make a few changes to the labels to improve the plots integration):

```{r}
#| output-location: slide

library(patchwork)

ggplot(mpg, aes(x = displ, y = hwy)) +        # First plot
  geom_point(aes(color = class)) +
  scale_color_brewer(palette = "Dark2") +
  geom_smooth(
    method = lm,
    se = FALSE,
    color = "#999999",
    linewidth = 0.5
  ) +
  labs(
    x = "Engine size (L)",
    y = "Fuel economy (mpg) on highways",
    color = "Type of car"
  ) +
  theme_classic() +
  theme(
    plot.title = element_text(hjust = 0.5),
    legend.position = c(0.7, 0.75),           # Better legend position
    legend.background = element_rect(         # Add a frame to the legend
      linewidth = 0.1,
      linetype = "solid",
      colour = "black"
    )
  ) +
  ggplot(mpg, aes(x = displ, y = hwy)) +      # Second plot
  geom_point(aes(color = drv)) +
  scale_color_brewer(palette = "Dark2") +
  labs(
    x = "Engine size (L)",
    y = element_blank(),                      # Remove redundant label
    color = "Type of drive train",
    caption = "EPA data from https://fueleconomy.gov/"
  ) +
  theme_classic() +
  theme(
    plot.title = element_text(hjust = 0.5),
    legend.position = c(0.7, 0.87),
    legend.background = element_rect(
      linewidth = 0.1,
      linetype = "solid",
      colour = "black"
    )
  )
```

# Web scraping

## HTML and CSS {.center}

[HyperText Markup Language](https://en.wikipedia.org/wiki/HTML) (HTML) is the standard markup language for websites: it encodes the information related to the formatting and structure of webpages. Additionally, some of the customization can be stored in [Cascading Style Sheets](https://en.wikipedia.org/wiki/CSS) (CSS) files.

HTML uses tags of the form:

```{.html}
<some_tag>Your content</some_tag>
```

Some tags have attributes:

```{.html}
<some_tag attribute_name="attribute value">Your content</some_tag>
```

:::{.example}

Examples:

:::

- `<h2>This is a heading of level 2</h2>`
- `<b>This is bold</b>`
- `<a href="https://some.url">This is the text for a link</a>`

## Example for this workshop {.center}

We will use [a website](https://trace.tennessee.edu/utk_graddiss/index.html) from the [University of Tennessee](https://www.utk.edu/) containing a database of PhD theses from that university

Our goal is to scrape data from this site to produce a dataframe with the date, major, and advisor for each dissertation

:::{.note}

We will only do this for the first page which contains the links to the 100 most recent theses. If you really wanted to gather all the data, you would have to do this for all pages

:::

## Package {.center}

To do all this, we will use the package [rvest](https://cran.r-project.org/web/packages/rvest/index.html), part of the [tidyverse](https://www.tidyverse.org/) (a modern set of R packages). It is a package influenced by the popular Python package [Beautiful Soup](https://en.wikipedia.org/wiki/Beautiful_Soup_(HTML_parser)) and it makes scraping websites with R really easy

Let's load it:

```{r}
library(rvest)
```

## Read in HTML from main site {.center}

As mentioned above, our site is the [database of PhD dissertations from the University of Tennessee](https://trace.tennessee.edu/utk_graddiss/index.html)

Let's create a character vector with the URL:

```{r}
url <- "https://trace.tennessee.edu/utk_graddiss/index.html"
```

First, we read in the html data from that page:

```{r}
html <- read_html(url)
```

Let's have a look at the raw data:

```{r}
html
```

## Extract all URLs {.center}

```{r}
dat <- html %>% html_elements(".article-listing a")
dat
```

## Extract all URLs {.center}

We now have a list of lists

Before running for loops, it is important to initialize empty loops. It is much more efficient than growing the result at each iteration

So let's initialize an empty list that we call `list_urls` of the appropriate size:

```{r}
list_urls <- vector("list", length(dat))
```

## Extract all URLs {.center}

Now we can run a loop to fill in our list:

```{r}
for (i in seq_along(dat)) {
  list_urls[[i]] <- dat[[i]] %>% html_attr("href")
}
```

Let's print again the first element of `list_urls` to make sure all looks good:

```{r}
list_urls[[1]]
```

We now have a list of URLs (in the form of character vectors) as we wanted

## Extract data from each page {.center}

We will now extract the data (date, major, and advisor) for all URLs in our list.

Again, before running a for loop, we need to allocate memory first by creating an empty container (here a list):

```{r}
list_data <- vector("list", length(list_urls))

for (i in seq_along(list_urls)) {
  html <- read_html(list_urls[[i]])
  date <- html %>%
    html_element("#publication_date p") %>%
    html_text2()
  major <- html %>%
    html_element("#department p") %>%
    html_text2()
  advisor <- html %>%
    html_element("#advisor1 p") %>%
    html_text2()
  Sys.sleep(0.1)  # Add a little delay
  list_data[[i]] <- cbind(date, major, advisor)
}
```

## Store results in DataFrame {.center}

We can turn this big list into a dataframe:

```{r}
result <- do.call(rbind.data.frame, list_data)
```

We can capitalize the headers:

```{r}
names(result) <- c("Date", "Major", "Advisor")
```

## Our final data {.center}

`result` is a long dataframe, so we will only print the first few elements:

```{r}
head(result, 15)
```

## Save results to file {.center}

If we wanted, we could save our data to a CSV file:

```{.r}
write.csv(result, "dissertations_data.csv", row.names = FALSE)
```

# GIS mapping{background-color="black" background-image="img/bg_na_watersheds.png" background-size="70%"}

:::footer

Image credit: Sz≈±cs R√≥bert, Grasshopper Geography

:::

## Data reading and manipulation {.center}

- Spatial vectors: great modern packages are [sf](https://github.com/r-spatial/sf) or [terra](https://github.com/rspatial/terra)
- Raster data: the package [terra](https://github.com/rspatial/terra)

I will skip the data preparation due to lack of time, but you can look at the code in [this webinar](https://mint.westdri.ca/r/wb_gis_mapping#example-glaciers-melt-in-north-america) or [this workshop](https://mint.westdri.ca/r/ws_gis_intro)

## Map of glaciers in western North America {.center}

```{.r}
tm_shape(states, bbox = nwa_bbox) +
  tm_polygons(col = "#f2f2f2", lwd = 0.2) +
  tm_shape(ak) +
  tm_borders(col = "#3399ff") +
  tm_fill(col = "#86baff") +
  tm_shape(wes) +
  tm_borders(col = "#3399ff") +
  tm_fill(col = "#86baff") +
  tm_layout(
    title = "Glaciers of Western North America",
    title.position = c("center", "top"),
    title.size = 1.1,
    bg.color = "#fcfcfc",
    inner.margins = c(0.06, 0.01, 0.09, 0.01),
    outer.margins = 0,
    frame.lwd = 0.2
  ) +
  tm_compass(
    type = "arrow",
    position = c("right", "top"),
    size = 1.2,
    text.size = 0.6
  ) +
  tm_scale_bar(
    breaks = c(0, 1000, 2000),
    position = c("right", "BOTTOM")
  )
```

---

![](img/nwa_bg.jpg){fig-align="center"}

## Multi-layer map of the retreat of a glacier {.center}

```{.r}
tm_shape(ag) +
  tm_polygons("year", palette = "Blues") +
  tm_layout(
    title = "Agassiz Glacier",
    title.position = c("center", "top"),
    legend.position = c("left", "bottom"),
    legend.title.color = "#fcfcfc",
    legend.text.size = 1,
    bg.color = "#fcfcfc",
    inner.margins = c(0.07, 0.03, 0.07, 0.03),
    outer.margins = 0
  ) +
  tm_compass(
    type = "arrow",
    position = c("right", "top"),
    text.size = 0.7
  ) +
  tm_scale_bar(
    breaks = c(0, 0.5, 1),
    position = c("right", "BOTTOM"),
    text.size = 1
  )
```

---

![](img/ag.png){fig-align="center"}

## Animated map of the retreat of a glacier {.center}

```{.r}
tmap_animation(tm_shape(ag) +
                 tm_polygons(col = "#86baff") +
                 tm_layout(
                   title = "Agassiz Glacier",
                   title.position = c("center", "top"),
                   legend.position = c("left", "bottom"),
                   legend.title.color = "#fcfcfc",
                   legend.text.size = 1,
                   bg.color = "#fcfcfc",
                   inner.margins = c(0.08, 0, 0.08, 0),
                   outer.margins = 0,
                   panel.label.bg.color = "#fcfcfc"
                 ) +
                 tm_compass(
                   type = "arrow",
                   position = c("right", "top"),
                   text.size = 0.7
                 ) +
                 tm_scale_bar(
                   breaks = c(0, 0.5, 1),
                   position = c("right", "BOTTOM"),
                   text.size = 1
                 ) +
                 tm_facets(
                   along = "year",
                   free.coords = F
                 )filename = "ag.gif",
               dpi = 300,
               inner.margins = c(0.08, 0, 0.08, 0),
               delay = 100
               )

```

---

![](img/ag.gif){width="50%" fig-align="center"}

# So, how to get started in R?

## Three-day introductory workshop for the HSS {.center}

As a follow-up to this year HSS Series, we will be offering a free three-day hands-on introduction to R for researchers in the humanities, arts, and social sciences

You can register [here](https://docs.google.com/forms/d/e/1FAIpQLSegbJDI3x42wy-ExbhFRI0_ZtN-BlQnofLs83fbnHFXnYYYbQ/viewform)

## Beyond the HSS series {.center}

Each region under the Alliance offers regular courses and workshops in R (and many other topics)

In the west, Alex Razoumov and myself offer regular free workshops, courses, and webinars for researchers in Canadian academic institutions

You can find our program [here](https://training.westdri.ca/events/upcoming-training-winter-spring-2024/) or join our mailing list [here](https://training.westdri.ca/contact/)
