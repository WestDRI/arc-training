---
title: Introduction to R for the humanities
author: Marie-Hélène Burle
---

:::{.def}

R is a free and open-source programming language for statistical computing, modelling, and graphics, with an unbeatable collection of statistical packages. It is extremely popular in some academic fields such as statistics, biology, bioinformatics, data mining, data analysis, and linguistics.

This introductory course does not assume any prior knowledge: it will take you through the first steps of importing, cleaning, and visualizing your data. Along the way, we will get familiar with R data types, functions writing, and control flow.

:::

## Running R

### Running R non-interactively

You can also run R scripts with:

```{.r}
Rscript my_script.R
```

### Running R interactively

There are several ways to run R.

- Directly in the **console** (the name for the R shell):

![](img/console.png){fig-alt="noshadow"}

- In **[Jupyter](https://jupyter.org/)** with the R kernel ([IRkernel package](https://cran.rstudio.com/web/packages/IRkernel/index.html)).
- In **another IDE** (e.g. in Emacs with [ESS](https://ess.r-project.org/)).
- In the **RStudio IDE**.

The RStudio IDE is popular and this is what we will use today. RStudio can can be run locally, but for this course, we will use an RStudio server.

### Accessing our RStudio server

To access it:

1.  Go to the website given during the workshop,
2.  Sign in using your username and password given during the workshop (you can ignore the OTP entry),
3.  Choose the following `Server Options`:

    - Time: `3.0` hours
    - Number of cores: `1`
    - Memory: `3600` MB
    - User interface: `JupyterLab`

![](img/jupyter_options.png){fig-alt="noshadow"}

4.  In JupyterLab, click on the RStudio button (big blue symbol with a white R in it).

### Using RStudio
<br>
![](img/rstudio-ide_1.jpg)

![](img/rstudio-ide_2.jpg)

:::{.caption}

from [Posit Cheatsheets](https://posit.co/resources/cheatsheets/)

:::

## Help and documentation

For some general documentation on R, you can run:

```{.r}
help.start()
```

To get help on a function (e.g. `sum`), you can run:

```{.r}
help(sum)
```

Depending on your settings, this will open a documentation for `sum` in a pager or in your browser.

## Basic syntax

### Assignment

R can accept the equal sign (`=`) for assignments, but it is more idiomatic to use the assignment sign (`<-`) whenever you bind a name to a value and to use the equal sign everywhere else.

```{r}
a <- 3
```

Once you have bound a name to a value, you can recall the value with that name:

```{r}
a  # Note that you do not need to use a print() function in R
```

You can remove an object from the environment by deleting its name:

```{r}
rm(a)
a
```

The garbage collector will take care of deleting the object itself from memory.

### Comments

xxx

## Data types and structures

| Dimension | Homogeneous   | Heterogeneous  |
|-----------|---------------|----------------|
| 1 d       | Atomic vector | List           |
| 2 d       | Matrix        | Data frame     |
| 3 d       | Array         |                |

### Atomic vectors


```{r}
vec <- c(2, 4, 1)
vec
typeof(vec)
str(vec)
```

```{r}
vec <- c(TRUE, TRUE, NA, FALSE)
vec
typeof(vec)
str(vec)
```

:::{.note}

`NA` ("Not Available") is a logical constant of length one. It is an indicator for a missing value.

:::

Vectors are homogeneous, so all elements need to be of the same type.

If you use elements of different types, R will convert some of them to ensure that they become of the same type:

```{r}
vec <- c("This is a string", 3, "test")
vec
typeof(vec)
str(vec)
```

```{r}
vec <- c(TRUE, 3, FALSE)
vec
typeof(vec)
str(vec)
```

### Data frames

Data frames contain tabular data. Under the hood, a data frame is a list of vectors.

```{r}
dat <- data.frame(
  country = c("Canada", "USA", "Mexico"),
  var = c(2.9, 3.1, 4.5)
)
dat
typeof(dat)
str(dat)
length(dat)
dim(dat)
```

## Function definition

```{r}
compare <- function(x, y) {
  x == y
}
```

We can now use our function:

```{r}
compare(2, 3)
```

Note that the result of the last statement is printed automatically:

```{r}
test <- function(x, y) {
  x
  y
}
test(2, 3)
```

If you want to return other results, you need to explicitly use the `print()` function:

```{r}
test <- function(x, y) {
  print(x)
  y
}
test(2, 3)
```

## Control flow

### Conditionals

```{r}
test_sign <- function(x) {
  if (x > 0) {
    "x is positif"
  } else if (x < 0) {
    "x is negatif"
  } else {
    "x is equal to zero"
  }
}
```

```{r}
test_sign(3)
test_sign(-2)
test_sign(0)
```

### Loops

```{r}
for (i in 1:10) {
  print(i)
}
```

Notice that here we need to use the `print()` function.

## Packages

Packages are a set of functions and/or data that add functionality to R.

### Looking for packages

- [Package finder](https://rdrr.io/find/?repos=cran%2Cbioc%2Crforge%2Cgithub&fuzzy_slug=)
- Your peers and the literature

### Package documentation

- [List of CRAN packages](https://cran.r-project.org/web/packages/available_packages_by_name.html)
- [Package documentation](https://rdrr.io/)

### Managing R packages

R packages can be installed, updated, and removed from within R:

```{.r}
install.packages("package-name")
remove.packages("package-name")
update_packages()
```

### Loading packages

To make a package available in an R session, you load it with the `library()` function.

:::{.example}

Example:

:::

```{.r}
library(readxl)
```

Alternatively, you can access a function from a package without loading it with the syntax: `package::function()`.

:::{.example}

Example:

:::

```{.r}
readxl::read_excel("file.xlsx")
```

## Resources

### R main site

- [Download page](https://mirror.rcg.sfu.ca/mirror/CRAN/)

### RStudio

- [Posit site](https://posit.co/) (Posit is the brand new name of the RStudio company)
- [Posit cheatsheets](https://posit.co/resources/cheatsheets/)

### Software Carpentry online workshop

- [Data analysis using R in the digital humanities](https://uomresearchit.github.io/r-tidyverse-digital-humanities/)

### Online book

- [R for Data Science](https://r4ds.had.co.nz/index.html) (heavily based on the [tidyverse](https://www.tidyverse.org/))
