---
title: The future package
author: Marie-Hélène Burle
---

:::{.def}

The [future](https://cran.r-project.org/web/packages/future/index.html) package is a modern package that brings a consistent and simple API for all evaluation strategies of futures in R.

Excellent backends have been built on top of it and this is the approach that we will learn in this course.

:::

## A vast field of packages

We talked in the previous section about various types of parallelism. Several options exist in R to run code in shared-memory or distributed parallelism.

Examples of options for shared-memory parallelism:

- The [foreach](https://cran.r-project.org/web/packages/foreach/index.html) package with backends such as [doMC](https://cran.r-project.org/web/packages/doMC/index.html), now also part of the [doParallel](https://cran.r-project.org/web/packages/doParallel/index.html) package.
- `mclapply()` and `mcmapply()` from the `parallel` package (part of the core distribution of R).

Examples of options for distributed parallelism:

- The [foreach](https://cran.r-project.org/web/packages/foreach/index.html) package with backends such as [doSNOW](https://cran.r-project.org/web/packages/doSNOW/index.html), now also part of the [doParallel](https://cran.r-project.org/web/packages/doParallel/index.html) package.
- The suite of `clusterApply()` and `par*apply()` functions from the `parallel` package.


:::{.note}

The `parallel` package is a merger of the former `multicore` package for shared-memory and of the [snow](https://cran.r-project.org/web/packages/snow/index.html) package for distributed parallelism.

Similarly, the [doParallel](https://cran.r-project.org/web/packages/doParallel/index.html) package is merger of the [doMC](https://cran.r-project.org/web/packages/doMC/index.html) package for use with `foreach` in shared-memory and the [doSNOW](https://cran.r-project.org/web/packages/doSNOW/index.html) package for use with `foreach` for distributed parallelism.

:::

## The `future` package

The [future](https://cran.r-project.org/web/packages/future/index.html) package is a clean and new approach through all of this. It provides a simple and consistent way to evaluate futures sequentially, through shared-memory parallelism, or through distributed parallelism.

:::{.info}

A [future](https://en.wikipedia.org/wiki/Futures_and_promises) is an object that acts as an abstract representation for a value in the future. A future can be *resolved* (if the value has been computed) or *unresolved*. If the value is queried while the future is unresolved, the process is blocked until the future is resolved. Futures thus allow for asynchronous and parallel evaluations.

:::

It provides an API on which backends can be built.

Example of backends for the `future` package:

- The [doFuture](https://cran.r-project.org/web/packages/doFuture/index.html) package to parallelize foreach expressions.
- The [future.apply](https://cran.r-project.org/web/packages/future.apply/index.html) package to parallelize the `*apply()` functions.
- The [furrr](https://cran.r-project.org/web/packages/furrr/index.html) package for those who prefer [purrr](https://cran.r-project.org/web/packages/purrr/index.html) over the *apply functions.

The evaluation strategy is set with the `plan` function:

- `plan(sequential)`: \
Futures are evaluated sequentially in the current R session.

- `plan(multisession)`: \
Futures are evaluated by new R sessions spawned in the background (*multi-processing in shared memory*).

- `plan(multicore)`: \
Futures are evaluated in processes forked from the existing process (*multi-processing in shared memory*).

- `plan(cluster)`: \
Futures are evaluated on an ad-hoc cluster (*distributed parallelism* across multiple nodes).

:::{.note}

###### Consistency

To ensure a consistent behaviour across plans, all evaluations are done in a local environment:

```{r}
library(future)

a <- 1

b %<-% {      # %<-% is used instead of <- to use futures
  a <- 2
}

a
```

:::

Beside evaluation the strategy, the code remains the same. This is the method we will use in this course.
