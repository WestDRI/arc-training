---
title: The future package
author: Marie-Hélène Burle
---

:::{.def}

The [future](https://cran.r-project.org/web/packages/future/index.html) package is a modern package that brings a consistent and simple API for all evaluation strategies of futures in R.

Excellent backends have been built on top of it.

:::

## Classic parallel packages in R

We talked in the previous section about various types of parallelism. Several options exist in R to run code in shared-memory or distributed parallelism.

Examples of options for shared-memory parallelism:

- The [foreach](https://cran.r-project.org/web/packages/foreach/index.html) package with backends such as [doMC](https://cran.r-project.org/web/packages/doMC/index.html), now also part of the [doParallel](https://cran.r-project.org/web/packages/doParallel/index.html) package.
- `mclapply()` and `mcmapply()` from the `parallel` package (part of the core distribution of R).

Examples of options for distributed parallelism:

- The [foreach](https://cran.r-project.org/web/packages/foreach/index.html) package with backends such as [doSNOW](https://cran.r-project.org/web/packages/doSNOW/index.html), now also part of the [doParallel](https://cran.r-project.org/web/packages/doParallel/index.html) package.
- The suite of `clusterApply()` and `par*apply()` functions from the `parallel` package.


:::{.note}

The `parallel` package is a merger of the former `multicore` package for shared-memory and of the [snow](https://cran.r-project.org/web/packages/snow/index.html) package for distributed parallelism.

Similarly, the [doParallel](https://cran.r-project.org/web/packages/doParallel/index.html) package is merger of the [doMC](https://cran.r-project.org/web/packages/doMC/index.html) package for use with `foreach` in shared-memory and the [doSNOW](https://cran.r-project.org/web/packages/doSNOW/index.html) package for use with `foreach` for distributed parallelism.

:::

## The `future` package

The [future](https://cran.r-project.org/web/packages/future/index.html) package opened up a new landscape in the world of parallel R by providing a simple and consistent API for the evaluation of futures sequentially, through shared-memory parallelism, or through distributed parallelism.

:::{.note}

A [future](https://en.wikipedia.org/wiki/Futures_and_promises) is an object that acts as an abstract representation for a value in the future. A future can be *resolved* (if the value has been computed) or *unresolved*. If the value is queried while the future is unresolved, the process is blocked until the future is resolved. Futures thus allow for asynchronous and parallel evaluations.

:::

The evaluation strategy is set with the `plan` function:

- `plan(sequential)`: \
Futures are evaluated sequentially in the current R session.

- `plan(multisession)`: \
Futures are evaluated by new R sessions spawned in the background (*multi-processing in shared memory*).

- `plan(multicore)`: \
Futures are evaluated in processes forked from the existing process (*multi-processing in shared memory*).

- `plan(cluster)`: \
Futures are evaluated on an ad-hoc cluster (*distributed parallelism* across multiple nodes).

:::{.note}

###### Consistency

To ensure a consistent behaviour across plans, all evaluations are done in a local environment:

```{r}
library(future)

a <- 1

b %<-% {      # %<-% creates futures
  a <- 2
}

a
```

:::

## the `future` ecosystem

Several great packages have been built on top of the `future` API.

- The [doFuture](https://cran.r-project.org/web/packages/doFuture/index.html) package allows to parallelize [foreach](https://cran.r-project.org/web/packages/foreach/index.html) expressions on the `future` evaluation strategies.
- Similarly, the [future.apply](https://cran.r-project.org/web/packages/future.apply/index.html) package parallelizes the `*apply()` functions on these strategies.
- The [furrr](https://cran.r-project.org/web/packages/furrr/index.html) package provides a parallel version of [purrr](https://cran.r-project.org/web/packages/purrr/index.html) for those who prefer this approach to functional programming.
- The [future.callr](https://cran.r-project.org/web/packages/future.callr/index.html) package implements a future evaluation based on [callr](https://cran.r-project.org/web/packages/callr/index.html) that resolves every future in a new R session. This removes any limitation on the number of background R parallel processes that can be active at the same time.
- The [future.batchtools](https://cran.r-project.org/web/packages/future.batchtools/index.html) package implements a future evaluation based on the [batchtools](https://cran.r-project.org/web/packages/batchtools/index.html) package—a package that provides functions to interact with HPC systems schedulers such as [Slurm](https://slurm.schedmd.com/documentation.html).

In this course, we will cover [foreach](https://cran.r-project.org/web/packages/foreach/index.html) with [doFuture](https://cran.r-project.org/web/packages/doFuture/index.html) in great details to explain all the important concepts. After that, you will be able to use any of these backends easily.
