---
title: Memory management
author: Marie-Hélène Burle
---

:::{.def}

Memory can be a limiting factor and releasing it when not needed can be critical to avoid [out of memory](https://en.wikipedia.org/wiki/Out_of_memory) states. On the other hand, [memoisation](https://en.wikipedia.org/wiki/Memoization) is an optimization technique which stores the results of heavy computations for re-use at the cost of increasing memory usage.

Memory and speed are thus linked in a trade-off.

:::

## Releasing memory

It is best to avoid creating very large intermediate objects (e.g. with nested functions or functions chained with the [magrittr](https://cran.r-project.org/web/packages/magrittr/index.html#:~:text=magrittr%3A%20A%20Forward-Pipe%20Operator,of%20right-hand%20side%20expressions.) pipe), but if you must, remove them from the global environment with `rm()` when you don't need them anymore. Once all the pointers to an object in memory are deleted, the garbage collector will clear its value and release the memory it used.

Another way to release the memory used by heavy intermediate objects is with functions: if you create those objects in the local environment of a function (instead of directly in the global environment), they will be cleared from memory as soon as the function has finished running.

Note that in the case of a very large function, it might still be beneficial to run `rm()` inside the function to clear the memory for other processes coming next within that function. But this is a pretty rare case.

## Caching in memory

[Memoisation](https://en.wikipedia.org/wiki/Memoization) is a technique by which the results of heavy computations are stored in memory to avoid have to re-calculate them. This can be convenient in a variety of settings (e.g. to reduce calls to an API), but mostly, it can greatly improve the efficiency of some code such as recursive function calls.

Let's consider the calculation of the [Fibonacci numbers](https://en.wikipedia.org/wiki/Fibonacci_number) as an example. Those numbers form a sequence starting with `0` and `1`[^1], after which each number is the sum of the previous two.

[^1]: Alternative versions have the sequence start with `1, 1` or with `1, 2`.

Here is a function that would return the n^th^ Fibonacci number[^2]:

[^2]: There are more efficient ways to calculate the Fibonacci numbers, but this inefficient function is a great example to show the advantage of memoisation.

```{.r}
fib <- function(n) {
  if(n == 0) {
    return(0)
  } else if(n == 1) {
    return(1)
  } else {
    Recall(n - 1) + Recall(n - 2)
  }
}
```

It can be written more tersely as:

```{r}
fib <- function(n) {
  if(n == 0) return(0)
  if(n == 1) return(1)
  Recall(n - 1) + Recall(n - 2)
}
```

:::{.note}

`Recall()` is a placeholder for the name of the recursive function. We could have used `fib()` instead, but `Recall()` is more robust as it allows for function renaming.

:::

Memoisation is very useful here because, for each Fibonacci number, we need to calculate the two preceding Fibonacci numbers and to calculate each of those we need to calculate the two Fibonacci numbers preceding that one and to calculate... etc. That is a large number of calculations, but, thanks to caching, we don't have to calculate any one of them more than once.

The packages [R.cache](https://cran.r-project.org/web/packages/R.cache/index.html) and [memoise](https://cran.r-project.org/web/packages/memoise/index.html) both allow for memoisation with an incredibly simple syntax.

Applying the latter to our function gives us:

```{r}
library(memoise)

fibmem <- memoise(
  function(n) {
    if(n == 0) return(0)
    if(n == 1) return(1)
    Recall(n - 1) + Recall(n - 2)
  }
)
```

We can do some benchmarking to see the speedup for the 30^th^ Fibonacci number:

```{r}
library(bench)

n <- 30
mark(fib(n), fibmem(n))
```

The speedup is over 35,000!
