---
title: Data types and structures
author: Marie-Hélène Burle
---

:::{.def}

This section covers the various data types and structures available in R.

:::

## Summary of structures

| Dimension | Homogeneous   | Heterogeneous  |
|-----------|---------------|----------------|
| 1 d       | Atomic vector | List           |
| 2 d       | Matrix        | Data frame     |
| 3 d       | Array         |                |

## Atomic vectors

### With a single element

```{r}
a <- 2
a
typeof(a)
str(a)
length(a)
dim(a)
```

The `dim` attribute of a vector doesn't exist (hence the `NULL`). This makes vectors different from one-dimensional arrays which have a `dim` of `1`.

You might have noticed that `2` is a double (double precision floating point number, equivalent of "float" in other languages). In R, this is the default, even if you don't type `2.0`. This prevents the kind of weirdness you can find in, for instance, Python.

In Python:

```{.python}
>>> 2 == 2.0
True
>>> type(2) == type(2.0)
False
>>> type(2)
<class 'int'>
>>> type(2.0)
<class 'float'>
```

In R:

```{.r}
> 2 == 2.0
[1] TRUE
> typeof(2) == typeof(2.0)
[1] TRUE
> typeof(2)
[1] "double"
> typeof(2.0)
[1] "double"
```

If you want to define an integer variable, you use:

```{r}
b <- 2L
b
typeof(b)
mode(b)
str(b)
```

There are six vector types:

- logical
- integer
- double
- character
- complex
- raw

### With multiple elements

```{r}
c <- c(2, 4, 1)
c
typeof(c)
mode(c)
str(c)
```

```{r}
d <- c(TRUE, TRUE, NA, FALSE)
d
typeof(d)
str(d)
```

:::{.note}

`NA` ("Not Available") is a logical constant of length one. It is an indicator for a missing value.

:::

Vectors are homogeneous, so all elements need to be of the same type.

If you use elements of different types, R will convert some of them to ensure that they become of the same type:

```{r}
e <- c("This is a string", 3, "test")
e
typeof(e)
str(e)
```

```{r}
f <- c(TRUE, 3, FALSE)
f
typeof(f)
str(f)
```

```{r}
g <- c(2L, 3, 4L)
g
typeof(g)
str(g)
```

```{r}
h <- c("string", TRUE, 2L, 3.1)
h
typeof(h)
str(h)
```

The binary operator `:` is equivalent to the `seq()` function and generates a regular sequence of integers:

```{r}
i <- 1:5
i
typeof(i)
str(i)
identical(2:8, seq(2, 8))
```

## Matrices

```{r}
j <- matrix(1:12, nrow = 3, ncol = 4)
j
typeof(j)
str(j)
length(j)
dim(j)
```

The default is `byrow = FALSE`. If you want the matrix to be filled in by row, you need to set this argument to `TRUE`:

```{r}
k <- matrix(1:12, nrow = 3, ncol = 4, byrow = TRUE)
k
```

## Arrays

```{r}
l <- array(as.double(1:24), c(3, 2, 4))
l
typeof(l)
str(l)
length(l)
dim(l)
```

## Lists

```{r}
m <- list(2, 3)
m
typeof(m)
str(m)
length(m)
dim(m)
```

As with atomic vectors, lists do not have a `dim` attribute. Lists are in fact a different type of vectors.

Lists can be heterogeneous:

```{r}
n <- list(2L, 3, c(2, 1), FALSE, "string")
n
typeof(n)
str(n)
length(n)
```

## Data frames

Data frames contain tabular data. Under the hood, a data frame is a list of vectors.

```{r}
o <- data.frame(
  country = c("Canada", "USA", "Mexico"),
  var = c(2.9, 3.1, 4.5)
)
o
typeof(o)
str(o)
length(o)
dim(o)
```
