---
title: "Measuring performance:"
subtitle: profiling & benchmarking
author: Marie-Hélène Burle
---

## Profiling

The first thing to do if you want to improve your code efficiency is to identify bottlenecks in your code.

Common tools include:

- the base R function `Rprof()`,
- the package [profvis](https://cran.r-project.org/web/packages/profvis/index.html).

[profvis](https://cran.r-project.org/web/packages/profvis/index.html) is a newer tool, built by [posit](https://posit.co/) (formerly RStudio). Under the hood, it runs `Rprof()` to collect data, then produces an interactive html widget with a flame graph that allows for an easy visual identification of slow sections of code.

While this tool integrates well within the RStudio IDE or the [RPubs ecosystem](https://rpubs.com/wch/178493), it is not very well suited for remote work on a cluster. One option is to profile your code with small data on your own machine. Another option is to use the base profiler with `Rprof()` directly as in [this example](https://rstudio.github.io/r-manuals/r-exts/Tidying-and-profiling-R-code.html#profiling-r-code-for-speed).

## Benchmarking

Once you have identified expressions that are particularly slow, you can use benchmarking tools to compare variations of the code.

In the most basic fashion, you can use `system.time()`, but this is limited and imprecise.

The [microbenchmark](https://cran.r-project.org/web/packages/microbenchmark/index.html) package is a popular option.

It gives the minimum time, lower quartile, mean, median, upper quartile, and maximum time of R expressions.

The newer [bench](https://cran.r-project.org/web/packages/bench/index.html) package has less overhead, is more accurate, and—for sequential code—gives information on memory usage and garbage collections.

