---
title: Variables
aliases:
  - variables.html
author: Marie-Hélène Burle
---

```{r}

```

:::{.def}

Variables are a convenient way to assign a value to a name.

:::

## Declaring variables

You declare a variable (i.e. a name that holds a value) with the `=` sign:

```{.bash}
var=value
```

:::{.note}

Make sure not to put spaces around the equal sign.

:::

:::{.example}

Example:

:::

```{bash}
var=5
```

You can delete a variable with:

```{bash}
unset var
```

## Expanding variables

To expand a variable (to access its value), you need to prepend its name with `$`.

:::{.example}

This is not what we want:

:::

```{bash}
var=value
echo var
```

:::{.example}

This however works:

:::

```{bash}
var=value
echo $var
```

## Quotes

### When declaring

Quotes are necessary for values containing special characters such as spaces.

:::{.example}

This doesn't work:

:::

```{bash}
var=string with spaces
echo $var
```

:::{.example}

This works:

:::

```{bash}
var="string with spaces"
echo $var
```

:::{.example}

This also works:

:::

```{bash}
var='string with spaces'
echo $var
```

When declaring variables, single and double quotes are equivalent. Which one should you use then? Use the one that is most convenient.

:::{.example}

Not good:

:::

```{bash}
var='that's a string with spaces'
echo $var
```

:::{.example}

Good:

:::

```{bash}
var="that's a string with spaces"
echo $var
```

:::{.note}

Alternatively, single quotes can be escaped, but it is a little crazy: the first `'` ends the first string, both `"` create a double-quoted string with `'` (escaped) in it, then the last `'` starts the second string.

```{bash}
var='that'"'"'s a string with spaces'
echo $var
```

:::

:::{.example}

Conversely, this is not good:

:::

```{bash}
var="he said: "string with spaces""
echo $var
```

:::{.example}

While this works:

:::

```{bash}
var='he said: "string with spaces"'
echo $var
```

:::{.note}

Double quotes as well can be escaped (simply by prepending them with `\`):

```{bash}
var="he said: \"string with spaces\""
echo $var
```

:::

### When expanding

While not necessary in many situations, it is safer to expand variables in double quotes, in case the expansion leads to problematic special characters. In the example above, this was not problematic and using `$var` or `"$var"` are the same.

In the following example however, it is problematic:

```{.bash}
var="string with spaces"
touch $var
```

This creates 3 files called `string`, `with`, and `spaces`. Probably not what you want.

The following creates a single file called `string with spaces`:

```{.bash}
var="string with spaces"
touch "$var"
```

:::{.note}

To be safe, it is thus a good habit to quote expanded variables.

:::

It is important to note however that [single quotes don't expand variables]{.emph} (only double quotes do).

The following would thus create a file called `$var`:

```{.bash}
var="string with spaces"
touch '$var'
```

## Exporting variables

Using `export` ensures that all inherited processes of this shell also have access to this variable:

```{.bash}
export var=3
```

## String manipulation

### Getting a subset

```{bash}
var="hello"
echo ${var:2}      # Print from character 2
echo ${var:2:1}    # Print 1 character from character 2
```

### Search and replace

```{bash}
var="hello"
echo ${var/l/L}    # Replace the first match of l by L
echo ${var//l/L}   # Replace all matches of l by L
```

### String concatenation

If you want to concatenate the expanded variable with another string, you need to use curly braces or quotes.

:::{.example}

This does not return anything because there is no variable called `varshine`:

:::

```{bash}
var=sun
echo $varshine
```

:::{.example}

These two syntaxes do work:

:::

```{bash}
var=sun
echo ${var}shine
echo "$var"shine
```

## Environment variables

[Environment variables](https://en.wikipedia.org/wiki/Environment_variable) help control the behaviour of processes on a machine. You can think of them as customizations of your system.

Many are set automatically.

:::{.example}

Example:

:::

```{.bash}
echo $HOME
```

```
/home/user009
```

There are many other environment variables (e.g. `PATH`, `PWD`, `PS1`). To see the list, you can run `printenv` or `env`.

If you want to add new environment variables, you can add them to your `~/.bashrc` file which is sourced each time you start a new shell.

*[Here](https://youtu.be/nNf4Xb56yEs) is a video of a previous version of this workshop.*
