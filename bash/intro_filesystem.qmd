---
title: The Unix filesystem
aliases:
  - filesystem.html
author: Marie-Hélène Burle
---

:::{.def}

Bash allows to give instructions to a Unix operating system. The first thing we need to know is how storage is organized on such as system.

:::

## Structure

The Unix filesystem is a rooted tree of directories. The root is denoted by `/`.

Several directories exist under the root. Here are a few:

- `/bin` &emsp;&emsp;&emsp;&ensp;This is where binaries are stored.
- `/boot` &emsp;&emsp;&emsp;There, you can find the files necessary for booting the system.
- `/home` &emsp;&emsp;&emsp;This directory contains all the users home directories.

These directories in turn can contain other directories. `/home` for instance contains the directories:

- `/home/user001`
- `/home/user002`
- `/home/user003`
- ...

The home directory of each user contain many files and directories.

## Navigation

### Working directory

The current working directory can be obtained with:

```{.bash}
pwd		  # print working directory
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

What is your current working directory?

:::

### Changing directory

To navigate to another directory, you use `cd` (change directory) followed by the path of the directory.

:::{.example}

Example:

:::

```{.bash}
cd /home
```

Because `/home` was the parent directory (one level above in the rooted tree) of our working directory, we could have also navigated there with `cd ..` — the two dots represent one level up (a single dot represents the working directory).

:::{.exo}

:::{.yourturn}

Your turn:

:::

- What do you think will happens if you run `cd ..` from `/home`?
- What do you think will happens if you run `cd .` from `/home`?

:::

From any location, you can always go back to your home directory (e.g. `/home/user009`) by running `cd` without argument. Alternatively, you can use `cd ~`. This is because `~` gets expanded by the shell into the path of your home. Finally, you can use `cd $HOME`. `$HOME` is an environment variable representing the path of your home.

:::{.exo}

:::{.yourturn}

Your turn:

:::

Try using `cd -` (that's the minus sign) a few times. What does this command do?

:::

### Absolute and relative paths

Absolute paths give the full path from the root (e.g. `/bin`, `/home/user009/file`).

Relative paths give the path *relative* to the working directory (e.g. `../dir/file`, `dir`)

:::{.exo}

:::{.yourturn}

Your turn:

:::

Is `~` an absolute or relative path?

:::

:::{.exo}

In the filesystem below, names with edges represent directories and names without represent files. The current working directory is `/home/user001`.

- What is the output of `ls`? (have a look at [this section](basics#command-options) if you need a refresher)
- What is the output of `ls ../..`?
- The output of `ls /thesis/src` is:

>ls: cannot access '/thesis/src': No such file or directory

&emsp;&emsp;Why?

- What are 2 ways to navigate to the `results` directory?
- From the `results` directory, what are 2 ways to print the content of the `src` directory?

```{dot}
//| echo: false

strict graph {
  bgcolor="transparent"
  node [style=filled, fillcolor=chocolate, shape=folder, fontname="Inconsolata, sans-serif"]
  edge [color=tan, penwidth=0.5]
  outputorder=edgesfirst
  
  ".bashrc" [style="", shape=plain, fontcolor=darkolivegreen]
  ".bash_profile" [style="", shape=plain, fontcolor=darkolivegreen]
  graph1 [style="", shape=plain, fontcolor=darkolivegreen]
  graph2 [style="", shape=plain, fontcolor=darkolivegreen]
  script1 [style="", shape=plain, fontcolor=darkolivegreen]

  subgraph cluster {
	style=filled
	fillcolor=bisque4
	color=bisque4
	user001
  }

  "/" -- {bin boot home}
  home -- {user001 user002 user003}
  user001 -- {".bashrc" ".bash_profile" thesis}
  thesis -- {data ms results src}
  results -- {graph1 graph2}
  src -- script1
}
```

:::

## Creating files and directories

Files can be created with a text editor:

```{.bash}
nano newfile.txt
```

:::{.note}

The file actually gets created when you save it from within the text editor.

:::

or with the command `touch`:

```{.bash}
touch newfile.txt
```

:::{.note}

This creates an empty file.

:::

`touch` can create multiple files at once:

```{.bash}
touch file1 file2 file3
```

New directories can be created with `mkdir`. This command can also accept multiple arguments to create multiple directories at once:

```{.bash}
mkdir dir1 dir2
```

## Deleting

Files can be deleted with `rm`.

Directories can be deleted with `rm -r` (recursive) or, if they are empty, with `rmdir`.

[Be careful that these commands are irreversible.]{.emph}

## Copying, moving, and renaming

Copying is done with the `cp` command.

:::{.example}

Example:

:::

```{.bash}
cp thesis/src/script1 thesis/ms
```

Moving and renaming are both done with the `mv` command.

:::{.example}

Examples:

:::

```{.bash}
# rename script1 to script
mv thesis/src/script1 thesis/src/script

# move graph1 to the ms directory
mv thesis/results/graph1 thesis/ms
# this also works:
# mv thesis/results/graph1 thesis/ms/graph1
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

Why is there only one command to move and rename?

:::

<!-- ## Permissions -->
