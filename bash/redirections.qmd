---
title: Pipes and redirections
author:
  - Marie-Hélène Burle
  - Alex Razoumov
---

## Pipes



## Redirections

1. open http://bit.ly/bashfile in your browser, it'll download the file `bfiles.zip`
2. unpack `bfiles.zip` to your home directory; you should see `~/data-shell`

```{.bash}
cd <parentDirectoryOf`data-shell`>
ls data-shell
cd data-shell/molecules
ls
ls p*   # this is a Unix wildcard; bash will expand it to 'ls pentane.pdb propane.pdb'
ls *.pdb      # another wildcard, will expand to "ls cubane.pdb ethane.pdb ...'
wc -l *.pdb   # list number of lines in each file
wc -l *.pdb > lengths.txt   # redirect the output of the last command into a file
more lengths.txt
sort -n lengths.txt   # sort numerically, i.e. 2 will go before 10, and 6 before 22
sort -n lengths.txt > sorted.txt
head -1 sorted.txt    # show the length of the shortest (number of lines) file
wc -l *.pdb | sort -n | head -1   # three commands can be shortened to one - this is called Unix pipe
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

- Running `ls -F` in `~/Desktop/Shell/Users/nelle/sugars` results in:

```{.bash}
analyzed/ glucose.dat mannose.dat sucrose.dat fructose.dat maltose.dat raw/
```

What code would you use to move all the `.dat` files into the analyzed sub-directory?

- In a directory we want to find the 3 files that have the least number of lines. Which command would work for this?

1. `wc -l * > sort -n > head -3`
2. `wc -l * | sort -n | head 1-3`
3. `wc -l * | head -3 | sort -n`
4. `wc -l * | sort -n | head -3`

- Use `ps` command to see how many processes you are running on the training cluster. Explore its flags.

- Using Unix pipes, write a one-line command to show the name of the longest `.pdb` file (by the number of lines). Paste
your answer into the chat.

- Combine `ls` and `head` and/or `tail` into a one-line command to show three largest files (by the number of bytes) in a
given directory. Paste your answer into the chat.

- What will the command `echo directoryName/*` do? Try answering without running it. How is this output different from `ls
directoryName` and `ls directoryName/*`?

- Redirection `1>` and `2>` and `/dev/null`

- `;` vs. `&&` separators, e.g. `mkdirr tmp; cd tmp`

:::

You can find a video on this topic [here](https://youtu.be/lueQ-KxLFYI).
