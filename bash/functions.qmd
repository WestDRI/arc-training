---
title: Functions
author:
  - Marie-Hélène Burle
  - Alex Razoumov
---

Functions are similar to scripts, but there are some differences. A **bash script** is an executable file sitting at a
given path. A **bash function** is defined in your environment. Therefore, when running a script, you need to prepend
its path to its name, whereas a function -- once defined in your environment -- can be called by its name without a need
for a path. Both scripts and functions can take command-line arguments.

A convenient place to put all your function definitions is `~/.bashrc` file which is run every time you
start a new shell (local or remote).

Like in any programming language, in bash a function is a block of code that you can access by its
name. The syntax is:

```{.bash}
functionName() {
  command 1
  command 2
  ...
}
```

Inside functions you can access its arguments with variables $1 $2 ... $# $@ -- exactly the same as in
scripts. Functions are very convenient because you can define them inside your ~/.bashrc
file. Alternatively, you can place them into a file and then **source** them whenever needed:

```{.bash}
source allMyFunctions.sh
```

Here is our first function:

```{.bash}
greetings() {
  echo hello
}
```

Let's write a function 'combine()' that takes all the files we pass to it, copies them into a
randomly-named directory and prints that directory to the screen:

```{.bash}
combine() {
  if [ $# -eq 0 ]; then
    echo "No arguments specified. Usage: combine file1 [file2 ...]"
    return 1        # return a non-zero error code
  fi
  dir=$RANDOM$RANDOM
  mkdir $dir
  cp $@ $dir
  echo look in the directory $dir
}
```

{{< question num="`swap file names`" >}}
Write a function to swap two file names. Add a check that both files exist, before
renaming them.
<!-- ```{.bash} -->
<!-- function swap() { -->
<!--     if [ -e $1 ] && [ -e $2 ] ; then -->
<!--         /bin/mv $2 $2.bak -->
<!--         /bin/mv $1 $2 -->
<!--         /bin/mv $2.bak $1 -->
<!--     else -->
<!--         echo at least one of these files does not exist ... -->
<!--     fi -->
<!-- } -->
<!-- ``` -->
{{< /question >}}

{{< question num="`archive()`" >}}
Write a function `archive()` to replace directories with their gzipped archives.
```{.bash}
ls -F
chapter1/  chapter2/  notes/
archive chapter* notes/
ls
chapter1.tar.gz  chapter2.tar.gz  notes.tar.gz
```
{{< /question >}}

{{< question num="`countfiles()`" >}}
Write a function `countfiles()` to count files in all directories passed to it as arguments (need to loop through all
arguments). At the beginning add the check:
```{.bash}
    if [ $# -eq 0 ]; then
        echo "No arguments given. Usage: countfiles dir1 dir2 ..."
        return 1
    fi
```
{{< /question >}}

<!-- {{< solution >}} -->
<!-- ```{.bash} -->
<!-- function countfiles() { -->
<!--     if [ $# -eq 0 ]; then -->
<!--         echo "No arguments given. Usage: countfiles dir1 dir2 ..." -->
<!--         return 1 -->
<!--     fi -->
<!--     for dir in $@; do -->
<!--         echo in $dir we found $(find $dir -type f | wc -l) files -->
<!--     done -->
<!-- } -->
<!-- ``` -->
<!-- {{< /solution >}} -->

[Here](https://youtu.be/gSCRWUG9fy4) is a video on this topic.
