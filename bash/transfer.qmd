---
title: Transferring files
author:
  - Marie-Hélène Burle
  - Alex Razoumov
---

## Remote copies with `scp`

[Secure copy protocol (SCP)](https://en.wikipedia.org/wiki/Secure_copy_protocol) allows to copy files over the [Secure Shell Protocol (SSH)](https://en.wikipedia.org/wiki/Secure_Shell) with the `scp` utility.

`scp` follows a syntax similar to that of the `cp` command. You need to run it from your local machines (not from the cluster).

#### From your machine to the cluster

```{.bash}
# Copy a local file to your home directory on the cluster
scp /local/path/file userxxx@bobthewren.c3.ca:
```

```{.bash}
# Copy a local file to some path on the cluster
scp /local/path/file userxxx@bobthewren.c3.ca:/remote/path
```

#### From the cluster to your machine

```{.bash}
# Copy a file from the cluster to some path on your machine
scp userxxx@bobthewren.c3.ca:/remote/path/file /local/path
```

```{.bash}
# Copy a file from the cluster to your current location on your machine
scp userxxx@bobthewren.c3.ca:/remote/path/file .
```

To copy a directory, you need to add the `-r` (recursive) flag:

```{.bash}
scp -r local_folder/ userxxx@bobthewren.c3.ca:target_directory/
```

You can also use wildcards to transfer multiple files:

```{.bash}
# Copy all the Bash scripts from your cluster home dir to some local path
scp userxxx@bobthewren.c3.ca:*.sh /local/path
```

With MobaXterm in Windows, you can actually copy files by dragging them between your desktop and the left
pane when you are logged into the cluster (no need to type any commands), or you can click the
download/upload buttons.

[Here](https://youtu.be/6iqwJWGJ6es) is a video on this topic.

:::{.exo}

:::{.yourturn}

Your turn:

:::

Copy the file `.bashrc` from your home directory in the training cluster to your local computer using `scp`.

:::

## Interactive transfers with `sftp`

The [Secure File Transfer Protocol (SFTP)](https://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol) is more sophisticated and allows additional operations. The `sftp` command provided by [OpenSSH](https://en.wikipedia.org/wiki/OpenSSH) and other packages launches an SFTP client:

```{.bash}
sftp userxxx@bobthewren.c3.ca
```

Look at your prompt: your usual Bash/Zsh prompt has been replaced with `sftp>`.

From this prompt, you can access a number of SFTP commands. Type `help` for a list:

```{.bash}
sftp> help
```

```
Available commands:
bye                                Quit sftp
cd path                            Change remote directory to 'path'
chgrp [-h] grp path                Change group of file 'path' to 'grp'
chmod [-h] mode path               Change permissions of file 'path' to 'mode'
chown [-h] own path                Change owner of file 'path' to 'own'
copy oldpath newpath               Copy remote file
cp oldpath newpath                 Copy remote file
df [-hi] [path]                    Display statistics for current directory or
                                   filesystem containing 'path'
exit                               Quit sftp
get [-afpR] remote [local]         Download file
help                               Display this help text
lcd path                           Change local directory to 'path'
lls [ls-options [path]]            Display local directory listing
lmkdir path                        Create local directory
ln [-s] oldpath newpath            Link remote file (-s for symlink)
lpwd                               Print local working directory
ls [-1afhlnrSt] [path]             Display remote directory listing
lumask umask                       Set local umask to 'umask'
mkdir path                         Create remote directory
progress                           Toggle display of progress meter
put [-afpR] local [remote]         Upload file
pwd                                Display remote working directory
quit                               Quit sftp
reget [-fpR] remote [local]        Resume download file
rename oldpath newpath             Rename remote file
reput [-fpR] local [remote]        Resume upload file
rm path                            Delete remote file
rmdir path                         Remove remote directory
symlink oldpath newpath            Symlink remote file
version                            Show SFTP version
!command                           Execute 'command' in local shell
!                                  Escape to local shell
?                                  Synonym for help
```

Notice the presence of multiple commands that make mention of local and remote. We are actually browsing
two filesystems at once, with two working directories!

```{.bash}
sftp> pwd              # show our remote working directory
sftp> lpwd             # show our local working directory
sftp> ls               # show the contents of our remote directory
sftp> lls              # show the contents of our local directory
sftp> cd               # change the remote directory
sftp> lcd              # change the local directory
sftp> put localFile    # upload a file
sftp> get remoteFile   # download a file
```

And we can recursively put/get files by just adding `-r`. Note that the directory needs to be present
beforehand:

```{.bash}
sftp> mkdir content
sftp> put -r content/
```

To quit, type `exit` or `bye`. 

:::{.exo}

:::{.yourturn}

Your turn:

:::

In an SFTP session,

- list the content of `projects` (`projects is in your home on the training cluster),
- copy the file .bash_profile from your home on the training cluster to your local computer.

:::

## Syncing

If, instead of an occasional copying files between your machine and the cluster, you want to keep a directory in sync between both machines, you might want to use [rsync](https://en.wikipedia.org/wiki/Rsync) instead.

The Alliance wiki describes xxxxxx

https://docs.alliancecan.ca/wiki/Transferring_data#Rsync

## Windows line endings

On modern Mac operating systems and on Linux, lines in files are terminated with a newline (`\n`).
On Windows, they are terminated with a carriage return + newline (`\r\n`).

When you transfer files between Windows and Linux (the cluster runs Linux), this creates a mismatch. Most modern software handle this correctly, but in some rare instances you may run into problems.

The solution is to convert a file from Windows to Unix encoding with:

```{.bash}
dos2unix file
```

To convert a file back to Windows encoding, run:

```{.bash}
unix2dos file
```
