---
title: Redirections & pipes
aliases:
  - redirections.html
author:
  - Marie-Hélène Burle
  - "*Adapted from [a Software Carpentry workshop](https://swcarpentry.github.io/shell-novice/index.html)*"
---

:::{.def}

By default, commands that produce an output print to the terminal. This output can however be redirected to be printed elsewhere (e.g. to files) or to be passed as the argument of another command.

This section will cover the most basic cases.

:::

```{r}

```

:::{.callout-note collapse="true"}

## Data for this section (same data as previous section)

For this section, we will play with files created by [The Carpentries](https://carpentries.org/).

You can download them into a zip file called `bash.zip` with:

```{.bash}
wget http://bit.ly/bashfile -O bash.zip
```

You can then unzip that file with:

```{.bash}
unzip bash.zip
```

You should now have a `data-shell` directory with a `molecules` subdirectory.

`cd` into it:

```{.bash}
cd data-shell/molecules
```

:::

## Redirections

By default, commands that produce an output print it to [standard output](https://en.wikipedia.org/wiki/Standard_streams#Standard_output_(stdout))—that is, the terminal. That is what we have been doing so far.

This output can however be redirected with the `>` sign. For instance, it can be redirected to a file, which is very handy if you want to save the result.

:::{.example}

Example:

:::

Let's print the number of lines in each .pdb file in the `molecules` directory:

```{bash}
wc -l *.pdb
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

- What does the `wc` command do?
- What does the `-l` flag for this command do?
- How did you find out?

:::

To save this result into a file called `lengths.txt`, we run:

```{bash}
wc -l *.pdb > lengths.txt
```

:::{.info}

Note that `>` always creates a new file. If a file called `lengths.txt` already exists, it will be overwritten. Be careful not to lose data this way!

If you don't want to lose the content of the old file, you can append the output to the existing file with `>>` (`>>` will create a file `lengths.txt` if it doesn't exist yet, but if it exists, it will append the new content below the old one).

:::

:::{.exo}

:::{.yourturn}

Your turn:

:::

How can you make sure that you did create a file called `lengths.txt`?

:::

Let's print its content to the terminal:

```{bash}
cat lengths.txt
```

As you can see, it contains the output of the command `wc -l *.pdb`.

Of course, we can print the content of the file with modification. For instance, we can sort it:

```{bash}
sort -n lengths.txt
```

And we can redirect this new output to a new file:

```{bash}
sort -n lengths.txt > sorted.txt
```

Instead of printing an entire file to the terminal, you can print only part of it.

Let's print the first line of the new file `sorted.txt`:

```{bash}
head -1 sorted.txt
```

## Pipes

Another form of redirection is the Bash *pipe*. Instead of redirecting the output to a different stream for printing, the output is passed as an argument to another command. This is very convenient because it allows to chain multiple commands without having to create files or variables to save intermediate results.

For instance, we could run the three commands we ran previously at once, without the creation of the two intermediate files:

```{bash}
wc -l *.pdb | sort -n | head -1
```

In each case, the output of the command on the left-hand side (LHS) is passed as the input of the command on the right-hand side (RHS).

:::{.exo}

:::{.yourturn}

Your turn:

:::

In a directory we want to find the 3 files that have the least number of lines. Which command would work for this?

1. `wc -l * > sort -n > head -3`
2. `wc -l * | sort -n | head 1-3`
3. `wc -l * | sort -n | head -3`
4. `wc -l * | head -3 | sort -n`

:::

*[Here](https://youtu.be/lueQ-KxLFYI) is a video of a previous version of this workshop.*
