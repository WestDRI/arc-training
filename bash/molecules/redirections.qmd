---
title: Pipes and redirections
author: Marie-Hélène Burle
---

:::{.def}

By default, commands that produce an output print to the terminal. This output can however be redirected to be printed elsewhere (e.g. to files) or to be passed as the argument of another command.

This section will cover the most basic cases.

:::

```{r}

```

:::{.callout-accordion collapse="true"}

## ***Data for this section***

For this section, we will be using data put together by [The Carpentries](https://carpentries.org/). You can download it by clicking [here](http://bit.ly/bashfile).

This will download a zip filed called `bfiles.zip`. Unzip it to your home directory. You should now see a `data-shell` directory. In it is a subdirectory called `molecules`.

This is what we will use for now, so `cd` into it:

```{.bash}
cd data-shell/molecules
```

:::

Let's explore the data:

```{.bash}
ls
```

```
cubane.pdb
ethane.pdb
methane.pdb
octane.pdb
pentane.pdb
propane.pdb
```

```{bash}
ls p*        # This wildcard gets expanded to any file starting with p
```

```{bash}
ls *.pdb     # This wildcard gets expanded to any .pdb file
```

```{bash}
wc -l *.pdb  # Prints the number of lines in each .pdb file
```

## Redirections

By default, commands that produce an output print it to [standard output](https://en.wikipedia.org/wiki/Standard_streams#Standard_output_(stdout))—that is, the terminal. This output can however be redirected with the `>` sign. For instance, it can be redirected to a file:

```{bash}
wc -l *.pdb > lengths.txt
```

If you ran the `ls` command again, you would see that there is now a new file called `lengths.txt`. Let's print its content to the terminal:

```{bash}
cat lengths.txt
```

As you can see, it contains the output of the command `wc -l *.pdb`.

Of course, we can print the content of the file with modification. For instance, we can sort it:

```{bash}
sort -n lengths.txt
```

And we can redirect this new output to a new file:

```{bash}
sort -n lengths.txt > sorted.txt
```

Instead of printing an entire file to the terminal, you can print only part of it.

Let's print the first line of the new file `sorted.txt`:

```{bash}
head -1 sorted.txt
```

## Pipes

Another form of redirection is the pipe. Instead of redirecting the output to a different stream for printing, the output is passed as an argument to another command. This is very convenient because it allows to chain multiple commands without having to create files or variables to save the intermediate results.

For instance, we could run the three commands we ran previously at once, without the creation of two files to get there:

```{bash}
wc -l *.pdb | sort -n | head -1
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

In a directory we want to find the 3 files that have the least number of lines. Which command would work for this?

1. `wc -l * > sort -n > head -3`
2. `wc -l * | sort -n | head 1-3`
3. `wc -l * | head -3 | sort -n`
4. `wc -l * | sort -n | head -3`

:::

*[Here](https://youtu.be/lueQ-KxLFYI) is a video of a previous version of this workshop.*
