---
title: Writing scripts
aliases:
  - script.html
author:
  - Marie-Hélène Burle
  - Alex Razoumov
---

:::{.def}

There are series of commands that you need to run regularly. Instead of having to type them each time, you can write them in a text file (called a script) with a `.sh` extension and execute that file whenever you want to run that set of commands. This is a great way to automate work.

This section covers scripts syntax and execution.

:::

## Writing and executing scripts

### Scripts as arguments to `bash`

A shell script is simply a text file. You can create it with a text editor such as [nano](https://en.wikipedia.org/wiki/GNU_nano) which is installed on most systems.

Let's try to create one that we will call `test.sh`:

```{.bash}
nano test.sh
```

In the file, write the command: `echo This is my first script`.

This is the content of our `test.sh` file:

```{.bash filename="test.sh"}
echo This is my first script
```

Now, how do we run this?

We simply pass it as an argument to the `bash` command:

```{.bash}
bash test.sh
```

```
This is my first script
```

And it worked!

### Shebang

There is another way to write and execute scripts: we can use a [shebang](https://en.wikipedia.org/wiki/Shebang_(Unix)).

A shebang consists of the characters `#!` followed by the path of an executable. Here, the executable we want is `bash` and its path is `/bin/bash`.

So our script becomes:

```{.bash filename="test.sh"}
#!/bin/bash

echo This is my first script.
```

Now, the cool thing about this is that we don't need to pass the script as an argument of the `bash` command anymore since the information that this should be executed by Bash is already written in the shebang. Instead, we can execute it with `./test.sh`.

But there is a little twist:

```{.bash}
./test.sh
```

```
bash: ./test.sh: Permission denied
```

We first need to make the file executable by changing its permissions.

### Unix permissions

Unix systems such as Linux use [POSIX permissions](https://en.wikipedia.org/wiki/File-system_permissions#POSIX_permissions).

To add an executable permission to a file, you need to run:

```{.bash}
chmod u+x test.sh
```

Now that our script is executable, we can run:

```{.bash}
./test.sh
```

```
This is my first script
```

<!-- ```{.bash} -->
<!-- echo Looking into file octane.pdb -->
<!-- head -15 octane.pdb | tail -5       # what does it do? -->
<!-- bash process.sh   # the script ran! -->
<!-- ``` -->

<!-- ```{.bash} -->
<!-- #!/bin/bash -->
<!-- echo Looking into file octane.pdb -->
<!-- head -15 octane.pdb | tail -5       # what does it do? -->
<!-- bash process.sh   # the script ran! -->
<!-- ``` -->

<!-- Alternatively, you can change file permissions: -->

<!-- ```{.bash} -->
<!-- chmod u+x process.sh -->
<!-- ./process.sh -->
<!-- ``` -->

<!-- Let's pass an arbitrary file to it: -->

<!-- ```{.bash} -->
<!-- nano process.sh -->
<!-- 	#!/bin/bash -->
<!-- 	echo Looking into file $1       # $1 means the first argument to the script -->
<!--     head -15 $1 | tail -5 -->
<!-- ./process cubane.pdb -->
<!-- ./process propane.pdb -->
<!-- ``` -->

<!-- * head -15 "$1" | tail -5     # placing in double-quotes lets us pass filenames with spaces -->
<!-- * head $2 $1 | tail $3        # what will this do? -->
<!-- * $# holds the number of command-line arguments -->
<!-- * $@ means all command-lines arguments to the script (words in a string) -->

<!-- > **Quiz 11:** script.sh in molecules Users/nelle/molecules. -->

<!-- > **Exercise:** write a script that takes any number of filenames, e.g., "scriptName.sh cubane.pdb -->
<!-- > propane.pdb", for each file prints the number of lines and its first five lines, and separates the -->
<!-- > output from different files by an empty line. -->

<!-- In the `molecules` directory (download link mentioned <a href="../bash/bash-04-tar-gzip" target="_blank">here</a>), -->
<!-- create a shell script called `scan.sh` containing the following: -->
<!-- ```{.bash} -->
<!-- #!/bin/bash -->
<!-- head -n $2 $1 -->
<!-- tail -n $3 $1 -->
<!-- ``` -->
<!-- While you are in that current directory, you type the following command (with space between two 1s): -->
<!-- ```{.bash} -->
<!-- ./scan.sh  '*.pdb'  1  1 -->
<!-- ``` -->
<!-- What output would you expect to see? -->
<!-- 1. All of the lines between the first and the last lines of each file ending in `.pdb` in the current directory -->
<!-- 2. The first and the last line of each file ending in `.pdb` in the current directory -->
<!-- 3. The first and the last line of each file in the current directory -->
<!-- 4. An error because of the quotes around `*.pdb` -->

*[Here](https://youtu.be/UGZI6_HDyDc) and [here](https://youtu.be/rNnrcqkhXQo) are two videos of a previous version of this workshop.*

<!-- ## Scripts vs functions -->

<!-- Scripts and functions play similar roles and they both can take command-line arguments. -->

<!-- A *script* is a file sitting at a given path whereas a *function* is defined in your environment. Therefore, you need to prepend a script's path to its name to run it, while you can call a function by its name without the need for a path. -->

## Comments

Anything to the right of the symbol `#` is ignored by the interpreter and is for human consumption only.

```{.bash}
# You can write full-line comments

pwd		  # You can also write comments after a command
```

Comments are used to document scripts. DO USE THEM: future you will thank you.

<!-- ## Using other computing languages in Bash -->

<!-- It is possible to incorporate scripts written in other computing languages into your bash code. -->

<!-- :::{.example} -->

<!-- Example: -->

<!-- ::: -->

<!-- ```{.bash} -->
<!-- function test() { -->
<!--     randomFile=${RANDOM}${RANDOM}.py -->
<!--     cat << EOF > $randomFile -->
<!-- #!/usr/bin/python3 -->
<!-- print("do something in Python") -->
<!-- EOF -->
<!--     chmod u+x $randomFile -->
<!--     ./$randomFile -->
<!--     /bin/rm $randomFile -->
<!-- } -->
<!-- ``` -->

<!-- :::{.note} -->

<!-- `EOF` is a random delimiter string and `<<` tells Bash to wait for that delimiter to end the input. -->

<!-- Here is an example of this syntax: -->

<!-- ```{.bash} -->
<!-- cat << the_end -->
<!-- This text -->
<!-- will be printed -->
<!-- in the terminal. -->
<!-- the_end -->
<!-- ``` -->

<!-- ::: -->
