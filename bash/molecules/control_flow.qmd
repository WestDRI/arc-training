---
title: Control flow
author: Marie-Hélène Burle
---

```{r}

```

:::{.def}

Loops and conditionals allow to change the flow of execution.

:::

:::{.callout collapse="true"}

## *Data for this section (same data as previous section)*

For this section, we will play with files created by [The Carpentries](https://carpentries.org/).

You can download them into a zip file called `bash.zip` with:

```{.bash}
wget http://bit.ly/bashfile -O bash.zip
```

You can then unzip that file with:

```{.bash}
unzip bash.zip
```

You should now have a `data-shell` directory with a `molecules` subdirectory.

`cd` into it:

```{.bash}
cd data-shell/molecules
```

:::

## For loops

To apply a set of commands to all the elements of a list, you can use a for loop.

### Syntax

The general structure of a for loop is as follows:

```{.bash}
for <iterable> in <list>
do
	<command1>
	<command2>
	...
done
```


### Example

The `molecules` directory contains the following `.pdb` files:

```{.bash}
ls *.pdb
```

```
cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb
```

We want to rename these files by prepending "gas_" to their current names.

Wildcards don't work here:

```{bash}
mv *.pdb gas_*.pdb
```

The solution is to use a for loop:

```{.bash}
for file in *.pdb
do
	mv $file gas_$file
done
```

This can also be written as a one-liner, although it is harder to read:

```{.bash}
for file in *.pdb; do mv gas_$file $file; done
```

:::{.exo}

:::{.yourturn}

Your turn:

:::

Using what we learnt in the [string manipulation](https://mint.westdri.ca/bash/variables.html#string-manipulation) section, how could you remove the `gas_` prefix to all these files?

:::

### Collections

For loops run a set of commands for each item of a collection. How do you create those collections?

#### Listing items one by one

The least efficient method is to list all the items one by one:

:::{.example}

Example:

:::

```{.bash}
for i in file1 file2 file3
do
	echo $i
done
```

```
file1
file2
file3
```

#### Wildcards

As we have already seen, wildcards are very useful to build for loops.

#### Brace expansion

Collections can also be created with brace expansion.

:::{.example}

Examples:

:::

```{bash}
echo {1,2,5}
```

:::{.note}

Make sure not to add a space after the commas.

:::

```{bash}
echo {list,of,strings}
```

```{bash}
echo {file1,file2}.sh
```

```{bash}
ls -l {ethane,methane,pentane}.pdb
```

```{bash}
echo {1..5}
```

```{bash}
echo {01..10}
```

```{bash}
echo {r..v}
```

```{bash}
echo {v..r}
```

```{bash}
echo {a..e}{1..3}
```

```{bash}
echo {a..c}{a..c}
```

```{bash}
echo {1..5}.txt
```

```{bash}
echo file{3..6}.sh
```

Brace expansion can be used to create lists iterated over in loops, but also to apply commands to files or directories.

#### Sequences

Collections can also be sequences:

```{bash}
seq 1 2 10
```

:::{.note}

Here, `1` is the start of the sequence, `10` is the end, and `2` is the step.

:::

Such a sequence could be used in a loop this way:

```{bash}
for i in $(seq 1 2 10)
do
	echo file$i.txt
done
```
<!-- for ((i=1; i<=5; i++)) do echo $i; done   # can use C-style loops -->

:::{.exo}

:::{.yourturn}

Your turn:

:::

In a directory the command `ls` returns:

```{.bash}
fructose.dat  glucose.dat  sucrose.dat  maltose.txt
```

What would be the output of the following loop?

```{.bash}
for datafile in *.dat
do
  cat $datafile >> sugar.dat
done
```

1. All of the text from `fructose.dat`, `glucose.dat` and `sucrose.dat` would be concatenated and saved to a file called `sugar.dat`.

2. The text from `sucrose.dat` will be saved to a file called `sugar.dat`.

3. All of the text from `fructose.dat`, `glucose.dat`, `sucrose.dat`, and `maltose.txt` would be concatenated and saved to a file called `sugar.dat`.

4. All of the text from `fructose.dat`, `glucose.dat` and `sucrose.dat` will be printed to the screen and saved into a file called `sugar.dat`.

:::

<!-- Using `diff` to compare files and directories. -->

<!-- Discuss brace expansion. Try nested braces. Paste an example that works. -->
<!-- What will this command do: -->

<!-- ```{.bash} -->
<!-- touch 2022-May-{0{1..9},{10..30}}.md -->
<!-- ``` -->

<!-- Write a loop that concatenates all .pdb files in `data-shell/molecules` subdirectory into one file called `allmolecules.txt`, prepending each fragment with the name of the corresponding .pdb file, and separating different files with an empty line. Run the loop, make sure it works, bring it up with the &nbsp;**↑**&nbsp; key and paste into the chat. -->

<!-- What will the loop `for i in hello 1 2 * bye; do echo $i; done` print? Try answering without running the loop. -->

<!-- Create a loop that writes into 10 files `chapter01.md`, `chapter02.md`, ..., `chapter10.md`. Each file should contain -->
<!-- chapter-specific lines, e.g. `chapter05.md` will contain exactly these lines: -->

<!-- ```{.bash} -->
<!-- ## Chapter 05 -->
<!-- This is the beginning of Chapter 05. -->
<!-- Content will go here. -->
<!-- This is the end of Chapter 05. -->
<!-- ``` -->

<!-- Why `mv *.txt *.bak` does not work? Write a loop to rename all .txt files to .bak files. There are several solutions for changing a file extension inside a loop you know by now. -->

<!-- Using knowledge from the previous question, write a loop to replace spaces to underscores in all file names in the current directory. -->

<!-- ```{.bash} -->
<!-- touch hello "first phrase" "second phrase" "good morning, everyone" -->
<!-- ls -l -->
<!-- ls *\ * -->
<!-- ``` -->

## While loops

### Syntax

The syntax of a while loop in Bash is:

```{.bash}
while predicate
do
	command1
	command2
	...
done
```

The set of commands in the body of the while loop are executed as long as the predicate returns true.

Be careful that while loop can lead to infinite loops. Such loops need to be manually interrupted (by pressing `<Ctrl+C>`).

:::{.example}

Example of infinite loop:

:::

```{.bash}
while true
do
    echo "Press <Ctrl+C> to stop"
	sleep 1
done
```

*[Here](https://youtu.be/cCunoOIksAE) is a video of a previous version of this workshop.*

## Conditionals

### Syntax

```{.bash}
if [ predicate1 ]
then
	command1
	command2
	...
elif [ predicate2 ]
then
	command3
	command4
	...
else
	command5
	command6
	...
fi
```

### Example

Let's create a file called `check.sh` with the following if statement:

```{.bash}
for f in $@
do
    if [ -e $f ]      # Make sure to have spaces around each bracket
    then
        echo $f exists
    else
        echo $f does not exist
    fi
done
```

Now, let's make it executable:

```{.bash}
chmod u+x check.sh
```

And let's run this:

```{.bash}
./check.sh file1 file2 check.sh file3
```

### Predicates

Here are a few predicates:

`[ $var == 'text' ]` checks whether `var` is equal to `'text'`.

`[ $var == number ]` checks whether `var` is equal to `number`.

`[ -e file ]` checks whether `file` exists.

`[ -d name ]` checks whether `name` is a directory.

`[ -f name ]` checks whether `name` is a file.
