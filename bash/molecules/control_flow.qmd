---
title: Control flow
author:
  - Marie-Hélène Burle
  - Alex Razoumov
---

```{r}

```

:::{.callout-accordion collapse="true"}

## ***Data for this section***

For this section, we will be using data put together by [The Carpentries](https://carpentries.org/). You can download it by clicking [here](http://bit.ly/bashfile).

This will download a zip filed called `bfiles.zip`. Unzip it to your home directory. You should now see a `data-shell` directory. In it is a subdirectory called `molecules`.

This is what we will use for now, so `cd` into it:

```{.bash}
cd data-shell/molecules
```

:::

## For loops

### Syntax

The syntax of a for loop in Bash is:

```{.bash}
for <variable> in <collection>
do
    <commands with $variable>
done
```

### Example

Let's look at the content of `data-shell/molecules`:

```{.bash}
ls
```

```
cubane.pdb
ethane.pdb
methane.pdb
octane.pdb
pentane.pdb
propane.pdb
```

Let's say that we want to rename all the files by prepending "gas_" to their current names.

Wildcards don't work here:

```{bash}
mv *.pdb gas_*.pdb
```

The solution is to use a for loop:

```{.bash}
for file in *.pdb
do
	mv $file gas_$f
done
```

### Collections

For loops run a set of commands for each item of a collection. How do you create those collections?

Collections can be a list of items (e.g. `file1 file2 file3`).

#### Brace expansion

Collections can also be created by brace expansion.

:::{.example}

Examples:

:::

```{bash}
echo {1..10}
```

```{bash}
echo {c..m}
```

```{bash}
echo {a..e}{1..3}
```

```{bash}
echo {a..c}{a..c}
```

```{bash}
echo {1,2,5}
```

```{bash}
ls -l {ethane,methane,pentane}.pdb
```

#### Sequences

Collections can also be sequences:

```{bash}
seq 1 2 10
```

:::{.note}

Here, `1` is the start of the sequence, `10` is the end, and `2` is the step.

:::

Such a sequence could be used in a loop this way:

```{bash}
for i in $(seq 1 2 10)
do
	echo file$i.txt
done
```
<!-- for ((i=1; i<=5; i++)) do echo $i; done   # can use C-style loops -->

:::{.exo}

:::{.yourturn}

Your turn:

:::

In a directory the command `ls` returns:

```{.bash}
fructose.dat  glucose.dat  sucrose.dat  maltose.txt
```

What would be the output of the following loop?

```{.bash}
for datafile in *.dat
do
  cat $datafile >> sugar.dat
done
```

1. All of the text from `fructose.dat`, `glucose.dat` and `sucrose.dat` would be concatenated and saved to a file called `sugar.dat`.

2. The text from `sucrose.dat` will be saved to a file called `sugar.dat`.

3. All of the text from `fructose.dat`, `glucose.dat`, `sucrose.dat`, and `maltose.txt` would be concatenated and saved to a file called `sugar.dat`.

4. All of the text from `fructose.dat`, `glucose.dat` and `sucrose.dat` will be printed to the screen and saved into a file called `sugar.dat`.

:::

<!-- Using `diff` to compare files and directories. -->

<!-- Discuss brace expansion. Try nested braces. Paste an example that works. -->
<!-- What will this command do: -->

<!-- ```{.bash} -->
<!-- touch 2022-May-{0{1..9},{10..30}}.md -->
<!-- ``` -->

<!-- Write a loop that concatenates all .pdb files in `data-shell/molecules` subdirectory into one file called `allmolecules.txt`, prepending each fragment with the name of the corresponding .pdb file, and separating different files with an empty line. Run the loop, make sure it works, bring it up with the &nbsp;**↑**&nbsp; key and paste into the chat. -->

<!-- What will the loop `for i in hello 1 2 * bye; do echo $i; done` print? Try answering without running the loop. -->

<!-- Create a loop that writes into 10 files `chapter01.md`, `chapter02.md`, ..., `chapter10.md`. Each file should contain -->
<!-- chapter-specific lines, e.g. `chapter05.md` will contain exactly these lines: -->

<!-- ```{.bash} -->
<!-- ## Chapter 05 -->
<!-- This is the beginning of Chapter 05. -->
<!-- Content will go here. -->
<!-- This is the end of Chapter 05. -->
<!-- ``` -->

<!-- Why `mv *.txt *.bak` does not work? Write a loop to rename all .txt files to .bak files. There are several solutions for changing a file extension inside a loop you know by now. -->

<!-- Using knowledge from the previous question, write a loop to replace spaces to underscores in all file names in the current directory. -->

<!-- ```{.bash} -->
<!-- touch hello "first phrase" "second phrase" "good morning, everyone" -->
<!-- ls -l -->
<!-- ls *\ * -->
<!-- ``` -->

## While loops

### Syntax

The syntax of a while loop in Bash is:

```{.bash}
while <predicate>
do
    <commands>
done
```

The set of commands in the body of the while loop are executed as long as the predicate returns true.

Be careful that while loop can lead to infinite loops. Such loops need to be manually interrupted (by pressing `<Ctrl+C>`).

:::{.example}

Example of infinite loop:

:::

```{.bash}
while true
do
    echo "Press <Ctrl+C> to stop"
	sleep 1
done
```
{{< /question >}}

*[Here](https://youtu.be/cCunoOIksAE) is a video of a previous version of this workshop.*

## Conditionals

### Syntax

```default
if [ <predicate 1> ]
then
	<commands>
elif [ <predicate 2> ]
then
	<other commands>
else
	<default commands>
fi
```

### Example

Let's create a file called `check.sh` with the following if statement:

```{.bash}
for f in $@
do
    if [ -e $f ]      # Make sure to have spaces around each bracket
    then
        echo $f exists
    else
        echo $f does not exist
    fi
done
```

Now, let's make it executable:

```{.bash}
chmod u+x check.sh
```

And let's run this:

```{.bash}
./check.sh file1 file2 check.sh file3
```

### Predicate examples

Here are a few predicates:

`[ $var == 'text' ]` checks whether `var` is equal to `'text'`.

`[ $var == number ]` checks whether `var` is equal to `number`.

`[ -e file ]` checks whether `file` exists.

`[ -d name ]` checks whether `name` is a directory.

`[ -f name ]` checks whether `name` is a file.

<!-- Write a script that complains when it does not receive arguments. -->
