---
title: Control flow
aliases:
  - control_flow.html
author:
  - Marie-Hélène Burle
  - Alex Razoumov
---

```{r}

```

:::{.def}

By default, scripts get executed linearly from top to bottom. Often however, you want to control what gets executed when.

This section covers various ways to control the flow of execution through a script.

:::

:::{.callout-note collapse="true"}

## Data for this section (same data as previous section)

For this section, we will play with files created by [The Carpentries](https://carpentries.org/).

You can download them into a zip file called `data.zip` with:

```{.bash}
curl --output data.zip https://mint.westdri.ca/bash/data.zip
```

You can then unzip that file with:

```{.bash}
unzip data.zip
```

You should now have a `data` directory.

`cd` into it:

```{.bash}
cd data
```

:::

## Conditional executions

Sections of a script can be executed or not depending on some conditions. To achieve this, we first need to have expressions that define these conditions.

### Predicates

Predicates are expressions that, when evaluated, return an exit status of 0 if they are true and an exit status of 1 if they are false.

Here are examples of predicates:

`[ $var == 'text' ]` checks whether `var` is equal to `'text'`.

`[ $var == number ]` checks whether `var` is equal to `number`.

`[ -e name ]` checks whether `name` exists.

`[ -d name ]` checks whether `name` is a directory.

`[ -f name ]` checks whether `name` is a file.

[Make sure to have spaces around each bracket.]{.emph}

:::{.exo}

:::{.yourturn}

Your turn:

:::

Let's create a directory and a file:

```{bash}
mkdir d1
touch f1
```

Write the predicates that test whether:

- `d1` exists,
- `d1` is a file,
- `d1` is a directory,
- `f1` is a file,
- `f1` is a directory.

:::

### Success/failure of previous command

In its simplest form, conditional execution can be limited to the failure or success of the previous command.

xxxIn its simplest form, conditional execution can be limited to the failure or success of the previous command.

Predicates are expressions that return an exit status of 0 when they are evaluated if they are true and an exit status of 1 if they are false.

#### Conditional on success

Commands can be limited to running only if the previous command ran successfully thanks to `&&`.

:::{.example}

Example:

:::

Look at the following commands:

```{.bash}
unzip bash.zip
rm bash.zip
```

This is equivalent to:

```{.bash}
unzip bash.zip;
rm bash.zip
```

and to:

```{.bash}
unzip bash.zip; rm bash.zip
```

This is what we did to get the data for the past few sessions.

In both cases, both commands will try to run. Now, if for some reason, the unzipping fails, we have deleted the zip file and we have to re-download it. Not a big deal here, but in some situations, executing a command if the one before fails can be a real bummer.

To prevent this, we can use the double-ampersand (`&&`) operator, which plays the role of a logical AND statement:

```{.bash}
unzip bash.zip &&
rm bash.zip
```

This is equivalent to:

```{.bash}
unzip bash.zip && rm bash.zip
```

If the unzipping works (if it returns a zero [exit status](https://en.wikipedia.org/wiki/Exit_status)), then the Zip file gets deleted. If however, the unzipping fails (if it returns a non-zero exit status), the script aborts and we haven't lost our Zip file.

xxxxx return 0xxxx

returns truexxx

#### Conditional on failure

The opposite of `&&` is `||` which plays the role of a logical OR statement: the following command only gets executed if the first one fails.

:::{.example}

Example:

:::

```{bash}
[ -e f1 ] || echo f1 does not exist
```

```{bash}
[ -e f2 ] || echo f2 does not exist
```

### If statements

Sections of scripts can be executed (or not) based on conditions thanks to `if` statements.

#### Syntax

In its simplest form, `if` statements look like:

```{.bash}
if [ predicate ]
then
	command1
	command2
	...
fi
```

:::{.notenoit}

This can also be written as:

```{.bash}
if [ predicate ]; then command1; command2; ...; fi
```

:::

If the condition is true, the commands are executed, if the condition is false, nothing happens.

If you want a different set of commands to be executed when the condition is false, you add an `else` statement:

```{.bash}
if [ predicate ]
then
	command1
	command2
	...
else
	command3
	command4
	...
fi
```

Of course, you can have multiple conditions defining trees of `if` statements. In that case, you use `elif` (any number of times):

```{.bash}
if [ predicate1 ]
then
	command1
	command2
	...
elif [ predicate2 ]
then
	command3
	command4
	...
else
	command5
	command6
	...
fi
```

#### Examples

```{bash}
var=f1

if [ -e $var ]
then
	echo $var does not exist
else
	echo $var does exist
fi
```

```{bash}
var=f2

if [ -e $var ]
then
	echo $var does not exist
else
	echo $var does exist
fi
```

<!-- ```{.bash} -->
<!-- for f in $@ -->
<!-- do -->
<!--     if [ -e $f ] -->
<!--     then -->
<!--         echo $f exists -->
<!--     else -->
<!--         echo $f does not exist -->
<!--     fi -->
<!-- done -->
<!-- ``` -->

## Conditionally repeated executions

Sections of scripts can be repeated as long as a condition returns `True` thanks to *while loops*.

### Syntax

The syntax of a while loop in Bash is:

```{.bash}
while [ predicate ]
do
	command1
	command2
	...
done
```

The set of commands in the body of the while loop are executed as long as the predicate returns true.

Be careful that while loop can lead to infinite loops. Such loops need to be manually interrupted (by pressing `<Ctrl+C>`).

:::{.example}

Example of infinite loop:

:::

```{.bash}
while true
do
    echo "Press <Ctrl+C> to stop"
	sleep 1
done
```

## Repeated executions

Sections of scripts can be repeated for each element of a list thanks to *for loops*.

### Collections

For loops run a set of commands for each item of a collection. How do you create those collections?

#### Listing items one by one

The least efficient method is to list all the items one by one:

:::{.example}

Example:

:::

```{.bash}
for i in file1 file2 file3
do
	echo $i
done
```

```
file1
file2
file3
```

#### Wildcards

The `molecules` directory contains the following `.pdb` files:

```{.bash}
ls *.pdb
```

```
cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb
```

We want to rename these files by prepending "gas_" to their current names.

Wildcards don't work here:

```{bash}
mv *.pdb gas_*.pdb
```

The solution is to use a for loop:

```{.bash}
for file in *.pdb
do
	mv $file gas_$file
done
```

This can also be written as a one-liner, although it is harder to read:

```{.bash}
for file in *.pdb; do mv $file gas_$file; done
```

#### Brace expansion

Collections can also be created with brace expansion.

:::{.example}

Examples:

:::

```{bash}
echo {1,2,5}
```

:::{.note}

Make sure not to add a space after the commas.

:::

```{bash}
echo {list,of,strings}
```

```{bash}
echo {file1,file2}.sh
```

```{bash}
ls -l {ethane,methane,pentane}.pdb
```

```{bash}
echo {1..5}
```

```{bash}
echo {01..10}
```

```{bash}
echo {r..v}
```

```{bash}
echo {v..r}
```

```{bash}
echo {a..e}{1..3}
```

```{bash}
echo {a..c}{a..c}
```

```{bash}
echo {1..5}.txt
```

```{bash}
echo file{3..6}.sh
```

Brace expansion can be used to create lists iterated over in loops, but also to apply commands to files or directories.

#### Sequences

Collections can also be sequences:

```{bash}
seq 1 2 10
```

:::{.note}

Here, `1` is the start of the sequence, `10` is the end, and `2` is the step.

:::

Such a sequence could be used in a loop this way:

```{bash}
for i in $(seq 1 2 10)
do
	echo file$i.txt
done
```

### Syntax

The general structure of a for loop is as follows:

```{.bash}
for <iterable> in <collection>
do
	<command1>
	<command2>
	...
done
```

<!-- :::{.exo} -->

<!-- :::{.yourturn} -->

<!-- Your turn: -->

<!-- ::: -->

<!-- Using what we learnt in the [string manipulation](https://mint.westdri.ca/bash/variables.html#string-manipulation) section, how could you remove the `gas_` prefix to all these files? -->

<!-- ::: -->

<!-- for ((i=1; i<=5; i++)) do echo $i; done   # can use C-style loops -->

:::{.exo}

:::{.yourturn}

Your turn:

:::

In a directory the command `ls` returns:

```
fructose.dat  glucose.dat  sucrose.dat  maltose.txt
```

What would be the output of the following loop?

```{.bash}
for datafile in *.dat
do
  cat $datafile >> sugar.dat
done
```

1. All of the text from `fructose.dat`, `glucose.dat` and `sucrose.dat` would be concatenated and saved to a file called `sugar.dat`.

2. The text from `sucrose.dat` will be saved to a file called `sugar.dat`.

3. All of the text from `fructose.dat`, `glucose.dat`, `sucrose.dat`, and `maltose.txt` would be concatenated and saved to a file called `sugar.dat`.

4. All of the text from `fructose.dat`, `glucose.dat` and `sucrose.dat` will be printed to the screen and saved into a file called `sugar.dat`.

:::

<!-- Write a loop that concatenates all .pdb files in `data-shell/molecules` subdirectory into one file called `allmolecules.txt`, prepending each fragment with the name of the corresponding .pdb file, and separating different files with an empty line. Run the loop, make sure it works, bring it up with the &nbsp;**↑**&nbsp; key and paste into the chat. -->

<!-- What will the loop `for i in hello 1 2 * bye; do echo $i; done` print? Try answering without running the loop. -->

<!-- Create a loop that writes into 10 files `chapter01.md`, `chapter02.md`, ..., `chapter10.md`. Each file should contain -->
<!-- chapter-specific lines, e.g. `chapter05.md` will contain exactly these lines: -->

*[Here](https://youtu.be/cCunoOIksAE) is a video of a previous version of this workshop.*
